{"version":3,"sources":["node_modules/browser-pack/_prelude.js","build/amp-subscriptions-0.1.css.js","extensions/amp-access/0.1/access-expr-impl.js","extensions/amp-access/0.1/access-expr.js","extensions/amp-access/0.1/jwt.js","extensions/amp-access/0.1/login-dialog.js","extensions/amp-subscriptions/0.1/actions.js","extensions/amp-subscriptions/0.1/amp-subscriptions.js","extensions/amp-subscriptions/0.1/analytics.js","extensions/amp-subscriptions/0.1/dialog.js","extensions/amp-subscriptions/0.1/doc-impl.js","extensions/amp-subscriptions/0.1/entitlement.js","extensions/amp-subscriptions/0.1/expr.js","extensions/amp-subscriptions/0.1/local-subscription-platform-renderer.js","extensions/amp-subscriptions/0.1/local-subscription-platform.js","extensions/amp-subscriptions/0.1/platform-store.js","extensions/amp-subscriptions/0.1/renderer.js","extensions/amp-subscriptions/0.1/service-adapter.js","extensions/amp-subscriptions/0.1/subscription-platform.js","extensions/amp-subscriptions/0.1/url-builder.js","extensions/amp-subscriptions/0.1/viewer-subscription-platform.js","extensions/amp-subscriptions/0.1/viewer-tracker.js","node_modules/document-register-element/build/document-register-element.patched.js","node_modules/promise-pjs/promise.js","src/amp-events.js","src/analytics.js","src/config.js","src/cookies.js","src/dom.js","src/element-service.js","src/error.js","src/event-helper-listen.js","src/event-helper.js","src/experiments.js","src/exponential-backoff.js","src/json.js","src/log.js","src/mode-object.js","src/mode.js","src/observable.js","src/polyfills.js","src/polyfills/array-includes.js","src/polyfills/custom-elements.js","src/polyfills/document-contains.js","src/polyfills/domtokenlist-toggle.js","src/polyfills/math-sign.js","src/polyfills/object-assign.js","src/polyfills/promise.js","src/render-delaying-services.js","src/service.js","src/services.js","src/string.js","src/style-installer.js","src/style.js","src/types.js","src/url-parse-query-string.js","src/url-try-decode-uri-component.js","src/url.js","src/utils/base64.js","src/utils/bytes.js","src/utils/lru-cache.js","src/utils/object.js","src/utils/pem.js","src/utils/promise.js","third_party/css-escape/css-escape.js","third_party/subscriptions-project/config.js"],"names":[],"mappings":"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","file":"amp-subscriptions-0.1.max.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","export const CSS = \"body:not(.i-amphtml-subs-loading) [subscriptions-section=loading]{display:none!important}body:not(.i-amphtml-subs-grant-yes) [subscriptions-section=content]{display:none!important}body:not(.i-amphtml-subs-grant-no) [subscriptions-section=content-not-granted]{display:none!important}body.i-amphtml-subs-delegated [subscriptions-section=actions],body.i-amphtml-subs-grant-unk [subscriptions-section=actions]{display:none!important}body.i-amphtml-subs-grant-unk [subscriptions-action]{display:none!important}[subscriptions-action]:not(.i-amphtml-subs-display),[subscriptions-actions]:not(.i-amphtml-subs-display),[subscriptions-section=actions]:not(.i-amphtml-subs-display){display:none!important}amp-subscriptions-dialog{display:block!important;position:fixed!important;bottom:0!important;left:0!important;margin-left:0!important;width:100%!important;z-index:2147483641;max-height:90vh;box-sizing:border-box;opacity:1;background-image:none;background-color:#fff;box-shadow:0 0 5px 0 rgba(0,0,0,0.2);margin-bottom:0;-webkit-transition:-webkit-transform 0.3s ease-in;transition:-webkit-transform 0.3s ease-in;transition:transform 0.3s ease-in;transition:transform 0.3s ease-in,-webkit-transform 0.3s ease-in}.i-amphtml-subs-dialog-close-button{position:absolute;width:28px;height:28px;top:-28px;right:0;background-image:url(\\\"data:image/svg+xml;charset=utf-8,%3Csvg width='13' height='13' viewBox='341 8 13 13' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath fill='%234F4F4F' d='M354 9.31L352.69 8l-5.19 5.19L342.31 8 341 9.31l5.19 5.19-5.19 5.19 1.31 1.31 5.19-5.19 5.19 5.19 1.31-1.31-5.19-5.19z' fill-rule='evenodd'/%3E%3C/svg%3E\\\");background-size:13px 13px;background-position:9px;background-color:#fff;background-repeat:no-repeat;box-shadow:0 -1px 1px 0 rgba(0,0,0,0.2);border:none;border-radius:12px 0 0 0;cursor:pointer}body:not(.i-amphtml-subs-grant-yes) .i-amphtml-subs-dialog-close-button{display:none}.i-amphtml-subs-progress{height:2px;background-color:#ccc;position:relative;margin:8px;overflow:hidden}.i-amphtml-subs-progress:after{content:\\\"\\\";background-color:#2196f3;height:2px;position:absolute;left:0;top:0;width:20%;-webkit-animation:i-amphtml-subs-loading-progress 1500ms ease-in-out infinite;animation:i-amphtml-subs-loading-progress 1500ms ease-in-out infinite}@-webkit-keyframes i-amphtml-subs-loading-progress{0%{-webkit-transform:translateX(-100%);transform:translateX(-100%)}to{-webkit-transform:translateX(500%);transform:translateX(500%)}}@keyframes i-amphtml-subs-loading-progress{0%{-webkit-transform:translateX(-100%);transform:translateX(-100%)}to{-webkit-transform:translateX(500%);transform:translateX(500%)}}@media (min-width:480px){amp-subscriptions-dialog{width:480px!important;left:-240px!important;margin-left:50vw!important}}\\n/*# sourceURL=/extensions/amp-subscriptions/0.1/amp-subscriptions.css*/\";\n","/**\n * Copyright 2015 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n/** @fileoverview @suppress {checkTypes, suspiciousCode, uselessCode} */\n\n/* parser generated by jison 0.4.18 */\n/*\n  Returns a Parser object of the following structure:\n\n  Parser: {\n    yy: {}\n  }\n\n  Parser.prototype: {\n    yy: {},\n    trace: function(),\n    symbols_: {associative list: name ==> number},\n    terminals_: {associative list: number ==> name},\n    productions_: [...],\n    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),\n    table: [...],\n    defaultActions: {...},\n    parseError: function(str, hash),\n    parse: function(input),\n\n    lexer: {\n        EOF: 1,\n        parseError: function(str, hash),\n        setInput: function(input),\n        input: function(),\n        unput: function(str),\n        more: function(),\n        less: function(n),\n        pastInput: function(),\n        upcomingInput: function(),\n        showPosition: function(),\n        test_match: function(regex_match_array, rule_index),\n        next: function(),\n        lex: function(),\n        begin: function(condition),\n        popState: function(),\n        _currentRules: function(),\n        topState: function(),\n        pushState: function(condition),\n\n        options: {\n            ranges: boolean           (optional: true ==> token location info will include a .range[] member)\n            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)\n            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)\n        },\n\n        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),\n        rules: [...],\n        conditions: {associative list: name ==> set},\n    }\n  }\n\n\n  token location info (@$, _$, etc.): {\n    first_line: n,\n    last_line: n,\n    first_column: n,\n    last_column: n,\n    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)\n  }\n\n\n  the parseError function receives a 'hash' object with these members for lexer and parser errors: {\n    text:        (matched text)\n    token:       (the produced terminal token, if any)\n    line:        (yylineno)\n  }\n  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {\n    loc:         (yylloc)\n    expected:    (string describing the set of expected tokens)\n    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)\n  }\n*/\nvar parser = (function(){\nvar o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,3],$V1=[1,4],$V2=[1,18],$V3=[1,13],$V4=[1,14],$V5=[1,15],$V6=[1,16],$V7=[1,17],$V8=[1,20],$V9=[1,21],$Va=[5,6,7,10],$Vb=[5,6,7,10,15,16,17,18,19,20,21],$Vc=[5,6,7,10,15,16,17,18,19,20,21,25];\nvar parser = {trace: function trace() { },\nyy: {},\nsymbols_: {\"error\":2,\"result\":3,\"search_condition\":4,\"EOF\":5,\"OR\":6,\"AND\":7,\"NOT\":8,\"(\":9,\")\":10,\"predicate\":11,\"comparison_predicate\":12,\"truthy_predicate\":13,\"scalar_exp\":14,\"EQ\":15,\"DEQ\":16,\"NEQ\":17,\"LT\":18,\"LTE\":19,\"GT\":20,\"GTE\":21,\"atom\":22,\"field_ref\":23,\"literal\":24,\"DOT\":25,\"field_name\":26,\"NAME\":27,\"STRING\":28,\"NUMERIC\":29,\"TRUE\":30,\"FALSE\":31,\"NULL\":32,\"$accept\":0,\"$end\":1},\nterminals_: {2:\"error\",5:\"EOF\",6:\"OR\",7:\"AND\",8:\"NOT\",9:\"(\",10:\")\",15:\"EQ\",16:\"DEQ\",17:\"NEQ\",18:\"LT\",19:\"LTE\",20:\"GT\",21:\"GTE\",25:\"DOT\",27:\"NAME\",28:\"STRING\",29:\"NUMERIC\",30:\"TRUE\",31:\"FALSE\",32:\"NULL\"},\nproductions_: [0,[3,2],[4,3],[4,3],[4,2],[4,3],[4,1],[11,1],[11,1],[12,3],[12,3],[12,3],[12,3],[12,3],[12,3],[12,3],[13,1],[14,1],[14,1],[22,1],[23,3],[23,1],[26,1],[24,1],[24,1],[24,1],[24,1],[24,1]],\nperformAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {\n/* this == yyval */\n\nvar $0 = $$.length - 1;\nswitch (yystate) {\ncase 1:\nreturn $$[$0-1];\nbreak;\ncase 2:\nthis.$ = $$[$0-2] || $$[$0];\nbreak;\ncase 3:\nthis.$ = $$[$0-2] && $$[$0];\nbreak;\ncase 4:\nthis.$ = !$$[$0];\nbreak;\ncase 5:\nthis.$ = $$[$0-1];\nbreak;\ncase 6: case 7: case 8: case 17: case 18: case 19:\nthis.$ = $$[$0];\nbreak;\ncase 9:\nthis.$ = $$[$0-2] === $$[$0];\nbreak;\ncase 10:\nthrow new Error('\"==\" is not allowed, use \"=\"');\nbreak;\ncase 11:\nthis.$ = $$[$0-2] !== $$[$0];\nbreak;\ncase 12:\nthis.$ = typeof $$[$0-2] == typeof $$[$0] && $$[$0-2] < $$[$0];\nbreak;\ncase 13:\nthis.$ = typeof $$[$0-2] == typeof $$[$0] && $$[$0-2] <= $$[$0];\nbreak;\ncase 14:\nthis.$ = typeof $$[$0-2] == typeof $$[$0] && $$[$0-2] > $$[$0];\nbreak;\ncase 15:\nthis.$ = typeof $$[$0-2] == typeof $$[$0] && $$[$0-2] >= $$[$0];\nbreak;\ncase 16:\nthis.$ = ($$[$0] !== undefined && $$[$0] !== null\n                && $$[$0] !== '' && $$[$0] !== 0 && $$[$0] !== false);\nbreak;\ncase 20:\nthis.$ = Object.prototype.toString.call($$[$0-2]) == '[object Object]' && $$[$0-2].hasOwnProperty($$[$0]) ? $$[$0-2][$$[$0]] : null;\nbreak;\ncase 21:\nthis.$ = yy[$$[$0]] !== undefined ? yy[$$[$0]] : null;\nbreak;\ncase 22:\nthis.$ = yytext;\nbreak;\ncase 23:\nthis.$ = yytext.substring(1, yytext.length - 1);\nbreak;\ncase 24:\nthis.$ = Number(yytext);\nbreak;\ncase 25:\nthis.$ = true\nbreak;\ncase 26:\nthis.$ = false\nbreak;\ncase 27:\nthis.$ = null\nbreak;\n}\n},\ntable: [{3:1,4:2,8:$V0,9:$V1,11:5,12:6,13:7,14:8,22:9,23:10,24:11,26:12,27:$V2,28:$V3,29:$V4,30:$V5,31:$V6,32:$V7},{1:[3]},{5:[1,19],6:$V8,7:$V9},{4:22,8:$V0,9:$V1,11:5,12:6,13:7,14:8,22:9,23:10,24:11,26:12,27:$V2,28:$V3,29:$V4,30:$V5,31:$V6,32:$V7},{4:23,8:$V0,9:$V1,11:5,12:6,13:7,14:8,22:9,23:10,24:11,26:12,27:$V2,28:$V3,29:$V4,30:$V5,31:$V6,32:$V7},o($Va,[2,6]),o($Va,[2,7]),o($Va,[2,8]),o($Va,[2,16],{15:[1,24],16:[1,25],17:[1,26],18:[1,27],19:[1,28],20:[1,29],21:[1,30]}),o($Vb,[2,17]),o($Vb,[2,18],{25:[1,31]}),o($Vb,[2,19]),o($Vc,[2,21]),o($Vb,[2,23]),o($Vb,[2,24]),o($Vb,[2,25]),o($Vb,[2,26]),o($Vb,[2,27]),o($Vc,[2,22]),{1:[2,1]},{4:32,8:$V0,9:$V1,11:5,12:6,13:7,14:8,22:9,23:10,24:11,26:12,27:$V2,28:$V3,29:$V4,30:$V5,31:$V6,32:$V7},{4:33,8:$V0,9:$V1,11:5,12:6,13:7,14:8,22:9,23:10,24:11,26:12,27:$V2,28:$V3,29:$V4,30:$V5,31:$V6,32:$V7},o($Va,[2,4]),{6:$V8,7:$V9,10:[1,34]},{14:35,22:9,23:10,24:11,26:12,27:$V2,28:$V3,29:$V4,30:$V5,31:$V6,32:$V7},{14:36,22:9,23:10,24:11,26:12,27:$V2,28:$V3,29:$V4,30:$V5,31:$V6,32:$V7},{14:37,22:9,23:10,24:11,26:12,27:$V2,28:$V3,29:$V4,30:$V5,31:$V6,32:$V7},{14:38,22:9,23:10,24:11,26:12,27:$V2,28:$V3,29:$V4,30:$V5,31:$V6,32:$V7},{14:39,22:9,23:10,24:11,26:12,27:$V2,28:$V3,29:$V4,30:$V5,31:$V6,32:$V7},{14:40,22:9,23:10,24:11,26:12,27:$V2,28:$V3,29:$V4,30:$V5,31:$V6,32:$V7},{14:41,22:9,23:10,24:11,26:12,27:$V2,28:$V3,29:$V4,30:$V5,31:$V6,32:$V7},{26:42,27:$V2},o([5,6,10],[2,2],{7:$V9}),o($Va,[2,3]),o($Va,[2,5]),o($Va,[2,9]),o($Va,[2,10]),o($Va,[2,11]),o($Va,[2,12]),o($Va,[2,13]),o($Va,[2,14]),o($Va,[2,15]),o($Vc,[2,20])],\ndefaultActions: {19:[2,1]},\nparseError: function parseError(str, hash) {\n    if (hash.recoverable) {\n        this.trace(str);\n    } else {\n        var error = new Error(str);\n        error.hash = hash;\n        throw error;\n    }\n},\nparse: function parse(input) {\n    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;\n    var args = lstack.slice.call(arguments, 1);\n    var lexer = Object.create(this.lexer);\n    var sharedState = { yy: {} };\n    for (var k in this.yy) {\n        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {\n            sharedState.yy[k] = this.yy[k];\n        }\n    }\n    lexer.setInput(input, sharedState.yy);\n    sharedState.yy.lexer = lexer;\n    sharedState.yy.parser = this;\n    if (typeof lexer.yylloc == 'undefined') {\n        lexer.yylloc = {};\n    }\n    var yyloc = lexer.yylloc;\n    lstack.push(yyloc);\n    var ranges = lexer.options && lexer.options.ranges;\n    if (typeof sharedState.yy.parseError === 'function') {\n        this.parseError = sharedState.yy.parseError;\n    } else {\n        this.parseError = Object.getPrototypeOf(this).parseError;\n    }\n    function popStack(n) {\n        stack.length = stack.length - 2 * n;\n        vstack.length = vstack.length - n;\n        lstack.length = lstack.length - n;\n    }\n    _token_stack:\n        var lex = function () {\n            var token;\n            token = lexer.lex() || EOF;\n            if (typeof token !== 'number') {\n                token = self.symbols_[token] || token;\n            }\n            return token;\n        };\n    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;\n    while (true) {\n        state = stack[stack.length - 1];\n        if (this.defaultActions[state]) {\n            action = this.defaultActions[state];\n        } else {\n            if (symbol === null || typeof symbol == 'undefined') {\n                symbol = lex();\n            }\n            action = table[state] && table[state][symbol];\n        }\n                    if (typeof action === 'undefined' || !action.length || !action[0]) {\n                var errStr = '';\n                expected = [];\n                for (p in table[state]) {\n                    if (this.terminals_[p] && p > TERROR) {\n                        expected.push('\\'' + this.terminals_[p] + '\\'');\n                    }\n                }\n                if (lexer.showPosition) {\n                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\\n' + lexer.showPosition() + '\\nExpecting ' + expected.join(', ') + ', got \\'' + (this.terminals_[symbol] || symbol) + '\\'';\n                } else {\n                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\\'' + (this.terminals_[symbol] || symbol) + '\\'');\n                }\n                this.parseError(errStr, {\n                    text: lexer.match,\n                    token: this.terminals_[symbol] || symbol,\n                    line: lexer.yylineno,\n                    loc: yyloc,\n                    expected: expected\n                });\n            }\n        if (action[0] instanceof Array && action.length > 1) {\n            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);\n        }\n        switch (action[0]) {\n        case 1:\n            stack.push(symbol);\n            vstack.push(lexer.yytext);\n            lstack.push(lexer.yylloc);\n            stack.push(action[1]);\n            symbol = null;\n            if (!preErrorSymbol) {\n                yyleng = lexer.yyleng;\n                yytext = lexer.yytext;\n                yylineno = lexer.yylineno;\n                yyloc = lexer.yylloc;\n                if (recovering > 0) {\n                    recovering--;\n                }\n            } else {\n                symbol = preErrorSymbol;\n                preErrorSymbol = null;\n            }\n            break;\n        case 2:\n            len = this.productions_[action[1]][1];\n            yyval.$ = vstack[vstack.length - len];\n            yyval._$ = {\n                first_line: lstack[lstack.length - (len || 1)].first_line,\n                last_line: lstack[lstack.length - 1].last_line,\n                first_column: lstack[lstack.length - (len || 1)].first_column,\n                last_column: lstack[lstack.length - 1].last_column\n            };\n            if (ranges) {\n                yyval._$.range = [\n                    lstack[lstack.length - (len || 1)].range[0],\n                    lstack[lstack.length - 1].range[1]\n                ];\n            }\n            r = this.performAction.apply(yyval, [\n                yytext,\n                yyleng,\n                yylineno,\n                sharedState.yy,\n                action[1],\n                vstack,\n                lstack\n            ].concat(args));\n            if (typeof r !== 'undefined') {\n                return r;\n            }\n            if (len) {\n                stack = stack.slice(0, -1 * len * 2);\n                vstack = vstack.slice(0, -1 * len);\n                lstack = lstack.slice(0, -1 * len);\n            }\n            stack.push(this.productions_[action[1]][0]);\n            vstack.push(yyval.$);\n            lstack.push(yyval._$);\n            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];\n            stack.push(newState);\n            break;\n        case 3:\n            return true;\n        }\n    }\n    return true;\n}};\n/* generated by jison-lex 0.3.4 */\nvar lexer = (function(){\nvar lexer = ({\n\nEOF:1,\n\nparseError:function parseError(str, hash) {\n        if (this.yy.parser) {\n            this.yy.parser.parseError(str, hash);\n        } else {\n            throw new Error(str);\n        }\n    },\n\n// resets the lexer, sets new input\nsetInput:function (input, yy) {\n        this.yy = yy || this.yy || {};\n        this._input = input;\n        this._more = this._backtrack = this.done = false;\n        this.yylineno = this.yyleng = 0;\n        this.yytext = this.matched = this.match = '';\n        this.conditionStack = ['INITIAL'];\n        this.yylloc = {\n            first_line: 1,\n            first_column: 0,\n            last_line: 1,\n            last_column: 0\n        };\n        if (this.options.ranges) {\n            this.yylloc.range = [0,0];\n        }\n        this.offset = 0;\n        return this;\n    },\n\n// consumes and returns one char from the input\ninput:function () {\n        var ch = this._input[0];\n        this.yytext += ch;\n        this.yyleng++;\n        this.offset++;\n        this.match += ch;\n        this.matched += ch;\n        var lines = ch.match(/(?:\\r\\n?|\\n).*/g);\n        if (lines) {\n            this.yylineno++;\n            this.yylloc.last_line++;\n        } else {\n            this.yylloc.last_column++;\n        }\n        if (this.options.ranges) {\n            this.yylloc.range[1]++;\n        }\n\n        this._input = this._input.slice(1);\n        return ch;\n    },\n\n// unshifts one char (or a string) into the input\nunput:function (ch) {\n        var len = ch.length;\n        var lines = ch.split(/(?:\\r\\n?|\\n)/g);\n\n        this._input = ch + this._input;\n        this.yytext = this.yytext.substr(0, this.yytext.length - len);\n        //this.yyleng -= len;\n        this.offset -= len;\n        var oldLines = this.match.split(/(?:\\r\\n?|\\n)/g);\n        this.match = this.match.substr(0, this.match.length - 1);\n        this.matched = this.matched.substr(0, this.matched.length - 1);\n\n        if (lines.length - 1) {\n            this.yylineno -= lines.length - 1;\n        }\n        var r = this.yylloc.range;\n\n        this.yylloc = {\n            first_line: this.yylloc.first_line,\n            last_line: this.yylineno + 1,\n            first_column: this.yylloc.first_column,\n            last_column: lines ?\n                (lines.length === oldLines.length ? this.yylloc.first_column : 0)\n                 + oldLines[oldLines.length - lines.length].length - lines[0].length :\n              this.yylloc.first_column - len\n        };\n\n        if (this.options.ranges) {\n            this.yylloc.range = [r[0], r[0] + this.yyleng - len];\n        }\n        this.yyleng = this.yytext.length;\n        return this;\n    },\n\n// When called from action, caches matched text and appends it on next action\nmore:function () {\n        this._more = true;\n        return this;\n    },\n\n// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.\nreject:function () {\n        if (this.options.backtrack_lexer) {\n            this._backtrack = true;\n        } else {\n            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\\n' + this.showPosition(), {\n                text: \"\",\n                token: null,\n                line: this.yylineno\n            });\n\n        }\n        return this;\n    },\n\n// retain first n characters of the match\nless:function (n) {\n        this.unput(this.match.slice(n));\n    },\n\n// displays already matched input, i.e. for error messages\npastInput:function () {\n        var past = this.matched.substr(0, this.matched.length - this.match.length);\n        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\\n/g, \"\");\n    },\n\n// displays upcoming input, i.e. for error messages\nupcomingInput:function () {\n        var next = this.match;\n        if (next.length < 20) {\n            next += this._input.substr(0, 20-next.length);\n        }\n        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\\n/g, \"\");\n    },\n\n// displays the character position where the lexing error occurred, i.e. for error messages\nshowPosition:function () {\n        var pre = this.pastInput();\n        var c = new Array(pre.length + 1).join(\"-\");\n        return pre + this.upcomingInput() + \"\\n\" + c + \"^\";\n    },\n\n// test the lexed token: return FALSE when not a match, otherwise return token\ntest_match:function (match, indexed_rule) {\n        var token,\n            lines,\n            backup;\n\n        if (this.options.backtrack_lexer) {\n            // save context\n            backup = {\n                yylineno: this.yylineno,\n                yylloc: {\n                    first_line: this.yylloc.first_line,\n                    last_line: this.last_line,\n                    first_column: this.yylloc.first_column,\n                    last_column: this.yylloc.last_column\n                },\n                yytext: this.yytext,\n                match: this.match,\n                matches: this.matches,\n                matched: this.matched,\n                yyleng: this.yyleng,\n                offset: this.offset,\n                _more: this._more,\n                _input: this._input,\n                yy: this.yy,\n                conditionStack: this.conditionStack.slice(0),\n                done: this.done\n            };\n            if (this.options.ranges) {\n                backup.yylloc.range = this.yylloc.range.slice(0);\n            }\n        }\n\n        lines = match[0].match(/(?:\\r\\n?|\\n).*/g);\n        if (lines) {\n            this.yylineno += lines.length;\n        }\n        this.yylloc = {\n            first_line: this.yylloc.last_line,\n            last_line: this.yylineno + 1,\n            first_column: this.yylloc.last_column,\n            last_column: lines ?\n                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\\r?\\n?/)[0].length :\n                         this.yylloc.last_column + match[0].length\n        };\n        this.yytext += match[0];\n        this.match += match[0];\n        this.matches = match;\n        this.yyleng = this.yytext.length;\n        if (this.options.ranges) {\n            this.yylloc.range = [this.offset, this.offset += this.yyleng];\n        }\n        this._more = false;\n        this._backtrack = false;\n        this._input = this._input.slice(match[0].length);\n        this.matched += match[0];\n        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);\n        if (this.done && this._input) {\n            this.done = false;\n        }\n        if (token) {\n            return token;\n        } else if (this._backtrack) {\n            // recover context\n            for (var k in backup) {\n                this[k] = backup[k];\n            }\n            return false; // rule action called reject() implying the next rule should be tested instead.\n        }\n        return false;\n    },\n\n// return next match in input\nnext:function () {\n        if (this.done) {\n            return this.EOF;\n        }\n        if (!this._input) {\n            this.done = true;\n        }\n\n        var token,\n            match,\n            tempMatch,\n            index;\n        if (!this._more) {\n            this.yytext = '';\n            this.match = '';\n        }\n        var rules = this._currentRules();\n        for (var i = 0; i < rules.length; i++) {\n            tempMatch = this._input.match(this.rules[rules[i]]);\n            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {\n                match = tempMatch;\n                index = i;\n                if (this.options.backtrack_lexer) {\n                    token = this.test_match(tempMatch, rules[i]);\n                    if (token !== false) {\n                        return token;\n                    } else if (this._backtrack) {\n                        match = false;\n                        continue; // rule action called reject() implying a rule MISmatch.\n                    } else {\n                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)\n                        return false;\n                    }\n                } else if (!this.options.flex) {\n                    break;\n                }\n            }\n        }\n        if (match) {\n            token = this.test_match(match, rules[index]);\n            if (token !== false) {\n                return token;\n            }\n            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)\n            return false;\n        }\n        if (this._input === \"\") {\n            return this.EOF;\n        } else {\n            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\\n' + this.showPosition(), {\n                text: \"\",\n                token: null,\n                line: this.yylineno\n            });\n        }\n    },\n\n// return next match that has a token\nlex:function lex() {\n        var r = this.next();\n        if (r) {\n            return r;\n        } else {\n            return this.lex();\n        }\n    },\n\n// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)\nbegin:function begin(condition) {\n        this.conditionStack.push(condition);\n    },\n\n// pop the previously active lexer condition state off the condition stack\npopState:function popState() {\n        var n = this.conditionStack.length - 1;\n        if (n > 0) {\n            return this.conditionStack.pop();\n        } else {\n            return this.conditionStack[0];\n        }\n    },\n\n// produce the lexer rule set which is active for the currently active lexer condition state\n_currentRules:function _currentRules() {\n        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {\n            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;\n        } else {\n            return this.conditions[\"INITIAL\"].rules;\n        }\n    },\n\n// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available\ntopState:function topState(n) {\n        n = this.conditionStack.length - 1 - Math.abs(n || 0);\n        if (n >= 0) {\n            return this.conditionStack[n];\n        } else {\n            return \"INITIAL\";\n        }\n    },\n\n// alias for begin(condition)\npushState:function pushState(condition) {\n        this.begin(condition);\n    },\n\n// return the number of states currently on the stack\nstateStackSize:function stateStackSize() {\n        return this.conditionStack.length;\n    },\noptions: {},\nperformAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {\nvar YYSTATE=YY_START;\nswitch($avoiding_name_collisions) {\ncase 0:/* skip whitespace */\nbreak;\ncase 1:return 7\nbreak;\ncase 2:return 6\nbreak;\ncase 3:return 8\nbreak;\ncase 4:return 32\nbreak;\ncase 5:return 30\nbreak;\ncase 6:return 30\nbreak;\ncase 7:return 31\nbreak;\ncase 8:return 31\nbreak;\ncase 9:return 9\nbreak;\ncase 10:return 10\nbreak;\ncase 11:return '|'\nbreak;\ncase 12:return 19\nbreak;\ncase 13:return 18\nbreak;\ncase 14:return 21\nbreak;\ncase 15:return 20\nbreak;\ncase 16:return 17\nbreak;\ncase 17:return 16\nbreak;\ncase 18:return 15\nbreak;\ncase 19:return 29\nbreak;\ncase 20:return 27\nbreak;\ncase 21:return 28\nbreak;\ncase 22:return 28\nbreak;\ncase 23:return 25\nbreak;\ncase 24:return 'INVALID'\nbreak;\ncase 25:return 5\nbreak;\n}\n},\nrules: [/^(?:\\s+)/,/^(?:AND\\b)/,/^(?:OR\\b)/,/^(?:NOT\\b)/,/^(?:NULL\\b)/,/^(?:TRUE\\b)/,/^(?:true\\b)/,/^(?:FALSE\\b)/,/^(?:false\\b)/,/^(?:\\()/,/^(?:\\))/,/^(?:\\|)/,/^(?:<=)/,/^(?:<)/,/^(?:>=)/,/^(?:>)/,/^(?:!=)/,/^(?:==)/,/^(?:=)/,/^(?:-?[0-9]+(\\.[0-9]+)?\\b)/,/^(?:[a-zA-Z_][a-zA-Z0-9_]*)/,/^(?:'[^\\']*')/,/^(?:\"[^\\\"]*\")/,/^(?:\\.)/,/^(?:.)/,/^(?:$)/],\nconditions: {\"INITIAL\":{\"rules\":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25],\"inclusive\":true}}\n});\nreturn lexer;\n})();\nparser.lexer = lexer;\nfunction Parser () {\n  this.yy = {};\n}\nParser.prototype = parser;parser.Parser = Parser;\nreturn new Parser;\n})();\n\nexport const accessParser = parser;\n","/**\n * Copyright 2015 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {accessParser as parser} from './access-expr-impl';\n\n\n/**\n * Evaluates access expression.\n *\n * The grammar is defined in the `access-expr-impl.jison` and compiled using\n * (Jison)[https://zaach.github.io/jison/] parser. The compilation steps are\n * described in the [access-expr-impl.md].\n *\n * Grammar highlights:\n * - Shorthand truthy expressions are allowed, such as `field`. Truthy value\n *   is defined as `X !== null && X !== '' && X !== 0 && X !== false`.\n * - Basic equality expressions: `X = 1`, `X = true`, `X = \"A\"`. And also,\n *   non-equality: `X != 1` and so on.\n * - Basic comparison expressions only defined for numbers: `X < 1`,\n *   `X >= 10`.\n * - Boolean logic: `X = 1 OR Y = 1`, `X = 1 AND Y = 2`, `NOT X`, `NOT (X = 1)`.\n *\n * @param {string} expr\n * @param {!JsonObject} data\n * @return {boolean}\n */\nexport function evaluateAccessExpr(expr, data) {\n  try {\n    parser.yy = data;\n    return !!parser.parse(expr);\n  } finally {\n    parser.yy = null;\n  }\n}\n","/**\n * Copyright 2016 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  base64UrlDecodeToBytes,\n} from '../../../src/utils/base64';\nimport {pemToBytes} from '../../../src/utils/pem';\nimport {stringToBytes, utf8Decode} from '../../../src/utils/bytes';\nimport {tryParseJson} from '../../../src/json';\n\n\n/**\n * @typedef {{\n *   header: (?JsonObject|undefined),\n *   payload: (?JsonObject|undefined),\n *   verifiable: string,\n *   sig: string,\n * }}\n */\nlet JwtTokenInternalDef;\n\n\n/**\n * Provides helper methods to decode and verify JWT tokens.\n */\nexport class JwtHelper {\n\n  /**\n   * @param {!Window} win\n   */\n  constructor(win) {\n\n    /** @const {!Window} */\n    this.win = win;\n\n    /**\n     * Might be `null` if the platform does not support Crypto Subtle.\n     * @const @private {?webCrypto.SubtleCrypto}\n     */\n    this.subtle_ = (win.crypto &&\n        (win.crypto.subtle || win.crypto.webkitSubtle)) || null;\n  }\n\n  /**\n   * Decodes JWT token and returns its payload.\n   * @param {string} encodedToken\n   * @return {?JsonObject|undefined}\n   */\n  decode(encodedToken) {\n    return this.decodeInternal_(encodedToken).payload;\n  }\n\n  /**\n   * Whether the signature-verification supported on this platform.\n   * @return {boolean}\n   */\n  isVerificationSupported() {\n    return !!this.subtle_;\n  }\n\n  /**\n   * Decodes HWT token and verifies its signature.\n   * @param {string} encodedToken\n   * @param {!Promise<string>} pemPromise\n   * @return {!Promise<!JsonObject>}\n   */\n  decodeAndVerify(encodedToken, pemPromise) {\n    if (!this.subtle_) {\n      throw new Error('Crypto is not supported on this platform');\n    }\n    const decodedPromise = new Promise(\n        resolve => resolve(this.decodeInternal_(encodedToken)));\n    return decodedPromise.then(decoded => {\n      const alg = decoded.header['alg'];\n      if (!alg || alg != 'RS256') {\n        // TODO(dvoytenko@): Support other RS* algos.\n        throw new Error('Only alg=RS256 is supported');\n      }\n      return this.importKey_(pemPromise).then(key => {\n        const sig = base64UrlDecodeToBytes(decoded.sig);\n        return this.subtle_.verify(\n            /* options */ {name: 'RSASSA-PKCS1-v1_5'},\n            key,\n            sig,\n            stringToBytes(decoded.verifiable)\n        );\n      }).then(isValid => {\n        if (isValid) {\n          return decoded.payload;\n        }\n        throw new Error('Signature verification failed');\n      });\n    });\n  }\n\n  /**\n   * @param {string} encodedToken\n   * @return {!JwtTokenInternalDef}\n   * @private\n   */\n  decodeInternal_(encodedToken) {\n    /**\n     * See https://jwt.io/introduction/\n     */\n    function invalidToken() {\n      throw new Error(`Invalid token: \"${encodedToken}\"`);\n    }\n\n    // Encoded token has three parts: header.payload.sig\n    // Note! The padding is not allowed by JWT spec:\n    // http://self-issued.info/docs/draft-goland-json-web-token-00.html#rfc.section.5\n    const parts = encodedToken.split('.');\n    if (parts.length != 3) {\n      invalidToken();\n    }\n    const headerUtf8Bytes = base64UrlDecodeToBytes(parts[0]);\n    const payloadUtf8Bytes = base64UrlDecodeToBytes(parts[1]);\n    return {\n      header: tryParseJson(utf8Decode(headerUtf8Bytes), invalidToken),\n      payload: tryParseJson(utf8Decode(payloadUtf8Bytes), invalidToken),\n      verifiable: `${parts[0]}.${parts[1]}`,\n      sig: parts[2],\n    };\n  }\n\n  /**\n   * @param {!Promise<string>} pemPromise\n   * @return {!Promise<!webCrypto.CryptoKey>}\n   */\n  importKey_(pemPromise) {\n    return pemPromise.then(pem => {\n      return this.subtle_.importKey(\n          /* format */ 'spki',\n          pemToBytes(pem),\n          /* algo options */ {\n            name: 'RSASSA-PKCS1-v1_5',\n            hash: {name: 'SHA-256'},\n          },\n          /* extractable */ false,\n          /* uses */ ['verify']);\n    });\n  }\n}\n","/**\n * Copyright 2015 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Services} from '../../../src/services';\nimport {dev, user} from '../../../src/log';\nimport {dict} from '../../../src/utils/object';\nimport {getData, listen} from '../../../src/event-helper';\nimport {getMode} from '../../../src/mode';\nimport {openWindowDialog} from '../../../src/dom';\nimport {parseUrlDeprecated} from '../../../src/url';\nimport {urls} from '../../../src/config';\n\n/** @const */\nconst TAG = 'amp-access-login';\n\n/** @const {!RegExp} */\nconst RETURN_URL_REGEX = new RegExp('RETURN_URL');\n\n/**\n * @param {!../../../src/service/ampdoc-impl.AmpDoc} ampdoc\n * @param {string|!Promise<string>} urlOrPromise\n * @return {!WebLoginDialog|!ViewerLoginDialog}\n */\nexport function createLoginDialog(ampdoc, urlOrPromise) {\n  const viewer = Services.viewerForDoc(ampdoc);\n  const overrideDialog = parseInt(viewer.getParam('dialog'), 10);\n  if (overrideDialog) {\n    return new ViewerLoginDialog(viewer, urlOrPromise);\n  }\n  return new WebLoginDialog(ampdoc.win, viewer, urlOrPromise);\n}\n\n\n/**\n * Opens the login dialog for the specified URL. If the login dialog succeeds,\n * the returned promised is resolved with the dialog's response. Otherwise, the\n * returned promise is rejected.\n * @param {!../../../src/service/ampdoc-impl.AmpDoc} ampdoc\n * @param {string|!Promise<string>} urlOrPromise\n * @return {!Promise<string>}\n */\nexport function openLoginDialog(ampdoc, urlOrPromise) {\n  return createLoginDialog(ampdoc, urlOrPromise).open();\n}\n\n/**\n * Gets the final login URL with all the performed replacements.\n * @param {!../../../src/service/ampdoc-impl.AmpDoc} ampdoc\n * @param {string|!Promise<string>} urlOrPromise\n * @return {!Promise<string>}\n */\nexport function getLoginUrl(ampdoc, urlOrPromise) {\n  return createLoginDialog(ampdoc, urlOrPromise).getLoginUrl();\n}\n\n\n/**\n * The implementation of the Login Dialog delegated via Viewer.\n */\nclass ViewerLoginDialog {\n  /**\n   * @param {!../../../src/service/viewer-impl.Viewer} viewer\n   * @param {string|!Promise<string>} urlOrPromise\n   */\n  constructor(viewer, urlOrPromise) {\n    /** @const {!../../../src/service/viewer-impl.Viewer} */\n    this.viewer = viewer;\n\n    /** @const {string|!Promise<string>} */\n    this.urlOrPromise = urlOrPromise;\n  }\n\n  /**\n  * @return {!Promise<string>}\n  */\n  getLoginUrl() {\n    let urlPromise;\n    if (typeof this.urlOrPromise == 'string') {\n      urlPromise = Promise.resolve(this.urlOrPromise);\n    } else {\n      urlPromise = this.urlOrPromise;\n    }\n    return urlPromise.then(url => {\n      return buildLoginUrl(url, 'RETURN_URL');\n    });\n  }\n\n\n  /**\n   * Opens the dialog. Returns the promise that will yield with the dialog's\n   * result or will be rejected if dialog fails. The dialog's result is\n   * typically a hash string from the return URL.\n   * @return {!Promise<string>}\n   */\n  open() {\n    return this.getLoginUrl().then(loginUrl => {\n      dev().fine(TAG, 'Open viewer dialog: ', loginUrl);\n      return this.viewer.sendMessageAwaitResponse('openDialog', dict({\n        'url': loginUrl,\n      }));\n    });\n  }\n\n}\n\n\n/**\n * Web-based implementation of the Login Dialog.\n * @visibleForTesting\n */\nexport class WebLoginDialog {\n  /**\n   * @param {!Window} win\n   * @param {!../../../src/service/viewer-impl.Viewer} viewer\n   * @param {string|!Promise<string>} urlOrPromise\n   */\n  constructor(win, viewer, urlOrPromise) {\n    /** @const {!Window} */\n    this.win = win;\n\n    /** @const {!../../../src/service/viewer-impl.Viewer} */\n    this.viewer = viewer;\n\n    /** @const {string|!Promise<string>} */\n    this.urlOrPromise = urlOrPromise;\n\n    /** @private {?function(?string)} */\n    this.resolve_ = null;\n\n    /** @private {?function(*)} */\n    this.reject_ = null;\n\n    /** @private {?Window} */\n    this.dialog_ = null;\n\n    /** @private {?Promise} */\n    this.dialogReadyPromise_ = null;\n\n    /** @private {?number} */\n    this.heartbeatInterval_ = null;\n\n    /** @private {?UnlistenDef} */\n    this.messageUnlisten_ = null;\n  }\n\n  /**\n   * Opens the dialog. Returns the promise that will yield with the dialog's\n   * result or will be rejected if dialog fails.\n   * @return {!Promise<string>}\n   */\n  open() {\n    user().assert(!this.resolve_, 'Dialog already opened');\n    return new Promise((resolve, reject) => {\n      this.resolve_ = resolve;\n      this.reject_ = reject;\n      // Must always be called synchronously.\n      this.openInternal_();\n    }).then(result => {\n      this.cleanup_();\n      return result;\n    }, error => {\n      this.cleanup_();\n      throw error;\n    });\n  }\n\n  /** @private */\n  cleanup_() {\n    this.resolve_ = null;\n    this.reject_ = null;\n\n    if (this.dialog_) {\n      try {\n        this.dialog_.close();\n      } catch (e) {\n        // Ignore.\n      }\n      this.dialog_ = null;\n    }\n\n    if (this.heartbeatInterval_) {\n      this.win.clearInterval(this.heartbeatInterval_);\n      this.heartbeatInterval_ = null;\n    }\n\n    if (this.messageUnlisten_) {\n      this.messageUnlisten_();\n      this.messageUnlisten_ = null;\n    }\n  }\n\n  /**\n  * @return {!Promise<string>}\n  */\n  getLoginUrl() {\n    let urlPromise;\n    if (typeof this.urlOrPromise == 'string') {\n      urlPromise = Promise.resolve(this.urlOrPromise);\n    } else {\n      urlPromise = this.urlOrPromise;\n    }\n    return urlPromise.then(url => {\n      return buildLoginUrl(url, this.getReturnUrl_());\n    });\n  }\n\n  /** @private */\n  openInternal_() {\n    const {screen} = this.win;\n    const w = Math.floor(Math.min(700, screen.width * 0.9));\n    const h = Math.floor(Math.min(450, screen.height * 0.9));\n    const x = Math.floor((screen.width - w) / 2);\n    const y = Math.floor((screen.height - h) / 2);\n    const sizing = `height=${h},width=${w},left=${x},top=${y}`;\n    const options = `${sizing},resizable=yes,scrollbars=yes`;\n    const returnUrl = this.getReturnUrl_();\n\n    this.dialogReadyPromise_ = null;\n    if (typeof this.urlOrPromise == 'string') {\n      const loginUrl = buildLoginUrl(this.urlOrPromise, returnUrl);\n      dev().fine(TAG, 'Open dialog: ', loginUrl, returnUrl, w, h, x, y);\n      this.dialog_ = openWindowDialog(this.win, loginUrl, '_blank', options);\n      if (this.dialog_) {\n        this.dialogReadyPromise_ = Promise.resolve();\n      }\n    } else {\n      dev().fine(TAG, 'Open dialog: ', 'about:blank', returnUrl, w, h, x, y);\n      this.dialog_ = openWindowDialog(this.win, '', '_blank', options);\n      if (this.dialog_) {\n        this.dialogReadyPromise_ = this.urlOrPromise.then(url => {\n          const loginUrl = buildLoginUrl(url, returnUrl);\n          dev().fine(TAG, 'Set dialog url: ', loginUrl);\n          this.dialog_.location.replace(loginUrl);\n        }, error => {\n          throw new Error('failed to resolve url: ' + error);\n        });\n      }\n    }\n\n    if (this.dialogReadyPromise_) {\n      this.dialogReadyPromise_.then(() => {\n        this.setupDialog_(returnUrl);\n      }, error => {\n        this.loginDone_(/* result */ null, error);\n      });\n    } else {\n      this.loginDone_(/* result */ null, new Error('failed to open dialog'));\n    }\n  }\n\n  /**\n   * @param {string} returnUrl\n   * @private\n   */\n  setupDialog_(returnUrl) {\n    const returnOrigin = parseUrlDeprecated(returnUrl).origin;\n\n    this.heartbeatInterval_ = this.win.setInterval(() => {\n      if (this.dialog_.closed) {\n        this.win.clearInterval(this.heartbeatInterval_);\n        this.heartbeatInterval_ = null;\n        // Give a chance for the result to arrive, but otherwise consider the\n        // responce to be empty.\n        this.win.setTimeout(() => {\n          this.loginDone_('');\n        }, 3000);\n      }\n    }, 500);\n\n    this.messageUnlisten_ = listen(this.win, 'message', e => {\n      dev().fine(TAG, 'MESSAGE:', e);\n      if (e.origin != returnOrigin) {\n        return;\n      }\n      if (!getData(e) || getData(e)['sentinel'] != 'amp') {\n        return;\n      }\n      dev().fine(TAG, 'Received message from dialog: ', getData(e));\n      if (getData(e)['type'] == 'result') {\n        if (this.dialog_) {\n          this.dialog_./*OK*/postMessage(dict({\n            'sentinel': 'amp',\n            'type': 'result-ack',\n          }), returnOrigin);\n        }\n        this.loginDone_(getData(e)['result']);\n      }\n    });\n  }\n\n  /**\n   * @param {?string} result\n   * @param {*=} opt_error\n   * @private\n   */\n  loginDone_(result, opt_error) {\n    if (!this.resolve_) {\n      return;\n    }\n    dev().fine(TAG, 'Login done: ', result, opt_error);\n    if (opt_error) {\n      this.reject_(opt_error);\n    } else {\n      this.resolve_(result);\n    }\n    this.cleanup_();\n  }\n\n  /**\n   * @return {string}\n   * @private\n   */\n  getReturnUrl_() {\n    const currentUrl = this.viewer.getResolvedViewerUrl();\n    let returnUrl;\n    if (getMode().localDev) {\n      const loc = this.win.location;\n      returnUrl = loc.protocol + '//' + loc.host +\n          '/extensions/amp-access/0.1/amp-login-done.html';\n    } else {\n      returnUrl = `${urls.cdn}/v0/amp-login-done-0.1.html`;\n    }\n    return returnUrl + '?url=' + encodeURIComponent(currentUrl);\n  }\n}\n\n\n/**\n * @param {string} url\n * @param {string} returnUrl\n * @return {string}\n * @private\n */\nfunction buildLoginUrl(url, returnUrl) {\n  // RETURN_URL has to arrive here unreplaced by UrlReplacements for two\n  // reasons: (1) sync replacement and (2) if we need to propagate this\n  // replacement to the viewer.\n  if (RETURN_URL_REGEX.test(url)) {\n    return url.replace(RETURN_URL_REGEX, encodeURIComponent(returnUrl));\n  }\n  return url +\n      (url.indexOf('?') == -1 ? '?' : '&') +\n      'return=' + encodeURIComponent(returnUrl);\n}\n","/**\n * Copyright 2018 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {assertHttpsUrl} from '../../../src/url';\nimport {dev, user} from '../../../src/log';\nimport {dict} from '../../../src/utils/object';\nimport {openLoginDialog} from '../../amp-access/0.1/login-dialog';\nimport {parseQueryString} from '../../../src/url';\n\n/** @const */\nconst TAG = 'amp-subscriptions';\n\n\n/**\n */\nexport class Actions {\n\n  /**\n   * @param {!../../../src/service/ampdoc-impl.AmpDoc} ampdoc\n   * @param {!./url-builder.UrlBuilder} urlBuilder\n   * @param {!./analytics.SubscriptionAnalytics} analytics\n   * @param {!Object<string, string>} actionMap\n   */\n  constructor(ampdoc, urlBuilder, analytics, actionMap) {\n    // Check that all URLs are valid.\n    for (const k in actionMap) {\n      assertHttpsUrl(actionMap[k], `action ${k}`);\n    }\n\n    /** @private @const {!Object<string, string>} */\n    this.actionsConfig_ = actionMap;\n    /** @private @const {!Object<string, string>} */\n    this.builtActionUrlMap_ = dict();\n    /** @private @const {!./url-builder.UrlBuilder} */\n    this.urlBuilder_ = urlBuilder;\n    /** @private @const {!./analytics.SubscriptionAnalytics} */\n    this.analytics_ = analytics;\n    /** @private {?Promise} */\n    this.actionPromise_ = null;\n    /** @private {number} */\n    this.actionStartTime_ = 0;\n    /** @private @const {function(string):Promise<string>} */\n    this.openPopup_ = openLoginDialog.bind(null, ampdoc);\n\n    // Build all URLs.\n    this.build();\n  }\n\n  /**\n   * @return {?Promise<!Object<string, string>>}\n   */\n  build() {\n    if (Object.keys(this.actionsConfig_).length == 0) {\n      return null;\n    }\n    const promises = [];\n    for (const k in this.actionsConfig_) {\n      promises.push(this.urlBuilder_.buildUrl(\n          this.actionsConfig_[k], /* useAuthData */ true)\n          .then(url => {\n            this.builtActionUrlMap_[k] = url;\n          }));\n    }\n    return Promise.all(promises).then(() => {\n      return this.builtActionUrlMap_;\n    });\n  }\n\n  /**\n   * @param {string} action\n   * @return {!Promise<string>}\n   */\n  execute(action) {\n    user().assert(this.actionsConfig_[action],\n        'Action URL is not configured: %s', action);\n    // URL should always be available at this time.\n    const url = user().assert(this.builtActionUrlMap_[action],\n        'Action URL is not ready: %s', action);\n    return this.execute_(url, 'subscriptions-action-' + action);\n  }\n\n  /**\n   * @param {string} url\n   * @param {string} eventLabel\n   * @return {!Promise}\n   * @private\n   */\n  execute_(url, eventLabel) {\n    const now = Date.now();\n\n    // If action is pending, block a new one from starting for 1 second. After\n    // 1 second, however, the new action request will be allowed to proceed,\n    // given that we cannot always determine fully if the previous attempt is\n    // \"stuck\".\n    if (this.actionPromise_ && (now - this.actionStartTime_ < 1000)) {\n      return this.actionPromise_;\n    }\n\n    dev().fine(TAG, 'Start action: ', url, eventLabel);\n\n    this.analytics_.event(eventLabel + '-started');\n    const dialogPromise = this.openPopup_(url);\n    const actionPromise = dialogPromise.then(result => {\n      dev().fine(TAG, 'Action completed: ', eventLabel, result);\n      this.actionPromise_ = null;\n      const query = parseQueryString(result);\n      const s = query['success'];\n      const success = (s == 'true' || s == 'yes' || s == '1');\n      if (success) {\n        this.analytics_.event(eventLabel + '-success');\n      } else {\n        this.analytics_.event(eventLabel + '-rejected');\n      }\n      return (success || !s);\n    }).catch(reason => {\n      dev().fine(TAG, 'Action failed: ', eventLabel, reason);\n      this.analytics_.event(eventLabel + '-failed');\n      if (this.actionPromise_ == actionPromise) {\n        this.actionPromise_ = null;\n      }\n      throw reason;\n    });\n    this.actionPromise_ = actionPromise;\n    this.actionStartTime_ = now;\n    return this.actionPromise_;\n  }\n}\n","/**\n * Copyright 2018 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {CSS} from '../../../build/amp-subscriptions-0.1.css';\nimport {Dialog} from './dialog';\nimport {DocImpl} from './doc-impl';\nimport {Entitlement} from './entitlement';\nimport {LocalSubscriptionPlatform} from './local-subscription-platform';\nimport {PageConfig, PageConfigResolver} from '../../../third_party/subscriptions-project/config';\nimport {PlatformStore} from './platform-store';\nimport {Renderer} from './renderer';\nimport {ServiceAdapter} from './service-adapter';\nimport {Services} from '../../../src/services';\nimport {SubscriptionAnalytics, SubscriptionAnalyticsEvents} from './analytics';\nimport {SubscriptionPlatform} from './subscription-platform';\nimport {ViewerSubscriptionPlatform} from './viewer-subscription-platform';\nimport {ViewerTracker} from './viewer-tracker';\nimport {dev, user} from '../../../src/log';\nimport {getMode} from '../../../src/mode';\nimport {getValueForExpr} from '../../../src/json';\nimport {getWinOrigin} from '../../../src/url';\nimport {installStylesForDoc} from '../../../src/style-installer';\nimport {tryParseJson} from '../../../src/json';\n\n/** @const */\nconst TAG = 'amp-subscriptions';\n\n/** @const */\nconst SERVICE_TIMEOUT = 3000;\n\n\n/**\n * @implements {../../amp-access/0.1/access-vars.AccessVars}\n */\nexport class SubscriptionService {\n  /**\n   * @param {!../../../src/service/ampdoc-impl.AmpDoc} ampdoc\n   */\n  constructor(ampdoc) {\n    const configElement = ampdoc.getElementById(TAG);\n\n    /** @const @private */\n    this.ampdoc_ = ampdoc;\n\n    // Install styles.\n    installStylesForDoc(ampdoc, CSS, () => {}, false, TAG);\n\n    /** @private {?Promise} */\n    this.initialized_ = null;\n\n    /** @private @const {!Renderer} */\n    this.renderer_ = new Renderer(ampdoc);\n\n    /** @private {?PageConfig} */\n    this.pageConfig_ = null;\n\n    /** @private {?JsonObject} */\n    this.platformConfig_ = null;\n\n    /** @private {?PlatformStore} */\n    this.platformStore_ = null;\n\n    /** @const @private {!Element} */\n    this.configElement_ = user().assertElement(configElement);\n\n    /** @private {!SubscriptionAnalytics} */\n    this.subscriptionAnalytics_ =\n        new SubscriptionAnalytics(this.configElement_);\n\n    /** @private {!ServiceAdapter} */\n    this.serviceAdapter_ = new ServiceAdapter(this);\n\n    /** @private {!Dialog} */\n    this.dialog_ = new Dialog(ampdoc);\n\n    /** @private {!ViewerTracker} */\n    this.viewerTracker_ = new ViewerTracker(ampdoc);\n\n    /** @private @const {!../../../src/service/viewer-impl.Viewer} */\n    this.viewer_ = Services.viewerForDoc(ampdoc);\n\n    /** @private {?Promise} */\n    this.viewTrackerPromise_ = null;\n\n    /** @const @private {!../../../src/service/timer-impl.Timer} */\n    this.timer_ = Services.timerFor(ampdoc.win);\n\n    /** @private @const {boolean} */\n    this.doesViewerProvideAuth_ = this.viewer_.hasCapability('auth');\n\n    /** @private @const {!Promise<!../../../src/service/cid-impl.Cid>} */\n    this.cid_ = Services.cidForDoc(ampdoc);\n\n    /** @private {!Object<string, ?Promise<string>>} */\n    this.readerIdPromiseMap_ = {};\n  }\n\n  /**\n   * @return {!Promise}\n   * @private\n   */\n  initialize_() {\n    if (!this.initialized_) {\n      const doc = new DocImpl(this.ampdoc_);\n      const pageConfigResolver = new PageConfigResolver(doc);\n      this.initialized_ = Promise.all([\n        this.getPlatformConfig_(),\n        pageConfigResolver.resolveConfig(),\n      ]).then(promiseValues => {\n        /** @type {!JsonObject} */\n        this.platformConfig_ = promiseValues[0];\n        /** @type {!PageConfig} */\n        this.pageConfig_ = promiseValues[1];\n      });\n    }\n    return this.initialized_;\n  }\n\n  /**\n   * @param {!JsonObject} serviceConfig\n   * @private\n   */\n  initializeLocalPlatforms_(serviceConfig) {\n    if ((serviceConfig['serviceId'] || 'local') == 'local') {\n      this.platformStore_.resolvePlatform('local',\n          new LocalSubscriptionPlatform(\n              this.ampdoc_,\n              serviceConfig,\n              this.serviceAdapter_,\n              this.subscriptionAnalytics_\n          )\n      );\n    }\n  }\n\n  /**\n   * @private\n   * @return {!Promise<!JsonObject>}\n   */\n  getPlatformConfig_() {\n    return new Promise((resolve, reject) => {\n      const rawContent = tryParseJson(this.configElement_.textContent, e => {\n        reject('Failed to parse \"amp-subscriptions\" JSON: ' + e);\n      });\n      resolve(rawContent);\n    });\n  }\n\n  /**\n   * This method registers an auto initialized subcription platform with this\n   * service.\n   *\n   * @param {string} serviceId\n   * @param {function(!JsonObject, !ServiceAdapter):!SubscriptionPlatform} subscriptionPlatformFactory\n   */\n  registerPlatform(serviceId, subscriptionPlatformFactory) {\n    return this.initialize_().then(() => {\n      if (this.doesViewerProvideAuth_) {\n        return; // External platforms should not register if viewer provides auth\n      }\n      const matchedServices = this.platformConfig_['services'].filter(\n          service => (service.serviceId || 'local') === serviceId);\n\n      const matchedServiceConfig = user().assert(matchedServices[0],\n          'No matching services for the ID found');\n\n      const subscriptionPlatform = subscriptionPlatformFactory(\n          matchedServiceConfig,\n          this.serviceAdapter_);\n\n      this.platformStore_.resolvePlatform(subscriptionPlatform.getServiceId(),\n          subscriptionPlatform);\n      this.subscriptionAnalytics_.serviceEvent(\n          SubscriptionAnalyticsEvents.PLATFORM_REGISTERED,\n          subscriptionPlatform.getServiceId()\n      );\n      this.fetchEntitlements_(subscriptionPlatform);\n    });\n  }\n\n  /**\n   * @param {boolean} grantState\n   * @private\n   */\n  processGrantState_(grantState) {\n    this.renderer_.toggleLoading(false);\n    this.renderer_.setGrantState(grantState);\n    this.viewTrackerPromise_ = this.viewerTracker_.scheduleView(2000);\n    if (grantState === false) {\n      // TODO(@prateekbh): Show UI that no eligible entitlement found\n      return;\n    }\n  }\n\n  /**\n   * @param {string} serviceId\n   * @param {!./entitlement.Entitlement} entitlement\n   * @private\n   */\n  resolveEntitlementsToStore_(serviceId, entitlement) {\n    this.platformStore_.resolveEntitlement(serviceId, entitlement);\n    this.subscriptionAnalytics_.serviceEvent(\n        SubscriptionAnalyticsEvents.ENTITLEMENT_RESOLVED,\n        serviceId\n    );\n  }\n\n  /**\n   * @param {!SubscriptionPlatform} subscriptionPlatform\n   * @return {!Promise}\n   */\n  fetchEntitlements_(subscriptionPlatform) {\n    let timeout = SERVICE_TIMEOUT;\n    if (getMode().development || getMode().localDev) {\n      timeout = SERVICE_TIMEOUT * 2;\n    }\n    return this.viewer_.whenFirstVisible().then(() => {\n      return this.timer_.timeoutPromise(\n          timeout,\n          subscriptionPlatform.getEntitlements()\n      ).then(entitlement => {\n        entitlement = entitlement || Entitlement.empty(\n            subscriptionPlatform.getServiceId());\n        this.resolveEntitlementsToStore_(subscriptionPlatform.getServiceId(),\n            entitlement);\n        return entitlement;\n      }).catch(reason => {\n        const serviceId = subscriptionPlatform.getServiceId();\n        this.platformStore_.reportPlatformFailure(serviceId);\n        throw user().createError(\n            `fetch entitlements failed for ${serviceId}`, reason\n        );\n      });\n    });\n  }\n\n  /**\n   * Starts the amp-subscription Service\n   * @return {SubscriptionService}\n   */\n  start() {\n    this.initialize_().then(() => {\n      this.subscriptionAnalytics_.event(SubscriptionAnalyticsEvents.STARTED);\n      this.renderer_.toggleLoading(true);\n\n      user().assert(this.pageConfig_, 'Page config is null');\n\n      if (this.doesViewerProvideAuth_) {\n        this.delegateAuthToViewer_();\n        this.startAuthorizationFlow_(false);\n        return;\n      } else if (this.platformConfig_['alwaysGrant']) {\n        // If service config has `alwaysGrant` key as true, publisher wants it\n        // to be open always until a sviewer decides otherwise.\n        this.processGrantState_(true);\n        return;\n      }\n\n      user().assert(this.platformConfig_['services'],\n          'Services not configured in service config');\n\n      const serviceIds = this.platformConfig_['services'].map(service =>\n        service['serviceId'] || 'local');\n\n      this.initializePlatformStore_(serviceIds);\n\n      this.platformConfig_['services'].forEach(service => {\n        this.initializeLocalPlatforms_(service);\n      });\n\n      this.platformStore_.getAvailablePlatforms().forEach(\n          subscriptionPlatform => {\n            this.fetchEntitlements_(subscriptionPlatform);\n          }\n      );\n      this.startAuthorizationFlow_();\n\n    });\n    return this;\n  }\n\n  /**\n   * Initializes the PlatformStore with the service ids.\n   * @param {!Array<string>} serviceIds\n   */\n  initializePlatformStore_(serviceIds) {\n    const fallbackEntitlement = this.platformConfig_['fallbackEntitlement'] ?\n      Entitlement.parseFromJson(this.platformConfig_['fallbackEntitlement']) :\n      Entitlement.empty('local');\n    this.platformStore_ = new PlatformStore(serviceIds,\n        this.platformConfig_['score'],\n        fallbackEntitlement);\n  }\n\n  /**\n   * Delegates authentication to viewer\n   */\n  delegateAuthToViewer_() {\n    const serviceIds = ['local'];\n    const origin = getWinOrigin(this.ampdoc_.win);\n    this.initializePlatformStore_(serviceIds);\n\n    this.platformConfig_['services'].forEach(service => {\n      if ((service['serviceId'] || 'local') == 'local') {\n        const viewerPlatform = new ViewerSubscriptionPlatform(\n            this.ampdoc_,\n            service,\n            this.serviceAdapter_,\n            origin,\n            this.subscriptionAnalytics_\n        );\n        this.platformStore_.resolvePlatform('local', viewerPlatform);\n        viewerPlatform.getEntitlements().then(entitlement => {\n          dev().assert(entitlement, 'Entitlement is null');\n          // Viewer authorization is redirected to use local platform instead.\n          this.platformStore_.resolveEntitlement('local',\n              /** @type {!./entitlement.Entitlement}*/ (entitlement));\n        });\n      }\n    });\n  }\n\n  /**\n   * @param {string} serviceId\n   * @return {!Promise<string>}\n   */\n  getReaderId(serviceId) {\n    let readerId = this.readerIdPromiseMap_[serviceId];\n    if (!readerId) {\n      const consent = Promise.resolve();\n      // Scope is kept \"amp-access\" by default to avoid unnecessary CID\n      // rotation.\n      const scope =\n          'amp-access' + (serviceId == 'local' ? '' : '-' + serviceId);\n      readerId = this.cid_.then(cid => {\n        return cid.get(\n            {scope, createCookieIfNotPresent: true},\n            consent);\n      });\n      this.readerIdPromiseMap_[serviceId] = readerId;\n    }\n    return readerId;\n  }\n\n  /**\n   * Returns the singleton Dialog instance\n   * @return {!Dialog}\n   */\n  getDialog() {\n    return this.dialog_;\n  }\n\n  /**\n   * Unblock document based on grant state and selected platform\n   * @param {boolean=} doPlatformSelection\n   * @private\n   */\n  startAuthorizationFlow_(doPlatformSelection = true) {\n    this.platformStore_.getGrantStatus().then(grantState => {\n      this.processGrantState_(grantState);\n      this.performPingback_();\n    });\n\n    if (doPlatformSelection) {\n      this.selectAndActivatePlatform_();\n    }\n  }\n\n  /** @private */\n  selectAndActivatePlatform_() {\n    const requireValuesPromise = Promise.all([\n      this.platformStore_.getGrantStatus(),\n      this.platformStore_.selectPlatform(),\n    ]);\n\n    return requireValuesPromise.then(resolvedValues => {\n      const selectedPlatform = resolvedValues[1];\n      const selectedEntitlement = this.platformStore_.getResolvedEntitlementFor(\n          selectedPlatform.getServiceId());\n\n      selectedPlatform.activate(selectedEntitlement);\n      this.subscriptionAnalytics_.serviceEvent(\n          SubscriptionAnalyticsEvents.PLATFORM_ACTIVATED,\n          selectedPlatform.getServiceId());\n      if (selectedEntitlement.granted) {\n        this.subscriptionAnalytics_.serviceEvent(\n            SubscriptionAnalyticsEvents.ACCESS_GRANTED,\n            selectedPlatform.getServiceId());\n      } else {\n        this.subscriptionAnalytics_.serviceEvent(\n            SubscriptionAnalyticsEvents.PAYWALL_ACTIVATED,\n            selectedPlatform.getServiceId());\n        this.subscriptionAnalytics_.serviceEvent(\n            SubscriptionAnalyticsEvents.ACCESS_DENIED,\n            selectedPlatform.getServiceId());\n      }\n    });\n  }\n\n  /**\n   * Performs pingback on local platform.\n   * @return {?Promise}\n   * @private\n   */\n  performPingback_() {\n    if (this.viewTrackerPromise_) {\n      return this.viewTrackerPromise_.then(() => {\n        return this.platformStore_.getGrantEntitlement();\n      }).then(grantStateEntitlement => {\n        const localPlatform = this.platformStore_.getLocalPlatform();\n        if (localPlatform.isPingbackEnabled()) {\n          localPlatform.pingback(grantStateEntitlement\n              || Entitlement.empty('local'));\n        }\n      });\n    }\n    return null;\n  }\n\n  /**\n   * Returns Page config\n   * @return {!PageConfig}\n   */\n  getPageConfig() {\n    const pageConfig = dev().assert(this.pageConfig_,\n        'Page config is not yet fetched');\n    return /** @type {!PageConfig} */(pageConfig);\n  }\n\n  /**\n   * Re authorizes a platform\n   * @param {!SubscriptionPlatform} subscriptionPlatform\n   * @return {!Promise}\n   */\n  reAuthorizePlatform(subscriptionPlatform) {\n    this.platformStore_.resetEntitlementFor(\n        subscriptionPlatform.getServiceId());\n    return this.fetchEntitlements_(subscriptionPlatform).then(() => {\n      this.subscriptionAnalytics_.serviceEvent(\n          SubscriptionAnalyticsEvents.PLATFORM_REAUTHORIZED,\n          subscriptionPlatform.getServiceId()\n      );\n      this.platformStore_.reset();\n      this.startAuthorizationFlow_();\n    });\n  }\n\n  /**\n   * Delegates an action to local platform.\n   * @param {string} action\n   * @return {!Promise<boolean>}\n   */\n  delegateActionToLocal(action) {\n    return this.delegateActionToService(action, 'local');\n  }\n\n  /**\n   * Delegates an action to specified platform.\n   * @param {string} action\n   * @param {string} serviceId\n   * @return {!Promise<boolean>}\n   */\n  delegateActionToService(action, serviceId) {\n    return new Promise(resolve => {\n      this.platformStore_.onPlatformResolves(serviceId, platform => {\n        dev().assert(platform, 'Platform is not registered');\n        this.subscriptionAnalytics_.event(\n            SubscriptionAnalyticsEvents.ACTION_DELEGATED,\n            {\n              action,\n              serviceId,\n            }\n        );\n        resolve(platform.executeAction(action));\n      });\n    });\n  }\n\n  /**\n   * Delegate UI decoration to another service.\n   * @param {!Element} element\n   * @param {string} serviceId\n   * @param {string} action\n   * @param {?JsonObject} options\n   */\n  decorateServiceAction(element, serviceId, action, options) {\n    this.platformStore_.onPlatformResolves(serviceId, platform => {\n      dev().assert(platform, 'Platform is not registered');\n      platform.decorateUI(element, action, options);\n    });\n  }\n\n  /**\n   * Evaluates platforms and select the one to be selected for login.\n   * @return {!./subscription-platform.SubscriptionPlatform}\n   */\n  selectPlatformForLogin() {\n    return this.platformStore_.selectPlatformForLogin();\n  }\n\n  /** @override from AccessVars */\n  getAccessReaderId() {\n    return this.initialize_().then(() => this.getReaderId('local'));\n  }\n\n  /** @override from AccessVars */\n  getAuthdataField(field) {\n    return this.initialize_().then(() => {\n      return this.platformStore_.getEntitlementPromiseFor('local');\n    }).then(entitlement => {\n      return getValueForExpr(entitlement.json(), field);\n    });\n  }\n}\n\n\n/** @package @VisibleForTesting */\nexport function getPlatformClassForTesting() {\n  return SubscriptionPlatform;\n}\n\n/**\n * TODO(dvoytenko): remove once compiler type checking is fixed for third_party.\n * @package @VisibleForTesting\n */\nexport function getPageConfigClassForTesting() {\n  return PageConfig;\n}\n\n\n// Register the extension services.\nAMP.extension(TAG, '0.1', function(AMP) {\n  AMP.registerServiceForDoc('subscriptions', function(ampdoc) {\n    return new SubscriptionService(ampdoc).start();\n  });\n});\n","/**\n * Copyright 2018 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {triggerAnalyticsEvent} from '../../../src/analytics';\n\nexport const SubscriptionAnalyticsEvents = {\n  PLATFORM_ACTIVATED: 'subscriptions-platform-activated',\n  PAYWALL_ACTIVATED: 'subscriptions-paywall-activated',\n  PLATFORM_REGISTERED: 'subscriptions-platform-registered',\n  PLATFORM_REAUTHORIZED: 'subscriptions-platform-re-authorized',\n  ACTION_DELEGATED: 'subscriptions-action-delegated',\n  ENTITLEMENT_RESOLVED: 'subscriptions-entitlement-resolved',\n  STARTED: 'subscriptions-started',\n  ACCESS_GRANTED: 'subscriptions-access-granted',\n  ACCESS_DENIED: 'subscriptions-access-denied',\n};\n\nexport class SubscriptionAnalytics {\n\n  /**\n   * Creates an instance of SubscriptionAnalytics.\n   * @param {!Element} element\n   */\n  constructor(element) {\n    this.element_ = element;\n  }\n\n  /**\n   *\n   * @param {string} eventType\n   * @param {string} serviceId\n   * @param {Object<string, string>=} opt_vars\n   */\n  serviceEvent(eventType, serviceId, opt_vars) {\n    this.event(eventType, Object.assign({\n      serviceId,\n    }, opt_vars));\n  }\n\n  /**\n   *\n   * @param {string} eventType\n   * @param {Object<string, string>=} opt_vars\n   */\n  event(eventType, opt_vars) {\n    triggerAnalyticsEvent(this.element_, eventType, opt_vars || {});\n  }\n}\n","/**\n * Copyright 2018 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Services} from '../../../src/services';\nimport {createElementWithAttributes} from '../../../src/dom';\nimport {setImportantStyles, toggle} from '../../../src/style';\n\n\nexport class Dialog {\n  /**\n   * @param {!../../../src/service/ampdoc-impl.AmpDoc} ampdoc\n   */\n  constructor(ampdoc) {\n    /** @private @const {!../../../src/service/ampdoc-impl.AmpDoc} */\n    this.ampdoc_ = ampdoc;\n\n    /** @private @const {!../../../src/service/vsync-impl.Vsync} */\n    this.vsync_ = Services.vsyncFor(ampdoc.win);\n\n    /** @private @const {!../../../src/service/timer-impl.Timer} */\n    this.timer_ = Services.timerFor(ampdoc.win);\n\n    /**\n     * @private @const {!../../../src/service/viewport/viewport-impl.Viewport}\n     */\n    this.viewport_ = Services.viewportForDoc(ampdoc);\n\n    /** @private {boolean} */\n    this.visible_ = false;\n\n    /** @private {?Element} */\n    this.content_ = null;\n\n    const doc = this.ampdoc_.win.document;\n\n    this.wrapper_ = createElementWithAttributes(\n        doc,\n        'amp-subscriptions-dialog', /** @type {!JsonObject} */ ({\n          'role': 'dialog',\n        }));\n\n    /** @private @const {!Element} */\n    this.closeButton_ = createElementWithAttributes(\n        doc,\n        'button', /** @type {!JsonObject} */ ({\n          'class': 'i-amphtml-subs-dialog-close-button',\n        }));\n    this.showCloseAction(false);\n    this.wrapper_.appendChild(this.closeButton_);\n    this.closeButton_.addEventListener('click', () => {\n      this.close();\n    });\n\n    // Start hidden.\n    this.ampdoc_.getBody().appendChild(this.wrapper_);\n    setImportantStyles(this.wrapper_, {\n      display: 'none',\n      transform: 'translateY(100%)',\n    });\n  }\n\n  /**\n   * @return {!Element}\n   */\n  getRoot() {\n    return this.wrapper_;\n  }\n\n  /**\n   * @return {boolean}\n   */\n  isVisible() {\n    return this.visible_;\n  }\n\n  /**\n   * Opens the dialog with the specified content.\n   * @param {!Element} content\n   * @param {boolean=} showCloseAction\n   * @return {!Promise}\n   */\n  open(content, showCloseAction = true) {\n    if (this.content_) {\n      this.wrapper_.replaceChild(content, this.content_);\n    } else {\n      this.wrapper_.appendChild(content);\n    }\n    this.content_ = content;\n    if (this.visible_) {\n      return Promise.resolve();\n    }\n    this.visible_ = true;\n    return this.vsync_.mutatePromise(() => {\n      setImportantStyles(this.wrapper_, {\n        display: 'block',\n      });\n      this.showCloseAction(/** @type {boolean} */ (showCloseAction));\n    }).then(() => {\n      // Animate to display.\n      return this.vsync_.mutatePromise(() => {\n        setImportantStyles(this.wrapper_, {\n          transform: 'translateY(0)',\n        });\n        return this.timer_.promise(300);\n      });\n    }).then(() => {\n      // Update page layout.\n      let offsetHeight;\n      return this.vsync_.runPromise({\n        measure: () => {\n          offsetHeight = this.wrapper_./*OK*/offsetHeight;\n        },\n        mutate: () => {\n          this.viewport_.updatePaddingBottom(offsetHeight);\n        },\n      });\n    });\n  }\n\n  /**\n   * Closes the dialog.\n   * @return {!Promise}\n   */\n  close() {\n    if (!this.visible_) {\n      return Promise.resolve();\n    }\n    return this.vsync_.mutatePromise(() => {\n      setImportantStyles(this.wrapper_, {\n        transform: 'translateY(100%)',\n      });\n      return this.timer_.promise(300);\n    }).then(() => {\n      return this.vsync_.mutatePromise(() => {\n        setImportantStyles(this.wrapper_, {\n          display: 'none',\n        });\n        this.viewport_.updatePaddingBottom(0);\n        this.visible_ = false;\n      });\n    });\n  }\n\n  /**\n   * Renders or hides the \"Close\" action button. For some flows, this button\n   * should be hidden.\n   * @param {boolean} show\n   */\n  showCloseAction(show) {\n    toggle(this.closeButton_, show);\n  }\n}\n","/**\n * Copyright 2018 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Doc} from '../../../third_party/subscriptions-project/config';\nimport {dev} from '../../../src/log';\n\n\n/**\n * Adopts config document to ampdoc.\n * @implements {Doc}\n */\nexport class DocImpl {\n\n  /**\n   * @param {!../../../src/service/ampdoc-impl.AmpDoc} ampdoc\n   */\n  constructor(ampdoc) {\n    /** @private @const {!../../../src/service/ampdoc-impl.AmpDoc} */\n    this.ampdoc_ = ampdoc;\n  }\n\n  /** @override */\n  getWin() {\n    return this.ampdoc_.win;\n  }\n\n  /** @override */\n  getRootNode() {\n    return this.ampdoc_.getRootNode();\n  }\n\n  /** @override */\n  getRootElement() {\n    const root = this.ampdoc_.getRootNode();\n    return dev().assertElement(root.documentElement || root.body || root);\n  }\n\n  /** @override */\n  getHead() {\n    return dev().assertElement(this.ampdoc_.getHeadNode());\n  }\n\n  /** @override */\n  getBody() {\n    return this.ampdoc_.isBodyAvailable() ? this.ampdoc_.getBody() : null;\n  }\n\n  /** @override */\n  isReady() {\n    return this.ampdoc_.isReady();\n  }\n\n  /** @override */\n  whenReady() {\n    return this.ampdoc_.whenReady();\n  }\n}\n\n\n/** @package Visible for testing only. */\nexport function getDocClassForTesting() {\n  return Doc;\n}\n","/**\n * Copyright 2018 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport {dict} from '../../../src/utils/object';\n\n/** @enum {string} */\nexport const GrantReason = {\n  'SUBSCRIBER': 'SUBSCRIBER',\n  'METERING': 'METERING',\n};\n\n/**\n * The single entitlement object.\n */\nexport class Entitlement {\n\n  /**\n   * @param {string} service\n   * @return {!Entitlement}\n   */\n  static empty(service) {\n    return new Entitlement({\n      source: '',\n      raw: '',\n      service,\n      granted: false,\n    });\n  }\n\n  /**\n   * @param {Object} input\n   * @param {string} [input.source]\n   * @param {string} [input.raw]\n   * @param {string} [input.service]\n   * @param {boolean} [input.granted]\n   * @param {?GrantReason} [input.grantReason]\n   * @param {?JsonObject} [input.dataObject]\n   */\n  constructor({source, raw = '', service, granted = false,\n    grantReason = '', dataObject}) {\n    /** @const {string} */\n    this.raw = raw;\n    /** @const {string} */\n    this.source = source;\n    /** {string} */\n    this.service = service;\n    /** @const {boolean} */\n    this.granted = granted;\n    /** @const {?string} */\n    this.grantReason = grantReason;\n    /** @const {?JsonObject} */\n    this.data = dataObject;\n  }\n\n  /**\n   * Returns json format of entitlements\n   * @return {!JsonObject}\n   */\n  json() {\n    const entitlementJson = dict({\n      'source': this.source,\n      'service': this.service,\n      'granted': this.granted,\n      'grantReason': this.grantReason,\n      'data': this.data,\n    });\n    return (entitlementJson);\n  }\n\n  /**\n   * Returns json to be used for pingback.\n   *\n   * @return {!JsonObject}\n   */\n  jsonForPingback() {\n    return /** @type {!JsonObject} */ (Object.assign({},\n        {'raw': this.raw},\n        this.json()));\n  }\n\n  /**\n   * @param {?JsonObject} json\n   * @param {?string} rawData\n   * @return {!Entitlement}\n   */\n  static parseFromJson(json, rawData = null) {\n    if (!json) {\n      json = dict();\n    }\n    const raw = rawData || JSON.stringify(json);\n    const source = json['source'] || '';\n    const granted = json['granted'] || false;\n    const grantReason = json['grantReason'];\n    const dataObject = json['data'] || null;\n    return new Entitlement({source, raw, service: '',\n      granted, grantReason, dataObject});\n  }\n\n  /**\n   * Returns if the user is a subscriber.\n   * @return {boolean}\n   */\n  isSubscriber() {\n    return this.granted && this.grantReason === GrantReason.SUBSCRIBER;\n  }\n}\n","/**\n * Copyright 2018 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {evaluateAccessExpr} from '../../amp-access/0.1/access-expr';\n\n\n/**\n * @param {string} expr\n * @param {!JsonObject} data\n * @return {boolean}\n */\nexport function evaluateExpr(expr, data) {\n  return evaluateAccessExpr(expr, data);\n}\n","/**\n * Copyright 2018 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Entitlement} from './entitlement';\nimport {Services} from '../../../src/services';\nimport {evaluateExpr} from './expr';\n\n/**\n * This implements the rendering methods for local platform.\n *\n */\nexport class LocalSubscriptionPlatformRenderer {\n\n  /**\n   * @param {!../../../src/service/ampdoc-impl.AmpDoc} ampdoc\n   * @param {!./dialog.Dialog} dialog\n   * @param {!./service-adapter.ServiceAdapter} serviceAdapter\n   */\n  constructor(ampdoc, dialog, serviceAdapter) {\n    /** @private @const */\n    this.ampdoc_ = ampdoc;\n\n    /** @private @const */\n    this.rootNode_ = ampdoc.getRootNode();\n\n    /** @private @const {!./dialog.Dialog} */\n    this.dialog_ = dialog;\n\n    /** @private @const {!../../../src/service/template-impl.Templates} */\n    this.templates_ = Services.templatesFor(ampdoc.win);\n\n    /** @private @const {!./service-adapter.ServiceAdapter} */\n    this.serviceAdapter_ = serviceAdapter;\n  }\n\n  /**\n   *\n   * @param {!JsonObject} renderState\n   */\n  render(renderState) {\n    return Promise.all([\n      this.renderActions_(renderState),\n      this.renderDialog_(/** @type {!JsonObject} */(renderState)),\n    ]);\n  }\n\n  /**\n   * @param {!JsonObject} renderState\n   */\n  renderActions_(renderState) {\n    this.renderActionsInNode_(renderState, this.rootNode_);\n  }\n\n  /**\n   * @param {!JsonObject} authResponse\n   * @return {!Promise<boolean>}\n   */\n  renderDialog_(authResponse) {\n    // Make sure the document is fully parsed.\n    return this.ampdoc_.whenReady().then(() => {\n      // Find the first matching dialog.\n      const candidates = this.ampdoc_.getRootNode()\n          .querySelectorAll('[subscriptions-dialog][subscriptions-display]');\n      for (let i = 0; i < candidates.length; i++) {\n        const candidate = candidates[i];\n        const expr = candidate.getAttribute('subscriptions-display');\n        if (expr && evaluateExpr(expr, authResponse)) {\n          return candidate;\n        }\n      }\n    }).then(candidate => {\n      if (!candidate) {\n        return;\n      }\n      if (candidate.tagName == 'TEMPLATE') {\n        return this.templates_.renderTemplate(candidate, authResponse)\n            .then(element => {\n              const renderState =\n                /** @type {!JsonObject} */(authResponse);\n              return this.renderActionsInNode_(\n                  renderState,\n                  element);\n            });\n      }\n      const clone = candidate.cloneNode(true);\n      clone.removeAttribute('subscriptions-dialog');\n      clone.removeAttribute('subscriptions-display');\n      return clone;\n    }).then(element => {\n      if (!element) {\n        return;\n      }\n      return this.dialog_.open(element, /* showCloseButton */ true);\n    });\n  }\n\n  /**\n   * Renders actions inside a given node according to an authResponse\n   * @param {!JsonObject} renderState\n   * @param {!Node} rootNode\n   * @return {!Promise<Node>}\n   * @private\n   */\n  renderActionsInNode_(renderState, rootNode) {\n    return this.ampdoc_.whenReady().then(() => {\n      // Find the matching actions and sections and make them visible if\n      // evalutes to true.\n      const querySelectors =\n          '[subscriptions-action], [subscriptions-section=\"actions\"],'\n              + ' [subscriptions-actions]';\n      const actionCandidates = rootNode.querySelectorAll(querySelectors);\n      for (let i = 0; i < actionCandidates.length; i++) {\n        const candidate = actionCandidates[i];\n        const expr = candidate.getAttribute('subscriptions-display');\n        if (expr && evaluateExpr(expr,\n            /** @type {!JsonObject} */(renderState))) {\n          candidate.classList.add('i-amphtml-subs-display');\n          if (candidate.getAttribute('subscriptions-service')\n            && candidate.getAttribute('subscriptions-action')\n            && candidate.getAttribute('subscriptions-decorate') !== 'false') {\n            this.serviceAdapter_.decorateServiceAction(\n                candidate,\n                candidate.getAttribute('subscriptions-service'),\n                candidate.getAttribute('subscriptions-action'),\n                null\n            );\n          }\n        } else {\n          candidate.classList.remove('i-amphtml-subs-display');\n        }\n      }\n      return rootNode;\n    });\n  }\n}\n\n/**\n * TODO(dvoytenko): remove once compiler type checking is fixed for third_party.\n * @package @VisibleForTesting\n */\nexport function getEntitlementClassForTesting() {\n  return Entitlement;\n}\n","/**\n * Copyright 2018 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Actions} from './actions';\nimport {Entitlement} from './entitlement';\nimport {LocalSubscriptionPlatformRenderer} from './local-subscription-platform-renderer';\nimport {PageConfig} from '../../../third_party/subscriptions-project/config';\nimport {Services} from '../../../src/services';\nimport {UrlBuilder} from './url-builder';\nimport {assertHttpsUrl} from '../../../src/url';\nimport {closestBySelector} from '../../../src/dom';\nimport {dev, user} from '../../../src/log';\nimport {dict} from '../../../src/utils/object';\n\n\n/**\n * This implements the methods to interact with various subscription platforms.\n *\n * @implements {./subscription-platform.SubscriptionPlatform}\n */\nexport class LocalSubscriptionPlatform {\n\n  /**\n   * @param {!../../../src/service/ampdoc-impl.AmpDoc} ampdoc\n   * @param {!JsonObject} platformConfig\n   * @param {!./service-adapter.ServiceAdapter} serviceAdapter\n   * @param {!./analytics.SubscriptionAnalytics} subscriptionAnalytics\n   */\n  constructor(ampdoc, platformConfig, serviceAdapter, subscriptionAnalytics) {\n    /** @const */\n    this.ampdoc_ = ampdoc;\n\n    /** @private @const */\n    this.rootNode_ = ampdoc.getRootNode();\n\n    /** @const @private {!JsonObject} */\n    this.serviceConfig_ = platformConfig;\n\n    /** @private @const {!./service-adapter.ServiceAdapter} */\n    this.serviceAdapter_ = serviceAdapter;\n\n    /** @const @private {!../../../src/service/xhr-impl.Xhr} */\n    this.xhr_ = Services.xhrFor(this.ampdoc_.win);\n\n    /** @private @const {string} */\n    this.authorizationUrl_ = assertHttpsUrl(\n        user().assert(\n            this.serviceConfig_['authorizationUrl'],\n            'Service config does not have authorization Url'\n        ),\n        'Authorization Url'\n    );\n\n    /** @private {!UrlBuilder} */\n    this.urlBuilder_ = new UrlBuilder(\n        this.ampdoc_,\n        this.serviceAdapter_.getReaderId('local'));\n\n    /** @private {!./analytics.SubscriptionAnalytics} */\n    this.subscriptionAnalytics_ = subscriptionAnalytics;\n\n    user().assert(this.serviceConfig_['actions'],\n        'Actions have not been defined in the service config');\n\n    /** @private {!Actions} */\n    this.actions_ = new Actions(\n        this.ampdoc_, this.urlBuilder_,\n        this.subscriptionAnalytics_,\n        this.validateActionMap(this.serviceConfig_['actions'])\n    );\n\n    /** @private {!LocalSubscriptionPlatformRenderer}*/\n    this.renderer_ = new LocalSubscriptionPlatformRenderer(this.ampdoc_,\n        serviceAdapter.getDialog(), this.serviceAdapter_);\n\n    /** @private @const {?string} */\n    this.pingbackUrl_ = this.serviceConfig_['pingbackUrl'] || null;\n\n    this.initializeListeners_();\n  }\n\n  /**\n   * @override\n   */\n  getServiceId() {\n    return 'local';\n  }\n\n  /**\n   * Validates the action map\n   * @param {!JsonObject<string, string>} actionMap\n   * @return {!JsonObject<string, string>}\n   */\n  validateActionMap(actionMap) {\n    user().assert(actionMap['login'],\n        'Action \"login\" is not present in action map');\n    user().assert(actionMap['subscribe'],\n        'Action \"subscribe\" is not present in action map');\n    return actionMap;\n  }\n\n  /**\n   * Add event listener for the subscriptions action\n   * @private\n   */\n  initializeListeners_() {\n    this.rootNode_.addEventListener('click', e => {\n      const element = closestBySelector(dev().assertElement(e.target),\n          '[subscriptions-action]');\n      this.handleClick_(element);\n    });\n  }\n\n  /**\n   * Handle click on subscription-action\n   * @private\n   * @param {Node} element\n   */\n  handleClick_(element) {\n    if (element) {\n      const action = element.getAttribute('subscriptions-action');\n      const serviceAttr = element.getAttribute('subscriptions-service');\n      if (serviceAttr == 'local') {\n        this.executeAction(action);\n      } else if ((serviceAttr || 'auto') == 'auto') {\n        if (action == 'login') {\n          // The \"login\" action is somewhat special b/c viewers can\n          // enhance this action, e.g. to provide save/link feature.\n          const platform = this.serviceAdapter_.selectPlatformForLogin();\n          this.serviceAdapter_.delegateActionToService(\n              action, platform.getServiceId());\n        } else {\n          this.executeAction(action);\n        }\n      } else if (serviceAttr) {\n        this.serviceAdapter_.delegateActionToService(action, serviceAttr);\n      }\n    }\n  }\n\n  /** @override */\n  activate(entitlement) {\n    const renderState = entitlement.json();\n    this.urlBuilder_.setAuthResponse(renderState);\n    this.actions_.build().then(() => {\n      this.renderer_.render(renderState);\n    });\n  }\n\n  /** @override */\n  executeAction(action) {\n    const actionExecution = this.actions_.execute(action);\n    return actionExecution.then(result => {\n      if (result) {\n        this.serviceAdapter_.reAuthorizePlatform(this);\n      }\n      return !!result;\n    });\n  }\n\n  /** @override */\n  getEntitlements() {\n    return this.urlBuilder_.buildUrl(this.authorizationUrl_,\n        /* useAuthData */ false)\n        .then(fetchUrl =>\n          this.xhr_.fetchJson(fetchUrl, {credentials: 'include'})\n              .then(res => res.json())\n              .then(resJson => {\n                return Entitlement.parseFromJson(resJson);\n              }));\n  }\n\n  /** @override */\n  isPingbackEnabled() {\n    return !!this.pingbackUrl_;\n  }\n\n  /** @override */\n  pingback(selectedEntitlement) {\n    if (!this.isPingbackEnabled) {\n      return;\n    }\n    const pingbackUrl = /** @type {string} */ (dev().assert(this.pingbackUrl_,\n        'pingbackUrl is null'));\n\n    const promise = this.urlBuilder_.buildUrl(pingbackUrl,\n        /* useAuthData */ true);\n    return promise.then(url => {\n      return this.xhr_.sendSignal(url, {\n        method: 'POST',\n        credentials: 'include',\n        headers: dict({\n          'Content-Type': 'text/plain',\n        }),\n        body: JSON.stringify(selectedEntitlement.jsonForPingback()),\n      });\n    });\n  }\n\n  /** @override */\n  supportsCurrentViewer() {\n    return false;\n  }\n\n  /** @override */\n  getBaseScore() {\n    return this.serviceConfig_['baseScore'] || 0;\n  }\n\n  /** @override */\n  decorateUI(unusedNode, unusedAction, unusedOptions) {}\n}\n\n/**\n * TODO(dvoytenko): remove once compiler type checking is fixed for third_party.\n * @package @VisibleForTesting\n */\nexport function getPageConfigClassForTesting() {\n  return PageConfig;\n}\n","/**\n * Copyright 2018 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Deferred} from '../../../src/utils/promise';\nimport {Entitlement} from './entitlement';\nimport {Observable} from '../../../src/observable';\nimport {dev, user} from '../../../src/log';\nimport {dict, hasOwn} from '../../../src/utils/object';\n\n\n/** @typedef {{serviceId: string, entitlement: (!./entitlement.Entitlement|undefined)}} */\nexport let EntitlementChangeEventDef;\n\n/** @const */\nconst TAG = 'amp-subscriptions';\n\nexport class PlatformStore {\n  /**\n   * @param {!Array<string>} expectedServiceIds\n   * @param {!JsonObject} scoreConfig\n   * @param {!./entitlement.Entitlement} fallbackEntitlement\n   */\n  constructor(expectedServiceIds, scoreConfig, fallbackEntitlement) {\n\n    /** @private @const {!Object<string, !./subscription-platform.SubscriptionPlatform>} */\n    this.subscriptionPlatforms_ = dict();\n\n    /** @private @const {!Array<string>} */\n    this.serviceIds_ = expectedServiceIds;\n\n    /** @private @const {!Object<string, !./entitlement.Entitlement>} */\n    this.entitlements_ = {};\n\n    /**\n     * @private @const\n     * {!Object<string, !Deferred<!./entitlement.Entitlement>>}\n     */\n    this.entitlementDeferredMap_ = {};\n    expectedServiceIds.forEach(serviceId => {\n      this.entitlementDeferredMap_[serviceId] = new Deferred();\n    });\n\n    /** @private @const {!Observable<!EntitlementChangeEventDef>} */\n    this.onEntitlementResolvedCallbacks_ = new Observable();\n\n    /** @private @const {!Observable<{serviceId: string}>} */\n    this.onPlatformResolvedCallbacks_ = new Observable();\n\n    /** @private {?Deferred} */\n    this.grantStatusPromise_ = null;\n\n    /** @private @const {!Observable} */\n    this.onGrantStateResolvedCallbacks_ = new Observable();\n\n    /** @private {?Entitlement} */\n    this.grantStatusEntitlement_ = null;\n\n    /** @private {?Deferred<?Entitlement>} */\n    this.grantStatusEntitlementPromise_ = null;\n\n    /** @private {?Deferred<!Array<!./entitlement.Entitlement>>} */\n    this.allResolvedPromise_ = null;\n\n    /** @private {!Array<string>} */\n    this.failedPlatforms_ = [];\n\n    /** @private @canst {!./entitlement.Entitlement} */\n    this.fallbackEntitlement_ = fallbackEntitlement;\n\n    /** @private @const {!Object<string, number>} */\n    this.scoreConfig_ = Object.assign({\n      'supportsViewer': 10,\n    }, scoreConfig);\n  }\n\n  /**\n   * Resolves a platform in the store\n   * @param {string} serviceId\n   * @param {!./subscription-platform.SubscriptionPlatform} platform\n   */\n  resolvePlatform(serviceId, platform) {\n    this.subscriptionPlatforms_[serviceId] = platform;\n    this.onPlatformResolvedCallbacks_.fire({\n      serviceId,\n    });\n  }\n\n  /**\n   *Calls a callback for when a platform is resolved.\n   * @param {string} serviceId\n   * @param {!Function} callback\n   */\n  onPlatformResolves(serviceId, callback) {\n    const platform = this.subscriptionPlatforms_[serviceId];\n    if (platform) {\n      callback(platform);\n    } else {\n      this.onPlatformResolvedCallbacks_.add(e => {\n        if (e.serviceId === serviceId) {\n          callback(this.getPlatform(serviceId));\n        }\n      });\n    }\n  }\n\n  /**\n   * Returns the platform for the given id\n   * @param {string} serviceId\n   * @return {!./subscription-platform.SubscriptionPlatform}\n   */\n  getPlatform(serviceId) {\n    const platform = this.subscriptionPlatforms_[serviceId];\n    dev().assert(platform, `Platform for id ${serviceId} is not resolved`);\n    return platform;\n  }\n\n  /**\n   * Returns the local platform;\n   * @return {!./local-subscription-platform.LocalSubscriptionPlatform}\n   */\n  getLocalPlatform() {\n    const localPlatform =\n        /** @type{!./local-subscription-platform.LocalSubscriptionPlatform} */\n        (this.getPlatform('local'));\n    return localPlatform;\n  }\n\n  /**\n   * Returns all available platforms.\n   *\n   * @return {!Array<!./subscription-platform.SubscriptionPlatform>}\n   */\n  getAvailablePlatforms() {\n    const platforms = [];\n    for (const platformKey in this.subscriptionPlatforms_) {\n      const subscriptionPlatform =\n        this.subscriptionPlatforms_[platformKey];\n      platforms.push(subscriptionPlatform);\n    }\n    return platforms;\n  }\n\n  /**\n   * This registers a callback which is called whenever a service id is resolved\n   * with an entitlement.\n   * @param {function(!EntitlementChangeEventDef):void} callback\n   */\n  onChange(callback) {\n    this.onEntitlementResolvedCallbacks_.add(callback);\n  }\n\n  /**\n   * This resolves the entitlement to a serviceId\n   * @param {string} serviceId\n   * @param {!./entitlement.Entitlement} entitlement\n   */\n  resolveEntitlement(serviceId, entitlement) {\n    if (entitlement) {\n      entitlement.service = serviceId;\n    }\n    this.entitlements_[serviceId] = entitlement;\n    const deferred = this.entitlementDeferredMap_[serviceId];\n    if (deferred) {\n      deferred.resolve(entitlement);\n    }\n    // Remove this serviceId as a failed platform now\n    if (this.failedPlatforms_.indexOf(serviceId) != -1) {\n      this.failedPlatforms_.splice(this.failedPlatforms_.indexOf(serviceId));\n    }\n    // Call all onChange callbacks.\n    this.onEntitlementResolvedCallbacks_.fire({serviceId, entitlement});\n  }\n\n  /**\n   * Returns entitlement for a platform.\n   * @param {string} serviceId\n   * @return {!./entitlement.Entitlement} entitlement\n   */\n  getResolvedEntitlementFor(serviceId) {\n    dev().assert(this.entitlements_[serviceId],\n        `Platform ${serviceId} has not yet resolved with entitlements`);\n    return this.entitlements_[serviceId];\n  }\n\n  /**\n   * Returns entitlement for a platform once it's resolved.\n   * @param {string} serviceId\n   * @return {!Promise<!./entitlement.Entitlement>} entitlement\n   */\n  getEntitlementPromiseFor(serviceId) {\n    dev().assert(this.entitlementDeferredMap_[serviceId],\n        `Platform ${serviceId} is not declared`);\n    return this.entitlementDeferredMap_[serviceId].promise;\n  }\n\n  /**\n   * @param {string} serviceId\n   */\n  resetEntitlementFor(serviceId) {\n    dev().assert(this.entitlementDeferredMap_[serviceId],\n        `Platform ${serviceId} is not declared`);\n    this.entitlementDeferredMap_[serviceId] = new Deferred();\n  }\n\n  /**\n   * @return {!Promise<boolean>}\n   */\n  getGrantStatus() {\n    if (this.grantStatusPromise_ !== null) {\n      return this.grantStatusPromise_.promise;\n    }\n\n    this.grantStatusPromise_ = new Deferred();\n\n    // Check if current entitlements unblocks the reader\n    for (const key in this.entitlements_) {\n      const entitlement = (this.entitlements_[key]);\n      if (entitlement.granted) {\n        this.saveGrantEntitlement_(entitlement);\n        this.grantStatusPromise_.resolve(true);\n      }\n    }\n\n    if (this.areAllPlatformsResolved_()) {\n      // Resolve with null if non of the entitlements unblocks the reader\n      this.grantStatusPromise_.resolve(false);\n    } else {\n      // Listen if any upcoming entitlements unblock the reader\n      this.onChange(({entitlement}) => {\n        if (entitlement.granted) {\n          this.saveGrantEntitlement_(entitlement);\n          this.grantStatusPromise_.resolve(true);\n        } else if (this.areAllPlatformsResolved_()) {\n          this.grantStatusPromise_.resolve(false);\n        }\n      });\n    }\n\n    return this.grantStatusPromise_.promise;\n  }\n\n  /**\n   * Checks and saves the entitlement for grant status\n   * @param {!Entitlement} entitlement\n   * @private\n   */\n  saveGrantEntitlement_(entitlement) {\n    // The entitlement will be stored either if its the first one to grant\n    // or the new one has full subscription but the last one didn't.\n    if ((!this.grantStatusEntitlement_ && entitlement.granted)\n        || (this.grantStatusEntitlement_\n          && !this.grantStatusEntitlement_.isSubscriber()\n          && entitlement.isSubscriber())) {\n      this.grantStatusEntitlement_ = entitlement;\n      this.onGrantStateResolvedCallbacks_.fire();\n    }\n  }\n\n  /**\n   * Returns the entitlement which unlocked the document\n   * @return {!Promise<?Entitlement>}\n   */\n  getGrantEntitlement() {\n    if (this.grantStatusEntitlementPromise_) {\n      return (this.grantStatusEntitlementPromise_.promise);\n    }\n    this.grantStatusEntitlementPromise_ = new Deferred();\n    if ((this.grantStatusEntitlement_\n        && this.grantStatusEntitlement_.isSubscriber())\n          || this.areAllPlatformsResolved_()) {\n      this.grantStatusEntitlementPromise_.resolve(this.grantStatusEntitlement_);\n    } else {\n      this.onGrantStateResolvedCallbacks_.add(() => {\n        if (this.grantStatusEntitlement_.granted\n            || this.areAllPlatformsResolved_()) {\n          this.grantStatusEntitlementPromise_.resolve(\n              this.grantStatusEntitlement_);\n        }\n      });\n    }\n    return this.grantStatusEntitlementPromise_.promise;\n  }\n\n  /**\n   * Clears the grant status\n   */\n  reset() {\n    this.grantStatusPromise_ = null;\n  }\n\n  /**\n   * Returns entitlements when all services are done fetching them.\n   * @private\n   * @return {!Promise<!Array<!./entitlement.Entitlement>>}\n   */\n  getAllPlatformsEntitlements_() {\n    if (this.allResolvedPromise_) {\n      return this.allResolvedPromise_.promise;\n    }\n    this.allResolvedPromise_ = new Deferred();\n    if (this.areAllPlatformsResolved_()) {\n      // Resolve with null if non of the entitlements unblocks the reader\n      this.allResolvedPromise_.resolve(\n          this.getAvailablePlatformsEntitlements_());\n    } else {\n      // Listen if any upcoming entitlements unblock the reader\n      this.onChange(() => {\n        if (this.areAllPlatformsResolved_()) {\n          this.allResolvedPromise_.resolve(\n              this.getAvailablePlatformsEntitlements_());\n        }\n      });\n    }\n    return this.allResolvedPromise_.promise;\n  }\n\n  /**\n   * Returns entitlements for resolved platforms.\n   * @private\n   * @return {!Array<!./entitlement.Entitlement>}\n   */\n  getAvailablePlatformsEntitlements_() {\n    const entitlements = [];\n    for (const platform in this.entitlements_) {\n      if (hasOwn(this.entitlements_, platform)) {\n        entitlements.push(this.entitlements_[platform]);\n      }\n    }\n    return entitlements;\n  }\n\n  /**\n   * Returns entitlements when all services are done fetching them.\n   * @return {!Promise<!./subscription-platform.SubscriptionPlatform>}\n   */\n  selectPlatform() {\n\n    return this.getAllPlatformsEntitlements_().then(() => {\n      // TODO(@prateekbh): explain why sometimes a quick resolve is possible vs\n      // waiting for all entitlement.\n      return this.selectApplicablePlatform_();\n    });\n  }\n\n  /**\n   * Returns the number of entitlements resolved\n   * @return {boolean}\n   * @private\n   */\n  areAllPlatformsResolved_() {\n    const entitlementsResolved = Object.keys(this.entitlements_).length;\n    return entitlementsResolved === this.serviceIds_.length;\n  }\n\n  /**\n   * Returns most qualified platform. Qualification of a platform is based on an\n   * integer weight. Every platform starts with weight 0 and evaluated against\n   * the following parameters,\n   * - user is subscribed with platform (Gives weight 10)\n   * - supports the current viewer (Gives weight 9)\n   *\n   * In the end candidate with max weight is selected. However if candidate's\n   * weight is equal to local platform, then local platform is selected.\n   * @return {!./subscription-platform.SubscriptionPlatform}\n   * @private\n   */\n  selectApplicablePlatform_() {\n    const localPlatform = this.getLocalPlatform();\n    let localWeight = 0;\n    /** @type {!Array<!Object<!./subscription-platform.SubscriptionPlatform, number>>} */\n    const platformWeights = [];\n\n    dev().assert(this.areAllPlatformsResolved_(),\n        'All platforms are not resolved yet');\n\n    this.getAvailablePlatforms().forEach(platform => {\n      let weight = 0;\n      const entitlement =\n          this.getResolvedEntitlementFor(platform.getServiceId());\n\n      // Subscriber wins immediatly.\n      if (entitlement.isSubscriber()) {\n        weight += 100000;\n      }\n\n      // Add the base score\n      weight += platform.getBaseScore();\n\n      // If supports the current viewer, gains weight 9\n      if (platform.supportsCurrentViewer()) {\n        weight += this.scoreConfig_['supportsViewer'];\n      }\n\n      platformWeights.push({\n        platform,\n        weight,\n      });\n      if (platform.getServiceId() === 'local') {\n        localWeight = weight;\n      }\n    });\n\n    platformWeights.sort(function(platform1, platform2) {\n      return platform2.weight - platform1.weight;\n    });\n    // Nobody supports current viewer, nor is anybody subscribed\n    if (platformWeights.length === 0) {\n      return localPlatform;\n    }\n\n    const winningWeight = platformWeights[0].weight;\n\n    if (winningWeight > localWeight) {\n      return platformWeights[0].platform;\n    }\n\n    return localPlatform;\n  }\n\n  /**\n   * Records a platform failure and logs error if all platforms have failed.\n   * @param {string} serviceId\n   */\n  reportPlatformFailure(serviceId) {\n    if (this.failedPlatforms_.indexOf(serviceId) == -1) {\n      const entitlement = Entitlement.empty(serviceId);\n      this.resolveEntitlement(serviceId, entitlement);\n      this.failedPlatforms_.push(serviceId);\n    }\n\n    if (this.failedPlatforms_.length == this.serviceIds_.length) {\n      user().warn(TAG, 'All platforms have failed to resolve, '\n          + 'using fallback entitlement for local platform');\n      this.resolveEntitlement(this.getLocalPlatform().getServiceId(),\n          this.fallbackEntitlement_);\n    }\n  }\n\n  /**\n   * Evaluates platforms and select the one to be selected for login.\n   * @return {!./subscription-platform.SubscriptionPlatform}\n   */\n  selectPlatformForLogin() {\n    const platformScores = [];\n    this.getAvailablePlatforms().forEach(platform => {\n      let score = 0;\n      if (platform.supportsCurrentViewer()) {\n        score += 1000;\n      }\n      platformScores.push({\n        platform,\n        score,\n      });\n    });\n\n    platformScores.sort(function(platform1, platform2) {\n      return platform2.weight - platform1.weight;\n    });\n\n    if (platformScores.length === 0 || platformScores[0].score === 0) {\n      return this.getLocalPlatform();\n    }\n\n    return platformScores[0].platform;\n  }\n}\n","/**\n * Copyright 2018 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Services} from '../../../src/services';\nimport {createElementWithAttributes} from '../../../src/dom';\nimport {dict} from '../../../src/utils/object';\n\nconst CSS_PREFIX = 'i-amphtml-subs';\n\n\nexport class Renderer {\n\n  /**\n   * @param {!../../../src/service/ampdoc-impl.AmpDoc} ampdoc\n   */\n  constructor(ampdoc) {\n    /** @const @private */\n    this.ampdoc_ = ampdoc;\n\n    /** @const @private {!../../../src/service/resources-impl.Resources} */\n    this.resources_ = Services.resourcesForDoc(ampdoc);\n\n    // Initial state is \"unknown\".\n    this.setGrantState(null);\n    this.getBodyElement_().classList.add(`${CSS_PREFIX}-ready`);\n\n    // Check and add progress bar.\n    this.addLoadingBar();\n  }\n\n  /**\n   * @return {!Element}\n   * @private\n   */\n  getBodyElement_() {\n    return this.ampdoc_.getBody();\n  }\n\n  /**\n   * @param {string} type\n   * @param {?boolean} state\n   * @private\n   */\n  setState_(type, state) {\n    this.resources_.mutateElement(this.ampdoc_.getBody() , () => {\n      this.getBodyElement_().classList.toggle(\n          `${CSS_PREFIX}-${type}-unk`,\n          state === null);\n      this.getBodyElement_().classList.toggle(\n          `${CSS_PREFIX}-${type}-yes`,\n          state === true);\n      this.getBodyElement_().classList.toggle(\n          `${CSS_PREFIX}-${type}-no`,\n          state === false);\n    });\n  }\n\n  /**\n   * Adds a loading bar.\n   *\n   * @return {!Promise}\n   */\n  addLoadingBar() {\n    return this.ampdoc_.whenReady().then(() => {\n      if (!this.ampdoc_.getBody().querySelector(\n          '[subscriptions-section=loading]')) {\n        const element = createElementWithAttributes(this.ampdoc_.win.document,\n            'div' ,\n            dict({\n              'class': 'i-amphtml-subs-progress',\n              'subscriptions-section': 'loading',\n            })\n        );\n        this.ampdoc_.getBody().appendChild(element);\n      }\n    });\n  }\n\n  /**\n   * @param {string} type\n   * @param {boolean} state\n   * @private\n   */\n  toggleState_(type, state) {\n    this.resources_.mutateElement(this.ampdoc_.getBody(), () => {\n      this.getBodyElement_().classList.toggle(`${CSS_PREFIX}-${type}`, state);\n    });\n  }\n\n  /**\n   * @param {?boolean} state\n   */\n  setGrantState(state) {\n    this.setState_('grant', state);\n  }\n\n  /**\n   * @param {boolean} loading\n   */\n  toggleLoading(loading) {\n    this.toggleState_('loading', loading);\n  }\n}\n","/**\n * Copyright 2018 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {PageConfig} from '../../../third_party/subscriptions-project/config';\n\nexport class ServiceAdapter {\n\n  /**\n   * @param {./amp-subscriptions.SubscriptionService} subscriptionService\n   */\n  constructor(subscriptionService) {\n    this.subscriptionService_ = subscriptionService;\n  }\n\n  /**\n   * Returns the page config.\n   * @return {!PageConfig}\n   */\n  getPageConfig() {\n    return this.subscriptionService_.getPageConfig();\n  }\n\n  /**\n   * Returns the reader ID for the specified service.\n   * @param {string} serviceId\n   * @return {!Promise<string>}\n   */\n  getReaderId(serviceId) {\n    return this.subscriptionService_.getReaderId(serviceId);\n  }\n\n  /**\n   * Delegates actions to local platform.\n   * @param {string} action\n   * @return {!Promise<boolean>}\n   */\n  delegateActionToLocal(action) {\n    return this.delegateActionToService(action, 'local');\n  }\n\n  /**\n   * Delegates actions to a given service.\n   * @param {string} action\n   * @param {string} serviceId\n   * @return {!Promise<boolean>}\n   */\n  delegateActionToService(action, serviceId) {\n    return this.subscriptionService_.delegateActionToService(action, serviceId);\n  }\n\n  /**\n   * Delegate UI decoration to another service.\n   * @param {!Element} element\n   * @param {string} serviceId\n   * @param {string} action\n   * @param {?JsonObject} options\n   */\n  decorateServiceAction(element, serviceId, action, options) {\n    this.subscriptionService_.decorateServiceAction(element, serviceId,\n        action, options);\n  }\n\n  /**\n   * Reauthorize platforms\n   * @param {!./subscription-platform.SubscriptionPlatform} subscriptionPlatform\n   */\n  reAuthorizePlatform(subscriptionPlatform) {\n    this.subscriptionService_.reAuthorizePlatform(subscriptionPlatform);\n  }\n\n  /**\n   * Returns the singleton Dialog instance\n   * @return {!./dialog.Dialog}\n   */\n  getDialog() {\n    return this.subscriptionService_.getDialog();\n  }\n\n  /**\n   * Returns login platform based on platform selection\n   *\n   * @return {!./subscription-platform.SubscriptionPlatform}\n   */\n  selectPlatformForLogin() {\n    return this.subscriptionService_.selectPlatformForLogin();\n  }\n}\n\n/** @package @VisibleForTesting */\nexport function getPageConfigForTesting() {\n  return PageConfig;\n}\n\n","/**\n * Copyright 2018 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {PageConfig} from '../../../third_party/subscriptions-project/config';\n\n/**\n * This interface is intended to be implemented by Subscription platforms to\n * provide method of getting entitlements.\n *\n * @interface\n */\nexport class SubscriptionPlatform {\n\n  /**\n   * Returns the service Id.\n   * @return {string}\n   */\n  getServiceId() {}\n\n  /**\n   * Requests entitlement for a subscription platform.\n   * @return {!Promise<?./entitlement.Entitlement>}\n   */\n  getEntitlements() {}\n\n  /**\n   * Activates the subscription platform and hands over the control for\n   * rendering.\n   * @param {!./entitlement.Entitlement} unusedEntitlement\n   */\n  activate(unusedEntitlement) {}\n\n  /**\n   * Returns if pingback is enabled for this platform.\n   * @return {boolean}\n   */\n  isPingbackEnabled() {}\n\n  /**\n   * Performs the pingback to the subscription platform.\n   * @param {!./entitlement.Entitlement} unusedSelectedPlatform\n   * @return {!Promise|undefined}\n   */\n  pingback(unusedSelectedPlatform) {}\n\n  /**\n   * Tells if this platform supports the current viewer.\n   * @return {boolean}\n   */\n  supportsCurrentViewer() {}\n\n  /**\n   * Executes action for the local platform.\n   * @param {string} unusedAction\n   * @return {!Promise<boolean>}\n   */\n  executeAction(unusedAction) {}\n\n  /**\n   * Returns the base score configured for the platform.\n   * @return {number}\n   */\n  getBaseScore() {}\n\n  /**\n   * Decorate the DomNode according to your platform\n   * @param {!Element} unusedElement\n   * @param {string} unusedAction\n   * @param {?JsonObject} unusedOptions\n   */\n  decorateUI(unusedElement, unusedAction, unusedOptions) {}\n}\n\n/**\n * TODO(dvoytenko): remove once compiler type checking is fixed for third_party.\n * @package @visibleForTesting\n */\nexport function getPageConfigClassForTesting() {\n  return PageConfig;\n}\n","/**\n * Copyright 2018 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Services} from '../../../src/services';\nimport {getValueForExpr} from '../../../src/json';\n\n\nexport class UrlBuilder {\n\n  /**\n   * @param {!../../../src/service/ampdoc-impl.AmpDoc} ampdoc\n   * @param {!Promise<string>} readerIdPromise\n   */\n  constructor(ampdoc, readerIdPromise) {\n    /** @private @const {!../../../src/service/url-replacements-impl.UrlReplacements} */\n    this.urlReplacements_ = Services.urlReplacementsForDoc(ampdoc);\n    /** @private @const {!Promise<string>} */\n    this.readerIdPromise_ = readerIdPromise;\n\n    /** @private {?JsonObject} */\n    this.authResponse_ = null;\n  }\n\n  /**\n   * @param {!JsonObject} authResponse\n   */\n  setAuthResponse(authResponse) {\n    this.authResponse_ = authResponse;\n  }\n\n  /**\n   * @param {string} url\n   * @param {boolean} useAuthData Allows `AUTH(field)` URL var substitutions.\n   * @return {!Promise<string>}\n   */\n  buildUrl(url, useAuthData) {\n    return this.prepareUrlVars_(useAuthData).then(vars => {\n      return this.urlReplacements_.expandUrlAsync(url, vars);\n    });\n  }\n\n  /**\n   * @param {string} url\n   * @param {boolean} useAuthData Allows `AUTH(field)` URL var substitutions.\n   * @return {!Promise<!Object<string, *>>}\n   */\n  collectUrlVars(url, useAuthData) {\n    return this.prepareUrlVars_(useAuthData).then(vars => {\n      return this.urlReplacements_.collectVars(url, vars);\n    });\n  }\n\n  /**\n   * @param {boolean} useAuthData Allows `AUTH(field)` URL var substitutions.\n   * @return {!Promise<!Object<string, *>>}\n   * @private\n   */\n  prepareUrlVars_(useAuthData) {\n    return this.readerIdPromise_.then(readerId => {\n      const vars = {\n        'READER_ID': readerId,\n        'ACCESS_READER_ID': readerId, // A synonym.\n      };\n      if (useAuthData) {\n        vars['AUTHDATA'] = field => {\n          if (this.authResponse_) {\n            return getValueForExpr(this.authResponse_, field);\n          }\n          return undefined;\n        };\n      }\n      return vars;\n    });\n  }\n}\n","/**\n * Copyright 2018 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nimport {Entitlement, GrantReason} from './entitlement';\nimport {JwtHelper} from '../../amp-access/0.1/jwt';\nimport {LocalSubscriptionPlatform} from './local-subscription-platform';\nimport {PageConfig} from '../../../third_party/subscriptions-project/config';\nimport {Services} from '../../../src/services';\nimport {dev, user} from '../../../src/log';\nimport {dict} from '../../../src/utils/object';\nimport {getSourceOrigin, getWinOrigin} from '../../../src/url';\n\n\n/**\n * This implements the methods to interact with viewer subscription platform.\n * @implements {./subscription-platform.SubscriptionPlatform}\n */\nexport class ViewerSubscriptionPlatform {\n\n  /**\n   * @param {!../../../src/service/ampdoc-impl.AmpDoc} ampdoc\n   * @param {!JsonObject} platformConfig\n   * @param {!./service-adapter.ServiceAdapter} serviceAdapter\n   * @param {string} origin\n   * @param {!./analytics.SubscriptionAnalytics} subscriptionAnalytics\n   */\n  constructor(ampdoc, platformConfig, serviceAdapter, origin,\n    subscriptionAnalytics) {\n    /** @private @const */\n    this.ampdoc_ = ampdoc;\n\n    /** @private @const {!PageConfig} */\n    this.pageConfig_ = serviceAdapter.getPageConfig();\n\n    /** @private @const {!LocalSubscriptionPlatform} */\n    this.platform_ = new LocalSubscriptionPlatform(\n        ampdoc, platformConfig, serviceAdapter, subscriptionAnalytics);\n\n    /** @const @private {!../../../src/service/viewer-impl.Viewer} */\n    this.viewer_ = Services.viewerForDoc(this.ampdoc_);\n\n    /** @private @const {!JwtHelper} */\n    this.jwtHelper_ = new JwtHelper(ampdoc.win);\n\n    /** @private @const {string} */\n    this.publicationId_ = this.pageConfig_.getPublicationId();\n\n    /** @private @const {?string} */\n    this.currentProductId_ = this.pageConfig_.getProductId();\n\n    /** @private @const {string} */\n    this.origin_ = origin;\n  }\n\n  /** @override */\n  getEntitlements() {\n    dev().assert(this.currentProductId_, 'Current product is not set');\n\n    const entitlementPromise = this.viewer_.sendMessageAwaitResponse(\n        'auth',\n        dict({\n          'publicationId': this.publicationId_,\n          'productId': this.currentProductId_,\n          'origin': this.origin_,\n        })\n    ).then(entitlementData => {\n      const authData = (entitlementData || {})['authorization'];\n      if (!authData) {\n        return Entitlement.empty('local');\n      }\n      return this.verifyAuthToken_(authData);\n    }).catch(reason => {\n      this.sendAuthTokenErrorToViewer_(reason.message);\n      throw reason;\n    });\n    return /** @type{!Promise<Entitlement>} */ (entitlementPromise);\n  }\n\n  /**\n   * Logs error and sends message to viewer\n   * @param {string} token\n   * @return {!Promise<!Entitlement>}\n   * @private\n   */\n  verifyAuthToken_(token) {\n    return new Promise(resolve => {\n      const origin = getWinOrigin(this.ampdoc_.win);\n      const sourceOrigin = getSourceOrigin(this.ampdoc_.win.location);\n      const decodedData = this.jwtHelper_.decode(token);\n      const currentProductId = /** @type {string} */ (user().assert(\n          this.pageConfig_.getProductId(),\n          'Product id is null'\n      ));\n      if (decodedData['aud'] != origin && decodedData['aud'] != sourceOrigin) {\n        throw user().createError(\n            `The mismatching \"aud\" field: ${decodedData['aud']}`);\n      }\n      if (decodedData['exp'] < Math.floor(Date.now() / 1000)) {\n        throw user().createError('Payload is expired');\n      }\n      const entitlements = decodedData['entitlements'];\n      let entitlement = Entitlement.empty('local');\n      if (Array.isArray(entitlements)) {\n        for (let index = 0; index < entitlements.length; index++) {\n          if (entitlements[index]['products'].indexOf(currentProductId)\n              !== -1) {\n            const entitlementObject = entitlements[index];\n            entitlement = new Entitlement({\n              source: 'viewer',\n              raw: token,\n              granted: true,\n              grantReason: entitlementObject.subscriptionToken ?\n                GrantReason.SUBSCRIBER : '',\n              dataObject: entitlementObject,\n            });\n            break;\n          }\n        }\n      } else if (decodedData['metering'] && !decodedData['entitlements']) {\n        // Special case where viewer gives metering but no entitlement\n        entitlement = new Entitlement({\n          source: decodedData['iss'] || '',\n          raw: token,\n          granted: true,\n          grantReason: GrantReason.METERING,\n          dataObject: decodedData['metering'],\n        });\n      } else if (entitlements) { // Not null\n        entitlement = new Entitlement({\n          source: 'viewer',\n          raw: token,\n          granted: entitlements.granted,\n          grantReason: entitlements.subscriptionToken ?\n            GrantReason.SUBSCRIBER : '',\n          dataObject: entitlements,\n        });\n      }\n\n      entitlement.service = 'local';\n      resolve(entitlement);\n    });\n  }\n\n  /**\n   * Logs error and sends message to viewer\n   * @param {string} errorString\n   * @private\n   */\n  sendAuthTokenErrorToViewer_(errorString) {\n    this.viewer_.sendMessage('auth-rejected', dict({\n      'reason': errorString,\n    }));\n  }\n\n  /** @override */\n  getServiceId() {\n    return this.platform_.getServiceId();\n  }\n\n  /** @override */\n  activate() {\n  }\n\n  /** @override */\n  isPingbackEnabled() {\n    return this.platform_.isPingbackEnabled();\n  }\n\n  /** @override */\n  pingback(selectedPlatform) {\n    this.platform_.pingback(selectedPlatform);\n  }\n\n  /** @override */\n  supportsCurrentViewer() {\n    return this.platform_.supportsCurrentViewer();\n  }\n\n  /** @override */\n  getBaseScore() {\n    return 0;\n  }\n\n  /** @override */\n  executeAction(action) {\n    return this.platform_.executeAction(action);\n  }\n\n  /** @override */\n  decorateUI(element, action, options) {\n    return this.platform_.decorateUI(element, action, options);\n  }\n}\n\n/**\n * TODO(dvoytenko): remove once compiler type checking is fixed for third_party.\n * @package @visibleForTesting\n */\nexport function getPageConfigClassForTesting() {\n  return PageConfig;\n}\n","/**\n * Copyright 2018 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Services} from '../../../src/services';\nimport {cancellation} from '../../../src/error';\nimport {dev} from '../../../src/log';\nimport {listenOnce} from '../../../src/event-helper';\n\nconst TAG = 'local-viewer';\n\nexport class ViewerTracker {\n  /**\n   * @param {!../../../src/service/ampdoc-impl.AmpDoc} ampdoc\n   */\n  constructor(ampdoc) {\n    /** @private */\n    this.ampdoc_ = ampdoc;\n\n    /** @private @const {!../../../src/service/viewer-impl.Viewer} */\n    this.viewer_ = Services.viewerForDoc(ampdoc);\n\n    /** @private {?Promise} */\n    this.reportViewPromise_ = null;\n\n    /** @const @private {!../../../src/service/timer-impl.Timer} */\n    this.timer_ = Services.timerFor(ampdoc.win);\n\n    /** @private @const {!../../../src/service/viewport/viewport-impl.Viewport} */\n    this.viewport_ = Services.viewportForDoc(ampdoc);\n  }\n\n  /**\n   * @param {time} timeToView\n   * @return {!Promise}\n   */\n  scheduleView(timeToView) {\n    this.reportViewPromise_ = null;\n    return this.ampdoc_.whenReady().then(() => {\n      return new Promise(resolve => {\n        if (this.viewer_.isVisible()) {\n          resolve();\n        }\n        this.viewer_.onVisibilityChanged(() => {\n          if (this.viewer_.isVisible()) {\n            resolve();\n          }\n        });\n      }).then(() => this.reportWhenViewed_(timeToView));\n    });\n  }\n\n  /**\n   * @param {time} timeToView\n   * @return {!Promise}\n   * @private\n   */\n  reportWhenViewed_(timeToView) {\n    if (this.reportViewPromise_) {\n      return this.reportViewPromise_;\n    }\n    dev().fine(TAG, 'start view monitoring');\n    this.reportViewPromise_ = this.whenViewed_(timeToView)\n        .catch(reason => {\n          // Ignore - view has been canceled.\n          dev().fine(TAG, 'view cancelled:', reason);\n          this.reportViewPromise_ = null;\n          throw reason;\n        });\n\n    return this.reportViewPromise_;\n  }\n\n  /**\n   * The promise will be resolved when a view of this document has occurred. It\n   * will be rejected if the current impression should not be counted as a view.\n   * @param {time} timeToView Pass the value of 0 when this method is called\n   *   as the result of the user action.\n   * @return {!Promise}\n   * @private\n   */\n  whenViewed_(timeToView) {\n    if (timeToView == 0) {\n      // Immediate view has been registered. This will happen when this method\n      // is called as the result of the user action.\n      return Promise.resolve();\n    }\n\n    // Viewing kick off: document is visible.\n    const unlistenSet = [];\n    return new Promise((resolve, reject) => {\n      // 1. Document becomes invisible again: cancel.\n      unlistenSet.push(this.viewer_.onVisibilityChanged(() => {\n        if (!this.viewer_.isVisible()) {\n          reject(cancellation());\n        }\n      }));\n\n      // 2. After a few seconds: register a view.\n      const timeoutId = this.timer_.delay(resolve, timeToView);\n      unlistenSet.push(() => this.timer_.cancel(timeoutId));\n\n      // 3. If scrolled: register a view.\n      unlistenSet.push(this.viewport_.onScroll(resolve));\n\n      // 4. Tap: register a view.\n      unlistenSet.push(listenOnce(this.ampdoc_.getRootNode(),\n          'click', resolve));\n    }).then(() => {\n      unlistenSet.forEach(unlisten => unlisten());\n    }, reason => {\n      unlistenSet.forEach(unlisten => unlisten());\n      throw reason;\n    });\n  }\n}\n","/*!\n\nCopyright (C) 2014-2016 by Andrea Giammarchi - @WebReflection\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\n*/\n// global window Object\n// optional polyfill info\n//    'auto' used by default, everything is feature detected\n//    'force' use the polyfill even if not fully needed\nfunction installCustomElements(window, polyfill) {'use strict';\n\n  // DO NOT USE THIS FILE DIRECTLY, IT WON'T WORK\n  // THIS IS A PROJECT BASED ON A BUILD SYSTEM\n  // THIS FILE IS JUST WRAPPED UP RESULTING IN\n  // build/document-register-element.node.js\n\n  var\n    document = window.document,\n    Object = window.Object\n  ;\n\n  var htmlClass = (function (info) {\n    // (C) Andrea Giammarchi - @WebReflection - MIT Style\n    var\n      catchClass = /^[A-Z]+[a-z]/,\n      filterBy = function (re) {\n        var arr = [], tag;\n        for (tag in register) {\n          if (re.test(tag)) arr.push(tag);\n        }\n        return arr;\n      },\n      add = function (Class, tag) {\n        tag = tag.toLowerCase();\n        if (!(tag in register)) {\n          register[Class] = (register[Class] || []).concat(tag);\n          register[tag] = (register[tag.toUpperCase()] = Class);\n        }\n      },\n      register = (Object.create || Object)(null),\n      htmlClass = {},\n      i, section, tags, Class\n    ;\n    for (section in info) {\n      for (Class in info[section]) {\n        tags = info[section][Class];\n        register[Class] = tags;\n        for (i = 0; i < tags.length; i++) {\n          register[tags[i].toLowerCase()] =\n          register[tags[i].toUpperCase()] = Class;\n        }\n      }\n    }\n    htmlClass.get = function get(tagOrClass) {\n      return typeof tagOrClass === 'string' ?\n        (register[tagOrClass] || (catchClass.test(tagOrClass) ? [] : '')) :\n        filterBy(tagOrClass);\n    };\n    htmlClass.set = function set(tag, Class) {\n      return (catchClass.test(tag) ?\n        add(tag, Class) :\n        add(Class, tag)\n      ), htmlClass;\n    };\n    return htmlClass;\n  }({\n    \"collections\": {\n      \"HTMLAllCollection\": [\n        \"all\"\n      ],\n      \"HTMLCollection\": [\n        \"forms\"\n      ],\n      \"HTMLFormControlsCollection\": [\n        \"elements\"\n      ],\n      \"HTMLOptionsCollection\": [\n        \"options\"\n      ]\n    },\n    \"elements\": {\n      \"Element\": [\n        \"element\"\n      ],\n      \"HTMLAnchorElement\": [\n        \"a\"\n      ],\n      \"HTMLAppletElement\": [\n        \"applet\"\n      ],\n      \"HTMLAreaElement\": [\n        \"area\"\n      ],\n      \"HTMLAttachmentElement\": [\n        \"attachment\"\n      ],\n      \"HTMLAudioElement\": [\n        \"audio\"\n      ],\n      \"HTMLBRElement\": [\n        \"br\"\n      ],\n      \"HTMLBaseElement\": [\n        \"base\"\n      ],\n      \"HTMLBodyElement\": [\n        \"body\"\n      ],\n      \"HTMLButtonElement\": [\n        \"button\"\n      ],\n      \"HTMLCanvasElement\": [\n        \"canvas\"\n      ],\n      \"HTMLContentElement\": [\n        \"content\"\n      ],\n      \"HTMLDListElement\": [\n        \"dl\"\n      ],\n      \"HTMLDataElement\": [\n        \"data\"\n      ],\n      \"HTMLDataListElement\": [\n        \"datalist\"\n      ],\n      \"HTMLDetailsElement\": [\n        \"details\"\n      ],\n      \"HTMLDialogElement\": [\n        \"dialog\"\n      ],\n      \"HTMLDirectoryElement\": [\n        \"dir\"\n      ],\n      \"HTMLDivElement\": [\n        \"div\"\n      ],\n      \"HTMLDocument\": [\n        \"document\"\n      ],\n      \"HTMLElement\": [\n        \"element\",\n        \"abbr\",\n        \"address\",\n        \"article\",\n        \"aside\",\n        \"b\",\n        \"bdi\",\n        \"bdo\",\n        \"cite\",\n        \"code\",\n        \"command\",\n        \"dd\",\n        \"dfn\",\n        \"dt\",\n        \"em\",\n        \"figcaption\",\n        \"figure\",\n        \"footer\",\n        \"header\",\n        \"i\",\n        \"kbd\",\n        \"mark\",\n        \"nav\",\n        \"noscript\",\n        \"rp\",\n        \"rt\",\n        \"ruby\",\n        \"s\",\n        \"samp\",\n        \"section\",\n        \"small\",\n        \"strong\",\n        \"sub\",\n        \"summary\",\n        \"sup\",\n        \"u\",\n        \"var\",\n        \"wbr\"\n      ],\n      \"HTMLEmbedElement\": [\n        \"embed\"\n      ],\n      \"HTMLFieldSetElement\": [\n        \"fieldset\"\n      ],\n      \"HTMLFontElement\": [\n        \"font\"\n      ],\n      \"HTMLFormElement\": [\n        \"form\"\n      ],\n      \"HTMLFrameElement\": [\n        \"frame\"\n      ],\n      \"HTMLFrameSetElement\": [\n        \"frameset\"\n      ],\n      \"HTMLHRElement\": [\n        \"hr\"\n      ],\n      \"HTMLHeadElement\": [\n        \"head\"\n      ],\n      \"HTMLHeadingElement\": [\n        \"h1\",\n        \"h2\",\n        \"h3\",\n        \"h4\",\n        \"h5\",\n        \"h6\"\n      ],\n      \"HTMLHtmlElement\": [\n        \"html\"\n      ],\n      \"HTMLIFrameElement\": [\n        \"iframe\"\n      ],\n      \"HTMLImageElement\": [\n        \"img\"\n      ],\n      \"HTMLInputElement\": [\n        \"input\"\n      ],\n      \"HTMLKeygenElement\": [\n        \"keygen\"\n      ],\n      \"HTMLLIElement\": [\n        \"li\"\n      ],\n      \"HTMLLabelElement\": [\n        \"label\"\n      ],\n      \"HTMLLegendElement\": [\n        \"legend\"\n      ],\n      \"HTMLLinkElement\": [\n        \"link\"\n      ],\n      \"HTMLMapElement\": [\n        \"map\"\n      ],\n      \"HTMLMarqueeElement\": [\n        \"marquee\"\n      ],\n      \"HTMLMediaElement\": [\n        \"media\"\n      ],\n      \"HTMLMenuElement\": [\n        \"menu\"\n      ],\n      \"HTMLMenuItemElement\": [\n        \"menuitem\"\n      ],\n      \"HTMLMetaElement\": [\n        \"meta\"\n      ],\n      \"HTMLMeterElement\": [\n        \"meter\"\n      ],\n      \"HTMLModElement\": [\n        \"del\",\n        \"ins\"\n      ],\n      \"HTMLOListElement\": [\n        \"ol\"\n      ],\n      \"HTMLObjectElement\": [\n        \"object\"\n      ],\n      \"HTMLOptGroupElement\": [\n        \"optgroup\"\n      ],\n      \"HTMLOptionElement\": [\n        \"option\"\n      ],\n      \"HTMLOutputElement\": [\n        \"output\"\n      ],\n      \"HTMLParagraphElement\": [\n        \"p\"\n      ],\n      \"HTMLParamElement\": [\n        \"param\"\n      ],\n      \"HTMLPictureElement\": [\n        \"picture\"\n      ],\n      \"HTMLPreElement\": [\n        \"pre\"\n      ],\n      \"HTMLProgressElement\": [\n        \"progress\"\n      ],\n      \"HTMLQuoteElement\": [\n        \"blockquote\",\n        \"q\",\n        \"quote\"\n      ],\n      \"HTMLScriptElement\": [\n        \"script\"\n      ],\n      \"HTMLSelectElement\": [\n        \"select\"\n      ],\n      \"HTMLShadowElement\": [\n        \"shadow\"\n      ],\n      \"HTMLSlotElement\": [\n        \"slot\"\n      ],\n      \"HTMLSourceElement\": [\n        \"source\"\n      ],\n      \"HTMLSpanElement\": [\n        \"span\"\n      ],\n      \"HTMLStyleElement\": [\n        \"style\"\n      ],\n      \"HTMLTableCaptionElement\": [\n        \"caption\"\n      ],\n      \"HTMLTableCellElement\": [\n        \"td\",\n        \"th\"\n      ],\n      \"HTMLTableColElement\": [\n        \"col\",\n        \"colgroup\"\n      ],\n      \"HTMLTableElement\": [\n        \"table\"\n      ],\n      \"HTMLTableRowElement\": [\n        \"tr\"\n      ],\n      \"HTMLTableSectionElement\": [\n        \"thead\",\n        \"tbody\",\n        \"tfoot\"\n      ],\n      \"HTMLTemplateElement\": [\n        \"template\"\n      ],\n      \"HTMLTextAreaElement\": [\n        \"textarea\"\n      ],\n      \"HTMLTimeElement\": [\n        \"time\"\n      ],\n      \"HTMLTitleElement\": [\n        \"title\"\n      ],\n      \"HTMLTrackElement\": [\n        \"track\"\n      ],\n      \"HTMLUListElement\": [\n        \"ul\"\n      ],\n      \"HTMLUnknownElement\": [\n        \"unknown\",\n        \"vhgroupv\",\n        \"vkeygen\"\n      ],\n      \"HTMLVideoElement\": [\n        \"video\"\n      ]\n    },\n    \"nodes\": {\n      \"Attr\": [\n        \"node\"\n      ],\n      \"Audio\": [\n        \"audio\"\n      ],\n      \"CDATASection\": [\n        \"node\"\n      ],\n      \"CharacterData\": [\n        \"node\"\n      ],\n      \"Comment\": [\n        \"#comment\"\n      ],\n      \"Document\": [\n        \"#document\"\n      ],\n      \"DocumentFragment\": [\n        \"#document-fragment\"\n      ],\n      \"DocumentType\": [\n        \"node\"\n      ],\n      \"HTMLDocument\": [\n        \"#document\"\n      ],\n      \"Image\": [\n        \"img\"\n      ],\n      \"Option\": [\n        \"option\"\n      ],\n      \"ProcessingInstruction\": [\n        \"node\"\n      ],\n      \"ShadowRoot\": [\n        \"#shadow-root\"\n      ],\n      \"Text\": [\n        \"#text\"\n      ],\n      \"XMLDocument\": [\n        \"xml\"\n      ]\n    }\n  }));\n  \n  \n    \n  // passed at runtime, configurable\n  // via nodejs module\n  if (!polyfill) polyfill = 'auto';\n  \n  var\n    // V0 polyfill entry\n    REGISTER_ELEMENT = 'registerElement',\n  \n    // IE < 11 only + old WebKit for attributes + feature detection\n    EXPANDO_UID = '__' + REGISTER_ELEMENT + (window.Math.random() * 10e4 >> 0),\n  \n    // shortcuts and costants\n    ADD_EVENT_LISTENER = 'addEventListener',\n    ATTACHED = 'attached',\n    CALLBACK = 'Callback',\n    DETACHED = 'detached',\n    EXTENDS = 'extends',\n  \n    ATTRIBUTE_CHANGED_CALLBACK = 'attributeChanged' + CALLBACK,\n    ATTACHED_CALLBACK = ATTACHED + CALLBACK,\n    CONNECTED_CALLBACK = 'connected' + CALLBACK,\n    DISCONNECTED_CALLBACK = 'disconnected' + CALLBACK,\n    CREATED_CALLBACK = 'created' + CALLBACK,\n    DETACHED_CALLBACK = DETACHED + CALLBACK,\n  \n    ADDITION = 'ADDITION',\n    MODIFICATION = 'MODIFICATION',\n    REMOVAL = 'REMOVAL',\n  \n    DOM_ATTR_MODIFIED = 'DOMAttrModified',\n    DOM_CONTENT_LOADED = 'DOMContentLoaded',\n    DOM_SUBTREE_MODIFIED = 'DOMSubtreeModified',\n  \n    PREFIX_TAG = '<',\n    PREFIX_IS = '=',\n  \n    // valid and invalid node names\n    validName = /^[A-Z][A-Z0-9]*(?:-[A-Z0-9]+)+$/,\n    invalidNames = [\n      'ANNOTATION-XML',\n      'COLOR-PROFILE',\n      'FONT-FACE',\n      'FONT-FACE-SRC',\n      'FONT-FACE-URI',\n      'FONT-FACE-FORMAT',\n      'FONT-FACE-NAME',\n      'MISSING-GLYPH'\n    ],\n  \n    // registered types and their prototypes\n    types = [],\n    protos = [],\n  \n    // to query subnodes\n    query = '',\n  \n    // html shortcut used to feature detect\n    documentElement = document.documentElement,\n  \n    // ES5 inline helpers || basic patches\n    indexOf = types.indexOf || function (v) {\n      for(var i = this.length; i-- && this[i] !== v;){}\n      return i;\n    },\n  \n    // other helpers / shortcuts\n    OP = Object.prototype,\n    hOP = OP.hasOwnProperty,\n    iPO = OP.isPrototypeOf,\n  \n    defineProperty = Object.defineProperty,\n    empty = [],\n    gOPD = Object.getOwnPropertyDescriptor,\n    gOPN = Object.getOwnPropertyNames,\n    gPO = Object.getPrototypeOf,\n    sPO = Object.setPrototypeOf,\n  \n    // jshint proto: true\n    hasProto = !!Object.__proto__,\n  \n    // V1 helpers\n    fixGetClass = false,\n    DRECEV1 = '__dreCEv1',\n    customElements = window.customElements,\n    usableCustomElements = polyfill !== 'force' && !!(\n      customElements &&\n      customElements.define &&\n      customElements.get &&\n      customElements.whenDefined\n    ),\n    Dict = Object.create || Object,\n    Map = window.Map || function Map() {\n      var K = [], V = [], i;\n      return {\n        get: function (k) {\n          return V[indexOf.call(K, k)];\n        },\n        set: function (k, v) {\n          i = indexOf.call(K, k);\n          if (i < 0) V[K.push(k) - 1] = v;\n          else V[i] = v;\n        }\n      };\n    },\n    Promise = window.Promise || function (fn) {\n      var\n        notify = [],\n        done = false,\n        p = {\n          'catch': function () {\n            return p;\n          },\n          'then': function (cb) {\n            notify.push(cb);\n            if (done) setTimeout(resolve, 1);\n            return p;\n          }\n        }\n      ;\n      function resolve(value) {\n        done = true;\n        while (notify.length) notify.shift()(value);\n      }\n      fn(resolve);\n      return p;\n    },\n    justCreated = false,\n    constructors = Dict(null),\n    waitingList = Dict(null),\n    nodeNames = new Map(),\n    secondArgument = function (is) {\n      return is.toLowerCase();\n    },\n  \n    // used to create unique instances\n    create = Object.create || function Bridge(proto) {\n      // silly broken polyfill probably ever used but short enough to work\n      return proto ? ((Bridge.prototype = proto), new Bridge()) : this;\n    },\n  \n    // will set the prototype if possible\n    // or copy over all properties\n    setPrototype = sPO || (\n      hasProto ?\n        function (o, p) {\n          o.__proto__ = p;\n          return o;\n        } : (\n      (gOPN && gOPD) ?\n        (function(){\n          function setProperties(o, p) {\n            for (var\n              key,\n              names = gOPN(p),\n              i = 0, length = names.length;\n              i < length; i++\n            ) {\n              key = names[i];\n              if (!hOP.call(o, key)) {\n                defineProperty(o, key, gOPD(p, key));\n              }\n            }\n          }\n          return function (o, p) {\n            do {\n              setProperties(o, p);\n            } while ((p = gPO(p)) && !iPO.call(p, o));\n            return o;\n          };\n        }()) :\n        function (o, p) {\n          for (var key in p) {\n            o[key] = p[key];\n          }\n          return o;\n        }\n    )),\n  \n    // DOM shortcuts and helpers, if any\n  \n    MutationObserver = window.MutationObserver ||\n                       window.WebKitMutationObserver,\n  \n    HTMLElementPrototype = (\n      window.HTMLElement ||\n      window.Element ||\n      window.Node\n    ).prototype,\n  \n    IE8 = !iPO.call(HTMLElementPrototype, documentElement),\n  \n    safeProperty = IE8 ? function (o, k, d) {\n      o[k] = d.value;\n      return o;\n    } : defineProperty,\n  \n    isValidNode = IE8 ?\n      function (node) {\n        return node.nodeType === 1;\n      } :\n      function (node) {\n        return iPO.call(HTMLElementPrototype, node);\n      },\n  \n    targets = IE8 && [],\n  \n    attachShadow = HTMLElementPrototype.attachShadow,\n    cloneNode = HTMLElementPrototype.cloneNode,\n    dispatchEvent = HTMLElementPrototype.dispatchEvent,\n    getAttribute = HTMLElementPrototype.getAttribute,\n    hasAttribute = HTMLElementPrototype.hasAttribute,\n    removeAttribute = HTMLElementPrototype.removeAttribute,\n    setAttribute = HTMLElementPrototype.setAttribute,\n  \n    // replaced later on\n    createElement = document.createElement,\n    patchedCreateElement = createElement,\n  \n    // shared observer for all attributes\n    attributesObserver = MutationObserver && {\n      attributes: true,\n      characterData: true,\n      attributeOldValue: true\n    },\n  \n    // useful to detect only if there's no MutationObserver\n    DOMAttrModified = MutationObserver || function(e) {\n      doesNotSupportDOMAttrModified = false;\n      documentElement.removeEventListener(\n        DOM_ATTR_MODIFIED,\n        DOMAttrModified\n      );\n    },\n  \n    // will both be used to make DOMNodeInserted asynchronous\n    asapQueue,\n    asapTimer = 0,\n  \n    // internal flags\n    V0 = REGISTER_ELEMENT in document,\n    setListener = true,\n    justSetup = false,\n    doesNotSupportDOMAttrModified = true,\n    dropDomContentLoaded = true,\n  \n    // needed for the innerHTML helper\n    notFromInnerHTMLHelper = true,\n  \n    // optionally defined later on\n    onSubtreeModified,\n    callDOMAttrModified,\n    getAttributesMirror,\n    observer,\n    observe,\n  \n    // based on setting prototype capability\n    // will check proto or the expando attribute\n    // in order to setup the node once\n    patchIfNotAlready,\n    patch\n  ;\n  \n  // only if needed\n  if (!V0) {\n  \n    if (sPO || hasProto) {\n        patchIfNotAlready = function (node, proto) {\n          if (!iPO.call(proto, node)) {\n            setupNode(node, proto);\n          }\n        };\n        patch = setupNode;\n    } else {\n        patchIfNotAlready = function (node, proto) {\n          if (!node[EXPANDO_UID]) {\n            node[EXPANDO_UID] = Object(true);\n            setupNode(node, proto);\n          }\n        };\n        patch = patchIfNotAlready;\n    }\n  \n    if (IE8) {\n      doesNotSupportDOMAttrModified = false;\n      (function (){\n        var\n          descriptor = gOPD(HTMLElementPrototype, ADD_EVENT_LISTENER),\n          addEventListener = descriptor.value,\n          patchedRemoveAttribute = function (name) {\n            var e = new CustomEvent(DOM_ATTR_MODIFIED, {bubbles: true});\n            e.attrName = name;\n            e.prevValue = getAttribute.call(this, name);\n            e.newValue = null;\n            e[REMOVAL] = e.attrChange = 2;\n            removeAttribute.call(this, name);\n            dispatchEvent.call(this, e);\n          },\n          patchedSetAttribute = function (name, value) {\n            var\n              had = hasAttribute.call(this, name),\n              old = had && getAttribute.call(this, name),\n              e = new CustomEvent(DOM_ATTR_MODIFIED, {bubbles: true})\n            ;\n            setAttribute.call(this, name, value);\n            e.attrName = name;\n            e.prevValue = had ? old : null;\n            e.newValue = value;\n            if (had) {\n              e[MODIFICATION] = e.attrChange = 1;\n            } else {\n              e[ADDITION] = e.attrChange = 0;\n            }\n            dispatchEvent.call(this, e);\n          },\n          onPropertyChange = function (e) {\n            // jshint eqnull:true\n            var\n              node = e.currentTarget,\n              superSecret = node[EXPANDO_UID],\n              propertyName = e.propertyName,\n              event\n            ;\n            if (superSecret.hasOwnProperty(propertyName)) {\n              superSecret = superSecret[propertyName];\n              event = new CustomEvent(DOM_ATTR_MODIFIED, {bubbles: true});\n              event.attrName = superSecret.name;\n              event.prevValue = superSecret.value || null;\n              event.newValue = (superSecret.value = node[propertyName] || null);\n              if (event.prevValue == null) {\n                event[ADDITION] = event.attrChange = 0;\n              } else {\n                event[MODIFICATION] = event.attrChange = 1;\n              }\n              dispatchEvent.call(node, event);\n            }\n          }\n        ;\n        descriptor.value = function (type, handler, capture) {\n          if (\n            type === DOM_ATTR_MODIFIED &&\n            this[ATTRIBUTE_CHANGED_CALLBACK] &&\n            this.setAttribute !== patchedSetAttribute\n          ) {\n            this[EXPANDO_UID] = {\n              className: {\n                name: 'class',\n                value: this.className\n              }\n            };\n            this.setAttribute = patchedSetAttribute;\n            this.removeAttribute = patchedRemoveAttribute;\n            addEventListener.call(this, 'propertychange', onPropertyChange);\n          }\n          addEventListener.call(this, type, handler, capture);\n        };\n        defineProperty(HTMLElementPrototype, ADD_EVENT_LISTENER, descriptor);\n      }());\n    } else if (!MutationObserver) {\n      documentElement[ADD_EVENT_LISTENER](DOM_ATTR_MODIFIED, DOMAttrModified);\n      documentElement.setAttribute(EXPANDO_UID, 1);\n      documentElement.removeAttribute(EXPANDO_UID);\n      if (doesNotSupportDOMAttrModified) {\n        onSubtreeModified = function (e) {\n          var\n            node = this,\n            oldAttributes,\n            newAttributes,\n            key\n          ;\n          if (node === e.target) {\n            oldAttributes = node[EXPANDO_UID];\n            node[EXPANDO_UID] = (newAttributes = getAttributesMirror(node));\n            for (key in newAttributes) {\n              if (!(key in oldAttributes)) {\n                // attribute was added\n                return callDOMAttrModified(\n                  0,\n                  node,\n                  key,\n                  oldAttributes[key],\n                  newAttributes[key],\n                  ADDITION\n                );\n              } else if (newAttributes[key] !== oldAttributes[key]) {\n                // attribute was changed\n                return callDOMAttrModified(\n                  1,\n                  node,\n                  key,\n                  oldAttributes[key],\n                  newAttributes[key],\n                  MODIFICATION\n                );\n              }\n            }\n            // checking if it has been removed\n            for (key in oldAttributes) {\n              if (!(key in newAttributes)) {\n                // attribute removed\n                return callDOMAttrModified(\n                  2,\n                  node,\n                  key,\n                  oldAttributes[key],\n                  newAttributes[key],\n                  REMOVAL\n                );\n              }\n            }\n          }\n        };\n        callDOMAttrModified = function (\n          attrChange,\n          currentTarget,\n          attrName,\n          prevValue,\n          newValue,\n          action\n        ) {\n          var e = {\n            attrChange: attrChange,\n            currentTarget: currentTarget,\n            attrName: attrName,\n            prevValue: prevValue,\n            newValue: newValue\n          };\n          e[action] = attrChange;\n          onDOMAttrModified(e);\n        };\n        getAttributesMirror = function (node) {\n          for (var\n            attr, name,\n            result = {},\n            attributes = node.attributes,\n            i = 0, length = attributes.length;\n            i < length; i++\n          ) {\n            attr = attributes[i];\n            name = attr.name;\n            if (name !== 'setAttribute') {\n              result[name] = attr.value;\n            }\n          }\n          return result;\n        };\n      }\n    }\n  \n    // set as enumerable, writable and configurable\n    document[REGISTER_ELEMENT] = function registerElement(type, options) {\n      upperType = type.toUpperCase();\n      if (setListener) {\n        // only first time document.registerElement is used\n        // we need to set this listener\n        // setting it by default might slow down for no reason\n        setListener = false;\n        if (MutationObserver) {\n          observer = (function(attached, detached){\n            function checkEmAll(list, callback) {\n              for (var i = 0, length = list.length; i < length; callback(list[i++])){}\n            }\n            return new MutationObserver(function (records) {\n              for (var\n                current, node, newValue,\n                i = 0, length = records.length; i < length; i++\n              ) {\n                current = records[i];\n                if (current.type === 'childList') {\n                  checkEmAll(current.addedNodes, attached);\n                  checkEmAll(current.removedNodes, detached);\n                } else {\n                  node = current.target;\n                  if (notFromInnerHTMLHelper &&\n                      node[ATTRIBUTE_CHANGED_CALLBACK] &&\n                      current.attributeName !== 'style') {\n                    newValue = getAttribute.call(node, current.attributeName);\n                    if (newValue !== current.oldValue) {\n                      node[ATTRIBUTE_CHANGED_CALLBACK](\n                        current.attributeName,\n                        current.oldValue,\n                        newValue\n                      );\n                    }\n                  }\n                }\n              }\n            });\n          }(executeAction(ATTACHED), executeAction(DETACHED)));\n          observe = function (node) {\n            observer.observe(\n              node,\n              {\n                childList: true,\n                subtree: true\n              }\n            );\n            return node;\n          };\n          observe(document);\n          if (attachShadow) {\n            HTMLElementPrototype.attachShadow = function () {\n              return observe(attachShadow.apply(this, arguments));\n            };\n          }\n        } else {\n          asapQueue = [];\n          document[ADD_EVENT_LISTENER]('DOMNodeInserted', onDOMNode(ATTACHED));\n          document[ADD_EVENT_LISTENER]('DOMNodeRemoved', onDOMNode(DETACHED));\n        }\n  \n        document[ADD_EVENT_LISTENER](DOM_CONTENT_LOADED, onReadyStateChange);\n        document[ADD_EVENT_LISTENER]('readystatechange', onReadyStateChange);\n  \n        HTMLElementPrototype.cloneNode = function (deep) {\n          var\n            node = cloneNode.call(this, !!deep),\n            i = getTypeIndex(node)\n          ;\n          if (-1 < i) patch(node, protos[i]);\n          if (deep && query.length) loopAndSetup(node.querySelectorAll(query));\n          return node;\n        };\n      }\n  \n      if (justSetup) return (justSetup = false);\n  \n      if (-2 < (\n        indexOf.call(types, PREFIX_IS + upperType) +\n        indexOf.call(types, PREFIX_TAG + upperType)\n      )) {\n        throwTypeError(type);\n      }\n  \n      if (!validName.test(upperType) || -1 < indexOf.call(invalidNames, upperType)) {\n        throw new Error('The type ' + type + ' is invalid');\n      }\n  \n      var\n        constructor = function () {\n          return extending ?\n            document.createElement(nodeName, upperType) :\n            document.createElement(nodeName);\n        },\n        opt = options || OP,\n        extending = hOP.call(opt, EXTENDS),\n        nodeName = extending ? options[EXTENDS].toUpperCase() : upperType,\n        upperType,\n        i\n      ;\n  \n      if (extending && -1 < (\n        indexOf.call(types, PREFIX_TAG + nodeName)\n      )) {\n        throwTypeError(nodeName);\n      }\n  \n      i = types.push((extending ? PREFIX_IS : PREFIX_TAG) + upperType) - 1;\n  \n      query = query.concat(\n        query.length ? ',' : '',\n        extending ? nodeName + '[is=\"' + type.toLowerCase() + '\"]' : nodeName\n      );\n  \n      constructor.prototype = (\n        protos[i] = hOP.call(opt, 'prototype') ?\n          opt.prototype :\n          create(HTMLElementPrototype)\n      );\n  \n      if (query.length) loopAndVerify(\n        document.querySelectorAll(query),\n        ATTACHED\n      );\n  \n      return constructor;\n    };\n  \n    document.createElement = (patchedCreateElement = function (localName, typeExtension) {\n      var\n        is = getIs(typeExtension),\n        node = is ?\n          createElement.call(document, localName, secondArgument(is)) :\n          createElement.call(document, localName),\n        name = '' + localName,\n        i = indexOf.call(\n          types,\n          (is ? PREFIX_IS : PREFIX_TAG) +\n          (is || name).toUpperCase()\n        ),\n        setup = -1 < i\n      ;\n      if (is) {\n        node.setAttribute('is', is = is.toLowerCase());\n        if (setup) {\n          setup = isInQSA(name.toUpperCase(), is);\n        }\n      }\n      notFromInnerHTMLHelper = !document.createElement.innerHTMLHelper;\n      if (setup) patch(node, protos[i]);\n      return node;\n    });\n  \n  }\n  \n  function ASAP() {\n    var queue = asapQueue.splice(0, asapQueue.length);\n    asapTimer = 0;\n    while (queue.length) {\n      queue.shift().call(\n        null, queue.shift()\n      );\n    }\n  }\n  \n  function loopAndVerify(list, action) {\n    for (var i = 0, length = list.length; i < length; i++) {\n      verifyAndSetupAndAction(list[i], action);\n    }\n  }\n  \n  function loopAndSetup(list) {\n    for (var i = 0, length = list.length, node; i < length; i++) {\n      node = list[i];\n      patch(node, protos[getTypeIndex(node)]);\n    }\n  }\n  \n  function executeAction(action) {\n    return function (node) {\n      if (isValidNode(node)) {\n        verifyAndSetupAndAction(node, action);\n        if (query.length) loopAndVerify(\n          node.querySelectorAll(query),\n          action\n        );\n      }\n    };\n  }\n  \n  function getTypeIndex(target) {\n    var\n      is = getAttribute.call(target, 'is'),\n      nodeName = target.nodeName.toUpperCase(),\n      i = indexOf.call(\n        types,\n        is ?\n            PREFIX_IS + is.toUpperCase() :\n            PREFIX_TAG + nodeName\n      )\n    ;\n    return is && -1 < i && !isInQSA(nodeName, is) ? -1 : i;\n  }\n  \n  function isInQSA(name, type) {\n    return -1 < query.indexOf(name + '[is=\"' + type + '\"]');\n  }\n  \n  function onDOMAttrModified(e) {\n    var\n      node = e.currentTarget,\n      attrChange = e.attrChange,\n      attrName = e.attrName,\n      target = e.target,\n      addition = e[ADDITION] || 2,\n      removal = e[REMOVAL] || 3\n    ;\n    if (notFromInnerHTMLHelper &&\n        (!target || target === node) &&\n        node[ATTRIBUTE_CHANGED_CALLBACK] &&\n        attrName !== 'style' && (\n          e.prevValue !== e.newValue ||\n          // IE9, IE10, and Opera 12 gotcha\n          e.newValue === '' && (\n            attrChange === addition ||\n            attrChange === removal\n          )\n    )) {\n      node[ATTRIBUTE_CHANGED_CALLBACK](\n        attrName,\n        attrChange === addition ? null : e.prevValue,\n        attrChange === removal ? null : e.newValue\n      );\n    }\n  }\n  \n  function onDOMNode(action) {\n    var executor = executeAction(action);\n    return function (e) {\n      asapQueue.push(executor, e.target);\n      if (asapTimer) clearTimeout(asapTimer);\n      asapTimer = setTimeout(ASAP, 1);\n    };\n  }\n  \n  function onReadyStateChange(e) {\n    if (dropDomContentLoaded) {\n      dropDomContentLoaded = false;\n      e.currentTarget.removeEventListener(DOM_CONTENT_LOADED, onReadyStateChange);\n    }\n    if (query.length) loopAndVerify(\n      (e.target || document).querySelectorAll(query),\n      e.detail === DETACHED ? DETACHED : ATTACHED\n    );\n    if (IE8) purge();\n  }\n  \n  function patchedSetAttribute(name, value) {\n    // jshint validthis:true\n    var self = this;\n    setAttribute.call(self, name, value);\n    onSubtreeModified.call(self, {target: self});\n  }\n  \n  function setupNode(node, proto) {\n    setPrototype(node, proto);\n    if (observer) {\n      observer.observe(node, attributesObserver);\n    } else {\n      if (doesNotSupportDOMAttrModified) {\n        node.setAttribute = patchedSetAttribute;\n        node[EXPANDO_UID] = getAttributesMirror(node);\n        node[ADD_EVENT_LISTENER](DOM_SUBTREE_MODIFIED, onSubtreeModified);\n      }\n      node[ADD_EVENT_LISTENER](DOM_ATTR_MODIFIED, onDOMAttrModified);\n    }\n    if (node[CREATED_CALLBACK] && notFromInnerHTMLHelper) {\n      node.created = true;\n      node[CREATED_CALLBACK]();\n      node.created = false;\n    }\n  }\n  \n  function purge() {\n    for (var\n      node,\n      i = 0,\n      length = targets.length;\n      i < length; i++\n    ) {\n      node = targets[i];\n      if (!documentElement.contains(node)) {\n        length--;\n        targets.splice(i--, 1);\n        verifyAndSetupAndAction(node, DETACHED);\n      }\n    }\n  }\n  \n  function throwTypeError(type) {\n    throw new Error('A ' + type + ' type is already registered');\n  }\n  \n  function verifyAndSetupAndAction(node, action) {\n    var\n      fn,\n      i = getTypeIndex(node)\n    ;\n    if (-1 < i) {\n      patchIfNotAlready(node, protos[i]);\n      i = 0;\n      if (action === ATTACHED && !node[ATTACHED]) {\n        node[DETACHED] = false;\n        node[ATTACHED] = true;\n        i = 1;\n        if (IE8 && indexOf.call(targets, node) < 0) {\n          targets.push(node);\n        }\n      } else if (action === DETACHED && !node[DETACHED]) {\n        node[ATTACHED] = false;\n        node[DETACHED] = true;\n        i = 1;\n      }\n      if (i && (fn = node[action + CALLBACK])) fn.call(node);\n    }\n  }\n  \n  \n  \n  // V1 in da House!\n  function CustomElementRegistry() {}\n  \n  CustomElementRegistry.prototype = {\n    constructor: CustomElementRegistry,\n    // a workaround for the stubborn WebKit\n    define: usableCustomElements ?\n      function (name, Class, options) {\n        if (options) {\n          CERDefine(name, Class, options);\n        } else {\n          var NAME = name.toUpperCase();\n          constructors[NAME] = {\n            constructor: Class,\n            create: [NAME]\n          };\n          nodeNames.set(Class, NAME);\n          customElements.define(name, Class);\n        }\n      } :\n      CERDefine,\n    get: usableCustomElements ?\n      function (name) {\n        return customElements.get(name) || get(name);\n      } :\n      get,\n    whenDefined: usableCustomElements ?\n      function (name) {\n        return Promise.race([\n          customElements.whenDefined(name),\n          whenDefined(name)\n        ]);\n      } :\n      whenDefined\n  };\n  \n  function CERDefine(name, Class, options) {\n    var\n      is = options && options[EXTENDS] || '',\n      CProto = Class.prototype,\n      proto = create(CProto),\n      attributes = Class.observedAttributes || empty,\n      definition = {prototype: proto}\n    ;\n    // TODO: is this needed at all since it's inherited?\n    // defineProperty(proto, 'constructor', {value: Class});\n    safeProperty(proto, CREATED_CALLBACK, {\n        value: function () {\n          if (justCreated) justCreated = false;\n          else if (!this[DRECEV1]) {\n            this[DRECEV1] = true;\n            new Class(this);\n            if (CProto[CREATED_CALLBACK])\n              CProto[CREATED_CALLBACK].call(this);\n            var info = constructors[nodeNames.get(Class)];\n            if (!usableCustomElements || info.create.length > 1) {\n              notifyAttributes(this);\n            }\n          }\n      }\n    });\n    safeProperty(proto, ATTRIBUTE_CHANGED_CALLBACK, {\n      value: function (name) {\n        if (-1 < indexOf.call(attributes, name))\n          CProto[ATTRIBUTE_CHANGED_CALLBACK].apply(this, arguments);\n      }\n    });\n    if (CProto[CONNECTED_CALLBACK]) {\n      safeProperty(proto, ATTACHED_CALLBACK, {\n        value: CProto[CONNECTED_CALLBACK]\n      });\n    }\n    if (CProto[DISCONNECTED_CALLBACK]) {\n      safeProperty(proto, DETACHED_CALLBACK, {\n        value: CProto[DISCONNECTED_CALLBACK]\n      });\n    }\n    if (is) definition[EXTENDS] = is;\n    name = name.toUpperCase();\n    constructors[name] = {\n      constructor: Class,\n      create: is ? [is, secondArgument(name)] : [name]\n    };\n    nodeNames.set(Class, name);\n    document[REGISTER_ELEMENT](name.toLowerCase(), definition);\n    whenDefined(name);\n    waitingList[name].r();\n  }\n  \n  function get(name) {\n    var info = constructors[name.toUpperCase()];\n    return info && info.constructor;\n  }\n  \n  function getIs(options) {\n    return typeof options === 'string' ?\n        options : (options && options.is || '');\n  }\n  \n  function notifyAttributes(self) {\n    var\n      callback = self[ATTRIBUTE_CHANGED_CALLBACK],\n      attributes = callback ? self.attributes : empty,\n      i = attributes.length,\n      attribute\n    ;\n    while (i--) {\n      attribute =  attributes[i]; // || attributes.item(i);\n      callback.call(\n        self,\n        attribute.name || attribute.nodeName,\n        null,\n        attribute.value || attribute.nodeValue\n      );\n    }\n  }\n  \n  function whenDefined(name) {\n    name = name.toUpperCase();\n    if (!(name in waitingList)) {\n      waitingList[name] = {};\n      waitingList[name].p = new Promise(function (resolve) {\n        waitingList[name].r = resolve;\n      });\n    }\n    return waitingList[name].p;\n  }\n  \n  function polyfillV1() {\n    if (customElements) delete window.customElements;\n    defineProperty(window, 'customElements', {\n      configurable: true,\n      value: new CustomElementRegistry()\n    });\n    defineProperty(window, 'CustomElementRegistry', {\n      configurable: true,\n      value: CustomElementRegistry\n    });\n    for (var\n      patchClass = function (name) {\n        var Class = window[name];\n        if (Class) {\n          window[name] = function CustomElementsV1(self) {\n            var info, isNative;\n            if (!self) self = this;\n            if (!self[DRECEV1]) {\n              justCreated = true;\n              info = constructors[nodeNames.get(self.constructor)];\n              isNative = usableCustomElements && info.create.length === 1;\n              self = isNative ?\n                Reflect.construct(Class, empty, info.constructor) :\n                document.createElement.apply(document, info.create);\n              self[DRECEV1] = true;\n              justCreated = false;\n              if (!isNative) notifyAttributes(self);\n            }\n            return self;\n          };\n          window[name].prototype = Class.prototype;\n          try {\n            Class.prototype.constructor = window[name];\n          } catch(WebKit) {\n            fixGetClass = true;\n            defineProperty(Class, DRECEV1, {value: window[name]});\n          }\n        }\n      },\n      Classes = htmlClass.get(/^HTML[A-Z]*[a-z]/),\n      i = Classes.length;\n      i--;\n      patchClass(Classes[i])\n    ) {}\n    (document.createElement = function (name, options) {\n      var is = getIs(options);\n      return is ?\n        patchedCreateElement.call(this, name, secondArgument(is)) :\n        patchedCreateElement.call(this, name);\n    });\n    if (!V0) {\n      justSetup = true;\n      document[REGISTER_ELEMENT]('');\n    }\n  }\n  \n  // if customElements is not there at all\n  if (!customElements || polyfill === 'force') polyfillV1();\n  else {\n    // if available test extends work as expected\n    try {\n      (function (DRE, options, name) {\n        options[EXTENDS] = 'a';\n        DRE.prototype = create(HTMLAnchorElement.prototype);\n        DRE.prototype.constructor = DRE;\n        window.customElements.define(name, DRE, options);\n        if (\n          getAttribute.call(document.createElement('a', {is: name}), 'is') !== name ||\n          (usableCustomElements && getAttribute.call(new DRE(), 'is') !== name)\n        ) {\n          throw options;\n        }\n      }(\n        function DRE() {\n          return Reflect.construct(HTMLAnchorElement, [], DRE);\n        },\n        {},\n        'document-register-element-a'\n      ));\n    } catch(o_O) {\n      // or force the polyfill if not\n      // and keep internal original reference\n      polyfillV1();\n    }\n  }\n  \n  try {\n    createElement.call(document, 'a', 'a');\n  } catch(FireFox) {\n    secondArgument = function (is) {\n      return {is: is.toLowerCase()};\n    };\n  }\n  \n}\n\nexports.installCustomElements = installCustomElements;\n\n","'use strict';\n\n/**\n * Constructs a ES6/Promises A+ Promise instance.\n *\n * @constructor\n * @param {function(function(*=), function (*=))} resolver\n */\nfunction Promise(resolver) {\n  if (!(this instanceof Promise)) {\n    throw new TypeError('Constructor Promise requires `new`');\n  }\n  if (!isFunction(resolver)) {\n    throw new TypeError('Must pass resolver function');\n  }\n\n  /**\n   * @type {function(this:Promise,*=,function(*=),function(*=),Deferred):!Promise}\n   * @private\n   */\n  this._state = PendingPromise;\n\n  /**\n   * @type {*}\n   * @private\n   */\n  this._value = [];\n\n  /**\n   * @type {boolean}\n   * @private\n   */\n  this._isChainEnd = true;\n\n  doResolve(\n    this,\n    adopter(this, FulfilledPromise),\n    adopter(this, RejectedPromise),\n    { then: resolver }\n  );\n}\n\n/****************************\n  Public Instance Methods\n ****************************/\n\n/**\n * Creates a new promise instance that will receive the result of this promise\n * as inputs to the onFulfilled or onRejected callbacks.\n *\n * @param {function(*)} onFulfilled\n * @param {function(*)} onRejected\n */\nPromise.prototype.then = function(onFulfilled, onRejected) {\n  onFulfilled = isFunction(onFulfilled) ? onFulfilled : void 0;\n  onRejected = isFunction(onRejected) ? onRejected : void 0;\n\n  if (onFulfilled || onRejected) {\n    this._isChainEnd = false;\n  }\n\n  return this._state(\n    this._value,\n    onFulfilled,\n    onRejected\n  );\n};\n\n/**\n * Creates a new promise that will handle the rejected state of this promise.\n *\n * @param {function(*)} onRejected\n * @returns {!Promise}\n */\nPromise.prototype.catch = function(onRejected) {\n  return this.then(void 0, onRejected);\n};\n\n/****************************\n  Public Static Methods\n ****************************/\n\n/**\n * Creates a fulfilled Promise of value. If value is itself a then-able,\n * resolves with the then-able's value.\n *\n * @this {!Promise}\n * @param {*=} value\n * @returns {!Promise}\n */\nPromise.resolve = function(value) {\n  var Constructor = this;\n  var promise;\n\n  if (isObject(value) && value instanceof this) {\n    promise = value;\n  } else {\n    promise = new Constructor(function(resolve) {\n      resolve(value);\n    });\n  }\n\n  return /** @type {!Promise} */(promise);\n};\n\n/**\n * Creates a rejected Promise of reason.\n *\n * @this {!Promise}\n * @param {*=} reason\n * @returns {!Promise}\n */\nPromise.reject = function(reason) {\n  var Constructor = this;\n  var promise = new Constructor(function(_, reject) {\n    reject(reason);\n  });\n\n  return /** @type {!Promise} */(promise);\n};\n\n/**\n * Creates a Promise that will resolve with an array of the values of the\n * passed in promises. If any promise rejects, the returned promise will\n * reject.\n *\n * @this {!Promise}\n * @param {!Array<Promise|*>} promises\n * @returns {!Promise}\n */\nPromise.all = function(promises) {\n  var Constructor = this;\n  var promise = new Constructor(function(resolve, reject) {\n    var length = promises.length;\n    var values = new Array(length);\n\n    if (length === 0) {\n      return resolve(values);\n    }\n\n    each(promises, function(promise, index) {\n      Constructor.resolve(promise).then(function(value) {\n        values[index] = value;\n        if (--length === 0) {\n          resolve(values);\n        }\n      }, reject);\n    });\n  });\n\n  return /** @type {!Promise} */(promise);\n};\n\n/**\n * Creates a Promise that will resolve or reject based on the first\n * resolved or rejected promise.\n *\n * @this {!Promise}\n * @param {!Array<Promise|*>} promises\n * @returns {!Promise}\n */\nPromise.race = function(promises) {\n  var Constructor = this;\n  var promise = new Constructor(function(resolve, reject) {\n    for (var i = 0; i < promises.length; i++) {\n      Constructor.resolve(promises[i]).then(resolve, reject);\n    }\n  });\n\n  return /** @type {!Promise} */(promise);\n};\n\nvar onPossiblyUnhandledRejection = function(reason, promise) {\n  throw reason;\n};\n\n/**\n * An internal use static function.\n */\nPromise._overrideUnhandledExceptionHandler = function(handler) {\n  onPossiblyUnhandledRejection = handler;\n};\n\n/****************************\n  Private functions\n ****************************/\n\n/**\n * The Fulfilled Promise state. Calls onFulfilled with the resolved value of\n * this promise, creating a new promise.\n *\n * If there is no onFulfilled, returns the current promise to avoid an promise\n * instance.\n *\n * @this {!Promise} The current promise\n * @param {*=} value The current promise's resolved value.\n * @param {function(*=)=} onFulfilled\n * @param {function(*=)=} unused\n * @param {Deferred} deferred A deferred object that holds a promise and its\n *     resolve and reject functions. It IS NOT passed when called from\n *     Promise#then to save an object instance (since we may return the current\n *     promise). It IS passed in when adopting the Fulfilled state from the\n *     Pending state.\n * @returns {!Promise}\n */\nfunction FulfilledPromise(value, onFulfilled, unused, deferred) {\n  if (!onFulfilled) {\n    deferredAdopt(deferred, FulfilledPromise, value);\n    return this;\n  }\n  if (!deferred) {\n    deferred = new Deferred(this.constructor);\n  }\n  defer(tryCatchDeferred(deferred, onFulfilled, value));\n  return deferred.promise;\n}\n\n/**\n * The Rejected Promise state. Calls onRejected with the resolved value of\n * this promise, creating a new promise.\n *\n * If there is no onRejected, returns the current promise to avoid an promise\n * instance.\n *\n * @this {!Promise} The current promise\n * @param {*=} reason The current promise's rejection reason.\n * @param {function(*=)=} unused\n * @param {function(*=)=} onRejected\n * @param {Deferred} deferred A deferred object that holds a promise and its\n *     resolve and reject functions. It IS NOT passed when called from\n *     Promise#then to save an object instance (since we may return the current\n *     promise). It IS passed in when adopting the Rejected state from the\n *     Pending state.\n * @returns {!Promise}\n */\nfunction RejectedPromise(reason, unused, onRejected, deferred) {\n  if (!onRejected) {\n    deferredAdopt(deferred, RejectedPromise, reason);\n    return this;\n  }\n  if (!deferred) {\n    deferred = new Deferred(this.constructor);\n  }\n  defer(tryCatchDeferred(deferred, onRejected, reason));\n  return deferred.promise;\n}\n\n/**\n * The Pending Promise state. Eventually calls onFulfilled once the promise has\n * resolved, or onRejected once the promise rejects.\n *\n * If there is no onFulfilled and no onRejected, returns the current promise to\n * avoid an promise instance.\n *\n * @this {!Promise} The current promise\n * @param {*=} queue The current promise's pending promises queue.\n * @param {function(*=)=} onFulfilled\n * @param {function(*=)=} onRejected\n * @param {Deferred} deferred A deferred object that holds a promise and its\n *     resolve and reject functions. It IS NOT passed when called from\n *     Promise#then to save an object instance (since we may return the current\n *     promise). It IS passed in when adopting the Pending state from the\n *     Pending state of another promise.\n * @returns {!Promise}\n */\nfunction PendingPromise(queue, onFulfilled, onRejected, deferred) {\n  if (!deferred) {\n    if (!onFulfilled && !onRejected) { return this; }\n    deferred = new Deferred(this.constructor);\n  }\n  queue.push({\n    deferred: deferred,\n    onFulfilled: onFulfilled || deferred.resolve,\n    onRejected: onRejected || deferred.reject\n  });\n  return deferred.promise;\n}\n\n/**\n * Constructs a deferred instance that holds a promise and its resolve and\n * reject functions.\n *\n * @constructor\n */\nfunction Deferred(Promise) {\n  var deferred = this;\n  /** @type {!Promise} */\n  this.promise = new Promise(function(resolve, reject) {\n    /** @type {function(*=)} */\n    deferred.resolve = resolve;\n\n    /** @type {function(*=)} */\n    deferred.reject = reject;\n  });\n  return deferred;\n}\n\n/**\n * Transitions the state of promise to another state. This is only ever called\n * on with a promise that is currently in the Pending state.\n *\n * @param {!Promise} promise\n * @param {function(this:Promise,*=,function(*=),function(*=),Deferred):!Promise} state\n * @param {*=} value\n */\nfunction adopt(promise, state, value, adoptee) {\n  var queue = promise._value;\n  promise._state = state;\n  promise._value = value;\n\n  if (adoptee && state === PendingPromise) {\n    adoptee._state(value, void 0, void 0, {\n      promise: promise,\n      resolve: void 0,\n      reject: void 0\n    });\n  }\n\n  for (var i = 0; i < queue.length; i++) {\n    var next = queue[i];\n    promise._state(\n      value,\n      next.onFulfilled,\n      next.onRejected,\n      next.deferred\n    );\n  }\n  queue.length = 0;\n\n  // Determine if this rejected promise will be \"handled\".\n  if (state === RejectedPromise && promise._isChainEnd) {\n    setTimeout(function() {\n      if (promise._isChainEnd) {\n        onPossiblyUnhandledRejection(value, promise);\n      }\n    }, 0);\n  }\n}\n\n/**\n * A partial application of adopt.\n *\n * @param {!Promise} promise\n * @param {function(this:Promise,*=,function(*=),function(*=),Deferred):!Promise} state\n * @returns {function(*=)}\n */\nfunction adopter(promise, state) {\n  return function(value) {\n    adopt(promise, state, value);\n  };\n}\n\n/**\n * Updates a deferred promises state. Necessary for updating an adopting\n * promise's state when the adoptee resolves.\n *\n * @param {?Deferred} deferred\n * @param {function(this:Promise,*=,function(*=),function(*=),Deferred):!Promise} state\n * @param {*=} value\n */\nfunction deferredAdopt(deferred, state, value) {\n  if (deferred) {\n    var promise = deferred.promise;\n    promise._state = state;\n    promise._value = value;\n  }\n}\n\n/**\n * A no-op function to prevent double resolving.\n */\nfunction noop() {}\n\n/**\n * Tests if fn is a Function\n *\n * @param {*} fn\n * @returns {boolean}\n */\nfunction isFunction(fn) {\n  return typeof fn === 'function';\n}\n\n/**\n * Tests if fn is an Object\n *\n * @param {*} obj\n * @returns {boolean}\n */\nfunction isObject(obj) {\n  return obj === Object(obj);\n}\n\n/**\n * Iterates over each element of an array, calling the iterator with the\n * element and its index.\n *\n * @param {!Array} collection\n * @param {function(*=,number)} iterator\n */\nfunction each(collection, iterator) {\n  for (var i = 0; i < collection.length; i++) {\n    iterator(collection[i], i);\n  }\n}\n\n/**\n * Creates a function that will attempt to resolve the deferred with the return\n * of fn. If any error is raised, rejects instead.\n *\n * @param {!Deferred} deferred\n * @param {function(*=)} fn\n * @param {*} arg\n * @returns {function()}\n */\nfunction tryCatchDeferred(deferred, fn, arg) {\n  var promise = deferred.promise;\n  var resolve = deferred.resolve;\n  var reject = deferred.reject;\n  return function() {\n    try {\n      var result = fn(arg);\n      doResolve(promise, resolve, reject, result, result);\n    } catch (e) {\n      reject(e);\n    }\n  };\n}\n\n/**\n * Queues and executes multiple deferred functions on another run loop.\n */\nvar defer = (function() {\n  /**\n   * Defers fn to another run loop.\n   */\n  var scheduleFlush;\n  if (typeof window !== 'undefined' && window.postMessage) {\n    window.addEventListener('message', flush);\n    scheduleFlush = function() {\n      window.postMessage('macro-task', '*');\n    };\n  } else {\n    scheduleFlush = function() {\n      setTimeout(flush, 0);\n    };\n  }\n\n  var queue = new Array(16);\n  var length = 0;\n\n  function flush() {\n    for (var i = 0; i < length; i++) {\n      var fn = queue[i];\n      queue[i] = null;\n      fn();\n    }\n    length = 0;\n  }\n\n  /**\n   * @param {function()} fn\n   */\n  function defer(fn) {\n    if (length === 0) { scheduleFlush(); }\n    queue[length++] = fn;\n  }\n\n  return defer;\n})();\n\n/**\n * The Promise resolution procedure.\n * https://github.com/promises-aplus/promises-spec#the-promise-resolution-procedure\n *\n * @param {!Promise} promise\n * @param {function(*=)} resolve\n * @param {function(*=)} reject\n * @param {*} value\n * @param {*=} context\n */\nfunction doResolve(promise, resolve, reject, value, context) {\n  var _reject = reject;\n  var then;\n  var _resolve;\n  try {\n    if (value === promise) {\n      throw new TypeError('Cannot fulfill promise with itself');\n    }\n    var isObj = isObject(value);\n    if (isObj && value instanceof promise.constructor) {\n      adopt(promise, value._state, value._value, value);\n    } else if (isObj && (then = value.then) && isFunction(then)) {\n      _resolve = function(value) {\n        _resolve = _reject = noop;\n        doResolve(promise, resolve, reject, value, value);\n      };\n      _reject = function(reason) {\n        _resolve = _reject = noop;\n        reject(reason);\n      };\n      then.call(\n        context,\n        function(value) { _resolve(value); },\n        function(reason) { _reject(reason); }\n      );\n    } else {\n      resolve(value);\n    }\n  } catch (e) {\n    _reject(e);\n  }\n}\n\nmodule.exports = Promise;\n","/**\n * Copyright 2017 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Common AMP events.\n * @enum {string}\n */\nexport const AmpEvents = {\n  BUILT: 'amp:built',\n  DOM_UPDATE: 'amp:dom-update',\n  VISIBILITY_CHANGE: 'amp:visibilitychange', // https://github.com/ampproject/amphtml/blob/master/ads/README.md#page-visibility\n  // The following codes are only used for testing.\n  // TODO(choumx): Move these to a separate enum so they can be DCE'd.\n  ATTACHED: 'amp:attached',\n  STUBBED: 'amp:stubbed',\n  LOAD_START: 'amp:load:start',\n  LOAD_END: 'amp:load:end',\n  ERROR: 'amp:error',\n};\n","/**\n * Copyright 2016 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Services} from './services';\n\n/**\n * Helper method to trigger analytics event if amp-analytics is available.\n * TODO: Do not expose this function\n * @param {!Element} target\n * @param {string} eventType\n * @param {!Object<string, string>=} opt_vars A map of vars and their values.\n */\nexport function triggerAnalyticsEvent(target, eventType, opt_vars) {\n  Services.analyticsForDocOrNull(target).then(analytics => {\n    if (!analytics) {\n      return;\n    }\n    analytics.triggerEventForTarget(target, eventType, opt_vars);\n  });\n}\n","/**\n * Copyright 2016 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Allows for runtime configuration. Internally, the runtime should\n * use the src/config.js module for various constants. We can use the\n * AMP_CONFIG global to translate user-defined configurations to this\n * module.\n * @type {!Object<string, string>}\n */\nconst env = self.AMP_CONFIG || {};\n\nconst thirdPartyFrameRegex = typeof env['thirdPartyFrameRegex'] == 'string' ?\n  new RegExp(env['thirdPartyFrameRegex']) : env['thirdPartyFrameRegex'];\n\nconst cdnProxyRegex = typeof env['cdnProxyRegex'] == 'string' ?\n  new RegExp(env['cdnProxyRegex']) : env['cdnProxyRegex'];\n\n/** @type {!Object<string, string|boolean|RegExp>} */\nexport const urls = {\n  thirdParty: env['thirdPartyUrl'] || 'https://3p.ampproject.net',\n  thirdPartyFrameHost: env['thirdPartyFrameHost'] || 'ampproject.net',\n  thirdPartyFrameRegex: thirdPartyFrameRegex || /^d-\\d+\\.ampproject\\.net$/,\n  cdn: env['cdnUrl'] || 'https://cdn.ampproject.org',\n  /* Note that cdnProxyRegex is only ever checked against origins\n   * (proto://host[:port]) so does not need to consider path\n   */\n  cdnProxyRegex: cdnProxyRegex ||\n      /^https:\\/\\/([a-zA-Z0-9_-]+\\.)?cdn\\.ampproject\\.org$/,\n  localhostRegex: /^https?:\\/\\/localhost(:\\d+)?$/,\n  errorReporting: env['errorReportingUrl'] ||\n      'https://amp-error-reporting.appspot.com/r',\n  localDev: env['localDev'] || false,\n};\n\nexport const config = {\n  urls,\n};\n","/**\n * Copyright 2015 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {endsWith} from './string';\nimport {\n  isProxyOrigin,\n  parseUrlDeprecated,\n  tryDecodeUriComponent,\n} from './url';\nimport {urls} from './config';\n\n\n/**\n * Returns the value of the cookie. The cookie access is restricted and must\n * go through the privacy review. Before using this method please file a\n * GitHub issue with \"Privacy Review\" label.\n *\n * Returns the cookie's value or `null`.\n *\n * @param {!Window} win\n * @param {string} name\n * @return {?string}\n */\nexport function getCookie(win, name) {\n  const cookieString = tryGetDocumentCookieNoInline(win);\n  if (!cookieString) {\n    return null;\n  }\n  const cookies = cookieString.split(';');\n  for (let i = 0; i < cookies.length; i++) {\n    const cookie = cookies[i].trim();\n    const eq = cookie.indexOf('=');\n    if (eq == -1) {\n      continue;\n    }\n    if (tryDecodeUriComponent(cookie.substring(0, eq).trim()) == name) {\n      const value = cookie.substring(eq + 1).trim();\n      return tryDecodeUriComponent(value, value);\n    }\n  }\n  return null;\n}\n\n/**\n * This method should not be inlined to prevent TryCatch deoptimization.\n * NoInline keyword at the end of function name also prevents Closure compiler\n * from inlining the function.\n * @param {!Window} win\n * @return {string}\n */\nfunction tryGetDocumentCookieNoInline(win) {\n  try {\n    return win.document.cookie;\n  } catch (e) {\n    // Act as if no cookie is available. Exceptions can be thrown when\n    // AMP docs are opened on origins that do not allow setting\n    // cookies such as null origins.\n    return '';\n  }\n}\n\n/**\n * Sets the value of the cookie. The cookie access is restricted and must\n * go through the privacy review. Before using this method please file a\n * GitHub issue with \"Privacy Review\" label.\n *\n * @param {!Window} win\n * @param {string} name\n * @param {string} value\n * @param {time} expirationTime\n * @param {{\n *   highestAvailableDomain:(boolean|undefined),\n *   domain:(string|undefined)\n * }=} opt_options\n *     - highestAvailableDomain: If true, set the cookie at the widest domain\n *       scope allowed by the browser. E.g. on example.com if we are currently\n *       on www.example.com.\n *     - domain: Explicit domain to set.\n *     - allowOnProxyOrigin: Allow setting a cookie on the AMP Cache.\n */\nexport function setCookie(win, name, value, expirationTime, opt_options) {\n  checkOriginForSettingCookie(win, opt_options, name);\n  if (opt_options && opt_options.highestAvailableDomain) {\n    const parts = win.location.hostname.split('.');\n    let domain = parts[parts.length - 1];\n    for (let i = parts.length - 2; i >= 0; i--) {\n      domain = parts[i] + '.' + domain;\n      trySetCookie(win, name, value, expirationTime, domain);\n      if (getCookie(win, name) == value) {\n        return;\n      }\n    }\n  }\n  let domain = undefined;\n  if (opt_options && opt_options.domain) {\n    domain = opt_options.domain;\n  }\n  trySetCookie(win, name, value, expirationTime, domain);\n}\n\n/**\n * Attempt to set a cookie with the given params.\n *\n * @param {!Window} win\n * @param {string} name\n * @param {string} value\n * @param {time} expirationTime\n * @param {string|undefined} domain\n */\nfunction trySetCookie(win, name, value, expirationTime, domain) {\n  // We do not allow setting cookies on the domain that contains both\n  // the cdn. and www. hosts.\n  if (domain == 'ampproject.org') {\n    // Actively delete them.\n    value = 'delete';\n    expirationTime = 0;\n  }\n  const cookie = encodeURIComponent(name) + '=' +\n      encodeURIComponent(value) +\n      '; path=/' +\n      (domain ? '; domain=' + domain : '') +\n      '; expires=' + new Date(expirationTime).toUTCString();\n  try {\n    win.document.cookie = cookie;\n  } catch (ignore) {\n    // Do not throw if setting the cookie failed Exceptions can be thrown\n    // when AMP docs are opened on origins that do not allow setting\n    // cookies such as null origins.\n  }\n}\n\n/**\n * Throws if a given cookie should not be set on the given origin.\n * This is a defense-in-depth. Callers should never run into this.\n *\n * @param {!Window} win\n * @param {!Object|undefined} options\n * @param {string} name For the error message.\n */\nfunction checkOriginForSettingCookie(win, options, name) {\n  if (options && options.allowOnProxyOrigin) {\n    return;\n  }\n  if (isProxyOrigin(win.location.href)) {\n    throw new Error('Should never attempt to set cookie on proxy origin: '\n        + name);\n  }\n\n  const current = parseUrlDeprecated(win.location.href).hostname.toLowerCase();\n  const proxy = parseUrlDeprecated(urls.cdn).hostname.toLowerCase();\n  if (current == proxy || endsWith(current, '.' + proxy)) {\n    throw new Error('Should never attempt to set cookie on proxy origin.'\n        + ' (in depth check): ' + name);\n  }\n}\n","/**\n * Copyright 2015 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Deferred} from './utils/promise';\nimport {cssEscape} from '../third_party/css-escape/css-escape';\nimport {dev} from './log';\nimport {dict} from './utils/object';\nimport {startsWith} from './string';\nimport {toWin} from './types';\n\nconst HTML_ESCAPE_CHARS = {\n  '&': '&amp;',\n  '<': '&lt;',\n  '>': '&gt;',\n  '\"': '&quot;',\n  \"'\": '&#x27;',\n  '`': '&#x60;',\n};\nconst HTML_ESCAPE_REGEX = /(&|<|>|\"|'|`)/g;\n\n/** @const {string} */\nexport const UPGRADE_TO_CUSTOMELEMENT_PROMISE =\n    '__AMP_UPG_PRM';\n\n/** @const {string} */\nexport const UPGRADE_TO_CUSTOMELEMENT_RESOLVER =\n    '__AMP_UPG_RES';\n\n/**\n * Waits until the child element is constructed. Once the child is found, the\n * callback is executed.\n * @param {!Element} parent\n * @param {function(!Element):boolean} checkFunc\n * @param {function()} callback\n */\nexport function waitForChild(parent, checkFunc, callback) {\n  if (checkFunc(parent)) {\n    callback();\n    return;\n  }\n  /** @const {!Window} */\n  const win = toWin(parent.ownerDocument.defaultView);\n  if (win.MutationObserver) {\n    /** @const {MutationObserver} */\n    const observer = new win.MutationObserver(() => {\n      if (checkFunc(parent)) {\n        observer.disconnect();\n        callback();\n      }\n    });\n    observer.observe(parent, {childList: true});\n  } else {\n    /** @const {number} */\n    const interval = win.setInterval(() => {\n      if (checkFunc(parent)) {\n        win.clearInterval(interval);\n        callback();\n      }\n    }, /* milliseconds */ 5);\n  }\n}\n\n/**\n * Waits until the child element is constructed. Once the child is found, the\n * promise is resolved.\n * @param {!Element} parent\n * @param {function(!Element):boolean} checkFunc\n * @return {!Promise}\n */\nexport function waitForChildPromise(parent, checkFunc) {\n  return new Promise(resolve => {\n    waitForChild(parent, checkFunc, resolve);\n  });\n}\n\n/**\n * Waits for document's body to be available.\n * Will be deprecated soon; use {@link AmpDoc#whenBodyAvailable} or\n * @{link DocumentState#onBodyAvailable} instead.\n * @param {!Document} doc\n * @param {function()} callback\n */\nexport function waitForBody(doc, callback) {\n  waitForChild(doc.documentElement, () => !!doc.body, callback);\n}\n\n\n/**\n * Waits for document's body to be available.\n * @param {!Document} doc\n * @return {!Promise}\n */\nexport function waitForBodyPromise(doc) {\n  return new Promise(resolve => {\n    waitForBody(doc, resolve);\n  });\n}\n\n\n/**\n * Removes the element.\n * @param {!Element} element\n */\nexport function removeElement(element) {\n  if (element.parentElement) {\n    element.parentElement.removeChild(element);\n  }\n}\n\n\n/**\n * Removes all child nodes of the specified element.\n * @param {!Element} parent\n */\nexport function removeChildren(parent) {\n  while (parent.firstChild) {\n    parent.removeChild(parent.firstChild);\n  }\n}\n\n\n/**\n * Copies all children nodes of element \"from\" to element \"to\". Child nodes\n * are deeply cloned. Notice, that this method should be used with care and\n * preferably on smaller subtrees.\n * @param {!Element} from\n * @param {!Element|!DocumentFragment} to\n */\nexport function copyChildren(from, to) {\n  const frag = to.ownerDocument.createDocumentFragment();\n  for (let n = from.firstChild; n; n = n.nextSibling) {\n    frag.appendChild(n.cloneNode(true));\n  }\n  to.appendChild(frag);\n}\n\n/**\n * Insert the element in the root after the element named after or\n * if that is null at the beginning.\n * @param {!Element|!ShadowRoot} root\n * @param {!Element} element\n * @param {?Node} after\n */\nexport function insertAfterOrAtStart(root, element, after) {\n  const before = after ? after.nextSibling : root.firstChild;\n  root.insertBefore(element, before);\n}\n\n/**\n * Add attributes to an element.\n * @param {!Element} element\n * @param {!JsonObject<string, string>} attributes\n * @return {!Element} created element\n */\nexport function addAttributesToElement(element, attributes) {\n  for (const attr in attributes) {\n    element.setAttribute(attr, attributes[attr]);\n  }\n  return element;\n}\n\n/**\n * Create a new element on document with specified tagName and attributes.\n * @param {!Document} doc\n * @param {string} tagName\n * @param {!JsonObject<string, string>} attributes\n * @return {!Element} created element\n */\nexport function createElementWithAttributes(doc, tagName, attributes) {\n  const element = doc.createElement(tagName);\n  return addAttributesToElement(element, attributes);\n}\n\n/**\n * Returns true if node is connected (attached).\n * @param {!Node} node\n * @return {boolean}\n * @see https://dom.spec.whatwg.org/#connected\n */\nexport function isConnectedNode(node) {\n  const connected = node.isConnected;\n  if (connected !== undefined) {\n    return connected;\n  }\n\n  // \"An element is connected if its shadow-including root is a document.\"\n  let n = node;\n  do {\n    n = rootNodeFor(n);\n    if (n.host) {\n      n = n.host;\n    } else {\n      break;\n    }\n  } while (true);\n  return n.nodeType === Node.DOCUMENT_NODE;\n}\n\n/**\n * Returns the root for a given node. Does not cross shadow DOM boundary.\n * @param {!Node} node\n * @return {!Node}\n */\nexport function rootNodeFor(node) {\n  if (Node.prototype.getRootNode) {\n    // Type checker says `getRootNode` may return null.\n    return node.getRootNode() || node;\n  }\n  let n;\n  for (n = node; !!n.parentNode; n = n.parentNode) {}\n  return n;\n}\n\n/**\n * Finds the closest element that satisfies the callback from this element\n * up the DOM subtree.\n * @param {!Element} element\n * @param {function(!Element):boolean} callback\n * @param {Element=} opt_stopAt optional elemnt to stop the search at.\n * @return {?Element}\n */\nexport function closest(element, callback, opt_stopAt) {\n  for (let el = element; el && el !== opt_stopAt; el = el.parentElement) {\n    if (callback(el)) {\n      return el;\n    }\n  }\n  return null;\n}\n\n\n/**\n * Finds the closest node that satisfies the callback from this node\n * up the DOM subtree.\n * @param {!Node} node\n * @param {function(!Node):boolean} callback\n * @return {?Node}\n */\nexport function closestNode(node, callback) {\n  for (let n = node; n; n = n.parentNode) {\n    if (callback(n)) {\n      return n;\n    }\n  }\n  return null;\n}\n\n\n/**\n * Finds the closest element with the specified name from this element\n * up the DOM subtree.\n * @param {!Element} element\n * @param {string} tagName\n * @return {?Element}\n */\nexport function closestByTag(element, tagName) {\n  if (element.closest) {\n    return element.closest(tagName);\n  }\n  tagName = tagName.toUpperCase();\n  return closest(element, el => {\n    return el.tagName == tagName;\n  });\n}\n\n/**\n * Finds the closest element with the specified selector from this element\n * @param {!Element} element\n * @param {string} selector\n * @return {?Element} closest ancestor if found.\n */\nexport function closestBySelector(element, selector) {\n  if (element.closest) {\n    return element.closest(selector);\n  }\n\n  return closest(element, el => {\n    return matches(el, selector);\n  });\n}\n\n/**\n * Checks if the given element matches the selector\n * @param  {!Element} el The element to verify\n * @param  {string} selector The selector to check against\n * @return {boolean} True if the element matched the selector. False otherwise.\n */\nexport function matches(el, selector) {\n  const matcher = el.matches ||\n      el.webkitMatchesSelector ||\n      el.mozMatchesSelector ||\n      el.msMatchesSelector ||\n      el.oMatchesSelector;\n  if (matcher) {\n    return matcher.call(el, selector);\n  }\n  return false; // IE8 always returns false.\n}\n\n/**\n * Finds the first descendant element with the specified name.\n * @param {!Element|!Document|!ShadowRoot} element\n * @param {string} tagName\n * @return {?Element}\n */\nexport function elementByTag(element, tagName) {\n  let elements;\n  // getElementsByTagName() is not supported on ShadowRoot.\n  if (typeof element.getElementsByTagName === 'function') {\n    elements = element.getElementsByTagName(tagName);\n  } else {\n    elements = element./*OK*/querySelectorAll(tagName);\n  }\n  return (elements && elements[0]) || null;\n}\n\n\n/**\n * Finds the first child element that satisfies the callback.\n * @param {!Element} parent\n * @param {function(!Element):boolean} callback\n * @return {?Element}\n */\nexport function childElement(parent, callback) {\n  for (let child = parent.firstElementChild; child;\n    child = child.nextElementSibling) {\n    if (callback(child)) {\n      return child;\n    }\n  }\n  return null;\n}\n\n\n/**\n * Finds all child elements that satisfy the callback.\n * @param {!Element} parent\n * @param {function(!Element):boolean} callback\n * @return {!Array<!Element>}\n */\nexport function childElements(parent, callback) {\n  const children = [];\n  for (let child = parent.firstElementChild; child;\n    child = child.nextElementSibling) {\n    if (callback(child)) {\n      children.push(child);\n    }\n  }\n  return children;\n}\n\n\n/**\n * Finds the last child element that satisfies the callback.\n * @param {!Element} parent\n * @param {function(!Element):boolean} callback\n * @return {?Element}\n */\nexport function lastChildElement(parent, callback) {\n  for (let child = parent.lastElementChild; child;\n    child = child.previousElementSibling) {\n    if (callback(child)) {\n      return child;\n    }\n  }\n  return null;\n}\n\n/**\n * Finds all child nodes that satisfy the callback.\n * These nodes can include Text, Comment and other child nodes.\n * @param {!Node} parent\n * @param {function(!Node):boolean} callback\n * @return {!Array<!Node>}\n */\nexport function childNodes(parent, callback) {\n  const nodes = [];\n  for (let child = parent.firstChild; child;\n    child = child.nextSibling) {\n    if (callback(child)) {\n      nodes.push(child);\n    }\n  }\n  return nodes;\n}\n\n/**\n * @type {boolean|undefined}\n * @visibleForTesting\n */\nlet scopeSelectorSupported;\n\n/**\n * @param {boolean|undefined} val\n * @visibleForTesting\n */\nexport function setScopeSelectorSupportedForTesting(val) {\n  scopeSelectorSupported = val;\n}\n\n/**\n * Test that the :scope selector is supported and behaves correctly.\n * @param {!Element} parent\n * @return {boolean}\n */\nfunction isScopeSelectorSupported(parent) {\n  const doc = parent.ownerDocument;\n  try {\n    const testElement = doc.createElement('div');\n    const testChild = doc.createElement('div');\n    testElement.appendChild(testChild);\n    // NOTE(cvializ, #12383): Firefox's implementation is incomplete,\n    // therefore we test actual functionality of`:scope` as well.\n    return testElement./*OK*/querySelector(':scope div') === testChild;\n  } catch (e) {\n    return false;\n  }\n}\n\n/**\n * Finds the first child element that has the specified attribute.\n * @param {!Element} parent\n * @param {string} attr\n * @return {?Element}\n */\nexport function childElementByAttr(parent, attr) {\n  return scopedQuerySelector/*OK*/(parent, `> [${attr}]`);\n}\n\n\n/**\n * Finds the last child element that has the specified attribute.\n * @param {!Element} parent\n * @param {string} attr\n * @return {?Element}\n */\nexport function lastChildElementByAttr(parent, attr) {\n  return lastChildElement(parent, el => {\n    return el.hasAttribute(attr);\n  });\n}\n\n\n/**\n * Finds all child elements that has the specified attribute.\n * @param {!Element} parent\n * @param {string} attr\n * @return {!NodeList<!Element>}\n */\nexport function childElementsByAttr(parent, attr) {\n  return scopedQuerySelectorAll/*OK*/(parent, `> [${attr}]`);\n}\n\n\n/**\n * Finds the first child element that has the specified tag name.\n * @param {!Element} parent\n * @param {string} tagName\n * @return {?Element}\n */\nexport function childElementByTag(parent, tagName) {\n  return scopedQuerySelector/*OK*/(parent, `> ${tagName}`);\n}\n\n\n/**\n * Finds all child elements with the specified tag name.\n * @param {!Element} parent\n * @param {string} tagName\n * @return {!NodeList<!Element>}\n */\nexport function childElementsByTag(parent, tagName) {\n  return scopedQuerySelectorAll/*OK*/(parent, `> ${tagName}`);\n}\n\n\n/**\n * Finds the first element that matches `selector`, scoped inside `root`.\n * Note: in IE, this causes a quick mutation of the element's class list.\n * @param {!Element} root\n * @param {string} selector\n * @return {?Element}\n */\nexport function scopedQuerySelector(root, selector) {\n  if (scopeSelectorSupported == null) {\n    scopeSelectorSupported = isScopeSelectorSupported(root);\n  }\n  if (scopeSelectorSupported) {\n    return root./*OK*/querySelector(`:scope ${selector}`);\n  }\n\n  // Only IE.\n  const unique = 'i-amphtml-scoped';\n  root.classList.add(unique);\n  const element = root./*OK*/querySelector(`.${unique} ${selector}`);\n  root.classList.remove(unique);\n  return element;\n}\n\n\n/**\n * Finds the every element that matches `selector`, scoped inside `root`.\n * Note: in IE, this causes a quick mutation of the element's class list.\n * @param {!Element} root\n * @param {string} selector\n * @return {!NodeList<!Element>}\n */\nexport function scopedQuerySelectorAll(root, selector) {\n  if (scopeSelectorSupported == null) {\n    scopeSelectorSupported = isScopeSelectorSupported(root);\n  }\n  if (scopeSelectorSupported) {\n    return root./*OK*/querySelectorAll(`:scope ${selector}`);\n  }\n\n  // Only IE.\n  const unique = 'i-amphtml-scoped';\n  root.classList.add(unique);\n  const elements = root./*OK*/querySelectorAll(`.${unique} ${selector}`);\n  root.classList.remove(unique);\n  return elements;\n}\n\n\n/**\n * Returns element data-param- attributes as url parameters key-value pairs.\n * e.g. data-param-some-attr=value -> {someAttr: value}.\n * @param {!Element} element\n * @param {function(string):string=} opt_computeParamNameFunc to compute the\n *    parameter name, get passed the camel-case parameter name.\n * @param {!RegExp=} opt_paramPattern Regex pattern to match data attributes.\n * @return {!JsonObject}\n */\nexport function getDataParamsFromAttributes(element, opt_computeParamNameFunc,\n  opt_paramPattern) {\n  const computeParamNameFunc = opt_computeParamNameFunc || (key => key);\n  const {dataset} = element;\n  const params = dict();\n  const paramPattern = opt_paramPattern ? opt_paramPattern : /^param(.+)/;\n  for (const key in dataset) {\n    const matches = key.match(paramPattern);\n    if (matches) {\n      const param = matches[1][0].toLowerCase() + matches[1].substr(1);\n      params[computeParamNameFunc(param)] = dataset[key];\n    }\n  }\n  return params;\n}\n\n/**\n * Whether the element have a next node in the document order.\n * This means either:\n *  a. The element itself has a nextSibling.\n *  b. Any of the element ancestors has a nextSibling.\n * @param {!Element} element\n * @param {?Node} opt_stopNode\n * @return {boolean}\n */\nexport function hasNextNodeInDocumentOrder(element, opt_stopNode) {\n  let currentElement = element;\n  do {\n    if (currentElement.nextSibling) {\n      return true;\n    }\n  } while ((currentElement = currentElement.parentNode) &&\n            currentElement != opt_stopNode);\n  return false;\n}\n\n\n/**\n * Finds all ancestor elements that satisfy predicate.\n * @param {!Element} child\n * @param {function(!Element):boolean} predicate\n * @return {!Array<!Element>}\n */\nexport function ancestorElements(child, predicate) {\n  const ancestors = [];\n  for (let ancestor = child.parentElement; ancestor;\n    ancestor = ancestor.parentElement) {\n    if (predicate(ancestor)) {\n      ancestors.push(ancestor);\n    }\n  }\n  return ancestors;\n}\n\n\n/**\n * Finds all ancestor elements that has the specified tag name.\n * @param {!Element} child\n * @param {string} tagName\n * @return {!Array<!Element>}\n */\nexport function ancestorElementsByTag(child, tagName) {\n  tagName = tagName.toUpperCase();\n  return ancestorElements(child, el => {\n    return el.tagName == tagName;\n  });\n}\n\n/**\n * Returns a clone of the content of a template element.\n *\n * Polyfill to replace .content access for browsers that do not support\n * HTMLTemplateElements natively.\n *\n * @param {!HTMLTemplateElement|!Element} template\n * @return {!DocumentFragment}\n */\nexport function templateContentClone(template) {\n  if ('content' in template) {\n    return template.content.cloneNode(true);\n  } else {\n    const content = template.ownerDocument.createDocumentFragment();\n    copyChildren(template, content);\n    return content;\n  }\n}\n\n/**\n * Iterate over an array-like. Some collections like NodeList are\n * lazily evaluated in some browsers, and accessing `length` forces full\n * evaluation. We can improve performance by iterating until an element is\n * `undefined` to avoid checking the `length` property.\n * Test cases: https://jsperf.com/iterating-over-collections-of-elements\n * @param {!IArrayLike<T>} iterable\n * @param {function(T, number)} cb\n * @template T\n */\nexport function iterateCursor(iterable, cb) {\n  for (let i = 0, value; (value = iterable[i]) !== undefined; i++) {\n    cb(value, i);\n  }\n}\n\n/**\n * This method wraps around window's open method. It first tries to execute\n * `open` call with the provided target and if it fails, it retries the call\n * with the `_top` target. This is necessary given that in some embedding\n * scenarios, such as iOS' WKWebView, navigation to `_blank` and other targets\n * is blocked by default.\n *\n * @param {!Window} win\n * @param {string} url\n * @param {string} target\n * @param {string=} opt_features\n * @return {?Window}\n */\nexport function openWindowDialog(win, url, target, opt_features) {\n  // Try first with the specified target. If we're inside the WKWebView or\n  // a similar environments, this method is expected to fail by default for\n  // all targets except `_top`.\n  let res;\n  try {\n    res = win.open(url, target, opt_features);\n  } catch (e) {\n    dev().error('DOM', 'Failed to open url on target: ', target, e);\n  }\n\n  // Then try with `_top` target.\n  if (!res && target != '_top') {\n    res = win.open(url, '_top');\n  }\n  return res;\n}\n\n/**\n * Whether the element is a script tag with application/json type.\n * @param {!Element} element\n * @return {boolean}\n */\nexport function isJsonScriptTag(element) {\n  return element.tagName == 'SCRIPT' &&\n            element.getAttribute('type').toUpperCase() == 'APPLICATION/JSON';\n}\n\n/**\n * Whether the element is a script tag with application/json type.\n * @param {!Element} element\n * @return {boolean}\n */\nexport function isJsonLdScriptTag(element) {\n  return element.tagName == 'SCRIPT' &&\n      element.getAttribute('type').toUpperCase() == 'APPLICATION/LD+JSON';\n}\n\n/**\n * Whether the page's direction is right to left or not.\n * @param {!Document} doc\n * @return {boolean}\n */\nexport function isRTL(doc) {\n  const dir = doc.body.getAttribute('dir')\n                 || doc.documentElement.getAttribute('dir')\n                 || 'ltr';\n  return dir == 'rtl';\n}\n\n\n/**\n * Escapes an ident (ID or a class name) to be used as a CSS selector.\n *\n * See https://drafts.csswg.org/cssom/#serialize-an-identifier.\n *\n * @param {string} ident\n * @return {string}\n */\nexport function escapeCssSelectorIdent(ident) {\n  return cssEscape(ident);\n}\n\n/**\n * Escapes an ident in a way that can be used by :nth-child() psuedo-class.\n *\n * See https://github.com/w3c/csswg-drafts/issues/2306.\n *\n * @param {string|number} ident\n * @return {string}\n */\nexport function escapeCssSelectorNth(ident) {\n  const escaped = String(ident);\n  // Ensure it doesn't close the nth-child psuedo class.\n  dev().assert(escaped.indexOf(')') === -1);\n  return escaped;\n}\n\n/**\n * Escapes `<`, `>` and other HTML charcaters with their escaped forms.\n * @param {string} text\n * @return {string}\n */\nexport function escapeHtml(text) {\n  if (!text) {\n    return text;\n  }\n  return text.replace(HTML_ESCAPE_REGEX, escapeHtmlChar);\n}\n\n/**\n * @param {string} c\n * @return {string}\n */\nfunction escapeHtmlChar(c) {\n  return HTML_ESCAPE_CHARS[c];\n}\n\n/**\n * Tries to focus on the given element; fails silently if browser throws an\n * exception.\n * @param {!Element} element\n */\nexport function tryFocus(element) {\n  try {\n    element./*OK*/focus();\n  } catch (e) {\n    // IE <= 7 may throw exceptions when focusing on hidden items.\n  }\n}\n\n/**\n * Whether the given window is in an iframe or not.\n * @param {!Window} win\n * @return {boolean}\n */\nexport function isIframed(win) {\n  return win.parent && win.parent != win;\n}\n\n/**\n * Determines if this element is an AMP element\n * @param {!Element} element\n * @return {boolean}\n */\nexport function isAmpElement(element) {\n  const tag = element.tagName;\n  // Use prefix to recognize AMP element. This is necessary because stub\n  // may not be attached yet.\n  return startsWith(tag, 'AMP-') &&\n      // Some \"amp-*\" elements are not really AMP elements. :smh:\n      !(tag == 'AMP-STICKY-AD-TOP-PADDING' || tag == 'AMP-BODY');\n}\n\n/**\n * Return a promise that resolve when an AMP element upgrade from HTMLElement\n * to CustomElement\n * @param {!Element} element\n * @return {!Promise<!Element>}\n */\nexport function whenUpgradedToCustomElement(element) {\n  dev().assert(isAmpElement(element), 'element is not AmpElement');\n  if (element.createdCallback) {\n    // Element already is CustomElement;\n    return Promise.resolve(element);\n  }\n  // If Element is still HTMLElement, wait for it to upgrade to customElement\n  // Note: use pure string to avoid obfuscation between versions.\n  if (!element[UPGRADE_TO_CUSTOMELEMENT_PROMISE]) {\n    const deferred = new Deferred();\n    element[UPGRADE_TO_CUSTOMELEMENT_PROMISE] = deferred.promise;\n    element[UPGRADE_TO_CUSTOMELEMENT_RESOLVER] = deferred.resolve;\n\n  }\n\n  return element[UPGRADE_TO_CUSTOMELEMENT_PROMISE];\n}\n\n/**\n * Replacement for `Element.requestFullscreen()` method.\n * https://developer.mozilla.org/en-US/docs/Web/API/Element/requestFullscreen\n * @param {!Element} element\n */\nexport function fullscreenEnter(element) {\n  const requestFs = element.requestFullscreen\n   || element.requestFullScreen\n   || element.webkitRequestFullscreen\n   || element.webkitRequestFullScreen\n   || element.webkitEnterFullscreen\n   || element.webkitEnterFullScreen\n   || element.msRequestFullscreen\n   || element.msRequestFullScreen\n   || element.mozRequestFullscreen\n   || element.mozRequestFullScreen;\n  if (requestFs) {\n    requestFs.call(element);\n  }\n}\n\n/**\n * Replacement for `Document.exitFullscreen()` method.\n * https://developer.mozilla.org/en-US/docs/Web/API/Document/exitFullscreen\n * @param {!Element} element\n */\nexport function fullscreenExit(element) {\n  let exitFs = element.cancelFullScreen\n               || element.exitFullscreen\n               || element.exitFullScreen\n               || element.webkitExitFullscreen\n               || element.webkitExitFullScreen\n               || element.webkitCancelFullScreen\n               || element.mozCancelFullScreen\n               || element.msExitFullscreen;\n  if (exitFs) {\n    exitFs.call(element);\n    return;\n  }\n  if (element.ownerDocument) {\n    exitFs = element.ownerDocument.cancelFullScreen\n             || element.ownerDocument.exitFullscreen\n             || element.ownerDocument.exitFullScreen\n             || element.ownerDocument.webkitExitFullscreen\n             || element.ownerDocument.webkitExitFullScreen\n             || element.ownerDocument.webkitCancelFullScreen\n             || element.ownerDocument.mozCancelFullScreen\n             || element.ownerDocument.msExitFullscreen;\n  }\n  if (exitFs) {\n    exitFs.call(element.ownerDocument);\n    return;\n  }\n}\n\n\n/**\n * Replacement for `Document.fullscreenElement`.\n * https://developer.mozilla.org/en-US/docs/Web/API/Document/fullscreenElement\n * @param {!Element} element\n * @return {boolean}\n */\nexport function isFullscreenElement(element) {\n  const isFullscreen = element.webkitDisplayingFullscreen;\n  if (isFullscreen) {\n    return true;\n  }\n  if (element.ownerDocument) {\n    const fullscreenElement = element.ownerDocument.fullscreenElement\n             || element.ownerDocument.webkitFullscreenElement\n             || element.ownerDocument.mozFullScreenElement\n             || element.webkitCurrentFullScreenElement;\n    if (fullscreenElement == element) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/**\n * Returns true if node is not disabled.\n *\n * IE8 can return false positives, see {@link matches}.\n * @param {!Element} element\n * @return {boolean}\n * @see https://www.w3.org/TR/html5/forms.html#concept-fe-disabled\n */\nexport function isEnabled(element) {\n  return !(element.disabled || matches(element, ':disabled'));\n}\n","/**\n * Copyright 2016 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as dom from './dom';\nimport {\n  getAmpdoc,\n  getExistingServiceForDocInEmbedScope,\n  getService,\n  getServicePromise,\n  getServicePromiseForDoc,\n  getServicePromiseOrNull,\n  getServicePromiseOrNullForDoc,\n  getTopWindow,\n} from './service';\nimport {toWin} from './types';\nimport {user} from './log';\n\n/**\n * Returns a promise for a service for the given id and window. Also expects an\n * element that has the actual implementation. The promise resolves when the\n * implementation loaded. Users should typically wrap this as a special purpose\n * function (e.g. Services.viewportForDoc(...)) for type safety and because the\n * factory should not be passed around.\n * @param {!Window} win\n * @param {string} id of the service.\n * @param {string} extension Name of the custom extension that provides the\n *     implementation of this service.\n * @param {boolean=} opt_element Whether this service is provided by an element,\n *     not the extension.\n * @return {!Promise<*>}\n */\nexport function getElementService(win, id, extension, opt_element) {\n  return getElementServiceIfAvailable(win, id, extension, opt_element).then(\n      service => assertService(service, id, extension));\n}\n\n/**\n * Same as getElementService but produces null if the given element is not\n * actually available on the current page.\n * @param {!Window} win\n * @param {string} id of the service.\n * @param {string} extension Name of the custom extension that provides the\n *     implementation of this service.\n * @param {boolean=} opt_element Whether this service is provided by an\n *     element, not the extension.\n * @return {!Promise<?Object>}\n */\nexport function getElementServiceIfAvailable(win, id, extension, opt_element) {\n  const s = getServicePromiseOrNull(win, id);\n  if (s) {\n    return /** @type {!Promise<?Object>} */ (s);\n  }\n  return getElementServicePromiseOrNull(win, id, extension, opt_element);\n}\n\n/**\n * @param {!Window} win\n * @param {string} elementName Name of an extended custom element.\n * @return {boolean} Whether this element is scheduled to be loaded.\n */\nfunction isElementScheduled(win, elementName) {\n  // Set in custom-element.js\n  if (!win.ampExtendedElements) {\n    return false;\n  }\n  return !!win.ampExtendedElements[elementName];\n}\n\n\n/**\n * Returns a promise for a service for the given id and window. Also expects an\n * element that has the actual implementation. The promise resolves when the\n * implementation loaded. Users should typically wrap this as a special purpose\n * function (e.g. Services.viewportForDoc(...)) for type safety and because the\n * factory should not be passed around.\n * @param {!Element|!./service/ampdoc-impl.AmpDoc} elementOrAmpDoc\n * @param {string} id of the service.\n * @param {string} extension Name of the custom extension that provides the\n *     implementation of this service.\n * @param {boolean=} opt_element Whether this service is provided by an element,\n *     not the extension.\n * @return {!Promise<*>}\n */\nexport function getElementServiceForDoc(elementOrAmpDoc, id, extension,\n  opt_element) {\n  return getElementServiceIfAvailableForDoc(\n      elementOrAmpDoc, id, extension, opt_element)\n      .then(service => assertService(service, id, extension));\n}\n\n/**\n * Same as getElementService but produces null if the given element is not\n * actually available on the current page.\n * @param {!Element|!./service/ampdoc-impl.AmpDoc} elementOrAmpDoc\n * @param {string} id of the service.\n * @param {string} extension Name of the custom extension that provides the\n *     implementation of this service.\n * @param {boolean=} opt_element Whether this service is provided by an\n *     element, not the extension.\n * @return {!Promise<?Object>}\n */\nexport function getElementServiceIfAvailableForDoc(\n  elementOrAmpDoc, id, extension, opt_element) {\n  const ampdoc = getAmpdoc(elementOrAmpDoc);\n  const s = getServicePromiseOrNullForDoc(elementOrAmpDoc, id);\n  if (s) {\n    return /** @type {!Promise<?Object>} */ (s);\n  }\n\n  return ampdoc.whenBodyAvailable()\n      .then(() => waitForExtensionIfPresent(\n          ampdoc.win, extension,\n          ampdoc.getHeadNode()))\n      .then(() => {\n        // If this service is provided by an element, then we can't depend on\n        // the service (they may not use the element).\n        if (opt_element) {\n          return getServicePromiseOrNullForDoc(elementOrAmpDoc, id);\n        } else if (isElementScheduled(ampdoc.win, extension)) {\n          return getServicePromiseForDoc(elementOrAmpDoc, id);\n        }\n        return null;\n      });\n}\n\n/**\n * Returns a promise for service for the given id in the embed scope of\n * a given node, if it exists. Otherwise, falls back to ampdoc scope IFF\n * the given node is in the top-level window.\n * @param {!Element|!./service/ampdoc-impl.AmpDoc} elementOrAmpDoc\n * @param {string} id of the service.\n * @param {string} extension Name of the custom element that provides\n *     the implementation of this service.\n * @return {!Promise<?Object>}\n */\nexport function getElementServiceIfAvailableForDocInEmbedScope(\n  elementOrAmpDoc, id, extension) {\n  const s = getExistingServiceForDocInEmbedScope(elementOrAmpDoc, id);\n  if (s) {\n    return /** @type {!Promise<?Object>} */ (Promise.resolve(s));\n  }\n  // Return embed-scope element service promise if scheduled.\n  if (elementOrAmpDoc.nodeType) {\n    const win = toWin(elementOrAmpDoc.ownerDocument.defaultView);\n    const topWin = getTopWindow(win);\n    // In embeds, doc-scope services are window-scope. But make sure to\n    // only do this for embeds (not the top window), otherwise we'd grab\n    // a promise from the wrong service holder which would never resolve.\n    if (win !== topWin) {\n      return getElementServicePromiseOrNull(win, id, extension);\n    } else {\n      // Fallback to ampdoc IFF the given node is _not_ FIE.\n      return getElementServiceIfAvailableForDoc(elementOrAmpDoc, id, extension);\n    }\n  }\n  return /** @type {!Promise<?Object>} */ (Promise.resolve(null));\n}\n\n/**\n * Throws user error if `service` is null.\n * @param {Object} service\n * @param {string} id\n * @param {string} extension\n * @return {!Object}\n * @private\n */\nfunction assertService(service, id, extension) {\n  return /** @type {!Object} */ (user().assert(service,\n      'Service %s was requested to be provided through %s, ' +\n      'but %s is not loaded in the current page. To fix this ' +\n      'problem load the JavaScript file for %s in this page.',\n      id, extension, extension, extension));\n}\n\n/**\n * Get list of all the extension JS files\n * @param {HTMLHeadElement|Element|ShadowRoot} head\n * @return {!Array<string>}\n */\nexport function extensionScriptsInNode(head) {\n  // ampdoc.getHeadNode() can return null\n  if (!head) {\n    return [];\n  }\n  const scripts = [];\n  const list = head.querySelectorAll('script[custom-element]');\n  for (let i = 0; i < list.length; i++) {\n    scripts.push(list[i].getAttribute('custom-element'));\n  }\n  return scripts;\n}\n\n/**\n * Waits for body to be present then verifies that an extension script is\n * present in head for installation.\n * @param {!./service/ampdoc-impl.AmpDoc} ampdoc\n * @param {string} extensionId\n * @return {!Promise<boolean>}\n */\nexport function isExtensionScriptInNode(ampdoc, extensionId) {\n  return ampdoc.whenBodyAvailable()\n      .then(() => {\n        return extensionScriptInNode(\n            ampdoc.getHeadNode(), extensionId);\n      });\n}\n\n/**\n * Verifies that an extension script is present in head for\n * installation.\n * @param {HTMLHeadElement|Element|ShadowRoot} head\n * @param {string} extensionId\n * @private\n */\nfunction extensionScriptInNode(head, extensionId) {\n  return extensionScriptsInNode(head).includes(extensionId);\n}\n\n/**\n * Waits for an extension if its script is present\n * @param {!Window} win\n * @param {string} extension\n * @param {HTMLHeadElement|Element|ShadowRoot} head\n * @return {!Promise}\n * @private\n */\nfunction waitForExtensionIfPresent(win, extension, head) {\n  /**\n   * If there is an extension script wait for it to load before trying\n   * to get the service. Prevents a race condition when everything but\n   * the extensions is in cache. If there is no script then it's either\n   * not present, or the service was defined by a test. In those cases\n   * we don't wait around for an extension that does not exist.\n   */\n\n  // TODO(jpettitt) investigate registerExtension to short circuit\n  // the dom call in extensionScriptsInNode()\n  if (!extensionScriptInNode(head, extension)) {\n    return Promise.resolve();\n  }\n\n  const extensions = getService(win, 'extensions');\n  return /** @type {!Promise<?Object>} */ (\n    extensions.waitForExtension(win, extension));\n}\n\n/**\n * Returns the promise for service with `id` on the given window if available.\n * Otherwise, resolves with null (service was not registered).\n * @param {!Window} win\n * @param {string} id\n * @param {string} extension\n * @param {boolean=} opt_element\n * @return {!Promise<Object>}\n * @private\n */\nfunction getElementServicePromiseOrNull(win, id, extension, opt_element) {\n  return dom.waitForBodyPromise(win.document)\n      .then(() => waitForExtensionIfPresent(win, extension, win.document.head))\n      .then(() => {\n        // If this service is provided by an element, then we can't depend on\n        // the service (they may not use the element).\n        if (opt_element) {\n          return getServicePromiseOrNull(win, id);\n        } else if (isElementScheduled(win, extension)) {\n          return getServicePromise(win, id);\n        }\n        return null;\n      });\n}\n","/**\n * Copyright 2015 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nimport {AmpEvents} from './amp-events';\nimport {Services} from './services';\nimport {\n  USER_ERROR_SENTINEL,\n  dev,\n  duplicateErrorIfNecessary,\n  isUserErrorEmbed,\n  isUserErrorMessage,\n} from './log';\nimport {experimentTogglesOrNull, getBinaryType, isCanary} from './experiments';\nimport {exponentialBackoff} from './exponential-backoff';\nimport {getMode} from './mode';\nimport {isExperimentOn} from './experiments';\nimport {\n  isLoadErrorMessage,\n} from './event-helper';\nimport {isProxyOrigin} from './url';\nimport {makeBodyVisible} from './style-installer';\nimport {startsWith} from './string';\nimport {triggerAnalyticsEvent} from './analytics';\nimport {urls} from './config';\n\n/**\n * @const {string}\n */\nconst CANCELLED = 'CANCELLED';\n\n/**\n * @const {string}\n */\nconst BLOCK_BY_CONSENT = 'BLOCK_BY_CONSENT';\n\n\n/**\n * The threshold for errors throttled because nothing can be done about\n * them, but we'd still like to report the rough number.\n * @const {number}\n */\nconst NON_ACTIONABLE_ERROR_THROTTLE_THRESHOLD = 0.001;\n\n/**\n * The threshold for errors throttled because nothing can be done about\n * them, but we'd still like to report the rough number.\n * @const {number}\n */\nconst USER_ERROR_THROTTLE_THRESHOLD = 0.1;\n\n\n/**\n * Collects error messages, so they can be included in subsequent reports.\n * That allows identifying errors that might be caused by previous errors.\n */\nlet accumulatedErrorMessages = self.AMPErrors || [];\n// Use a true global, to avoid multi-module inclusion issues.\nself.AMPErrors = accumulatedErrorMessages;\n\n/**\n * Pushes element into array, keeping at most the most recent limit elements\n *\n * @param {!Array<T>} array\n * @param {T} element\n * @param {number} limit\n * @template T\n */\nfunction pushLimit(array, element, limit) {\n  if (array.length >= limit) {\n    array.splice(0, array.length - limit + 1);\n  }\n  array.push(element);\n}\n\n/**\n * A wrapper around our exponentialBackoff, to lazy initialize it to avoid an\n * un-DCE'able side-effect.\n * @param {function()} work the function to execute after backoff\n * @return {number} the setTimeout id\n */\nlet reportingBackoff = function(work) {\n  // Set reportingBackoff as the lazy-created function. JS Vooodoooo.\n  reportingBackoff = exponentialBackoff(1.5);\n  return reportingBackoff(work);\n};\n\n/**\n * Attempts to stringify a value, falling back to String.\n * @param {*} value\n * @return {string}\n */\nfunction tryJsonStringify(value) {\n  try {\n    // Cast is fine, because we really don't care here. Just trying.\n    return JSON.stringify(/** @type {!JsonObject} */ (value));\n  } catch (e) {\n    return String(value);\n  }\n}\n\n/**\n * The true JS engine, as detected by inspecting an Error stack. This should be\n * used with the userAgent to tell definitely. I.e., Chrome on iOS is really a\n * Safari JS engine.\n */\nlet detectedJsEngine;\n\n/**\n * @param {!Window} win\n * @param {*} error\n * @param {!Element=} opt_associatedElement\n */\nexport function reportErrorForWin(win, error, opt_associatedElement) {\n  reportError(error, opt_associatedElement);\n  if (error && !!win && isUserErrorMessage(error.message)\n      && !isUserErrorEmbed(error.message)) {\n    reportErrorToAnalytics(/** @type {!Error} */(error), win);\n  }\n}\n\n/**\n * Reports an error. If the error has an \"associatedElement\" property\n * the element is marked with the `i-amphtml-element-error` and displays\n * the message itself. The message is always send to the console.\n * If the error has a \"messageArray\" property, that array is logged.\n * This way one gets the native fidelity of the console for things like\n * elements instead of stringification.\n * @param {*} error\n * @param {!Element=} opt_associatedElement\n * @return {!Error}\n */\nexport function reportError(error, opt_associatedElement) {\n  try {\n    // Convert error to the expected type.\n    let isValidError;\n    if (error) {\n      if (error.message !== undefined) {\n        error = duplicateErrorIfNecessary(/** @type {!Error} */(error));\n        isValidError = true;\n      } else {\n        const origError = error;\n        error = new Error(tryJsonStringify(origError));\n        error.origError = origError;\n      }\n    } else {\n      error = new Error('Unknown error');\n    }\n    // Report if error is not an expected type.\n    if (!isValidError && getMode().localDev && !getMode().test) {\n      setTimeout(function() {\n        const rethrow = new Error(\n            '_reported_ Error reported incorrectly: ' + error);\n        throw rethrow;\n      });\n    }\n\n    if (error.reported) {\n      return /** @type {!Error} */ (error);\n    }\n    error.reported = true;\n\n    // Update element.\n    const element = opt_associatedElement || error.associatedElement;\n    if (element && element.classList) {\n      element.classList.add('i-amphtml-error');\n      if (getMode().development) {\n        element.classList.add('i-amphtml-element-error');\n        element.setAttribute('error-message', error.message);\n      }\n    }\n\n    // Report to console.\n    if (self.console) {\n      const output = (console.error || console.log);\n      if (error.messageArray) {\n        output.apply(console, error.messageArray);\n      } else {\n        if (element) {\n          output.call(console, error.message, element);\n        } else if (!getMode().minified) {\n          output.call(console, error.stack);\n        } else {\n          output.call(console, error.message);\n        }\n      }\n    }\n    if (element && element.dispatchCustomEventForTesting) {\n      element.dispatchCustomEventForTesting(AmpEvents.ERROR, error.message);\n    }\n\n    // 'call' to make linter happy. And .call to make compiler happy\n    // that expects some @this.\n    reportErrorToServer['call'](undefined, undefined, undefined, undefined,\n        undefined, error);\n  } catch (errorReportingError) {\n    setTimeout(function() {\n      throw errorReportingError;\n    });\n  }\n  return /** @type {!Error} */ (error);\n}\n\n/**\n * Returns an error for a cancellation of a promise.\n * @return {!Error}\n */\nexport function cancellation() {\n  return new Error(CANCELLED);\n}\n\n/**\n * @param {*} errorOrMessage\n * @return {boolean}\n */\nexport function isCancellation(errorOrMessage) {\n  if (!errorOrMessage) {\n    return false;\n  }\n  if (typeof errorOrMessage == 'string') {\n    return startsWith(errorOrMessage, CANCELLED);\n  }\n  if (typeof errorOrMessage.message == 'string') {\n    return startsWith(errorOrMessage.message, CANCELLED);\n  }\n  return false;\n}\n\n/**\n * Returns an error for component blocked by consent\n * @return {!Error}\n */\nexport function blockedByConsentError() {\n  return new Error(BLOCK_BY_CONSENT);\n}\n\n/**\n * @param {*} errorOrMessage\n * @return {boolean}\n */\nexport function isBlockedByConsent(errorOrMessage) {\n  if (!errorOrMessage) {\n    return false;\n  }\n  if (typeof errorOrMessage == 'string') {\n    return startsWith(errorOrMessage, BLOCK_BY_CONSENT);\n  }\n  if (typeof errorOrMessage.message == 'string') {\n    return startsWith(errorOrMessage.message, BLOCK_BY_CONSENT);\n  }\n  return false;\n}\n\n\n/**\n * Install handling of global unhandled exceptions.\n * @param {!Window} win\n */\nexport function installErrorReporting(win) {\n  win.onerror = /** @type {!Function} */ (reportErrorToServer);\n  win.addEventListener('unhandledrejection', event => {\n    if (event.reason &&\n      (event.reason.message === CANCELLED ||\n      event.reason.message === BLOCK_BY_CONSENT)) {\n      event.preventDefault();\n      return;\n    }\n    reportError(event.reason || new Error('rejected promise ' + event));\n  });\n}\n\n/**\n * Signature designed, so it can work with window.onerror\n * @param {string|undefined} message\n * @param {string|undefined} filename\n * @param {string|undefined} line\n * @param {string|undefined} col\n * @param {*|undefined} error\n * @this {!Window|undefined}\n */\nfunction reportErrorToServer(message, filename, line, col, error) {\n  // Make an attempt to unhide the body.\n  if (this && this.document) {\n    makeBodyVisible(this.document);\n  }\n  if (getMode().localDev || getMode().development || getMode().test) {\n    return;\n  }\n  let hasNonAmpJs = false;\n  try {\n    hasNonAmpJs = detectNonAmpJs(self);\n  } catch (ignore) {\n    // Ignore errors during error report generation.\n  }\n  if (hasNonAmpJs && Math.random() > 0.01) {\n    // Only report 1% of errors on pages with non-AMP JS.\n    // These errors can almost never be acted upon, but spikes such as\n    // due to buggy browser extensions may be helpful to notify authors.\n    return;\n  }\n  const data = getErrorReportData(message, filename, line, col, error,\n      hasNonAmpJs);\n  if (data) {\n    // Report the error to viewer if it has the capability. The data passed\n    // to the viewer is exactly the same as the data passed to the server\n    // below.\n    maybeReportErrorToViewer(this, data);\n    reportingBackoff(() => {\n      const xhr = new XMLHttpRequest();\n      xhr.open('POST', urls.errorReporting, true);\n      xhr.send(JSON.stringify(data));\n    });\n  }\n}\n\n/**\n * Passes the given error data to the viewer if the following criteria is met:\n * - The viewer is a trusted viewer\n * - The viewer has the `errorReporter` capability\n * - The AMP doc is in single doc mode\n * - The AMP doc is opted-in for error interception (`<html>` tag has the\n *   `report-errors-to-viewer` attribute)\n *\n * @param {!Window} win\n * @param {!JsonObject} data Data from `getErrorReportData`.\n * @return {!Promise<boolean>} `Promise<True>` if the error was sent to the\n *     viewer, `Promise<False>` otherwise.\n * @visibleForTesting\n */\nexport function maybeReportErrorToViewer(win, data) {\n  const ampdocService = Services.ampdocServiceFor(win);\n  if (!ampdocService.isSingleDoc()) {\n    return Promise.resolve(false);\n  }\n  const ampdocSingle = ampdocService.getAmpDoc();\n  const htmlElement = ampdocSingle.getRootNode().documentElement;\n  const docOptedIn = htmlElement.hasAttribute('report-errors-to-viewer');\n  if (!docOptedIn) {\n    return Promise.resolve(false);\n  }\n\n  const viewer = Services.viewerForDoc(ampdocSingle);\n  if (!viewer.hasCapability('errorReporter')) {\n    return Promise.resolve(false);\n  }\n\n  return viewer.isTrustedViewer().then(viewerTrusted => {\n    if (!viewerTrusted) {\n      return false;\n    }\n    viewer.sendMessage('error', data);\n    return true;\n  });\n}\n\n/**\n * Signature designed, so it can work with window.onerror\n * @param {string|undefined} message\n * @param {string|undefined} filename\n * @param {string|undefined} line\n * @param {string|undefined} col\n * @param {*|undefined} error\n * @param {boolean} hasNonAmpJs\n * @return {!JsonObject|undefined} The data to post\n * visibleForTesting\n */\nexport function getErrorReportData(message, filename, line, col, error,\n  hasNonAmpJs) {\n  let expected = false;\n  if (error) {\n    if (error.message) {\n      message = error.message;\n    } else {\n      // This should never be a string, but sometimes it is.\n      message = String(error);\n    }\n    // An \"expected\" error is still an error, i.e. some features are disabled\n    // or not functioning fully because of it. However, it's an expected\n    // error. E.g. as is the case with some browser API missing (storage).\n    // Thus, the error can be classified differently by log aggregators.\n    // The main goal is to monitor that an \"expected\" error doesn't deteriorate\n    // over time. It's impossible to completely eliminate it.\n    if (error.expected) {\n      expected = true;\n    }\n  }\n  if (!message) {\n    message = 'Unknown error';\n  }\n  if (/_reported_/.test(message)) {\n    return;\n  }\n  if (message == CANCELLED) {\n    return;\n  }\n\n  const detachedWindow = !(self && self.window);\n  const throttleBase = Math.random();\n\n  // We throttle load errors and generic \"Script error.\" errors\n  // that have no information and thus cannot be acted upon.\n  if (isLoadErrorMessage(message) ||\n    // See https://github.com/ampproject/amphtml/issues/7353\n    // for context.\n    message == 'Script error.' ||\n    // Window has become detached, really anything can happen\n    // at this point.\n    detachedWindow) {\n    expected = true;\n\n    if (throttleBase > NON_ACTIONABLE_ERROR_THROTTLE_THRESHOLD) {\n      return;\n    }\n  }\n\n  const isUserError = isUserErrorMessage(message);\n\n  // Only report a subset of user errors.\n  if (isUserError && throttleBase > USER_ERROR_THROTTLE_THRESHOLD) {\n    return;\n  }\n\n  // This is the App Engine app in\n  // https://github.com/ampproject/error-tracker\n  // It stores error reports via https://cloud.google.com/error-reporting/\n  // for analyzing production issues.\n  const data = /** @type {!JsonObject} */ (Object.create(null));\n  data['v'] = getMode().rtvVersion;\n  data['noAmp'] = hasNonAmpJs ? '1' : '0';\n  data['m'] = message.replace(USER_ERROR_SENTINEL, '');\n  data['a'] = isUserError ? '1' : '0';\n\n  // Errors are tagged with \"ex\" (\"expected\") label to allow loggers to\n  // classify these errors as benchmarks and not exceptions.\n  data['ex'] = expected ? '1' : '0';\n  data['dw'] = detachedWindow ? '1' : '0';\n\n  let runtime = '1p';\n  if (self.context && self.context.location) {\n    data['3p'] = '1';\n    runtime = '3p';\n  } else if (getMode().runtime) {\n    runtime = getMode().runtime;\n  }\n  data['rt'] = runtime;\n\n  // TODO(erwinm): Remove ca when all systems read `bt` instead of `ca` to\n  // identify js binary type.\n  data['ca'] = isCanary(self) ? '1' : '0';\n\n  // Pass binary type.\n  data['bt'] = getBinaryType(self);\n\n  if (self.location.ancestorOrigins && self.location.ancestorOrigins[0]) {\n    data['or'] = self.location.ancestorOrigins[0];\n  }\n  if (self.viewerState) {\n    data['vs'] = self.viewerState;\n  }\n  // Is embedded?\n  if (self.parent && self.parent != self) {\n    data['iem'] = '1';\n  }\n\n  if (self.AMP && self.AMP.viewer) {\n    const resolvedViewerUrl = self.AMP.viewer.getResolvedViewerUrl();\n    const messagingOrigin = self.AMP.viewer.maybeGetMessagingOrigin();\n    if (resolvedViewerUrl) {\n      data['rvu'] = resolvedViewerUrl;\n    }\n    if (messagingOrigin) {\n      data['mso'] = messagingOrigin;\n    }\n  }\n\n  if (!detectedJsEngine) {\n    detectedJsEngine = detectJsEngineFromStack();\n  }\n  data['jse'] = detectedJsEngine;\n\n  const exps = [];\n  const experiments = experimentTogglesOrNull(self);\n  for (const exp in experiments) {\n    const on = experiments[exp];\n    exps.push(`${exp}=${on ? '1' : '0'}`);\n  }\n  data['exps'] = exps.join(',');\n\n  if (error) {\n    const tagName = error.associatedElement\n      ? error.associatedElement.tagName\n      : 'u'; // Unknown\n    data['el'] = tagName;\n\n    if (error.args) {\n      data['args'] = JSON.stringify(error.args);\n    }\n\n    if (!isUserError && !error.ignoreStack && error.stack) {\n      data['s'] = error.stack;\n    }\n\n    error.message += ' _reported_';\n  } else {\n    data['f'] = filename || '';\n    data['l'] = line || '';\n    data['c'] = col || '';\n  }\n  data['r'] = self.document.referrer;\n  data['ae'] = accumulatedErrorMessages.join(',');\n  data['fr'] = self.location.originalHash || self.location.hash;\n\n  pushLimit(accumulatedErrorMessages, message, 25);\n\n  return data;\n}\n\n/**\n * Returns true if it appears like there is non-AMP JS on the\n * current page.\n * @param {!Window} win\n * @return {boolean}\n * @visibleForTesting\n */\nexport function detectNonAmpJs(win) {\n  const scripts = win.document.querySelectorAll('script[src]');\n  for (let i = 0; i < scripts.length; i++) {\n    if (!isProxyOrigin(scripts[i].src.toLowerCase())) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/**\n * Resets accumulated error messages for testing\n */\nexport function resetAccumulatedErrorMessagesForTesting() {\n  accumulatedErrorMessages = [];\n}\n\n/**\n * Does a series of checks on the stack of an thrown error to determine the\n * JS engine that is currently running. This gives a bit more information than\n * just the UserAgent, since browsers often allow overriding it to \"emulate\"\n * mobile.\n * @return {string}\n * @visibleForTesting\n */\nexport function detectJsEngineFromStack() {\n  /** @constructor */\n  function Fn() {}\n  Fn.prototype.t = function() {\n    throw new Error('message');\n  };\n  const object = new Fn();\n  try {\n    object.t();\n  } catch (e) {\n    const {stack} = e;\n\n    // Safari only mentions the method name.\n    if (startsWith(stack, 't@')) {\n      return 'Safari';\n    }\n\n    // Firefox mentions \"prototype\".\n    if (stack.indexOf('.prototype.t@') > -1) {\n      return 'Firefox';\n    }\n\n    // IE looks like Chrome, but includes a context for the base stack line.\n    // Explicitly, we're looking for something like:\n    // \"    at Global code (https://example.com/app.js:1:200)\" or\n    // \"    at Anonymous function (https://example.com/app.js:1:200)\"\n    // vs Chrome which has:\n    // \"    at https://example.com/app.js:1:200\"\n    const last = stack.split('\\n').pop();\n    if (/\\bat .* \\(/i.test(last)) {\n      return 'IE';\n    }\n\n    // Finally, chrome includes the error message in the stack.\n    if (startsWith(stack, 'Error: message')) {\n      return 'Chrome';\n    }\n  }\n\n  return 'unknown';\n}\n\n/**\n * @param {!Error} error\n * @param {!Window} win\n */\nexport function reportErrorToAnalytics(error, win) {\n  if (isExperimentOn(win, 'user-error-reporting')) {\n    const vars = {\n      'errorName': error.name,\n      'errorMessage': error.message,\n    };\n    triggerAnalyticsEvent(getRootElement_(win), 'user-error', vars);\n  }\n}\n\n/**\n * @param {!Window} win\n * @return {!Element}\n * @private\n */\nfunction getRootElement_(win) {\n  const root = Services.ampdocServiceFor(win).getAmpDoc().getRootNode();\n  return dev().assertElement(root.documentElement || root.body || root);\n}\n","/**\n * Copyright 2017 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n  * Whether addEventListener supports options or only takes capture as a boolean\n  * @type {boolean|undefined}\n  * @visibleForTesting\n  */\nlet optsSupported;\n\n/**\n * Listens for the specified event on the element.\n *\n * Do not use this directly. This method is implemented as a shared\n * dependency. Use `listen()` in either `event-helper` or `3p-frame-messaging`,\n * depending on your use case.\n *\n * @param {!EventTarget} element\n * @param {string} eventType\n * @param {function(!Event)} listener\n * @param {Object=} opt_evtListenerOpts\n * @return {!UnlistenDef}\n */\nexport function internalListenImplementation(element, eventType, listener,\n  opt_evtListenerOpts) {\n  let localElement = element;\n  let localListener = listener;\n  /**\n   * @type {?Function}\n   */\n  let wrapped;\n\n  wrapped = event => {\n    try {\n      return localListener(event);\n    } catch (e) {\n      // reportError is installed globally per window in the entry point.\n      self.reportError(e);\n      throw e;\n    }\n  };\n  const optsSupported = detectEvtListenerOptsSupport();\n  let capture = false;\n  if (opt_evtListenerOpts) {\n    capture = opt_evtListenerOpts.capture;\n  }\n  localElement.addEventListener(\n      eventType,\n      wrapped,\n      optsSupported ? opt_evtListenerOpts : capture\n  );\n  return () => {\n    if (localElement) {\n      localElement.removeEventListener(\n          eventType,\n          wrapped,\n          optsSupported ? opt_evtListenerOpts : capture\n      );\n    }\n    // Ensure these are GC'd\n    localListener = null;\n    localElement = null;\n    wrapped = null;\n  };\n}\n\n/**\n * Tests whether the browser supports options as an argument of addEventListener\n * or not.\n *\n * @return {boolean}\n */\nexport function detectEvtListenerOptsSupport() {\n  // Only run the test once\n  if (optsSupported !== undefined) {\n    return optsSupported;\n  }\n\n  optsSupported = false;\n  try {\n    // Test whether browser supports EventListenerOptions or not\n    const options = {\n      get capture() {\n        optsSupported = true;\n      },\n    };\n    self.addEventListener('test-options', null, options);\n    self.removeEventListener('test-options', null, options);\n  } catch (err) {\n    // EventListenerOptions are not supported\n  }\n  return optsSupported;\n}\n\n/**\n  * Resets the test for whether addEventListener supports options or not.\n  */\nexport function resetEvtListenerOptsSupportForTesting() {\n  optsSupported = undefined;\n}\n","/**\n * Copyright 2015 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {internalListenImplementation} from './event-helper-listen';\nimport {user} from './log';\n\n/** @const {string}  */\nconst LOAD_FAILURE_PREFIX = 'Failed to load:';\n\n/**\n * Returns a CustomEvent with a given type and detail; supports fallback for IE.\n * @param {!Window} win\n * @param {string} type\n * @param {!JsonObject|string|undefined|null} detail\n * @param {EventInit=} opt_eventInit\n * @return {!Event}\n */\nexport function createCustomEvent(win, type, detail, opt_eventInit) {\n  const eventInit = /** @type {!CustomEventInit} */ ({detail});\n  Object.assign(eventInit, opt_eventInit);\n  // win.CustomEvent is a function on Edge, Chrome, FF, Safari but\n  // is an object on IE 11.\n  if (typeof win.CustomEvent == 'function') {\n    return new win.CustomEvent(type, eventInit);\n  } else {\n    // Deprecated fallback for IE.\n    const e = win.document.createEvent('CustomEvent');\n    e.initCustomEvent(\n        type, !!eventInit.bubbles, !!eventInit.cancelable, detail);\n    return e;\n  }\n}\n\n/**\n * Listens for the specified event on the element.\n * @param {!EventTarget} element\n * @param {string} eventType\n * @param {function(!Event)} listener\n * @param {Object=} opt_evtListenerOpts\n * @return {!UnlistenDef}\n */\nexport function listen(element, eventType, listener, opt_evtListenerOpts) {\n  return internalListenImplementation(\n      element, eventType, listener, opt_evtListenerOpts);\n}\n\n/**\n * Returns the data property of an event with the correct type.\n * @param {!Event|{data: !JsonObject}} event\n * @return {?JsonObject|string|undefined}\n */\nexport function getData(event) {\n  return /** @type {?JsonObject|string|undefined} */ (event.data);\n}\n\n/**\n * Returns the detail property of an event with the correct type.\n * @param {!Event|{detail: !JsonObject}} event\n * @return {?JsonObject|string|undefined}\n */\nexport function getDetail(event) {\n  return /** @type {?JsonObject|string|undefined} */ (event.detail);\n}\n\n/**\n * Listens for the specified event on the element and removes the listener\n * as soon as event has been received.\n * @param {!EventTarget} element\n * @param {string} eventType\n * @param {function(!Event)} listener\n * @param {Object=} opt_evtListenerOpts\n * @return {!UnlistenDef}\n */\nexport function listenOnce(element, eventType, listener, opt_evtListenerOpts) {\n  let localListener = listener;\n  const unlisten = internalListenImplementation(element, eventType, event => {\n    try {\n      localListener(event);\n    } finally {\n      // Ensure listener is GC'd\n      localListener = null;\n      unlisten();\n    }\n  }, opt_evtListenerOpts);\n  return unlisten;\n}\n\n\n/**\n * Returns  a promise that will resolve as soon as the specified event has\n * fired on the element.\n * @param {!EventTarget} element\n * @param {string} eventType\n * @param {Object=} opt_evtListenerOpts\n * @param {function(!UnlistenDef)=} opt_cancel An optional function that, when\n *     provided, will be called with the unlistener. This gives the caller\n *     access to the unlistener, so it may be called manually when necessary.\n * @return {!Promise<!Event>}\n */\nexport function listenOncePromise(element, eventType, opt_evtListenerOpts,\n  opt_cancel) {\n  let unlisten;\n  const eventPromise = new Promise(resolve => {\n    unlisten = listenOnce(element, eventType, resolve, opt_evtListenerOpts);\n  });\n  eventPromise.then(unlisten, unlisten);\n  if (opt_cancel) {\n    opt_cancel(unlisten);\n  }\n  return eventPromise;\n}\n\n\n/**\n * Whether the specified element/window has been loaded already.\n * @param {!Element|!Window} eleOrWindow\n * @return {boolean}\n */\nexport function isLoaded(eleOrWindow) {\n  return !!(eleOrWindow.complete || eleOrWindow.readyState == 'complete'\n      // If the passed in thing is a Window, infer loaded state from\n      //\n      || (eleOrWindow.document\n          && eleOrWindow.document.readyState == 'complete'));\n}\n\n/**\n * Returns a promise that will resolve or fail based on the eleOrWindow's 'load'\n * and 'error' events. Optionally this method takes a timeout, which will reject\n * the promise if the resource has not loaded by then.\n * @param {T} eleOrWindow Supports both Elements and as a special case Windows.\n * @return {!Promise<T>}\n * @template T\n */\nexport function loadPromise(eleOrWindow) {\n  let unlistenLoad;\n  let unlistenError;\n  if (isLoaded(eleOrWindow)) {\n    return Promise.resolve(eleOrWindow);\n  }\n  const loadingPromise = new Promise((resolve, reject) => {\n    // Listen once since IE 5/6/7 fire the onload event continuously for\n    // animated GIFs.\n    const {tagName} = eleOrWindow;\n    if (tagName === 'AUDIO' || tagName === 'VIDEO') {\n      unlistenLoad = listenOnce(eleOrWindow, 'loadstart', resolve);\n    } else {\n      unlistenLoad = listenOnce(eleOrWindow, 'load', resolve);\n    }\n    // For elements, unlisten on error (don't for Windows).\n    if (tagName) {\n      unlistenError = listenOnce(eleOrWindow, 'error', reject);\n    }\n  });\n\n  return loadingPromise.then(() => {\n    if (unlistenError) {\n      unlistenError();\n    }\n    return eleOrWindow;\n  }, () => {\n    if (unlistenLoad) {\n      unlistenLoad();\n    }\n    failedToLoad(eleOrWindow);\n  });\n}\n\n/**\n * Emit error on load failure.\n * @param {!Element|!Window} eleOrWindow Supports both Elements and as a special\n *     case Windows.\n */\nfunction failedToLoad(eleOrWindow) {\n  // Report failed loads as user errors so that they automatically go\n  // into the \"document error\" bucket.\n  let target = eleOrWindow;\n  if (target && target.src) {\n    target = target.src;\n  }\n  throw user().createError(LOAD_FAILURE_PREFIX, target);\n}\n\n/**\n * Returns true if this error message is was created for a load error.\n * @param {string} message An error message\n * @return {boolean}\n */\nexport function isLoadErrorMessage(message) {\n  return message.indexOf(LOAD_FAILURE_PREFIX) != -1;\n}\n","/**\n * Copyright 2015 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Experiments system allows a developer to opt-in to test\n * features that are not yet fully tested.\n *\n * Experiments page: https://cdn.ampproject.org/experiments.html *\n */\n\nimport {getCookie, setCookie} from './cookies';\nimport {hasOwn} from './utils/object';\nimport {parseQueryString} from './url';\n\n/** @const {string} */\nconst COOKIE_NAME = 'AMP_EXP';\n\n/** @const {number} */\nconst COOKIE_MAX_AGE_DAYS = 180; // 6 month\n\n/** @const {time} */\nconst COOKIE_EXPIRATION_INTERVAL = COOKIE_MAX_AGE_DAYS * 24 * 60 * 60 * 1000;\n\n/** @const {string} */\nconst TOGGLES_WINDOW_PROPERTY = '__AMP__EXPERIMENT_TOGGLES';\n\n/**\n * @typedef {{\n *   isTrafficEligible: function(!Window):boolean,\n *   branches: !Array<string>\n * }}\n */\nexport let ExperimentInfo;\n\n/**\n * Whether we are in canary.\n * @param {!Window} win\n * @return {boolean}\n */\nexport function isCanary(win) {\n  return !!(win.AMP_CONFIG && win.AMP_CONFIG.canary);\n}\n\n/**\n * Returns binary type, e.g., canary, control, or production.\n * @param {!Window} win\n * @return {string}\n */\nexport function getBinaryType(win) {\n  return win.AMP_CONFIG && win.AMP_CONFIG.type ?\n    win.AMP_CONFIG.type : 'unknown';\n}\n\n/**\n * Whether the specified experiment is on or off.\n * @param {!Window} win\n * @param {string} experimentId\n * @return {boolean}\n */\nexport function isExperimentOn(win, experimentId) {\n  const toggles = experimentToggles(win);\n  return !!toggles[experimentId];\n}\n\n/**\n * Toggles the experiment on or off. Returns the actual value of the experiment\n * after toggling is done.\n * @param {!Window} win\n * @param {string} experimentId\n * @param {boolean=} opt_on\n * @param {boolean=} opt_transientExperiment  Whether to toggle the\n *     experiment state \"transiently\" (i.e., for this page load only) or\n *     durably (by saving the experiment IDs to the cookie after toggling).\n *     Default: false (save durably).\n * @return {boolean} New state for experimentId.\n */\nexport function toggleExperiment(win, experimentId, opt_on,\n  opt_transientExperiment) {\n  const currentlyOn = isExperimentOn(win, /*OK*/experimentId);\n  const on = !!(opt_on !== undefined ? opt_on : !currentlyOn);\n  if (on != currentlyOn) {\n    const toggles = experimentToggles(win);\n    toggles[experimentId] = on;\n\n    if (!opt_transientExperiment) {\n      const cookieToggles = getExperimentTogglesFromCookie(win);\n      cookieToggles[experimentId] = on;\n      saveExperimentTogglesToCookie(win, cookieToggles);\n    }\n  }\n  return on;\n}\n\n/**\n * Calculate whether the experiment is on or off based off of the\n * cookieFlag or the global config frequency given.\n * @param {!Window} win\n * @return {!Object<string, boolean>}\n */\nexport function experimentToggles(win) {\n  if (win[TOGGLES_WINDOW_PROPERTY]) {\n    return win[TOGGLES_WINDOW_PROPERTY];\n  }\n  win[TOGGLES_WINDOW_PROPERTY] = Object.create(null);\n  const toggles = win[TOGGLES_WINDOW_PROPERTY];\n\n  // Read the default config of this build.\n  if (win.AMP_CONFIG) {\n    for (const experimentId in win.AMP_CONFIG) {\n      const frequency = win.AMP_CONFIG[experimentId];\n      if (typeof frequency === 'number' && frequency >= 0 && frequency <= 1) {\n        toggles[experimentId] = Math.random() < frequency;\n      }\n    }\n  }\n  // Read document level override from meta tag.\n  if (win.AMP_CONFIG\n      && Array.isArray(win.AMP_CONFIG['allow-doc-opt-in'])\n      && win.AMP_CONFIG['allow-doc-opt-in'].length > 0) {\n    const allowed = win.AMP_CONFIG['allow-doc-opt-in'];\n    const meta =\n        win.document.head.querySelector('meta[name=\"amp-experiments-opt-in\"]');\n    if (meta) {\n      const optedInExperiments = meta.getAttribute('content').split(',');\n      for (let i = 0; i < optedInExperiments.length; i++) {\n        if (allowed.indexOf(optedInExperiments[i]) != -1) {\n          toggles[optedInExperiments[i]] = true;\n        }\n      }\n    }\n  }\n\n  Object.assign(toggles, getExperimentTogglesFromCookie(win));\n\n  if (win.AMP_CONFIG\n      && Array.isArray(win.AMP_CONFIG['allow-url-opt-in'])\n      && win.AMP_CONFIG['allow-url-opt-in'].length > 0) {\n    const allowed = win.AMP_CONFIG['allow-url-opt-in'];\n    const hash = win.location.originalHash || win.location.hash;\n    const params = parseQueryString(hash);\n    for (let i = 0; i < allowed.length; i++) {\n      const param = params[`e-${allowed[i]}`];\n      if (param == '1') {\n        toggles[allowed[i]] = true;\n      }\n      if (param == '0') {\n        toggles[allowed[i]] = false;\n      }\n    }\n  }\n  return toggles;\n}\n\n/**\n * Returns the cached experiments toggles, or null if they have not been\n * computed yet.\n * @param {!Window} win\n * @return {Object<string, boolean>}\n */\nexport function experimentTogglesOrNull(win) {\n  return win[TOGGLES_WINDOW_PROPERTY] || null;\n}\n\n/**\n * Returns a set of experiment IDs currently on.\n * @param {!Window} win\n * @return {!Object<string, boolean>}\n */\nfunction getExperimentTogglesFromCookie(win) {\n  const experimentCookie = getCookie(win, COOKIE_NAME);\n  const tokens = experimentCookie ? experimentCookie.split(/\\s*,\\s*/g) : [];\n\n  const toggles = Object.create(null);\n  for (let i = 0; i < tokens.length; i++) {\n    if (tokens[i].length == 0) {\n      continue;\n    }\n    if (tokens[i][0] == '-') {\n      toggles[tokens[i].substr(1)] = false;\n    } else {\n      toggles[tokens[i]] = true;\n    }\n  }\n\n  return toggles;\n}\n\n/**\n * Saves a set of experiment IDs currently on.\n * @param {!Window} win\n * @param {!Object<string, boolean>} toggles\n */\nfunction saveExperimentTogglesToCookie(win, toggles) {\n  const experimentIds = [];\n  for (const experiment in toggles) {\n    experimentIds.push((toggles[experiment] === false ? '-' : '') + experiment);\n  }\n\n  setCookie(win, COOKIE_NAME, experimentIds.join(','),\n      Date.now() + COOKIE_EXPIRATION_INTERVAL, {\n        // Set explicit domain, so the cookie gets send to sub domains.\n        domain: win.location.hostname,\n        allowOnProxyOrigin: true,\n      });\n}\n\n/**\n * See getExperimentTogglesFromCookie().\n * @param {!Window} win\n * @return {!Object<string, boolean>}\n * @visibleForTesting\n */\nexport function getExperimentToglesFromCookieForTesting(win) {\n  return getExperimentTogglesFromCookie(win);\n}\n\n/**\n * Resets the experimentsToggle cache for testing purposes.\n * @param {!Window} win\n * @visibleForTesting\n */\nexport function resetExperimentTogglesForTesting(win) {\n  setCookie(win, COOKIE_NAME, '', 0, {\n    domain: win.location.hostname,\n  });\n  win[TOGGLES_WINDOW_PROPERTY] = null;\n}\n\n/**\n * In some browser implementations of Math.random(), sequential calls of\n * Math.random() are correlated and can cause a bias.  In particular,\n * if the previous random() call was < 0.001 (as it will be if we select\n * into an experiment), the next value could be less than 0.5 more than\n * 50.7% of the time.  This provides an implementation that roots down into\n * the crypto API, when available, to produce less biased samples.\n *\n * @return {number} Pseudo-random floating-point value on the range [0, 1).\n */\nfunction slowButAccuratePrng() {\n  // TODO(tdrl): Implement.\n  return Math.random();\n}\n\n/**\n * Container for alternate random number generator implementations.  This\n * allows us to set an \"accurate\" PRNG for branch selection, but to mock it\n * out easily in tests.\n *\n * @visibleForTesting\n * @const {!{accuratePrng: function():number}}\n */\nexport const RANDOM_NUMBER_GENERATORS = {\n  accuratePrng: slowButAccuratePrng,\n};\n\n/**\n * Selects, uniformly at random, a single item from the array.\n * @param {!Array<string>} arr Object to select from.\n * @return {?string} Single item from arr or null if arr was empty.\n */\nfunction selectRandomItem(arr) {\n  const rn = RANDOM_NUMBER_GENERATORS.accuratePrng();\n  return arr[Math.floor(rn * arr.length)] || null;\n}\n\n/**\n * Selects which page-level experiment branches are enabled. If a given\n * experiment name is already set (including to the null / no branches selected\n * state), this won't alter its state.\n *\n * Check whether a given experiment is set using isExperimentOn(win,\n * experimentName) and, if it is on, look for which branch is selected in\n * win.experimentBranches[experimentName].\n *\n * @param {!Window} win Window context on which to save experiment\n *     selection state.\n * @param {!Object<string, !ExperimentInfo>} experiments  Set of experiments to\n *     configure for this page load.\n * @return {!Object<string, string>} Map of experiment names to selected\n *     branches.\n */\nexport function randomlySelectUnsetExperiments(win, experiments) {\n  win.experimentBranches = win.experimentBranches || {};\n  const selectedExperiments = {};\n  for (const experimentName in experiments) {\n    // Skip experimentName if it is not a key of experiments object or if it\n    // has already been populated by some other property.\n    if (!hasOwn(experiments, experimentName)) {\n      continue;\n    }\n    if (hasOwn(win.experimentBranches, experimentName)) {\n      selectedExperiments[experimentName] =\n          win.experimentBranches[experimentName];\n      continue;\n    }\n\n    if (!experiments[experimentName].isTrafficEligible ||\n        !experiments[experimentName].isTrafficEligible(win)) {\n      win.experimentBranches[experimentName] = null;\n      continue;\n    }\n\n    // If we're in the experiment, but we haven't already forced a specific\n    // experiment branch (e.g., via a test setup), then randomize the branch\n    // choice.\n    if (!win.experimentBranches[experimentName] &&\n      isExperimentOn(win, /*OK*/experimentName)) {\n      const {branches} = experiments[experimentName];\n      win.experimentBranches[experimentName] = selectRandomItem(branches);\n      selectedExperiments[experimentName] =\n          win.experimentBranches[experimentName];\n    }\n  }\n  return selectedExperiments;\n}\n\n/**\n * Returns the experiment branch enabled for the given experiment ID.\n * For example, 'control' or 'experiment'.\n *\n * @param {!Window} win Window context to check for experiment state.\n * @param {string} experimentName Name of the experiment to check.\n * @return {?string} Active experiment branch ID for experimentName (possibly\n *     null if experimentName has been tested but no branch was enabled).\n */\nexport function getExperimentBranch(win, experimentName) {\n  return win.experimentBranches ? win.experimentBranches[experimentName] : null;\n}\n\n/**\n * Force enable (or disable) a specific branch of a given experiment name.\n * Disables the experiment name altogether if branchId is falseish.\n *\n * @param {!Window} win Window context to check for experiment state.\n * @param {string} experimentName Name of the experiment to check.\n * @param {?string} branchId ID of branch to force or null to disable\n *     altogether.\n * @visibleForTesting\n */\nexport function forceExperimentBranch(win, experimentName, branchId) {\n  win.experimentBranches = win.experimentBranches || {};\n  toggleExperiment(win, experimentName, !!branchId, true);\n  win.experimentBranches[experimentName] = branchId;\n}\n","/**\n * Copyright 2015 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n/**\n * @param {number=} opt_base Exponential base. Defaults to 2.\n * @return {function(function()): number} Function that when invoked will\n *     call the passed in function. On every invocation the next\n *     invocation of the passed in function will be exponentially\n *     later. Returned function returns timeout id.\n */\nexport function exponentialBackoff(opt_base) {\n  const getTimeout = exponentialBackoffClock(opt_base);\n  return work => {\n    return setTimeout(work, getTimeout());\n  };\n}\n\n/**\n * @param {number=} opt_base Exponential base. Defaults to 2.\n * @return {function(): number} Function that when invoked will return\n *    a number that exponentially grows per invocation.\n */\nexport function exponentialBackoffClock(opt_base) {\n  const base = opt_base || 2;\n  let count = 0;\n  return () => {\n    let wait = Math.pow(base, count++);\n    wait += getJitter(wait);\n    return wait * 1000;\n  };\n}\n\n/**\n * Add jitter to avoid the thundering herd. This can e.g. happen when\n * we poll a backend and it fails for everyone at the same time.\n * We add up to 30% (default) longer or shorter than the given time.\n *\n * @param {number} wait the amount if base milliseconds\n * @param {number=} opt_perc the min/max percentage to add or sutract\n * @return {number}\n */\nexport function getJitter(wait, opt_perc) {\n  opt_perc = opt_perc || .3;\n  let jitter = wait * opt_perc * Math.random();\n  if (Math.random() > .5) {\n    jitter *= -1;\n  }\n  return jitter;\n}\n","/**\n * Copyright 2015 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview This module declares JSON types as defined in the\n * {@link http://json.org/}.\n */\n\nimport {isObject} from './types';\n\n\n// NOTE Type are changed to {*} because of\n// https://github.com/google/closure-compiler/issues/1999\n\n/**\n * JSON scalar. It's either string, number or boolean.\n * @typedef {*} should be string|number|boolean\n */\nlet JSONScalarDef;\n\n\n/**\n * JSON object. It's a map with string keys and JSON values.\n * @typedef {*} should be !Object<string, ?JSONValueDef>\n */\nlet JSONObjectDef;\n\n\n/**\n * JSON array. It's an array with JSON values.\n * @typedef {*} should be !Array<?JSONValueDef>\n */\nlet JSONArrayDef;\n\n\n/**\n * JSON value. It's either a scalar, an object or an array.\n * @typedef {*} should be !JSONScalarDef|!JSONObjectDef|!JSONArrayDef\n */\nlet JSONValueDef;\n\n/**\n * Recreates objects with prototype-less copies.\n * @param {!JsonObject} obj\n * @return {!JsonObject}\n */\nexport function recreateNonProtoObject(obj) {\n  const copy = Object.create(null);\n  for (const k in obj) {\n    if (!hasOwnProperty(obj, k)) {\n      continue;\n    }\n    const v = obj[k];\n    copy[k] = isObject(v) ? recreateNonProtoObject(v) : v;\n  }\n  return /** @type {!JsonObject} */ (copy);\n}\n\n/**\n * Returns a value from an object for a field-based expression. The expression\n * is a simple nested dot-notation of fields, such as `field1.field2`. If any\n * field in a chain does not exist or is not an object or array, the returned\n * value will be `undefined`.\n *\n * @param {!JsonObject} obj\n * @param {string} expr\n * @return {*}\n */\nexport function getValueForExpr(obj, expr) {\n  // The `.` indicates \"the object itself\".\n  if (expr == '.') {\n    return obj;\n  }\n  // Otherwise, navigate via properties.\n  const parts = expr.split('.');\n  let value = obj;\n  for (let i = 0; i < parts.length; i++) {\n    const part = parts[i];\n    if (part &&\n        value &&\n        value[part] !== undefined &&\n        hasOwnProperty(value, part)\n    ) {\n      value = value[part];\n      continue;\n    }\n    value = undefined;\n    break;\n  }\n  return value;\n}\n\n/**\n * Simple wrapper around JSON.parse that casts the return value\n * to JsonObject.\n * Create a new wrapper if an array return value is desired.\n * @param {*} json JSON string to parse\n * @return {?JsonObject} May be extend to parse arrays.\n */\nexport function parseJson(json) {\n  return /** @type {?JsonObject} */(JSON.parse(/** @type {string} */ (json)));\n}\n\n/**\n * Parses the given `json` string without throwing an exception if not valid.\n * Returns `undefined` if parsing fails.\n * Returns the `Object` corresponding to the JSON string when parsing succeeds.\n * @param {*} json JSON string to parse\n * @param {function(!Error)=} opt_onFailed Optional function that will be called\n *     with the error if parsing fails.\n * @return {?JsonObject|undefined} May be extend to parse arrays.\n */\nexport function tryParseJson(json, opt_onFailed) {\n  try {\n    return parseJson(json);\n  } catch (e) {\n    if (opt_onFailed) {\n      opt_onFailed(e);\n    }\n    return undefined;\n  }\n}\n\n/**\n * Recursively checks strict equality of items in nested arrays and objects.\n *\n * @param {JSONValueDef} a\n * @param {JSONValueDef} b\n * @param {number} depth The maximum recursion depth. Must be finite.\n * @return {boolean}\n * @throws {Error} If depth argument is not finite.\n */\nexport function recursiveEquals(a, b, depth = 3) {\n  if (!isFinite(depth)) {\n    throw new Error('depth arg must be finite: ' + depth);\n  }\n  if (a === b) {\n    return true;\n  }\n  // Only check shallow equality for depth < 1.\n  if (depth < 1) {\n    return false;\n  }\n  if (typeof a !== typeof b) {\n    return false;\n  }\n  if (Array.isArray(a) && Array.isArray(b)) {\n    if (a.length !== b.length) {\n      return false;\n    }\n    for (let i = 0; i < a.length; i++) {\n      if (!recursiveEquals(a[i], b[i], depth - 1)) {\n        return false;\n      }\n    }\n    return true;\n  }\n  if (a && b && typeof a === 'object' && typeof b === 'object') {\n    const keysA = Object.keys(/** @type {!Object} */ (a));\n    const keysB = Object.keys(/** @type {!Object} */ (b));\n    if (keysA.length !== keysB.length) {\n      return false;\n    }\n    for (let i = 0; i < keysA.length; i++) {\n      const keyA = keysA[i];\n      const valueA = a[keyA];\n      const valueB = b[keyA];\n      if (!recursiveEquals(valueA, valueB, depth - 1)) {\n        return false;\n      }\n    }\n    return true;\n  }\n  return false;\n}\n\n\n/**\n * @param {*} obj\n * @param {string} key\n * @return {boolean}\n */\nfunction hasOwnProperty(obj, key) {\n  if (obj == null || typeof obj != 'object') {\n    return false;\n  }\n  return Object.prototype.hasOwnProperty.call(\n      /** @type {!Object} */ (obj), key);\n}\n","/**\n * Copyright 2015 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {getMode} from './mode';\nimport {getModeObject} from './mode-object';\nimport {isEnumValue} from './types';\n\n/**\n * Triple zero width space.\n *\n * This is added to user error messages, so that we can later identify\n * them, when the only thing that we have is the message. This is the\n * case in many browsers when the global exception handler is invoked.\n *\n * @const {string}\n */\nexport const USER_ERROR_SENTINEL = '\\u200B\\u200B\\u200B';\n\n\n/**\n * Four zero width space.\n *\n * @const {string}\n */\nexport const USER_ERROR_EMBED_SENTINEL = '\\u200B\\u200B\\u200B\\u200B';\n\n\n/**\n * @param {string} message\n * @return {boolean} Whether this message was a user error.\n */\nexport function isUserErrorMessage(message) {\n  return message.indexOf(USER_ERROR_SENTINEL) >= 0;\n}\n\n/**\n * @param {string} message\n * @return {boolean} Whether this message was a a user error from an iframe embed.\n */\nexport function isUserErrorEmbed(message) {\n  return message.indexOf(USER_ERROR_EMBED_SENTINEL) >= 0;\n}\n\n\n/**\n * @enum {number}\n * @private Visible for testing only.\n */\nexport const LogLevel = {\n  OFF: 0,\n  ERROR: 1,\n  WARN: 2,\n  INFO: 3,\n  FINE: 4,\n};\n\n/**\n * Sets reportError function. Called from error.js to break cyclic\n * dependency.\n * @param {function(*, !Element=)|undefined} fn\n */\nexport function setReportError(fn) {\n  self.reportError = fn;\n}\n\n/**\n * @type {!LogLevel|undefined}\n * @private\n */\nlet levelOverride_ = undefined;\n\n/**\n * @param {!LogLevel} level\n */\nexport function overrideLogLevel(level) {\n  levelOverride_ = level;\n}\n\n/**\n * Logging class. Use of sentinel string instead of a boolean to check user/dev\n * errors because errors could be rethrown by some native code as a new error,\n * and only a message would survive. Also, some browser don’t support a 5th\n * error object argument in window.onerror. List of supporting browser can be\n * found here:\n * https://blog.sentry.io/2016/01/04/client-javascript-reporting-window-onerror.html\n * @final\n * @private Visible for testing only.\n */\nexport class Log {\n  /**\n   * opt_suffix will be appended to error message to identify the type of the\n   * error message. We can't rely on the error object to pass along the type\n   * because some browsers do not have this param in its window.onerror API.\n   * See:\n   * https://blog.sentry.io/2016/01/04/client-javascript-reporting-window-onerror.html\n   *\n   * @param {!Window} win\n   * @param {function(!./mode.ModeDef):!LogLevel} levelFunc\n   * @param {string=} opt_suffix\n   */\n  constructor(win, levelFunc, opt_suffix) {\n    /**\n     * In tests we use the main test window instead of the iframe where\n     * the tests runs because only the former is relayed to the console.\n     * @const {!Window}\n     */\n    this.win = (getMode().test && win.AMP_TEST_IFRAME) ? win.parent : win;\n\n    /** @private @const {function(!./mode.ModeDef):!LogLevel} */\n    this.levelFunc_ = levelFunc;\n\n    /** @private @const {!LogLevel} */\n    this.level_ = this.defaultLevel_();\n\n    /** @private @const {string} */\n    this.suffix_ = opt_suffix || '';\n  }\n\n  /**\n   * @return {!LogLevel}\n   * @private\n   */\n  getLevel_() {\n    return (levelOverride_ !== undefined) ? levelOverride_ : this.level_;\n  }\n\n  /**\n   * @return {!LogLevel}\n   * @private\n   */\n  defaultLevel_() {\n    // No console - can't enable logging.\n    if (!this.win.console || !this.win.console.log) {\n      return LogLevel.OFF;\n    }\n\n    // Logging has been explicitly disabled.\n    if (getMode().log == '0') {\n      return LogLevel.OFF;\n    }\n\n    // Logging is enabled for tests directly.\n    if (getMode().test && this.win.ENABLE_LOG) {\n      return LogLevel.FINE;\n    }\n\n    // LocalDev by default allows INFO level, unless overriden by `#log`.\n    if (getMode().localDev && !getMode().log) {\n      return LogLevel.INFO;\n    }\n\n    // Delegate to the specific resolver.\n    return this.levelFunc_(getModeObject());\n  }\n\n  /**\n   * @param {string} tag\n   * @param {string} level\n   * @param {!Array} messages\n   */\n  msg_(tag, level, messages) {\n    if (this.getLevel_() != LogLevel.OFF) {\n      let fn = this.win.console.log;\n      if (level == 'ERROR') {\n        fn = this.win.console.error || fn;\n      } else if (level == 'INFO') {\n        fn = this.win.console.info || fn;\n      } else if (level == 'WARN') {\n        fn = this.win.console.warn || fn;\n      }\n      if (getMode().localDev) {\n        messages.unshift('[' + tag + ']');\n      }\n      fn.apply(this.win.console, messages);\n    }\n  }\n\n  /**\n   * Whether the logging is enabled.\n   * @return {boolean}\n   */\n  isEnabled() {\n    return this.getLevel_() != LogLevel.OFF;\n  }\n\n  /**\n   * Reports a fine-grained message.\n   * @param {string} tag\n   * @param {...*} var_args\n   */\n  fine(tag, var_args) {\n    if (this.getLevel_() >= LogLevel.FINE) {\n      this.msg_(tag, 'FINE', Array.prototype.slice.call(arguments, 1));\n    }\n  }\n\n  /**\n   * Reports a informational message.\n   * @param {string} tag\n   * @param {...*} var_args\n   */\n  info(tag, var_args) {\n    if (this.getLevel_() >= LogLevel.INFO) {\n      this.msg_(tag, 'INFO', Array.prototype.slice.call(arguments, 1));\n    }\n  }\n\n  /**\n   * Reports a warning message.\n   * @param {string} tag\n   * @param {...*} var_args\n   */\n  warn(tag, var_args) {\n    if (this.getLevel_() >= LogLevel.WARN) {\n      this.msg_(tag, 'WARN', Array.prototype.slice.call(arguments, 1));\n    }\n  }\n\n  /**\n   * Reports an error message. If the logging is disabled, the error is rethrown\n   * asynchronously.\n   * @param {string} tag\n   * @param {...*} var_args\n   * @return {!Error|undefined}\n   * @private\n   */\n  error_(tag, var_args) {\n    if (this.getLevel_() >= LogLevel.ERROR) {\n      this.msg_(tag, 'ERROR', Array.prototype.slice.call(arguments, 1));\n    } else {\n      const error = createErrorVargs.apply(null,\n          Array.prototype.slice.call(arguments, 1));\n      this.prepareError_(error);\n      return error;\n    }\n  }\n\n  /**\n   * Reports an error message.\n   * @param {string} tag\n   * @param {...*} var_args\n   */\n  error(tag, var_args) {\n    const error = this.error_.apply(this, arguments);\n    if (error) {\n      error.name = tag || error.name;\n      // reportError is installed globally per window in the entry point.\n      self.reportError(error);\n    }\n  }\n\n  /**\n   * Reports an error message and marks with an expected property. If the\n   * logging is disabled, the error is rethrown asynchronously.\n   * @param {string} unusedTag\n   * @param {...*} var_args\n   */\n  expectedError(unusedTag, var_args) {\n    const error = this.error_.apply(this, arguments);\n    if (error) {\n      error.expected = true;\n      // reportError is installed globally per window in the entry point.\n      self.reportError(error);\n    }\n  }\n\n  /**\n   * Creates an error object.\n   * @param {...*} var_args\n   * @return {!Error}\n   */\n  createError(var_args) {\n    const error = createErrorVargs.apply(null, arguments);\n    this.prepareError_(error);\n    return error;\n  }\n\n  /**\n   * Creates an error object with its expected property set to true.\n   * @param {...*} var_args\n   * @return {!Error}\n   */\n  createExpectedError(var_args) {\n    const error = createErrorVargs.apply(null, arguments);\n    this.prepareError_(error);\n    error.expected = true;\n    return error;\n  }\n\n  /**\n   * Throws an error if the first argument isn't trueish.\n   *\n   * Supports argument substitution into the message via %s placeholders.\n   *\n   * Throws an error object that has two extra properties:\n   * - associatedElement: This is the first element provided in the var args.\n   *   It can be used for improved display of error messages.\n   * - messageArray: The elements of the substituted message as non-stringified\n   *   elements in an array. When e.g. passed to console.error this yields\n   *   native displays of things like HTML elements.\n   *\n   * @param {T} shouldBeTrueish The value to assert. The assert fails if it does\n   *     not evaluate to true.\n   * @param {string=} opt_message The assertion message\n   * @param {...*} var_args Arguments substituted into %s in the message.\n   * @return {T} The value of shouldBeTrueish.\n   * @template T\n   * eslint \"google-camelcase/google-camelcase\": 0\n   */\n  assert(shouldBeTrueish, opt_message, var_args) {\n    let firstElement;\n    if (!shouldBeTrueish) {\n      const message = opt_message || 'Assertion failed';\n      const splitMessage = message.split('%s');\n      const first = splitMessage.shift();\n      let formatted = first;\n      const messageArray = [];\n      pushIfNonEmpty(messageArray, first);\n      for (let i = 2; i < arguments.length; i++) {\n        const val = arguments[i];\n        if (val && val.tagName) {\n          firstElement = val;\n        }\n        const nextConstant = splitMessage.shift();\n        messageArray.push(val);\n        pushIfNonEmpty(messageArray, nextConstant.trim());\n        formatted += toString(val) + nextConstant;\n      }\n      const e = new Error(formatted);\n      e.fromAssert = true;\n      e.associatedElement = firstElement;\n      e.messageArray = messageArray;\n      this.prepareError_(e);\n      // reportError is installed globally per window in the entry point.\n      self.reportError(e);\n      throw e;\n    }\n    return shouldBeTrueish;\n  }\n\n  /**\n   * Throws an error if the first argument isn't an Element\n   *\n   * Otherwise see `assert` for usage\n   *\n   * @param {*} shouldBeElement\n   * @param {string=} opt_message The assertion message\n   * @return {!Element} The value of shouldBeTrueish.\n   * @template T\n   * eslint \"google-camelcase/google-camelcase\": 2\n   */\n  assertElement(shouldBeElement, opt_message) {\n    const shouldBeTrueish = shouldBeElement && shouldBeElement.nodeType == 1;\n    this.assert(shouldBeTrueish, (opt_message || 'Element expected') + ': %s',\n        shouldBeElement);\n    return /** @type {!Element} */ (shouldBeElement);\n  }\n\n  /**\n   * Throws an error if the first argument isn't a string. The string can\n   * be empty.\n   *\n   * For more details see `assert`.\n   *\n   * @param {*} shouldBeString\n   * @param {string=} opt_message The assertion message\n   * @return {string} The string value. Can be an empty string.\n   * eslint \"google-camelcase/google-camelcase\": 2\n   */\n  assertString(shouldBeString, opt_message) {\n    this.assert(typeof shouldBeString == 'string',\n        (opt_message || 'String expected') + ': %s', shouldBeString);\n    return /** @type {string} */ (shouldBeString);\n  }\n\n  /**\n   * Throws an error if the first argument isn't a number. The allowed values\n   * include `0` and `NaN`.\n   *\n   * For more details see `assert`.\n   *\n   * @param {*} shouldBeNumber\n   * @param {string=} opt_message The assertion message\n   * @return {number} The number value. The allowed values include `0`\n   *   and `NaN`.\n   */\n  assertNumber(shouldBeNumber, opt_message) {\n    this.assert(typeof shouldBeNumber == 'number',\n        (opt_message || 'Number expected') + ': %s', shouldBeNumber);\n    return /** @type {number} */ (shouldBeNumber);\n  }\n\n  /**\n   * Throws an error if the first argument isn't a boolean.\n   *\n   * For more details see `assert`.\n   *\n   * @param {*} shouldBeBoolean\n   * @param {string=} opt_message The assertion message\n   * @return {boolean} The boolean value.\n   */\n  assertBoolean(shouldBeBoolean, opt_message) {\n    this.assert(!!shouldBeBoolean === shouldBeBoolean,\n        (opt_message || 'Boolean expected') + ': %s', shouldBeBoolean);\n    return /** @type {boolean} */ (shouldBeBoolean);\n  }\n\n  /**\n   * Asserts and returns the enum value. If the enum doesn't contain such a\n   * value, the error is thrown.\n   *\n   * @param {!Object<T>} enumObj\n   * @param {string} s\n   * @param {string=} opt_enumName\n   * @return {T}\n   * @template T\n   * eslint \"google-camelcase/google-camelcase\": 2\n   */\n  assertEnumValue(enumObj, s, opt_enumName) {\n    if (isEnumValue(enumObj, s)) {\n      return s;\n    }\n    this.assert(false,\n        'Unknown %s value: \"%s\"',\n        opt_enumName || 'enum', s);\n  }\n\n  /**\n   * @param {!Error} error\n   * @private\n   */\n  prepareError_(error) {\n    error = duplicateErrorIfNecessary(error);\n    if (this.suffix_) {\n      if (!error.message) {\n        error.message = this.suffix_;\n      } else if (error.message.indexOf(this.suffix_) == -1) {\n        error.message += this.suffix_;\n      }\n    } else if (isUserErrorMessage(error.message)) {\n      error.message = error.message.replace(USER_ERROR_SENTINEL, '');\n    }\n  }\n}\n\n/**\n * @param {string|!Element} val\n * @return {string}\n */\nfunction toString(val) {\n  // Do check equivalent to `val instanceof Element` without cross-window bug\n  if (val && val.nodeType == 1) {\n    return val.tagName.toLowerCase() + (val.id ? '#' + val.id : '');\n  }\n  return /** @type {string} */ (val);\n}\n\n\n/**\n * @param {!Array} array\n * @param {*} val\n */\nfunction pushIfNonEmpty(array, val) {\n  if (val != '') {\n    array.push(val);\n  }\n}\n\n/**\n * Some exceptions (DOMException, namely) have read-only message.\n * @param {!Error} error\n * @return {!Error};\n */\nexport function duplicateErrorIfNecessary(error) {\n  const {message} = error;\n  const test = String(Math.random());\n  error.message = test;\n\n  if (error.message === test) {\n    error.message = message;\n    return error;\n  }\n\n  const e = new Error(error.message);\n  // Copy all the extraneous things we attach.\n  for (const prop in error) {\n    e[prop] = error[prop];\n  }\n  // Ensure these are copied.\n  e.stack = error.stack;\n  return e;\n}\n\n/**\n * @param {...*} var_args\n * @return {!Error}\n * @visibleForTesting\n */\nexport function createErrorVargs(var_args) {\n  let error = null;\n  let message = '';\n  for (let i = 0; i < arguments.length; i++) {\n    const arg = arguments[i];\n    if (arg instanceof Error && !error) {\n      error = duplicateErrorIfNecessary(arg);\n    } else {\n      if (message) {\n        message += ' ';\n      }\n      message += arg;\n    }\n  }\n\n  if (!error) {\n    error = new Error(message);\n  } else if (message) {\n    error.message = message + ': ' + error.message;\n  }\n  return error;\n}\n\n\n/**\n * Rethrows the error without terminating the current context. This preserves\n * whether the original error designation is a user error or a dev error.\n * @param {...*} var_args\n */\nexport function rethrowAsync(var_args) {\n  const error = createErrorVargs.apply(null, arguments);\n  setTimeout(() => {\n    // reportError is installed globally per window in the entry point.\n    self.reportError(error);\n    throw error;\n  });\n}\n\n\n/**\n * Cache for logs. We do not use a Service since the service module depends\n * on Log and closure literally can't even.\n * @type {{user: ?Log, dev: ?Log, userForEmbed: ?Log}}\n */\nself.log = (self.log || {\n  user: null,\n  dev: null,\n  userForEmbed: null,\n});\n\nconst logs = self.log;\n\n/**\n * Eventually holds a constructor for Log objects. Lazily initialized, so we\n * can avoid ever referencing the real constructor except in JS binaries\n * that actually want to include the implementation.\n * @type {?Function}\n */\nlet logConstructor = null;\n\n/**\n * Initializes log contructor.\n */\nexport function initLogConstructor() {\n  logConstructor = Log;\n  // Initialize instances for use. If a binary (an extension for example) that\n  // does not call `initLogConstructor` invokes `dev()` or `user()` earlier than\n  // the binary that does call `initLogConstructor` (amp.js), the extension will\n  // throw an error as that extension will never be able to initialize the log\n  // instances and we also don't want it to call `initLogConstructor` either\n  // (since that will cause the Log implementation to be bundled into that\n  // binary). So we must initialize the instances eagerly so that they are ready\n  // for use (stored globally) after the main binary calls `initLogConstructor`.\n  dev();\n  user();\n}\n\n/**\n * Resets log contructor for testing.\n */\nexport function resetLogConstructorForTesting() {\n  logConstructor = null;\n}\n\n/**\n * Publisher level log.\n *\n * Enabled in the following conditions:\n *  1. Not disabled using `#log=0`.\n *  2. Development mode is enabled via `#development=1` or logging is explicitly\n *     enabled via `#log=D` where D >= 1.\n *  3. AMP.setLogLevel(D) is called, where D >= 1.\n *\n * @param {!Element=} opt_element\n * @return {!Log}\n */\nexport function user(opt_element) {\n  if (!logs.user) {\n    logs.user = getUserLogger(USER_ERROR_SENTINEL);\n  }\n  if (!isFromEmbed(logs.user.win, opt_element)) {\n    return logs.user;\n  } else {\n    if (logs.userForEmbed) {\n      return logs.userForEmbed;\n    }\n    return logs.userForEmbed = getUserLogger(USER_ERROR_EMBED_SENTINEL);\n  }\n}\n\n/**\n * Getter for user logger\n * @param {string=} suffix\n * @return {!Log}\n */\nfunction getUserLogger(suffix) {\n  if (!logConstructor) {\n    throw new Error('failed to call initLogConstructor');\n  }\n  return new logConstructor(self, mode => {\n    const logNum = parseInt(mode.log, 10);\n    if (mode.development || logNum >= 1) {\n      return LogLevel.FINE;\n    }\n    return LogLevel.WARN;\n  }, suffix);\n}\n\n/**\n * AMP development log. Calls to `devLog().assert` and `dev.fine` are stripped\n * in the PROD binary. However, `devLog().assert` result is preserved in either\n * case.\n *\n * Enabled in the following conditions:\n *  1. Not disabled using `#log=0`.\n *  2. Logging is explicitly enabled via `#log=D`, where D >= 2.\n *  3. AMP.setLogLevel(D) is called, where D >= 2.\n *\n * @return {!Log}\n */\nexport function dev() {\n  if (logs.dev) {\n    return logs.dev;\n  }\n  if (!logConstructor) {\n    throw new Error('failed to call initLogConstructor');\n  }\n  return logs.dev = new logConstructor(self, mode => {\n    const logNum = parseInt(mode.log, 10);\n    if (logNum >= 3) {\n      return LogLevel.FINE;\n    }\n    if (logNum >= 2) {\n      return LogLevel.INFO;\n    }\n    return LogLevel.OFF;\n  });\n}\n\n/**\n * @param {!Window} win\n * @param {!Element=} opt_element\n * @return {boolean} isEmbed\n */\nexport function isFromEmbed(win, opt_element) {\n  if (!opt_element) {\n    return false;\n  }\n  return opt_element.ownerDocument.defaultView != win;\n}\n","/**\n * Copyright 2016 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {getMode} from './mode';\n\n/**\n * Provides info about the current app. This return value may be cached and\n * passed around as it will always be DCE'd.\n * @param {?Window=} opt_win\n * @return {!./mode.ModeDef}\n */\nexport function getModeObject(opt_win) {\n  return {\n    localDev: getMode(opt_win).localDev,\n    development: getMode(opt_win).development,\n    filter: getMode(opt_win).filter,\n    minified: getMode(opt_win).minified,\n    lite: getMode(opt_win).lite,\n    test: getMode(opt_win).test,\n    log: getMode(opt_win).log,\n    version: getMode(opt_win).version,\n    rtvVersion: getMode(opt_win).rtvVersion,\n  };\n}\n","/**\n * Copyright 2015 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {parseQueryString_} from './url-parse-query-string';\n\n/**\n * @typedef {{\n *   localDev: boolean,\n *   development: boolean,\n *   filter: (string|undefined),\n *   minified: boolean,\n *   lite: boolean,\n *   test: boolean,\n *   log: (string|undefined),\n *   version: string,\n *   rtvVersion: string,\n * }}\n */\nexport let ModeDef;\n\n/** @type {string} */\nconst version = '$internalRuntimeVersion$';\n\n/**\n * `rtvVersion` is the prefixed version we serve off of the cdn.\n * The prefix denotes canary(00) or prod(01) or an experiment version ( > 01).\n * @type {string}\n */\nlet rtvVersion = '';\n\n/**\n * Provides info about the current app.\n * @param {?Window=} opt_win\n * @return {!ModeDef}\n */\nexport function getMode(opt_win) {\n  const win = opt_win || self;\n  if (win.AMP_MODE) {\n    return win.AMP_MODE;\n  }\n  return win.AMP_MODE = getMode_(win);\n}\n\n/**\n * Provides info about the current app.\n * @param {!Window} win\n * @return {!ModeDef}\n */\nfunction getMode_(win) {\n  // Magic constants that are replaced by closure compiler.\n  // IS_MINIFIED is always replaced with true when closure compiler is used\n  // while IS_DEV is only replaced when `gulp dist` is called without the\n  // --fortesting flag.\n  const IS_DEV = true;\n  const IS_MINIFIED = false;\n\n  const localDevEnabled = !!(self.AMP_CONFIG && self.AMP_CONFIG.localDev);\n  const runningTests = IS_DEV && !!(win.AMP_TEST || win.__karma__);\n  const isLocalDev = IS_DEV && (localDevEnabled || runningTests);\n  const hashQuery = parseQueryString_(\n      // location.originalHash is set by the viewer when it removes the fragment\n      // from the URL.\n      win.location.originalHash || win.location.hash);\n\n  const searchQuery = parseQueryString_(win.location.search);\n\n  if (!rtvVersion) {\n    rtvVersion = getRtvVersion(win, isLocalDev);\n  }\n\n  // The `minified`, `test` and `localDev` properties are replaced\n  // as boolean literals when we run `gulp dist` without the `--fortesting`\n  // flags. This improved DCE on the production file we deploy as the code\n  // paths for localhost/testing/development are eliminated.\n  return {\n    localDev: isLocalDev,\n    // Triggers validation or enable pub level logging. Validation can be\n    // bypassed via #validate=0.\n    // Note that AMP_DEV_MODE flag is used for testing purposes.\n    development: !!(hashQuery['development'] == '1' || win.AMP_DEV_MODE),\n    examiner: hashQuery['development'] == '2',\n    // Allows filtering validation errors by error category. For the\n    // available categories, see ErrorCategory in validator/validator.proto.\n    filter: hashQuery['filter'],\n    // amp-geo override\n    geoOverride: hashQuery['amp-geo'],\n    minified: IS_MINIFIED,\n    // Whether document is in an amp-lite viewer. It signal that the user\n    // would prefer to use less bandwidth.\n    lite: searchQuery['amp_lite'] != undefined,\n    test: runningTests,\n    log: hashQuery['log'],\n    version,\n    rtvVersion,\n  };\n}\n\n/**\n * Retrieve the `rtvVersion` which will have a numeric prefix\n * denoting canary/prod/experiment (unless `isLocalDev` is true).\n *\n * @param {!Window} win\n * @param {boolean} isLocalDev\n * @return {string}\n */\nfunction getRtvVersion(win, isLocalDev) {\n  // If it's local dev then we won't actually have a full version so\n  // just use the version.\n  if (isLocalDev) {\n    return version;\n  }\n\n  if (win.AMP_CONFIG && win.AMP_CONFIG.v) {\n    return win.AMP_CONFIG.v;\n  }\n\n  // Currently `$internalRuntimeVersion$` and thus `mode.version` contain only\n  // major version. The full version however must also carry the minor version.\n  // We will default to production default `01` minor version for now.\n  // TODO(erwinmombay): decide whether $internalRuntimeVersion$ should contain\n  // minor version.\n  return `01${version}`;\n}\n\n\n/**\n * @param {!Window} win\n * @param {boolean} isLocalDev\n * @return {string}\n * @visibleForTesting\n */\nexport function getRtvVersionForTesting(win, isLocalDev) {\n  return getRtvVersion(win, isLocalDev);\n}\n\n\n/** @visibleForTesting */\nexport function resetRtvVersionForTesting() {\n  rtvVersion = '';\n}\n","/**\n * Copyright 2015 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\n/**\n * This class helps to manage observers. Observers can be added, removed or\n * fired through and instance of this class.\n * @template TYPE\n */\nexport class Observable {\n\n  /**\n   * Creates an instance of Observable.\n   */\n  constructor() {\n    /** @type {?Array<function(TYPE)>} */\n    this.handlers_ = null;\n  }\n\n  /**\n   * Adds the observer to this instance.\n   * @param {function(TYPE)} handler Observer's handler.\n   * @return {!UnlistenDef}\n   */\n  add(handler) {\n    if (!this.handlers_) {\n      this.handlers_ = [];\n    }\n    this.handlers_.push(handler);\n    return () => {\n      this.remove(handler);\n    };\n  }\n\n  /**\n   * Removes the observer from this instance.\n   * @param {function(TYPE)} handler Observer's instance.\n   */\n  remove(handler) {\n    if (!this.handlers_) {\n      return;\n    }\n    const index = this.handlers_.indexOf(handler);\n    if (index > -1) {\n      this.handlers_.splice(index, 1);\n    }\n  }\n\n  /**\n   * Removes all observers.\n   */\n  removeAll() {\n    if (!this.handlers_) {\n      return;\n    }\n    this.handlers_.length = 0;\n  }\n\n  /**\n   * Fires an event. All observers are called.\n   * @param {TYPE=} opt_event\n   */\n  fire(opt_event) {\n    if (!this.handlers_) {\n      return;\n    }\n    const handlers = this.handlers_;\n    for (let i = 0; i < handlers.length; i++) {\n      const handler = handlers[i];\n      handler(opt_event);\n    }\n  }\n\n  /**\n   * Returns number of handlers. Mostly needed for tests.\n   * @return {number}\n   */\n  getHandlerCount() {\n    if (!this.handlers_) {\n      return 0;\n    }\n    return this.handlers_.length;\n  }\n}\n","/**\n * Copyright 2015 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {getMode} from './mode';\nimport {install as installArrayIncludes} from './polyfills/array-includes';\nimport {install as installCustomElements} from './polyfills/custom-elements';\nimport {\n  install as installDOMTokenListToggle,\n} from './polyfills/domtokenlist-toggle';\nimport {install as installDocContains} from './polyfills/document-contains';\nimport {install as installMathSign} from './polyfills/math-sign';\nimport {install as installObjectAssign} from './polyfills/object-assign';\nimport {install as installPromise} from './polyfills/promise';\nimport {installCustomElements as installRegisterElement} from\n  'document-register-element/build/document-register-element.patched';\nimport {isExperimentOn} from './experiments';\n\nif (isExperimentOn(self, 'custom-elements-v1') || getMode().test) {\n  installCustomElements(self, class {});\n} else {\n  installRegisterElement(self, 'auto');\n}\ninstallDOMTokenListToggle(self);\ninstallMathSign(self);\ninstallObjectAssign(self);\ninstallPromise(self);\ninstallDocContains(self);\ninstallArrayIncludes(self);\n","/**\n * Copyright 2016 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n/**\n * Returns true if the element is in the array and false otherwise.\n *\n * @param {*} value\n * @param {number=} opt_fromIndex\n * @return {boolean}\n * @this {Array}\n */\nfunction includes(value, opt_fromIndex) {\n  const fromIndex = opt_fromIndex || 0;\n  const len = this.length;\n  let i = fromIndex >= 0 ? fromIndex : Math.max(len + fromIndex, 0);\n  for (; i < len; i++) {\n    const other = this[i];\n    // If value has been found OR (value is NaN AND other is NaN)\n    /*eslint \"no-self-compare\": 0*/\n    if (other === value || (value !== value && other !== other)) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/**\n* Sets the Array.contains polyfill if it does not exist.\n* @param {!Window} win\n*/\nexport function install(win) {\n  if (!win.Array.prototype.includes) {\n    win.Object.defineProperty(Array.prototype, 'includes', {\n      enumerable: false,\n      configurable: true,\n      writable: true,\n      value: includes,\n    });\n  }\n}\n","/**\n * Copyright 2018 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @typedef {{\n *   promise: !Promise<undefined>,\n *   resolve: function(),\n * }}\n */\nlet DeferredDef;\n\n/**\n * @typedef {!Function}\n */\nlet CustomElementConstructorDef;\n\n/**\n * @typedef {{\n *  name: string,\n *  ctor: !CustomElementConstructorDef,\n * }}\n */\nlet CustomElementDef;\n\n/**\n * Validates the custom element's name.\n * This intentionally ignores \"valid\" higher Unicode Code Points.\n * https://html.spec.whatwg.org/multipage/custom-elements.html#valid-custom-element-name\n */\nconst VALID_NAME = /^[a-z][a-z0-9._]*-[a-z0-9._-]*$/;\nconst INVALID_NAMES = [\n  'annotation-xml',\n  'color-profile',\n  'font-face',\n  'font-face-src',\n  'font-face-uri',\n  'font-face-format',\n  'font-face-name',\n  'missing-glyph',\n];\n\n/**\n * Asserts that the custom element name conforms to the spec.\n *\n * @param {!Function} SyntaxError\n * @param {string} name\n */\nfunction assertValidName(SyntaxError, name) {\n  if (!VALID_NAME.test(name) || INVALID_NAMES.indexOf(name) >= 0) {\n    throw new SyntaxError(`invalid custom element name \"${name}\"`);\n  }\n}\n\n/**\n * Does win have a full Custom Elements registry?\n *\n * @param {!Window} win\n * @return {boolean}\n */\nfunction hasCustomElements(win) {\n  const {customElements} = win;\n\n  return !!(\n    customElements &&\n    customElements.define &&\n    customElements.get &&\n    customElements.whenDefined);\n}\n\n/**\n * Was HTMLElement already patched for this window?\n *\n * @param {!Window} win\n * @return {boolean}\n */\nfunction isPatched(win) {\n  const tag = win.HTMLElement.toString();\n  return tag.indexOf('[native code]') === -1;\n}\n\n/**\n * The public Custom Elements API.\n */\nclass CustomElementRegistry {\n  /**\n   * @param {!Window} win\n   * @param {!Registry} registry\n   */\n  constructor(win, registry) {\n    /**\n     * @const @private\n     */\n    this.win_ = win;\n\n    /**\n     * @const @private\n     */\n    this.registry_ = registry;\n\n    /**\n     * @type {!Object<string, DeferredDef>}\n     * @private\n     * @const\n     */\n    this.pendingDefines_ = this.win_.Object.create(null);\n  }\n\n  /**\n   * Register the custom element.\n   *\n   * @param {string} name\n   * @param {!CustomElementConstructorDef} ctor\n   * @param {!Object=} options\n   */\n  define(name, ctor, options) {\n    this.registry_.define(name, ctor, options);\n\n    // If anyone is waiting for this custom element to be defined, resolve\n    // their promise.\n    const pending = this.pendingDefines_;\n    const deferred = pending[name];\n    if (deferred) {\n      deferred.resolve();\n      delete pending[name];\n    }\n  }\n\n  /**\n   * Get the constructor of the (already defined) custom element.\n   *\n   * @param {string} name\n   * @return {!CustomElementConstructorDef|undefined}\n   */\n  get(name) {\n    const def = this.registry_.getByName(name);\n    if (def) {\n      return def.ctor;\n    }\n  }\n\n  /**\n   * Returns a promise that waits until the custom element is defined.\n   * If the custom element is already defined, returns a resolved promise.\n   *\n   * @param {string} name\n   * @return {!Promise<undefined>}\n   */\n  whenDefined(name) {\n    const {Promise, SyntaxError} = this.win_;\n    assertValidName(SyntaxError, name);\n\n    if (this.registry_.getByName(name)) {\n      return Promise.resolve();\n    }\n\n    const pending = this.pendingDefines_;\n    const deferred = pending[name];\n    if (deferred) {\n      return deferred.promise;\n    }\n\n    let resolve;\n    const promise = new /*OK*/Promise(res => resolve = res);\n    pending[name] = {\n      promise,\n      resolve,\n    };\n\n    return promise;\n  }\n\n  /**\n   * Upgrade all custom elements inside root.\n   *\n   * @param {!Node} root\n   */\n  upgrade(root) {\n    this.registry_.upgrade(root);\n  }\n}\n\n/**\n * This internal APIs necessary to run the CustomElementRegistry.\n * Since Registry is never exposed externally, all methods are actually\n * available on the instance.\n */\nclass Registry {\n  /**\n   * @param {!Window} win\n   */\n  constructor(win) {\n    /**\n     * @private @const\n     */\n    this.win_ = win;\n\n    /**\n     * @private @const\n     */\n    this.doc_ = win.document;\n\n    /**\n     * @type {!Object<string, !CustomElementDef>}\n     * @private\n     * @const\n     */\n    this.definitions_ = win.Object.create(null);\n\n    /**\n     * A up-to-date DOM selector for all custom elements.\n     * @type {string}\n     */\n    this.query_ = '';\n\n    /**\n     * The currently upgrading element.\n     * @private {Element}\n     */\n    this.current_ = null;\n  }\n\n  /**\n   * The currently-being-upgraded custom element.\n   *\n   * When an already created (through the DOM parsing APIs, or innerHTML)\n   * custom element node is being upgraded, we can't just create a new node\n   * (it's illegal in the spec). But we still need to run the custom element's\n   * constructor code on the node. We avoid this conundrum by running the\n   * constructor while returning this current node in the HTMLElement\n   * class constructor (the base class of all custom elements).\n   *\n   * @return {Element}\n   */\n  current() {\n    const current = this.current_;\n    this.current_ = null;\n    return current;\n  }\n\n  /**\n   * Finds the custom element definition by name.\n   *\n   * @param {string} name\n   * @return {CustomElementDef|undefined}\n   */\n  getByName(name) {\n    const definition = this.definitions_[name];\n    if (definition) {\n      return definition;\n    }\n  }\n\n  /**\n   * Finds the custom element definition by constructor instance.\n   *\n   * @param {CustomElementConstructorDef} ctor\n   * @return {CustomElementDef|undefined}\n   */\n  getByConstructor(ctor) {\n    const definitions = this.definitions_;\n\n    for (const name in definitions) {\n      const def = definitions[name];\n      if (def.ctor === ctor) {\n        return def;\n      }\n    }\n  }\n\n  /**\n   * Registers the custom element definition, and upgrades all elements by that\n   * name in the root document.\n   *\n   * @param {string} name\n   * @param {!CustomElementConstructorDef} ctor\n   * @param {!Object|undefined} options\n   */\n  define(name, ctor, options) {\n    const {Error, SyntaxError} = this.win_;\n\n    if (options) {\n      throw new Error('Extending native custom elements is not supported');\n    }\n\n    assertValidName(SyntaxError, name);\n\n    if (this.getByName(name) ||\n        this.getByConstructor(ctor)) {\n      throw new Error(`duplicate definition \"${name}\"`);\n    }\n\n    // TODO(jridgewell): Record connectedCallback, disconnectedCallback,\n    // adoptedCallback, attributeChangedCallback, and observedAttributes.\n    // TODO(jridgewell): If attributeChangedCallback, gather observedAttributes\n    this.definitions_[name] = {\n      name,\n      ctor,\n    };\n\n    this.observe_(name);\n    this.upgrade(this.doc_, name);\n  }\n\n  /**\n   * Upgrades custom elements descendants of root (but not including root).\n   *\n   * When called with an opt_query, it both upgrades and connects the custom\n   * elements (this is used during the custom element define algorithm).\n   *\n   * @param {!Node} root\n   * @param {string=} opt_query\n   */\n  upgrade(root, opt_query) {\n    // Only CustomElementRegistry.p.define provides a query (the newly defined\n    // custom element). In this case, we are both upgrading _and_ connecting\n    // the custom elements.\n    const newlyDefined = !!opt_query;\n    const query = opt_query || this.query_;\n    const upgradeCandidates = this.queryAll_(root, query);\n\n    for (let i = 0; i < upgradeCandidates.length; i++) {\n      const candidate = upgradeCandidates[i];\n      if (newlyDefined) {\n        this.connectedCallback_(candidate);\n      } else {\n        this.upgradeSelf(candidate);\n      }\n    }\n  }\n\n  /**\n   * Upgrades the custom element node, if a custom element has been registered\n   * by this name.\n   *\n   * @param {!Node} node\n   */\n  upgradeSelf(node) {\n    const def = this.getByName(node.localName);\n    if (!def) {\n      return;\n    }\n\n    this.upgradeSelf_(/** @type {!Element} */(node), def);\n  }\n\n  /**\n   * @param {!Node} root\n   * @param {string} query\n   * @return {!Array|!NodeList}\n   */\n  queryAll_(root, query) {\n    if (!query || !root.querySelectorAll) {\n      // Nothing to do...\n      return [];\n    }\n\n    return root.querySelectorAll(query);\n  }\n\n  /**\n   * Upgrades the (already created via DOM parsing) custom element.\n   *\n   * @param {!Element} node\n   * @param {!CustomElementDef} def\n   */\n  upgradeSelf_(node, def) {\n    const {ctor} = def;\n    if (node instanceof ctor) {\n      return;\n    }\n\n    // Despite how it looks, this is not a useless construction.\n    // HTMLElementPolyfill (the base class of all custom elements) will return\n    // the current node, allowing the custom element's subclass constructor to\n    // run on the node. The node itself is already constructed, so the return\n    // value is just the node.\n    this.current_ = node;\n    const el = new ctor();\n\n    if (el !== node) {\n      throw new this.win_.Error(\n          'Constructor illegally returned a different instance.');\n    }\n  }\n\n  /**\n   * Fires connectedCallback on the custom element, if it has one.\n   * This also upgrades the custom element, since it may not have been\n   * accessible via the root document before (a detached DOM tree).\n   *\n   * @param {!Node} node\n   */\n  connectedCallback_(node) {\n    const def = this.getByName(node.localName);\n    if (!def) {\n      return;\n    }\n    this.upgradeSelf_(/** @type {!Element} */(node), def);\n    // TODO(jridgewell): It may be appropriate to adoptCallback, if the node\n    // used to be in another doc.\n    // TODO(jridgewell): I should be calling the definitions connectedCallback\n    // with node as the context.\n    if (node.connectedCallback) {\n      node.connectedCallback();\n    }\n  }\n\n  /**\n   * Fires disconnectedCallback on the custom element, if it has one.\n   *\n   * @param {!Node} node\n   */\n  disconnectedCallback_(node) {\n    // TODO(jridgewell): I should be calling the definitions connectedCallback\n    // with node as the context.\n    if (node.disconnectedCallback) {\n      node.disconnectedCallback();\n    }\n  }\n\n  /**\n   * Records name as a registered custom element to observe.\n   *\n   * Starts the Mutation Observer if this is the first registered custom\n   * element. This is deferred until the first custom element is defined to\n   * speed up initial rendering of the page.\n   *\n   * Mutation Observers are conveniently available in every browser we care\n   * about. When a node is connected to the root document, all custom\n   * elements (including that node iteself) will be upgraded and call\n   * connectedCallback. When a node is disconnectedCallback from the root\n   * document, all custom elements will call disconnectedCallback.\n   *\n   * @param {string} name\n   */\n  observe_(name) {\n    if (this.query_) {\n      this.query_ += `,${name}`;\n      return;\n    }\n\n    this.query_ = name;\n\n    // The first registered name starts the mutation observer.\n    const observer = new this.win_.MutationObserver(records => {\n      if (records) {\n        this.handleRecords_(records);\n      }\n    });\n    observer.observe(this.doc_, {\n      childList: true,\n      subtree: true,\n    });\n  }\n\n  /**\n   * Handle all the Mutation Observer's Mutation Records.\n   * All added custom elements will be upgraded (if not already) and call\n   * connectedCallback. All removed custom elements will call\n   * disconnectedCallback.\n   *\n   * @param {!Array<!MutationRecord>} records\n   */\n  handleRecords_(records) {\n    for (let i = 0; i < records.length; i++) {\n      const record = records[i];\n      if (!record) {\n        continue;\n      }\n\n      const {addedNodes, removedNodes} = record;\n      for (let i = 0; i < addedNodes.length; i++) {\n        const node = addedNodes[i];\n        const connectedCandidates = this.queryAll_(node, this.query_);\n        this.connectedCallback_(node);\n        for (let i = 0; i < connectedCandidates.length; i++) {\n          this.connectedCallback_(connectedCandidates[i]);\n        }\n      }\n\n      for (let i = 0; i < removedNodes.length; i++) {\n        const node = removedNodes[i];\n        const disconnectedCandidates = this.queryAll_(node, this.query_);\n        this.disconnectedCallback_(node);\n        for (let i = 0; i < disconnectedCandidates.length; i++) {\n          this.disconnectedCallback_(disconnectedCandidates[i]);\n        }\n      }\n    }\n  }\n}\n\n/**\n * Does the polyfilling.\n * @param {!Window} win\n */\nfunction polyfill(win) {\n  const {HTMLElement, Element, Node, Document, Object, document} = win;\n  const {createElement, cloneNode, importNode} = document;\n\n  const registry = new Registry(win);\n  const customElements = new CustomElementRegistry(win, registry);\n\n  // Expose the custom element registry.\n  // Object.getOwnPropertyDescriptor(window, 'customElements')\n  // {get: ƒ, set: undefined, enumerable: true, configurable: true}\n  Object.defineProperty(win, 'customElements', {\n    enumerable: true,\n    configurable: true,\n    // writable: false,\n    value: customElements,\n  });\n\n  // Patch createElement to immediately upgrade the custom element.\n  // This has the added benefit that it avoids the \"already created but needs\n  // constructor code run\" chicken-and-egg problem.\n  Document.prototype.createElement = function createElementPolyfill(name) {\n    const def = registry.getByName(name);\n    if (def) {\n      return new def.ctor();\n    }\n    return createElement.apply(this, arguments);\n  };\n\n  // Patch importNode to immediately upgrade custom elements.\n  // TODO(jridgewell): Can fire adoptedCallback for cross doc imports.\n  Document.prototype.importNode = function importNodePolyfill() {\n    const imported = importNode.apply(this, arguments);\n    if (imported) {\n      registry.upgradeSelf(imported);\n      registry.upgrade(imported);\n    }\n    return imported;\n  };\n\n  // Patch cloneNode to immediately upgrade custom elements.\n  Node.prototype.cloneNode = function cloneNodePolyfill() {\n    const cloned = cloneNode.apply(this, arguments);\n    registry.upgradeSelf(cloned);\n    registry.upgrade(cloned);\n    return cloned;\n  };\n\n  // Patch the innerHTML setter to immediately upgrade custom elements.\n  // Note, this could technically fire connectedCallbacks if this node was\n  // connected, but we leave that to the Mutation Observer.\n  const innerHTMLDesc = Object.getOwnPropertyDescriptor(Element.prototype,\n      'innerHTML');\n  const innerHTMLSetter = innerHTMLDesc.set;\n  innerHTMLDesc.set = function(html) {\n    innerHTMLSetter.call(this, html);\n    registry.upgrade(this);\n  };\n  Object.defineProperty(Element.prototype, 'innerHTML', innerHTMLDesc);\n\n  /**\n   * You can't use the real HTMLElement constructor, because you can't subclass\n   * it without using native classes. So, mock its approximation using\n   * createElement.\n   */\n  function HTMLElementPolyfill() {\n    const {constructor} = this;\n\n    // If we're upgrading an already created custom element, we can't create\n    // another new node (by the spec, it must be the same node).\n    let el = registry.current();\n\n    // If there's not a already created custom element, we're being invoked via\n    // `new`ing the constructor.\n    //\n    // Technically, we could get here via createElement, but we patched that.\n    // If it the custom element was registered, the patch turned it into a\n    // `new` call.\n    // If it was not registered, the native createElement is used. And if\n    // native createElement is being used and we got to this code, we're really\n    // in an infinite loop (a native createElement call just below) so we've\n    // got bigger problems.\n    //\n    // So just take my word we got here via `new`.\n    if (!el) {\n      // The custom element definition is an invariant. If the custom element\n      // is registered, everything works. If it's not, it throws in the member\n      // property access (only defined custom elements can be directly\n      // constructed via `new`).\n      const def = registry.getByConstructor(constructor);\n      el = createElement.call(document, def.name);\n    }\n\n    // Finally, if the node was already constructed, we need to reset it's\n    // prototype to the custom element prototype. And if it wasn't already\n    // constructed, we created a new node via native createElement, and we need\n    // to reset it's prototype. Basically always reset the prototype.\n    Object.setPrototypeOf(el, constructor.prototype);\n    return el;\n  }\n  subClass(Object, HTMLElement, HTMLElementPolyfill);\n\n  // Expose the polyfilled HTMLElement constructor for everyone to extend from.\n  win.HTMLElement = HTMLElementPolyfill;\n}\n\n/**\n * Wraps HTMLElement in a Reflect.construct constructor, so that transpiled\n * classes can `_this = superClass.call(this)` during their construction.\n *\n * This is only used when Custom Elements v1 is already available _and_ we're\n * using transpiled classes (which use ES5 construction idioms).\n *\n * @param {!Window} win\n */\nfunction wrapHTMLElement(win) {\n  const {HTMLElement, Reflect, Object} = win;\n  /**\n   */\n  function HTMLElementWrapper() {\n    const ctor = /** @type {function(...?):?|undefined} */(\n      /** @type {!HTMLElement} */(this).constructor);\n\n    // Reflect.construct allows us to construct a new HTMLElement without using\n    // `new` (which will always fail because native HTMLElement is a restricted\n    // constructor).\n    return Reflect.construct(HTMLElement, [], ctor);\n  }\n  subClass(Object, HTMLElement, HTMLElementWrapper);\n\n  // Expose the wrapped HTMLElement constructor for everyone to extend from.\n  win.HTMLElement = HTMLElementWrapper;\n}\n\n/**\n * Setups up prototype inheritance\n *\n * @param {!Object} Object\n * @param {!Function} superClass\n * @param {!Function} subClass\n */\nfunction subClass(Object, superClass, subClass) {\n  // Object.getOwnPropertyDescriptor(superClass.prototype, 'constructor')\n  // {value: ƒ, writable: true, enumerable: false, configurable: true}\n  subClass.prototype = Object.create(superClass.prototype, {\n    constructor: {\n      // enumerable: false,\n      configurable: true,\n      writable: true,\n      value: subClass,\n    },\n  });\n}\n\n/**\n * Polyfills Custom Elements v1 API. This has 4 modes:\n *\n * 1. Custom elements v1 already supported, using native classes\n * 2. Custom elements v1 already supported, using transpiled classes\n * 3. Custom elements v1 not supported, using native classes\n * 4. Custom elements v1 not supported, using transpiled classes\n *\n * In mode 1, nothing is done. In mode 2, a minimal polyfill is used to support\n * extending the HTMLElement base class. In mode 3 and 4, a full polyfill is\n * done.\n *\n * @param {!Window} win\n * @param {!Function} ctor\n */\nexport function install(win, ctor) {\n  if (isPatched(win)) {\n    return;\n  }\n\n  let install = true;\n  let installWrapper = false;\n\n  if (hasCustomElements(win)) {\n    // If ctor is constructable without new, it's a function. That means it was\n    // compiled down, and we need to do the minimal polyfill because all you\n    // cannot extend HTMLElement without native classes.\n    try {\n      const {Object, Reflect} = win;\n\n      // \"Construct\" ctor using ES5 idioms\n      const instance = Object.create(ctor.prototype);\n      ctor.call(instance);\n\n      // If that succeeded, we're in a transpiled environment\n      // Let's find out if we can wrap HTMLElement and avoid a full patch.\n      installWrapper = !!(Reflect && Reflect.construct);\n    } catch (e) {\n\n      // The ctor threw when we constructed is via ES5, so it's a real class.\n      // We're ok to not install the polyfill.\n      install = false;\n    }\n  }\n\n  if (installWrapper) {\n    wrapHTMLElement(win);\n  } else if (install) {\n    polyfill(win);\n  }\n}\n","/**\n * Copyright 2016 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n/**\n * Polyfill for `document.contains()` method. Notice that according to spec\n * `document.contains` is inclusionary.\n * See https://developer.mozilla.org/en-US/docs/Web/API/Node/contains\n * @param {?Node} node\n * @return {boolean}\n * @this {Node}\n */\nfunction documentContainsPolyfill(node) {\n  // Per spec, \"contains\" method is inclusionary\n  // i.e. `node.contains(node) == true`. However, we still need to test\n  // equality to the document itself.\n  return node == this || this.documentElement.contains(node);\n}\n\n\n/**\n * Polyfills `HTMLDocument.contains` API.\n * @param {!Window} win\n */\nexport function install(win) {\n  // HTMLDocument is undefined in Internet Explorer 10, but it has Document,\n  // so we use that as a fallback.\n  const documentClass = win.HTMLDocument || win.Document;\n  if (!documentClass.prototype.contains) {\n    win.Object.defineProperty(documentClass.prototype, 'contains', {\n      enumerable: false,\n      configurable: true,\n      writable: true,\n      value: documentContainsPolyfill,\n    });\n  }\n}\n","/**\n * Copyright 2016 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n/**\n * Polyfill for `DOMTokenList.prototype.toggle(token, opt_force)` method. This\n * is specially important because IE does not support `opt_force` attribute. See\n * https://goo.gl/hgKNYY for details.\n * @param {string} token\n * @param {boolean=} opt_force\n * @this {DOMTokenList}\n * @return {boolean}\n */\nfunction domTokenListTogglePolyfill(token, opt_force) {\n  const remove = opt_force === undefined ? this.contains(token) : !opt_force;\n  if (remove) {\n    this.remove(token);\n    return false;\n  } else {\n    this.add(token);\n    return true;\n  }\n}\n\n\n/**\n * Polyfills `DOMTokenList.prototype.toggle` API in IE.\n * @param {!Window} win\n */\nexport function install(win) {\n  if (isIe(win) && win.DOMTokenList) {\n    win.Object.defineProperty(win.DOMTokenList.prototype, 'toggle', {\n      enumerable: false,\n      configurable: true,\n      writable: true,\n      value: domTokenListTogglePolyfill,\n    });\n  }\n}\n\n\n/**\n * Whether the current browser is a IE browser.\n * @param {!Window} win\n * @return {boolean}\n */\nfunction isIe(win) {\n  return /Trident|MSIE|IEMobile/i.test(win.navigator.userAgent);\n}\n","/**\n * Copyright 2016 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Parses the number x and returns its sign. For positive x returns 1, for\n * negative, -1. For 0 and -0, returns 0 and -0 respectively. For any number\n * that parses to NaN, returns NaN.\n *\n * @param {number} x\n * @return {number}\n */\nexport function sign(x) {\n  x = Number(x);\n\n  // If x is 0, -0, or NaN, return it.\n  if (!x) {\n    return x;\n  }\n\n  return x > 0 ? 1 : -1;\n}\n\n\n/**\n * Sets the Math.sign polyfill if it does not exist.\n * @param {!Window} win\n */\nexport function install(win) {\n  if (!win.Math.sign) {\n    win.Object.defineProperty(win.Math, 'sign', {\n      enumerable: false,\n      configurable: true,\n      writable: true,\n      value: sign,\n    });\n  }\n}\n","/**\n * Copyright 2016 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nconst {hasOwnProperty} = Object.prototype;\n\n/**\n * Copies values of all enumerable own properties from one or more source\n * objects (provided as extended arguments to the function) to a target object.\n *\n * @param {!Object} target\n * @param {...Object} var_args\n * @return {!Object}\n */\nexport function assign(target, var_args) {\n  if (target == null) {\n    throw new TypeError('Cannot convert undefined or null to object');\n  }\n\n  const output = Object(target);\n  for (let i = 1; i < arguments.length; i++) {\n    const source = arguments[i];\n    if (source != null) {\n      for (const key in source) {\n        if (hasOwnProperty.call(source, key)) {\n          output[key] = source[key];\n        }\n      }\n    }\n  }\n  return output;\n}\n\n\n/**\n * Sets the Object.assign polyfill if it does not exist.\n * @param {!Window} win\n */\nexport function install(win) {\n  if (!win.Object.assign) {\n    win.Object.defineProperty(win.Object, 'assign', {\n      enumerable: false,\n      configurable: true,\n      writable: true,\n      value: assign,\n    });\n  }\n}\n","/**\n * Copyright 2016 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nimport * as Promise from 'promise-pjs/promise';\n\n/**\n * Sets the Promise polyfill if it does not exist.\n * @param {!Window} win\n */\nexport function install(win) {\n  if (!win.Promise) {\n    win.Promise = /** @type {?} */ (Promise);\n    // In babel the * export is an Object with a default property.\n    // In closure compiler it is the Promise function itself.\n    if (Promise.default) {\n      win.Promise = Promise.default;\n    }\n    // We copy the individual static methods, because closure\n    // compiler flattens the polyfill namespace.\n    win.Promise.resolve = Promise.resolve;\n    win.Promise.reject = Promise.reject;\n    win.Promise.all = Promise.all;\n    win.Promise.race = Promise.race;\n  }\n}\n","/**\n * Copyright 2016 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Services} from './services';\nimport {dev} from './log';\nimport {getServicePromise} from './service';\n\n/**\n * A map of services that delay rendering. The key is the name of the service\n * and the value is a DOM query which is used to check if the service is needed\n * in the current document.\n * Do not add a service unless absolutely necessary.\n *\n * \\   \\  /  \\  /   / /   \\     |   _  \\     |  \\ |  | |  | |  \\ |  |  / _____|\n *  \\   \\/    \\/   / /  ^  \\    |  |_)  |    |   \\|  | |  | |   \\|  | |  |  __\n *   \\            / /  /_\\  \\   |      /     |  . `  | |  | |  . `  | |  | |_ |\n *    \\    /\\    / /  _____  \\  |  |\\  \\----.|  |\\   | |  | |  |\\   | |  |__| |\n *     \\__/  \\__/ /__/     \\__\\ | _| `._____||__| \\__| |__| |__| \\__|  \\______|\n *\n * The equivalent of this list is used for server-side rendering (SSR) and any\n * changes made to it must be made in coordination with caches that implement\n * SSR. For more information on SSR see bit.ly/amp-ssr.\n *\n * @const {!Object<string, string>}\n */\nconst SERVICES = {\n  'amp-dynamic-css-classes': '[custom-element=amp-dynamic-css-classes]',\n  'variant': 'amp-experiment',\n  'amp-story': 'amp-story[standalone]',\n};\n\n/**\n * Maximum milliseconds to wait for all extensions to load before erroring.\n * @const\n */\nconst LOAD_TIMEOUT = 3000;\n\n/**\n * Detects any render delaying services that are required on the page, and\n * returns a promise with a timeout.\n * @param {!Window} win\n * @return {!Promise<!Array<*>>} resolves to an Array that has the same length\n *     as the detected render delaying services\n */\nexport function waitForServices(win) {\n  const promises = includedServices(win).map(service => {\n    return Services.timerFor(win).timeoutPromise(\n        LOAD_TIMEOUT,\n        getServicePromise(win, service),\n        `Render timeout waiting for service ${service} to be ready.`\n    );\n  });\n  return Promise.all(promises);\n}\n\n/**\n * Returns true if the page has a render delaying service.\n * @param {!Window} win\n * @return {boolean}\n */\nexport function hasRenderDelayingServices(win) {\n  return includedServices(win).length > 0;\n}\n\n/**\n * Detects which, if any, render-delaying extensions are included on the page.\n * @param {!Window} win\n * @return {!Array<string>}\n */\nexport function includedServices(win) {\n  /** @const {!Document} */\n  const doc = win.document;\n  dev().assert(doc.body);\n\n  return Object.keys(SERVICES).filter(service => {\n    return doc.querySelector(SERVICES[service]);\n  });\n}\n","/**\n * Copyright 2015 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Registration and getter functions for AMP services.\n *\n * Invariant: Service getters never return null for registered services.\n */\n\n// src/polyfills.js must be the first import.\nimport './polyfills'; // eslint-disable-line sort-imports-es6-autofix/sort-imports-es6\n\nimport {Deferred} from './utils/promise';\nimport {dev} from './log';\nimport {toWin} from './types';\n\n\n/**\n * Holds info about a service.\n * - obj: Actual service implementation when available.\n * - promise: Promise for the obj.\n * - resolve: Function to resolve the promise with the object.\n * - context: Argument for ctor, either a window or an ampdoc.\n * - ctor: Function that constructs and returns the service.\n * @typedef {{\n *   obj: (?Object),\n *   promise: (?Promise),\n *   resolve: (?function(!Object)),\n *   context: (?Window|?./service/ampdoc-impl.AmpDoc),\n *   ctor: (?function(new:Object, !Window)|\n *          ?function(new:Object, !./service/ampdoc-impl.AmpDoc)),\n * }}\n */\nlet ServiceHolderDef;\n\n\n/**\n * This interface provides a `dispose` method that will be called by\n * runtime when a service needs to be disposed of.\n * @interface\n */\nexport class Disposable {\n\n  /**\n   * Instructs the service to release any resources it might be holding. Can\n   * be called only once in the lifecycle of a service.\n   */\n  dispose() {}\n}\n\n\n/**\n * This interface provides a `adoptEmbedWindow` method that will be called by\n * runtime for a new embed window.\n * @interface\n */\nexport class EmbeddableService {\n\n  /**\n   * Instructs the service to adopt the embed window and add any necessary\n   * listeners and resources.\n   * @param {!Window} unusedEmbedWin\n   */\n  adoptEmbedWindow(unusedEmbedWin) {}\n}\n\n\n/**\n * Returns a service with the given id. Assumes that it has been registered\n * already.\n * @param {!Window} win\n * @param {string} id\n * @param {boolean=} opt_fallbackToTopWin\n * @return {Object} The service.\n */\nexport function getExistingServiceInEmbedScope(win, id, opt_fallbackToTopWin) {\n  // First, try to resolve via local (embed) window.\n  const local = getLocalExistingServiceForEmbedWinOrNull(win, id);\n  if (local) {\n    return local;\n  }\n  if (opt_fallbackToTopWin) {\n    return getService(win, id);\n  }\n  return null;\n}\n\n/**\n * Returns a service with the given id. Assumes that it has been constructed\n * already.\n *\n * Unlike most service getters, passing `Node` is necessary for some FIE-scope\n * services since sometimes we only have the FIE Document for context.\n *\n * @param {!Node|!./service/ampdoc-impl.AmpDoc} nodeOrDoc\n * @param {string} id\n * @param {boolean=} opt_fallbackToTopWin\n * @return {Object} The service.\n */\nexport function getExistingServiceForDocInEmbedScope(\n  nodeOrDoc, id, opt_fallbackToTopWin) {\n  // First, try to resolve via local (embed) window.\n  if (nodeOrDoc.nodeType) {\n    // If a node is passed, try to resolve via this node.\n    const win = toWin(/** @type {!Document} */ (\n      nodeOrDoc.ownerDocument || nodeOrDoc).defaultView);\n    const local = getLocalExistingServiceForEmbedWinOrNull(win, id);\n    if (local) {\n      return local;\n    }\n  }\n  // If an ampdoc is passed or fallback is allowed, continue resolving.\n  if (!nodeOrDoc.nodeType || opt_fallbackToTopWin) {\n    return getServiceForDocDeprecated(nodeOrDoc, id);\n  }\n  return null;\n}\n\n/**\n * Installs a service override on amp-doc level.\n * @param {!Window} embedWin\n * @param {string} id\n * @param {!Object} service The service.\n */\nexport function installServiceInEmbedScope(embedWin, id, service) {\n  const topWin = getTopWindow(embedWin);\n  dev().assert(embedWin != topWin,\n      'Service override can only be installed in embed window: %s', id);\n  dev().assert(!getLocalExistingServiceForEmbedWinOrNull(embedWin, id),\n      'Service override has already been installed: %s', id);\n  registerServiceInternal(embedWin, embedWin, id, () => service);\n  getServiceInternal(embedWin, id); // Force service to build.\n}\n\n/**\n * @param {!Window} embedWin\n * @param {string} id\n * @return {?Object}\n */\nfunction getLocalExistingServiceForEmbedWinOrNull(embedWin, id) {\n  // Note that this method currently only resolves against the given window.\n  // It does not try to go all the way up the parent window chain. We can change\n  // this in the future, but for now this gives us a better performance.\n  const topWin = getTopWindow(embedWin);\n  if (embedWin != topWin && isServiceRegistered(embedWin, id)) {\n    return getServiceInternal(embedWin, id);\n  } else {\n    return null;\n  }\n}\n\n/**\n * Registers a service given a class to be used as implementation.\n * @param {!Window} win\n * @param {string} id of the service.\n * @param {function(new:Object, !Window)} constructor\n * @param {boolean=} opt_instantiate Whether to immediately create the service\n */\nexport function registerServiceBuilder(win,\n  id,\n  constructor,\n  opt_instantiate) {\n  win = getTopWindow(win);\n  registerServiceInternal(win, win, id, constructor);\n  if (opt_instantiate) {\n    getServiceInternal(win, id);\n  }\n}\n\n\n/**\n * Returns a service and registers it given a class to be used as\n * implementation.\n * @param {!Node|!./service/ampdoc-impl.AmpDoc} nodeOrDoc\n * @param {string} id of the service.\n * @param {function(new:Object, !./service/ampdoc-impl.AmpDoc)} constructor\n * @param {boolean=} opt_instantiate Whether to immediately create the service\n */\nexport function registerServiceBuilderForDoc(nodeOrDoc,\n  id,\n  constructor,\n  opt_instantiate) {\n  const ampdoc = getAmpdoc(nodeOrDoc);\n  const holder = getAmpdocServiceHolder(ampdoc);\n  registerServiceInternal(holder, ampdoc, id, constructor);\n  if (opt_instantiate) {\n    getServiceInternal(holder, id);\n  }\n}\n\n\n/**\n * Returns a service for the given id and window (a per-window singleton). Users\n * should typically wrap this as a special purpose function (e.g.\n * `Services.vsyncFor(win)`) for type safety and because the factory should not\n * be passed around.\n * @param {!Window} win\n * @param {string} id of the service.\n * @template T\n * @return {T}\n */\nexport function getService(win, id) {\n  win = getTopWindow(win);\n  return getServiceInternal(win, id);\n}\n\n\n/**\n * Returns a promise for a service for the given id and window. Also expects an\n * element that has the actual implementation. The promise resolves when the\n * implementation loaded. Users should typically wrap this as a special purpose\n * function (e.g. `Services.vsyncFor(win)`) for type safety and because the\n * factory should not be passed around.\n * @param {!Window} win\n * @param {string} id of the service.\n * @return {!Promise<!Object>}\n */\nexport function getServicePromise(win, id) {\n  return getServicePromiseInternal(win, id);\n}\n\n\n/**\n * Returns a service or null with the given id.\n * @param {!Window} win\n * @param {string} id\n * @return {?Object} The service.\n */\nexport function getExistingServiceOrNull(win, id) {\n  win = getTopWindow(win);\n  if (isServiceRegistered(win, id)) {\n    return getServiceInternal(win, id);\n  } else {\n    return null;\n  }\n}\n\n\n/**\n * Like getServicePromise but returns null if the service was never registered.\n * @param {!Window} win\n * @param {string} id\n * @return {?Promise<!Object>}\n */\nexport function getServicePromiseOrNull(win, id) {\n  return getServicePromiseOrNullInternal(win, id);\n}\n\n\n/**\n * Returns a service for the given id and ampdoc (a per-ampdoc singleton).\n * Expects service `id` to be registered.\n * @param {!Element|!./service/ampdoc-impl.AmpDoc} elementOrAmpDoc\n * @param {string} id\n * @return {T}\n * @template T\n */\nexport function getServiceForDoc(elementOrAmpDoc, id) {\n  const ampdoc = getAmpdoc(elementOrAmpDoc);\n  const holder = getAmpdocServiceHolder(ampdoc);\n  return getServiceInternal(holder, id);\n}\n\n\n/**\n * tl;dr -- Use getServiceForDoc() instead of this.\n *\n * Privileged variant of getServiceForDoc() that accepts non-element params,\n * e.g. window.document. This is currently necessary for doc-level services\n * used in startup, e.g. Chunks. Eventually we want to remove this function\n * and have callers find the appropriate AmpDoc and use getServiceForDoc().\n *\n * @param {!Node|!./service/ampdoc-impl.AmpDoc} nodeOrDoc\n * @param {string} id\n * @return {T}\n * @template T\n */\nexport function getServiceForDocDeprecated(nodeOrDoc, id) {\n  const ampdoc = getAmpdoc(nodeOrDoc);\n  const holder = getAmpdocServiceHolder(ampdoc);\n  return getServiceInternal(holder, id);\n}\n\n\n/**\n * Returns a promise for a service for the given id and ampdoc. Also expects\n * a service that has the actual implementation. The promise resolves when\n * the implementation loaded.\n * @param {!Element|!./service/ampdoc-impl.AmpDoc} elementOrAmpDoc\n * @param {string} id\n * @return {!Promise<!Object>}\n */\nexport function getServicePromiseForDoc(elementOrAmpDoc, id) {\n  return getServicePromiseInternal(\n      getAmpdocServiceHolder(elementOrAmpDoc), id);\n}\n\n\n/**\n * Like getServicePromiseForDoc but returns null if the service was never\n * registered for this ampdoc.\n * @param {!Element|!./service/ampdoc-impl.AmpDoc} elementOrAmpDoc\n * @param {string} id\n * @return {?Promise<!Object>}\n */\nexport function getServicePromiseOrNullForDoc(elementOrAmpDoc, id) {\n  return getServicePromiseOrNullInternal(\n      getAmpdocServiceHolder(elementOrAmpDoc), id);\n}\n\n/**\n * Set the parent and top windows on a child window (friendly iframe).\n * @param {!Window} win\n * @param {!Window} parentWin\n */\nexport function setParentWindow(win, parentWin) {\n  win.__AMP_PARENT = parentWin;\n  win.__AMP_TOP = getTopWindow(parentWin);\n}\n\n\n/**\n * Returns the parent window for a child window (friendly iframe).\n * @param {!Window} win\n * @return {!Window}\n */\nexport function getParentWindow(win) {\n  return win.__AMP_PARENT || win;\n}\n\n\n/**\n * Returns the top window where AMP Runtime is installed for a child window\n * (friendly iframe).\n * @param {!Window} win\n * @return {!Window}\n */\nexport function getTopWindow(win) {\n  return win.__AMP_TOP || win;\n}\n\n\n/**\n * Returns the parent \"friendly\" iframe if the node belongs to a child window.\n * @param {!Node} node\n * @param {!Window} topWin\n * @return {?HTMLIFrameElement}\n */\nexport function getParentWindowFrameElement(node, topWin) {\n  const childWin = (node.ownerDocument || node).defaultView;\n  if (childWin && childWin != topWin && getTopWindow(childWin) == topWin) {\n    try {\n      return /** @type {?HTMLIFrameElement} */ (childWin.frameElement);\n    } catch (e) {\n      // Ignore the error.\n    }\n  }\n  return null;\n}\n\n\n/**\n * @param {!Node|!./service/ampdoc-impl.AmpDoc} nodeOrDoc\n * @return {!./service/ampdoc-impl.AmpDoc}\n */\nexport function getAmpdoc(nodeOrDoc) {\n  if (nodeOrDoc.nodeType) {\n    const win = toWin(/** @type {!Document} */ (\n      nodeOrDoc.ownerDocument || nodeOrDoc).defaultView);\n    return getAmpdocService(win).getAmpDoc(/** @type {!Node} */ (nodeOrDoc));\n  }\n  return /** @type {!./service/ampdoc-impl.AmpDoc} */ (nodeOrDoc);\n}\n\n\n/**\n * @param {!Node|!./service/ampdoc-impl.AmpDoc} nodeOrDoc\n * @return {!./service/ampdoc-impl.AmpDoc|!Window}\n */\nfunction getAmpdocServiceHolder(nodeOrDoc) {\n  const ampdoc = getAmpdoc(nodeOrDoc);\n  return ampdoc.isSingleDoc() ? ampdoc.win : ampdoc;\n}\n\n\n/**\n * This is essentially a duplicate of `ampdoc.js`, but necessary to avoid\n * circular dependencies.\n * @param {!Window} win\n * @return {!./service/ampdoc-impl.AmpDocService}\n */\nfunction getAmpdocService(win) {\n  return /** @type {!./service/ampdoc-impl.AmpDocService} */ (\n    getService(win, 'ampdoc'));\n}\n\n\n/**\n * Get service `id` from `holder`. Assumes the service\n * has already been registered.\n * @param {!Object} holder Object holding the service instance.\n * @param {string} id of the service.\n * @return {Object}\n * @template T\n */\nfunction getServiceInternal(holder, id) {\n  dev().assert(isServiceRegistered(holder, id),\n      `Expected service ${id} to be registered`);\n  const services = getServices(holder);\n  const s = services[id];\n  if (!s.obj) {\n    dev().assert(s.ctor, `Service ${id} registered without ctor nor impl.`);\n    dev().assert(s.context, `Service ${id} registered without context.`);\n    s.obj = new s.ctor(s.context);\n    dev().assert(s.obj, `Service ${id} constructed to null.`);\n    s.ctor = null;\n    s.context = null;\n    // The service may have been requested already, in which case we have a\n    // pending promise we need to fulfill.\n    if (s.resolve) {\n      s.resolve(s.obj);\n    }\n  }\n  return s.obj;\n}\n\n/**\n * @param {!Object} holder Object holding the service instance.\n * @param {!Window|!./service/ampdoc-impl.AmpDoc} context Win or AmpDoc.\n * @param {string} id of the service.\n * @param {?function(new:Object, !Window)|?function(new:Object, !./service/ampdoc-impl.AmpDoc)} ctor Constructor function to new the service. Called with context.\n */\nfunction registerServiceInternal(holder, context, id, ctor) {\n  const services = getServices(holder);\n  let s = services[id];\n\n  if (!s) {\n    s = services[id] = {\n      obj: null,\n      promise: null,\n      resolve: null,\n      context: null,\n      ctor: null,\n    };\n  }\n\n  if (s.ctor || s.obj) {\n    // Service already registered.\n    return;\n  }\n\n  s.ctor = ctor;\n  s.context = context;\n\n  // The service may have been requested already, in which case there is a\n  // pending promise that needs to fulfilled.\n  if (s.resolve) {\n    // getServiceInternal will resolve the promise.\n    getServiceInternal(holder, id);\n  }\n}\n\n/**\n * @param {!Object} holder\n * @param {string} id of the service.\n * @return {!Promise<!Object>}\n */\nfunction getServicePromiseInternal(holder, id) {\n  const cached = getServicePromiseOrNullInternal(holder, id);\n  if (cached) {\n    return cached;\n  }\n  // Service is not registered.\n\n  // TODO(@cramforce): Add a check that if the element is eventually registered\n  // that the service is actually provided and this promise resolves.\n  const deferred = new Deferred();\n  const {promise, resolve} = deferred;\n\n  const services = getServices(holder);\n  services[id] = {\n    obj: null,\n    promise,\n    resolve,\n    context: null,\n    ctor: null,\n  };\n  return promise;\n}\n\n\n/**\n * Returns a promise for service `id` if the service has been registered\n * on `holder`.\n * @param {!Object} holder\n * @param {string} id of the service.\n * @return {?Promise<!Object>}\n */\nfunction getServicePromiseOrNullInternal(holder, id) {\n  const services = getServices(holder);\n  const s = services[id];\n  if (s) {\n    if (s.promise) {\n      return s.promise;\n    } else {\n      // Instantiate service if not already instantiated.\n      getServiceInternal(holder, id);\n      return s.promise = Promise.resolve(/** @type {!Object} */ (s.obj));\n    }\n  }\n  return null;\n}\n\n\n/**\n * Returns the object that holds the services registered in a holder.\n * @param {!Object} holder\n * @return {!Object<string,!ServiceHolderDef>}\n */\nfunction getServices(holder) {\n  let {services} = holder;\n  if (!services) {\n    services = holder.services = {};\n  }\n  return services;\n}\n\n\n/**\n * Whether the specified service implements `Disposable` interface.\n * @param {!Object} service\n * @return {boolean}\n */\nexport function isDisposable(service) {\n  return typeof service.dispose == 'function';\n}\n\n\n/**\n * Asserts that the specified service implements `Disposable` interface and\n * typecasts the instance to `Disposable`.\n * @param {!Object} service\n * @return {!Disposable}\n */\nexport function assertDisposable(service) {\n  dev().assert(isDisposable(service), 'required to implement Disposable');\n  return /** @type {!Disposable} */ (service);\n}\n\n\n/**\n * Disposes all disposable (implements `Disposable` interface) services in\n * ampdoc scope.\n * @param {!./service/ampdoc-impl.AmpDoc} ampdoc\n */\nexport function disposeServicesForDoc(ampdoc) {\n  disposeServicesInternal(ampdoc);\n}\n\n\n/**\n * Disposes all disposable (implements `Disposable` interface) services in\n * embed scope.\n * @param {!Window} embedWin\n */\nexport function disposeServicesForEmbed(embedWin) {\n  disposeServicesInternal(embedWin);\n}\n\n\n/**\n * @param {!Object} holder Object holding the service instances.\n */\nfunction disposeServicesInternal(holder) {\n  // TODO(dvoytenko): Consider marking holder as destroyed for later-arriving\n  // service to be canceled automatically.\n  const services = getServices(holder);\n  for (const id in services) {\n    if (!Object.prototype.hasOwnProperty.call(services, id)) {\n      continue;\n    }\n    const serviceHolder = services[id];\n    if (serviceHolder.obj) {\n      disposeServiceInternal(id, serviceHolder.obj);\n    } else if (serviceHolder.promise) {\n      serviceHolder.promise.then(\n          instance => disposeServiceInternal(id, instance));\n    }\n  }\n}\n\n\n/**\n * @param {string} id\n * @param {!Object} service\n */\nfunction disposeServiceInternal(id, service) {\n  if (!isDisposable(service)) {\n    return;\n  }\n  try {\n    assertDisposable(service).dispose();\n  } catch (e) {\n    // Ensure that a failure to dispose a service does not disrupt other\n    // services.\n    dev().error('SERVICE', 'failed to dispose service', id, e);\n  }\n}\n\n\n/**\n * Whether the specified service implements `EmbeddableService` interface.\n * @param {!Object} service\n * @return {boolean}\n */\nexport function isEmbeddable(service) {\n  return typeof service.adoptEmbedWindow == 'function';\n}\n\n\n/**\n * Adopts an embeddable (implements `EmbeddableService` interface) service\n * in embed scope.\n * @param {!Window} embedWin\n * @param {string} serviceId\n */\nexport function adoptServiceForEmbed(embedWin, serviceId) {\n  const adopted = adoptServiceForEmbedIfEmbeddable(embedWin, serviceId);\n  dev().assert(adopted, `Service ${serviceId} not found on parent ` +\n      'or doesn\\'t implement EmbeddableService.');\n}\n\n\n/**\n * Adopts an embeddable (implements `EmbeddableService` interface) service\n * in embed scope.\n * @param {!Window} embedWin\n * @param {string} serviceId\n * @return {boolean}\n */\nexport function adoptServiceForEmbedIfEmbeddable(embedWin, serviceId) {\n  const frameElement = /** @type {!Node} */ (dev().assert(\n      embedWin.frameElement,\n      'frameElement not found for embed'));\n  const ampdoc = getAmpdoc(frameElement);\n  const holder = getAmpdocServiceHolder(ampdoc);\n  if (!isServiceRegistered(holder, serviceId)) {\n    return false;\n  }\n  const service = getServiceForDocDeprecated(frameElement, serviceId);\n  if (!isEmbeddable(service)) {\n    return false;\n  }\n  service.adoptEmbedWindow(embedWin);\n  return true;\n}\n\n\n/**\n * Resets a single service, so it gets recreated on next getService invocation.\n * @param {!Object} holder\n * @param {string} id of the service.\n */\nexport function resetServiceForTesting(holder, id) {\n  if (holder.services) {\n    holder.services[id] = null;\n  }\n}\n\n/**\n * @param {!Object} holder Object holding the service instance.\n * @param {string} id of the service.\n * @return {boolean}\n */\nfunction isServiceRegistered(holder, id) {\n  const service = holder.services && holder.services[id];\n  // All registered services must have an implementation or a constructor.\n  return !!(service && (service.ctor || service.obj));\n}\n","/**\n * Copyright 2017 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  getAmpdoc,\n  getExistingServiceForDocInEmbedScope,\n  getExistingServiceOrNull,\n  getService,\n  getServiceForDoc,\n  getServiceForDocDeprecated,\n  getServicePromiseForDoc,\n} from './service';\nimport {\n  getElementServiceForDoc,\n  getElementServiceIfAvailable,\n  getElementServiceIfAvailableForDoc,\n  getElementServiceIfAvailableForDocInEmbedScope,\n} from './element-service';\n\n/** @typedef {!../extensions/amp-subscriptions/0.1/amp-subscriptions.SubscriptionService} */\nexport let SubscriptionService;\n\nexport class Services {\n  /**\n   * Hint: Add extensions folder path to compile.js with\n   * warnings cannot find modules.\n   */\n\n  /**\n   * Returns a promise for the Access service.\n   * @param {!Element|!./service/ampdoc-impl.AmpDoc} elementOrAmpDoc\n   * @return {!Promise<!../extensions/amp-access/0.1/amp-access.AccessService>}\n   */\n  static accessServiceForDoc(elementOrAmpDoc) {\n    return (/** @type {!Promise<!../extensions/amp-access/0.1/amp-access.AccessService>} */ (\n      getElementServiceForDoc(elementOrAmpDoc, 'access', 'amp-access')));\n  }\n\n  /**\n   * Returns a promise for the Access service or a promise for null if the\n   * service is not available on the current page.\n   * @param {!Element|!./service/ampdoc-impl.AmpDoc} elementOrAmpDoc\n   * @return {!Promise<?../extensions/amp-access/0.1/amp-access.AccessService>}\n   */\n  static accessServiceForDocOrNull(elementOrAmpDoc) {\n    return (/** @type {!Promise<?../extensions/amp-access/0.1/amp-access.AccessService>} */ (\n      getElementServiceIfAvailableForDoc(elementOrAmpDoc, 'access',\n          'amp-access')));\n  }\n\n  /**\n   * Returns a promise for the Subscriptions service.\n   * @param {!Element|!./service/ampdoc-impl.AmpDoc} elementOrAmpDoc\n   * @return {!Promise<!SubscriptionService>}\n   */\n  static subscriptionsServiceForDoc(elementOrAmpDoc) {\n    return (/** @type {!Promise<!SubscriptionService>} */ (\n      getElementServiceForDoc(elementOrAmpDoc, 'subscriptions',\n          'amp-subscriptions')));\n  }\n\n  /**\n   * Returns a promise for the Subscriptions service.\n   * @param {!Element|!./service/ampdoc-impl.AmpDoc} elementOrAmpDoc\n   * @return {!Promise<?SubscriptionService>}\n   */\n  static subscriptionsServiceForDocOrNull(elementOrAmpDoc) {\n    return (/** @type {!Promise<?SubscriptionService>} */ (\n      getElementServiceIfAvailableForDoc(elementOrAmpDoc, 'subscriptions',\n          'amp-subscriptions')));\n  }\n\n  /**\n   * Unlike most service getters, passing `Node` is necessary for some FIE-scope\n   * services since sometimes we only have the FIE Document for context.\n   * @param {!Node|!./service/ampdoc-impl.AmpDoc} nodeOrDoc\n   * @return {!./service/action-impl.ActionService}\n   */\n  static actionServiceForDoc(nodeOrDoc) {\n    return /** @type {!./service/action-impl.ActionService} */ (\n      getExistingServiceForDocInEmbedScope(\n          nodeOrDoc, 'action', /* opt_fallbackToTopWin */ true));\n  }\n\n  /**\n   * @param {!Element|!./service/ampdoc-impl.AmpDoc} elementOrAmpDoc\n   * @return {!Promise<!Activity>}\n   */\n  static activityForDoc(elementOrAmpDoc) {\n    return /** @type {!Promise<!Activity>} */ (\n      getElementServiceForDoc(elementOrAmpDoc, 'activity', 'amp-analytics'));\n  }\n\n  /**\n   * Returns the global instance of the `AmpDocService` service that can be\n   * used to resolve an ampdoc for any node: either in the single-doc or\n   * shadow-doc environment.\n   * @param {!Window} window\n   * @return {!./service/ampdoc-impl.AmpDocService}\n   */\n  static ampdocServiceFor(window) {\n    return /** @type {!./service/ampdoc-impl.AmpDocService} */ (\n      getService(window, 'ampdoc'));\n  }\n\n  /**\n   * Returns the AmpDoc for the specified context node.\n   * @param {!Element|!./service/ampdoc-impl.AmpDoc} elementOrAmpDoc\n   * @return {!./service/ampdoc-impl.AmpDoc}\n   */\n  static ampdoc(elementOrAmpDoc) {\n    return getAmpdoc(elementOrAmpDoc);\n  }\n\n  /**\n   * @param {!Element|!./service/ampdoc-impl.AmpDoc} elementOrAmpDoc\n   * @param {boolean=} loadAnalytics\n   * @return {!Promise<!../extensions/amp-analytics/0.1/instrumentation.InstrumentationService>}\n   */\n  static analyticsForDoc(elementOrAmpDoc, loadAnalytics = false) {\n    if (loadAnalytics) {\n      // Get Extensions service and force load analytics extension.\n      const ampdoc = getAmpdoc(elementOrAmpDoc);\n      Services.extensionsFor(ampdoc.win)./*OK*/installExtensionForDoc(\n          ampdoc, 'amp-analytics');\n    }\n    return /** @type {!Promise<!../extensions/amp-analytics/0.1/instrumentation.InstrumentationService>} */ (\n      getElementServiceForDoc(elementOrAmpDoc, 'amp-analytics-instrumentation',\n          'amp-analytics'));\n  }\n\n  /**\n   * @param {!Element|!./service/ampdoc-impl.AmpDoc} elementOrAmpDoc\n   * @return {!Promise<?../extensions/amp-analytics/0.1/instrumentation.InstrumentationService>}\n   */\n  static analyticsForDocOrNull(elementOrAmpDoc) {\n    return /** @type {!Promise<?../extensions/amp-analytics/0.1/instrumentation.InstrumentationService>} */ (\n      getElementServiceIfAvailableForDoc(elementOrAmpDoc,\n          'amp-analytics-instrumentation', 'amp-analytics'));\n  }\n\n  /**\n   * @param {!Window} window\n   * @return {!./service/batched-xhr-impl.BatchedXhr}\n   */\n  static batchedXhrFor(window) {\n    return /** @type {!./service/batched-xhr-impl.BatchedXhr} */ (\n      getService(window, 'batched-xhr'));\n  }\n\n  /**\n   * @param {!Element|!./service/ampdoc-impl.AmpDoc} elementOrAmpDoc\n   * @return {!Promise<?../extensions/amp-bind/0.1/bind-impl.Bind>}\n   */\n  static bindForDocOrNull(elementOrAmpDoc) {\n    return /** @type {!Promise<?../extensions/amp-bind/0.1/bind-impl.Bind>} */ (\n      getElementServiceIfAvailableForDocInEmbedScope(\n          elementOrAmpDoc, 'bind', 'amp-bind'));\n  }\n\n  /**\n   * @param {!Element|!./service/ampdoc-impl.AmpDoc} elementOrAmpDoc\n   * @return {!Promise<!./service/cid-impl.Cid>}\n   */\n  static cidForDoc(elementOrAmpDoc) {\n    return /** @type {!Promise<!./service/cid-impl.Cid>} */ (\n      getServicePromiseForDoc(elementOrAmpDoc, 'cid'));\n  }\n\n  /**\n   * @param {!Element|!./service/ampdoc-impl.AmpDoc} elementOrAmpDoc\n   * @return {!./service/navigation.Navigation}\n   */\n  static navigationForDoc(elementOrAmpDoc) {\n    return /** @type {!./service/navigation.Navigation} */ (\n      getServiceForDoc(elementOrAmpDoc, 'navigation'));\n  }\n\n  /**\n   * @param {!Window} window\n   * @return {!./service/crypto-impl.Crypto}\n   */\n  static cryptoFor(window) {\n    return (/** @type {!./service/crypto-impl.Crypto} */ (\n      getService(window, 'crypto')));\n  }\n\n  /**\n   * @param {!Element|!./service/ampdoc-impl.AmpDoc} elementOrAmpDoc\n   * @return {!./service/document-info-impl.DocumentInfoDef} Info about the doc\n   */\n  static documentInfoForDoc(elementOrAmpDoc) {\n    return /** @type {!./service/document-info-impl.DocInfo} */ (\n      getServiceForDoc(elementOrAmpDoc, 'documentInfo')).get();\n  }\n\n  /**\n   * @param {!Window} window\n   * @return {!./service/document-state.DocumentState}\n   */\n  static documentStateFor(window) {\n    return getService(window, 'documentState');\n  }\n\n  /**\n   * @param {!Window} window\n   * @return {!./service/extensions-impl.Extensions}\n   */\n  static extensionsFor(window) {\n    return /** @type {!./service/extensions-impl.Extensions} */ (\n      getService(window, 'extensions'));\n  }\n\n  /**\n   * Returns service implemented in service/history-impl.\n   * @param {!Element|!./service/ampdoc-impl.AmpDoc} elementOrAmpDoc\n   * @return {!./service/history-impl.History}\n   */\n  static historyForDoc(elementOrAmpDoc) {\n    return /** @type {!./service/history-impl.History} */ (\n      getServiceForDoc(elementOrAmpDoc, 'history'));\n  }\n\n  /**\n   * @param {!Window} win\n   * @return {!./input.Input}\n   */\n  static inputFor(win) {\n    return getService(win, 'input');\n  }\n\n  /**\n   * @param {!Element|!./service/ampdoc-impl.AmpDoc} elementOrAmpDoc\n   * @return {!./service/layers-impl.LayoutLayers}\n   */\n  static layersForDoc(elementOrAmpDoc) {\n    return /** @type {!./service/layers-impl.LayoutLayers} */ (\n      getServiceForDoc(elementOrAmpDoc, 'layers'));\n  }\n\n  /**\n   * @param {!Window} window\n   * @return {!./service/performance-impl.Performance}\n   */\n  static performanceFor(window) {\n    return /** @type {!./service/performance-impl.Performance}*/ (\n      getService(window, 'performance'));\n  }\n\n  /**\n   * @param {!Window} window\n   * @return {!./service/performance-impl.Performance}\n   */\n  static performanceForOrNull(window) {\n    return /** @type {!./service/performance-impl.Performance}*/ (\n      getExistingServiceOrNull(window, 'performance'));\n  }\n\n  /**\n   * @param {!Window} window\n   * @return {!./service/platform-impl.Platform}\n   */\n  static platformFor(window) {\n    return /** @type {!./service/platform-impl.Platform} */ (\n      getService(window, 'platform'));\n  }\n\n  /**\n   * Uses getServiceForDocDeprecated() since Resources is a startup service.\n   * @param {!Node|!./service/ampdoc-impl.AmpDoc} nodeOrDoc\n   * @return {!./service/resources-impl.Resources}\n   */\n  static resourcesForDoc(nodeOrDoc) {\n    return /** @type {!./service/resources-impl.Resources} */ (\n      getServiceForDocDeprecated(nodeOrDoc, 'resources'));\n  }\n\n  /**\n   * @param {!Window} win\n   * @return {?Promise<?{incomingFragment: string, outgoingFragment: string}>}\n   */\n  static shareTrackingForOrNull(win) {\n    return (/** @type {!Promise<?{incomingFragment: string, outgoingFragment: string}>} */ (\n      getElementServiceIfAvailable(win, 'share-tracking',\n          'amp-share-tracking', true)));\n  }\n\n  /**\n   * @param {!Window} win\n   * @return {?Promise<?../extensions/amp-story/1.0/variable-service.StoryVariableDef>}\n   */\n  static storyVariableServiceForOrNull(win) {\n    return (\n    /** @type {!Promise<?../extensions/amp-story/1.0/variable-service.StoryVariableDef>} */\n      (getElementServiceIfAvailable(win, 'story-variable', 'amp-story',\n          true)));\n  }\n\n  /**\n   * Version of the story store service depends on which version of amp-story\n   * the publisher is loading. They all have the same implementation.\n   * @param {!Window} win\n   * @return {?Promise<?../extensions/amp-story/1.0/amp-story-store-service.AmpStoryStoreService|?../extensions/amp-story/0.1/amp-story-store-service.AmpStoryStoreService>}\n   */\n  static storyStoreServiceForOrNull(win) {\n    return (\n    /** @type {!Promise<?../extensions/amp-story/1.0/amp-story-store-service.AmpStoryStoreService|?../extensions/amp-story/0.1/amp-story-store-service.AmpStoryStoreService>} */\n      (getElementServiceIfAvailable(win, 'story-store', 'amp-story')));\n  }\n\n  /**\n   * @param {!Window} win\n   * @return {?../extensions/amp-story/1.0/amp-story-store-service.AmpStoryStoreService}\n   */\n  static storyStoreService(win) {\n    return (/** @type {?../extensions/amp-story/1.0/amp-story-store-service.AmpStoryStoreService} */\n      (getExistingServiceOrNull(win, 'story-store')));\n  }\n\n  /**\n   * @param {!Window} win\n   * @return {?../extensions/amp-story/1.0/amp-story-request-service.AmpStoryRequestService}\n   */\n  static storyRequestService(win) {\n    return (/** @type {?../extensions/amp-story/1.0/amp-story-request-service.AmpStoryRequestService} */\n      (getExistingServiceOrNull(win, 'story-request')));\n  }\n\n  /**\n   * @param {!Window} win\n   * @return {!Promise<?../extensions/amp-story/1.0/localization.LocalizationService>}\n   */\n  static localizationServiceForOrNull(win) {\n    return (\n    /** @type {!Promise<?../extensions/amp-story/1.0/localization.LocalizationService>} */\n      (getElementServiceIfAvailable(win, 'localization', 'amp-story', true)));\n  }\n\n  /**\n   * @param {!Window} win\n   * @return {!../extensions/amp-story/1.0/localization.LocalizationService}\n   */\n  static localizationService(win) {\n    return getService(win, 'localization');\n  }\n\n  /**\n   * TODO(#14357): Remove this when amp-story:0.1 is deprecated.\n   * @param {!Window} win\n   * @return {!../extensions/amp-story/0.1/amp-story-store-service.AmpStoryStoreService}\n   */\n  static storyStoreServiceV01(win) {\n    return getService(win, 'story-store');\n  }\n\n  /**\n   * TODO(#14357): Remove this when amp-story:0.1 is deprecated.\n   * @param {!Window} win\n   * @return {!../extensions/amp-story/0.1/amp-story-request-service.AmpStoryRequestService}\n   */\n  static storyRequestServiceV01(win) {\n    return getService(win, 'story-request-v01');\n  }\n\n  /**\n   * TODO(#14357): Remove this when amp-story:0.1 is deprecated.\n   * @param {!Window} win\n   * @return {!Promise<?../extensions/amp-story/0.1/localization.LocalizationService>}\n   */\n  static localizationServiceForOrNullV01(win) {\n    return (\n    /** @type {!Promise<?../extensions/amp-story/0.1/localization.LocalizationService>} */\n      (getElementServiceIfAvailable(win, 'localization-v01', 'amp-story',\n          true)));\n  }\n\n  /**\n   * TODO(#14357): Remove this when amp-story:0.1 is deprecated.\n   * @param {!Window} win\n   * @return {!../extensions/amp-story/0.1/localization.LocalizationService}\n   */\n  static localizationServiceV01(win) {\n    return getService(win, 'localization-v01');\n  }\n\n  /**\n   * @param {!Window} win\n   * @return {?Promise<?../extensions/amp-viewer-integration/0.1/variable-service.ViewerIntegrationVariableDef>}\n   */\n  static viewerIntegrationVariableServiceForOrNull(win) {\n    return (\n    /** @type {!Promise<?../extensions/amp-viewer-integration/0.1/variable-service.ViewerIntegrationVariableDef>} */\n      (getElementServiceIfAvailable(win, 'viewer-integration-variable',\n          'amp-viewer-integration', true)));\n  }\n\n  /**\n   * @param {!Element|!./service/ampdoc-impl.AmpDoc} elementOrAmpDoc\n   * @return {!Promise<!../extensions/amp-animation/0.1/web-animation-service.WebAnimationService>}\n   */\n  static webAnimationServiceFor(elementOrAmpDoc) {\n    return (/** @type {!Promise<!../extensions/amp-animation/0.1/web-animation-service.WebAnimationService>} */\n      (getElementServiceForDoc(\n          elementOrAmpDoc, 'web-animation', 'amp-animation')));\n  }\n\n  /**\n   * @param {!Element|!./service/ampdoc-impl.AmpDoc} elementOrAmpDoc\n   * @return {!Promise<!./service/storage-impl.Storage>}\n   */\n  static storageForDoc(elementOrAmpDoc) {\n    return /** @type {!Promise<!./service/storage-impl.Storage>} */ (\n      getServicePromiseForDoc(elementOrAmpDoc, 'storage'));\n  }\n\n  /**\n   * @param {!Window} window\n   * @return {!./service/template-impl.Templates}\n   */\n  static templatesFor(window) {\n    return /** @type {!./service/template-impl.Templates} */ (\n      getService(window, 'templates'));\n  }\n\n  /**\n   * @param {!Window} window\n   * @return {!./service/timer-impl.Timer}\n   */\n  static timerFor(window) {\n    return /** @type {!./service/timer-impl.Timer} */ (\n      getService(window, 'timer'));\n  }\n\n  /**\n   * Unlike most service getters, passing `Node` is necessary for some FIE-scope\n   * services since sometimes we only have the FIE Document for context.\n   * @param {!Node|!./service/ampdoc-impl.AmpDoc} nodeOrDoc\n   * @return {!./service/url-replacements-impl.UrlReplacements}\n   */\n  static urlReplacementsForDoc(nodeOrDoc) {\n    return /** @type {!./service/url-replacements-impl.UrlReplacements} */ (\n      getExistingServiceForDocInEmbedScope(\n          nodeOrDoc, 'url-replace', /* opt_fallbackToTopWin */ true));\n  }\n\n  /**\n   * @param {!Element|!./service/ampdoc-impl.AmpDoc} elementOrAmpDoc\n   * @return {!Promise<!../extensions/amp-user-notification/0.1/amp-user-notification.UserNotificationManager>}\n   */\n  static userNotificationManagerForDoc(elementOrAmpDoc) {\n    return (/** @type {!Promise<!../extensions/amp-user-notification/0.1/amp-user-notification.UserNotificationManager>} */\n      (getElementServiceForDoc(elementOrAmpDoc, 'userNotificationManager',\n          'amp-user-notification')));\n  }\n\n  /**\n   * Returns a promise for the consentPolicy Service or a promise for null if\n   * the service is not available on the current page.\n   * @param {!Element|!./service/ampdoc-impl.AmpDoc} elementOrAmpDoc\n   * @return {!Promise<?../extensions/amp-consent/0.1/consent-policy-manager.ConsentPolicyManager>}\n   */\n  static consentPolicyServiceForDocOrNull(elementOrAmpDoc) {\n    return (/** @type {!Promise<?../extensions/amp-consent/0.1/consent-policy-manager.ConsentPolicyManager>} */\n      (getElementServiceIfAvailableForDoc(elementOrAmpDoc,\n          'consentPolicyManager', 'amp-consent')));\n  }\n\n  /**\n   * Returns a promise for the geo service or a promise for null if\n   * the service is not available on the current page.\n   * @param {!Element|!./service/ampdoc-impl.AmpDoc} elementOrAmpDoc\n   * @return {!Promise<?../extensions/amp-geo/0.1/amp-geo.GeoDef>}\n   */\n  static geoForDocOrNull(elementOrAmpDoc) {\n    return /** @type {!Promise<?../extensions/amp-geo/0.1/amp-geo.GeoDef>} */ (\n      getElementServiceIfAvailableForDoc(\n          elementOrAmpDoc, 'geo', 'amp-geo', true));\n  }\n\n  /**\n   * Unlike most service getters, passing `Node` is necessary for some FIE-scope\n   * services since sometimes we only have the FIE Document for context.\n   * @param {!Node|!./service/ampdoc-impl.AmpDoc} nodeOrDoc\n   * @return {!./service/url-impl.Url}\n   */\n  static urlForDoc(nodeOrDoc) {\n    return /** @type {!./service/url-impl.Url} */ (\n      getExistingServiceForDocInEmbedScope(\n          nodeOrDoc, 'url', /* opt_fallbackToTopWin */ true));\n  }\n\n  /**\n   * Returns a promise for the experiment variants or a promise for null if it\n   * is not available on the current page.\n   * @param {!Window} win\n   * @return {!Promise<?Object<string>>}\n   */\n  static variantForOrNull(win) {\n    return /** @type {!Promise<?Object<string>>} */ (\n      getElementServiceIfAvailable(win, 'variant', 'amp-experiment', true));\n  }\n\n  /**\n   * @param {!Element|!./service/ampdoc-impl.AmpDoc} elementOrAmpDoc\n   * @return {!./service/video-service-interface.VideoServiceInterface}\n   */\n  static videoManagerForDoc(elementOrAmpDoc) {\n    return (\n      /** @type {!./service/video-service-interface.VideoServiceInterface} */ (\n        getServiceForDoc(elementOrAmpDoc, 'video-manager')));\n  }\n\n  /**\n   * Uses getServiceForDocDeprecated() since Viewer is a startup service.\n   * @param {!Node|!./service/ampdoc-impl.AmpDoc} nodeOrDoc\n   * @return {!./service/viewer-impl.Viewer}\n   */\n  static viewerForDoc(nodeOrDoc) {\n    return /** @type {!./service/viewer-impl.Viewer} */ (\n      getServiceForDocDeprecated(nodeOrDoc, 'viewer'));\n  }\n\n  /**\n   * Returns promise for the viewer. This is an unusual case and necessary only\n   * for services that need reference to the viewer before it has been\n   * initialized. Most of the code, however, just should use `viewerForDoc`.\n   * @param {!Element|!./service/ampdoc-impl.AmpDoc} elementOrAmpDoc\n   * @return {!Promise<!./service/viewer-impl.Viewer>}\n   */\n  static viewerPromiseForDoc(elementOrAmpDoc) {\n    return /** @type {!Promise<!./service/viewer-impl.Viewer>} */ (\n      getServicePromiseForDoc(elementOrAmpDoc, 'viewer'));\n  }\n\n  /**\n   * @param {!Window} window\n   * @return {!./service/vsync-impl.Vsync}\n   */\n  static vsyncFor(window) {\n    return /** @type {!./service/vsync-impl.Vsync} */ (\n      getService(window, 'vsync'));\n  }\n\n  /**\n   * Uses getServiceForDocDeprecated() since Viewport is a startup service.\n   * @param {!Node|!./service/ampdoc-impl.AmpDoc} nodeOrDoc\n   * @return {!./service/viewport/viewport-impl.Viewport}\n   */\n  static viewportForDoc(nodeOrDoc) {\n    return /** @type {!./service/viewport/viewport-impl.Viewport} */ (\n      getServiceForDocDeprecated(nodeOrDoc, 'viewport'));\n  }\n\n  /**\n   * @param {!Window} window\n   * @return {!./service/xhr-impl.Xhr}\n   */\n  static xhrFor(window) {\n    return /** @type {!./service/xhr-impl.Xhr} */ (getService(window, 'xhr'));\n  }\n}\n","/**\n * Copyright 2015 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @param {string} _match\n * @param {string} character\n * @return {string}\n */\nfunction toUpperCase(_match, character) {\n  return character.toUpperCase();\n}\n\n/**\n * @param {string} match\n * @return {string}\n */\nfunction prependDashAndToLowerCase(match) {\n  return '-' + match.toLowerCase();\n}\n\n/**\n * @param {string} name Attribute name containing dashes.\n * @return {string} Dashes removed and successive character sent to upper case.\n * visibleForTesting\n */\nexport function dashToCamelCase(name) {\n  return name.replace(/-([a-z])/g, toUpperCase);\n}\n\n/**\n * Converts a string that is in camelCase to one that is in dash-case.\n *\n * @param {string} string The string to convert.\n * @return {string} The string in dash-case.\n */\nexport function camelCaseToDash(string) {\n  return string.replace(/(?!^)[A-Z]/g, prependDashAndToLowerCase);\n}\n\n/**\n * @param {string} name Attribute name with dashes\n * @return {string} Dashes replaced by underlines.\n */\nexport function dashToUnderline(name) {\n  return name.replace('-', '_');\n}\n\n/**\n * Polyfill for String.prototype.endsWith.\n * @param {string} string\n * @param {string} suffix\n * @return {boolean}\n */\nexport function endsWith(string, suffix) {\n  const index = string.length - suffix.length;\n  return index >= 0 && string.indexOf(suffix, index) == index;\n}\n\n/**\n * Polyfill for String.prototype.startsWith.\n * @param {string} string\n * @param {string} prefix\n * @return {boolean}\n */\nexport function startsWith(string, prefix) {\n  if (prefix.length > string.length) {\n    return false;\n  }\n  return string.lastIndexOf(prefix, 0) == 0;\n}\n\n/**\n * Expands placeholders in a given template string with values.\n *\n * Placeholders use ${key-name} syntax and are replaced with the value\n * returned from the given getter function.\n *\n * @param {string} template The template string to expand.\n * @param {function(string):*} getter Function used to retrieve a value for a\n *   placeholder. Returns values will be coerced into strings.\n * @param {number=} opt_maxIterations Number of times to expand the template.\n *   Defaults to 1, but should be set to a larger value your placeholder tokens\n *   can be expanded to other placeholder tokens. Take caution with large values\n *   as recursively expanding a string can be exponentially expensive.\n */\nexport function expandTemplate(template, getter, opt_maxIterations) {\n  const maxIterations = opt_maxIterations || 1;\n  for (let i = 0; i < maxIterations; i++) {\n    let matches = 0;\n    template = template.replace(/\\${([^}]*)}/g, (_a, b) => {\n      matches++;\n      return getter(b);\n    });\n    if (!matches) {\n      break;\n    }\n  }\n  return template;\n}\n\n/**\n * Hash function djb2a\n * This is intended to be a simple, fast hashing function using minimal code.\n * It does *not* have good cryptographic properties.\n * @param {string} str\n * @return {string} 32-bit unsigned hash of the string\n */\nexport function stringHash32(str) {\n  const {length} = str;\n  let hash = 5381;\n  for (let i = 0; i < length; i++) {\n    hash = hash * 33 ^ str.charCodeAt(i);\n  }\n  // Convert from 32-bit signed to unsigned.\n  return String(hash >>> 0);\n}\n","/**\n * Copyright 2015 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Services} from './services';\nimport {dev, rethrowAsync} from './log';\nimport {insertAfterOrAtStart, waitForBody} from './dom';\nimport {map} from './utils/object';\nimport {setStyles} from './style';\nimport {waitForServices} from './render-delaying-services';\n\nconst TRANSFORMER_PROP = '__AMP_CSS_TR';\nconst STYLE_MAP_PROP = '__AMP_CSS_SM';\nconst bodyVisibleSentinel = '__AMP_BODY_VISIBLE';\n\n\n/**\n * Adds the given css text to the given ampdoc.\n *\n * The style tags will be at the beginning of the head before all author\n * styles. One element can be the main runtime CSS. This is guaranteed\n * to always be the first stylesheet in the doc.\n *\n * @param {!./service/ampdoc-impl.AmpDoc} ampdoc The ampdoc that should get the new styles.\n * @param {string} cssText\n * @param {?function(!Element)|undefined} cb Called when the new styles are available.\n *     Not using a promise, because this is synchronous when possible.\n *     for better performance.\n * @param {boolean=} opt_isRuntimeCss If true, this style tag will be inserted\n *     as the first element in head and all style elements will be positioned\n *     after.\n * @param {string=} opt_ext\n * @return {!Element}\n */\nexport function installStylesForDoc(\n  ampdoc, cssText, cb, opt_isRuntimeCss, opt_ext) {\n  const cssRoot = ampdoc.getHeadNode();\n  const style = insertStyleElement(\n      cssRoot,\n      maybeTransform(cssRoot, cssText),\n      opt_isRuntimeCss || false,\n      opt_ext || null);\n\n  if (cb) {\n    const rootNode = ampdoc.getRootNode();\n    // Styles aren't always available synchronously. E.g. if there is a\n    // pending style download, it will have to finish before the new\n    // style is visible.\n    // For this reason we poll until the style becomes available.\n    // Sync case.\n    if (styleLoaded(rootNode, style)) {\n      cb(style);\n      return style;\n    }\n    // Poll until styles are available.\n    const interval = setInterval(() => {\n      if (styleLoaded(rootNode, style)) {\n        clearInterval(interval);\n        cb(style);\n      }\n    }, 4);\n  }\n  return style;\n}\n\n\n/**\n * Adds the given css text to the given document.\n * TODO(dvoytenko, #10705): Remove this method once FIE/ampdoc migration is\n * done.\n *\n * @param {!Document} doc The document that should get the new styles.\n * @param {string} cssText\n * @param {?function(!Element)|undefined} cb Called when the new styles are\n *     available. Not using a promise, because this is synchronous when\n *     possible. for better performance.\n * @param {boolean=} opt_isRuntimeCss If true, this style tag will be inserted\n *     as the first element in head and all style elements will be positioned\n *     after.\n * @param {string=} opt_ext\n * @return {!Element}\n */\nexport function installStylesLegacy(\n  doc, cssText, cb, opt_isRuntimeCss, opt_ext) {\n  const style = insertStyleElement(\n      dev().assertElement(doc.head),\n      cssText,\n      opt_isRuntimeCss || false,\n      opt_ext || null);\n\n  if (cb) {\n    // Styles aren't always available synchronously. E.g. if there is a\n    // pending style download, it will have to finish before the new\n    // style is visible.\n    // For this reason we poll until the style becomes available.\n    // Sync case.\n    if (styleLoaded(doc, style)) {\n      cb(style);\n      return style;\n    }\n    // Poll until styles are available.\n    const interval = setInterval(() => {\n      if (styleLoaded(doc, style)) {\n        clearInterval(interval);\n        cb(style);\n      }\n    }, 4);\n  }\n  return style;\n}\n\n\n/**\n * Creates the properly configured style element.\n * @param {!Element|!ShadowRoot} cssRoot\n * @param {string} cssText\n * @param {boolean} isRuntimeCss\n * @param {?string} ext\n * @return {!Element}\n */\nfunction insertStyleElement(cssRoot, cssText, isRuntimeCss, ext) {\n  let styleMap = cssRoot[STYLE_MAP_PROP];\n  if (!styleMap) {\n    styleMap = cssRoot[STYLE_MAP_PROP] = map();\n  }\n\n  const isExtCss = !isRuntimeCss &&\n      (ext && ext != 'amp-custom' && ext != 'amp-keyframes');\n  const key =\n      isRuntimeCss ? 'amp-runtime' :\n        isExtCss ? `amp-extension=${ext}` : null;\n\n  // Check if it has already been created or discovered.\n  if (key) {\n    const existing = getExistingStyleElement(cssRoot, styleMap, key);\n    if (existing) {\n      return existing;\n    }\n  }\n\n  // Create the new style element and append to cssRoot.\n  const doc = (cssRoot.ownerDocument || cssRoot);\n  const style = doc.createElement('style');\n  style./*OK*/textContent = cssText;\n  let afterElement = null;\n  // Make sure that we place style tags after the main runtime CSS. Otherwise\n  // the order is random.\n  if (isRuntimeCss) {\n    style.setAttribute('amp-runtime', '');\n  } else if (isExtCss) {\n    style.setAttribute('amp-extension', ext || '');\n    afterElement = dev().assertElement(getExistingStyleElement(\n        cssRoot, styleMap, 'amp-runtime'));\n  } else {\n    if (ext) {\n      style.setAttribute(ext, '');\n    }\n    afterElement = cssRoot.lastChild;\n  }\n  insertAfterOrAtStart(cssRoot, style, afterElement);\n  if (key) {\n    styleMap[key] = style;\n  }\n  return style;\n}\n\n\n/**\n * @param {!Element|!ShadowRoot} cssRoot\n * @param {!Object<string, !Element>} styleMap\n * @param {string} key\n * @return {?Element}\n */\nfunction getExistingStyleElement(cssRoot, styleMap, key) {\n  // Already cached.\n  if (styleMap[key]) {\n    return styleMap[key];\n  }\n  // Check if the style has already been added by the server layout.\n  const existing = cssRoot./*OK*/querySelector(`style[${key}]`);\n  if (existing) {\n    styleMap[key] = existing;\n    return existing;\n  }\n  // Nothing found.\n  return null;\n}\n\n\n/**\n * Applies a transformer to the CSS text if it has been registered.\n * @param {!Element|!ShadowRoot} cssRoot\n * @param {function(string):string} transformer\n */\nexport function installCssTransformer(cssRoot, transformer) {\n  cssRoot[TRANSFORMER_PROP] = transformer;\n}\n\n\n/**\n * Applies a transformer to the CSS text if it has been registered.\n * @param {!Element|!ShadowRoot} cssRoot\n * @param {string} cssText\n * @return {string}\n */\nfunction maybeTransform(cssRoot, cssText) {\n  const transformer = cssRoot[TRANSFORMER_PROP];\n  return transformer ? transformer(cssText) : cssText;\n}\n\n\n/**\n * Sets the document's body opacity to 1.\n * If the body is not yet available (because our script was loaded\n * synchronously), polls until it is.\n * @param {!Document} doc The document who's body we should make visible.\n * @param {boolean=} opt_waitForServices Whether the body visibility should\n *     be blocked on key services being loaded.\n */\nexport function makeBodyVisible(doc, opt_waitForServices) {\n  dev().assert(doc.defaultView, 'Passed in document must have a defaultView');\n  const win = /** @type {!Window} */ (doc.defaultView);\n  if (win[bodyVisibleSentinel]) {\n    return;\n  }\n  const set = () => {\n    win[bodyVisibleSentinel] = true;\n    setStyles(dev().assertElement(doc.body), {\n      opacity: 1,\n      visibility: 'visible',\n      'animation': 'none',\n    });\n    renderStartedNoInline(doc);\n  };\n  try {\n    waitForBody(doc, () => {\n      if (win[bodyVisibleSentinel]) {\n        return;\n      }\n      win[bodyVisibleSentinel] = true;\n      if (opt_waitForServices) {\n        waitForServices(win).catch(reason => {\n          rethrowAsync(reason);\n          return [];\n        }).then(services => {\n          set();\n          if (services.length > 0) {\n            Services.resourcesForDoc(doc)./*OK*/schedulePass(\n                1, /* relayoutAll */ true);\n          }\n          try {\n            const perf = Services.performanceFor(win);\n            perf.tick('mbv');\n            perf.flush();\n          } catch (e) {}\n        });\n      } else {\n        set();\n      }\n    });\n  } catch (e) {\n    // If there was an error during the logic above (such as service not\n    // yet installed, definitely try to make the body visible.\n    set();\n    // Avoid errors in the function to break execution flow as this is\n    // often called as a last resort.\n    rethrowAsync(e);\n  }\n}\n\n\n/**\n * @param {!Document} doc\n */\nfunction renderStartedNoInline(doc) {\n  try {\n    Services.resourcesForDoc(doc).renderStarted();\n  } catch (e) {\n    // `makeBodyVisible` is called in the error-processing cycle and thus\n    // could be triggered when runtime's initialization is incomplete which\n    // would cause unrelated errors to be thrown here.\n  }\n}\n\n\n/**\n * Indicates that the body is always visible. For instance, in case of PWA.\n * @param {!Window} win\n */\nexport function bodyAlwaysVisible(win) {\n  win[bodyVisibleSentinel] = true;\n}\n\n\n/**\n * Checks whether a style element was registered in the DOM.\n * @param {!Document|!ShadowRoot} doc\n * @param {!Element} style\n * @return {boolean}\n */\nfunction styleLoaded(doc, style) {\n  const sheets = doc.styleSheets;\n  for (let i = 0; i < sheets.length; i++) {\n    const sheet = sheets[i];\n    if (sheet.ownerNode == style) {\n      return true;\n    }\n  }\n  return false;\n}\n","/**\n * Copyright 2015 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// Note: loaded by 3p system. Cannot rely on babel polyfills.\nimport {map} from './utils/object.js';\nimport {startsWith} from './string';\n\n\n/** @type {Object<string, string>} */\nlet propertyNameCache;\n\n/** @const {!Array<string>} */\nconst vendorPrefixes = ['Webkit', 'webkit', 'Moz', 'moz', 'ms', 'O', 'o'];\n\n\n/**\n * @export\n * @param {string} camelCase camel cased string\n * @return {string} title cased string\n */\nexport function camelCaseToTitleCase(camelCase) {\n  return camelCase.charAt(0).toUpperCase() + camelCase.slice(1);\n}\n\n/**\n * Checks the style if a prefixed version of a property exists and returns\n * it or returns an empty string.\n * @private\n * @param {!Object} style\n * @param {string} titleCase the title case version of a css property name\n * @return {string} the prefixed property name or null.\n */\nfunction getVendorJsPropertyName_(style, titleCase) {\n  for (let i = 0; i < vendorPrefixes.length; i++) {\n    const propertyName = vendorPrefixes[i] + titleCase;\n    if (style[propertyName] !== undefined) {\n      return propertyName;\n    }\n  }\n  return '';\n}\n\n/**\n * Returns the possibly prefixed JavaScript property name of a style property\n * (ex. WebkitTransitionDuration) given a camelCase'd version of the property\n * (ex. transitionDuration).\n * @export\n * @param {!Object} style\n * @param {string} camelCase the camel cased version of a css property name\n * @param {boolean=} opt_bypassCache bypass the memoized cache of property\n *   mapping\n * @return {string}\n */\nexport function getVendorJsPropertyName(style, camelCase, opt_bypassCache) {\n  if (startsWith(camelCase, '--')) {\n    // CSS vars are returned as is.\n    return camelCase;\n  }\n  if (!propertyNameCache) {\n    propertyNameCache = map();\n  }\n  let propertyName = propertyNameCache[camelCase];\n  if (!propertyName || opt_bypassCache) {\n    propertyName = camelCase;\n    if (style[camelCase] === undefined) {\n      const titleCase = camelCaseToTitleCase(camelCase);\n      const prefixedPropertyName = getVendorJsPropertyName_(style, titleCase);\n\n      if (style[prefixedPropertyName] !== undefined) {\n        propertyName = prefixedPropertyName;\n      }\n    }\n    if (!opt_bypassCache) {\n      propertyNameCache[camelCase] = propertyName;\n    }\n  }\n  return propertyName;\n}\n\n\n/**\n * Sets the CSS styles of the specified element with !important. The styles\n * are specified as a map from CSS property names to their values.\n * @param {!Element} element\n * @param {!Object<string, *>} styles\n */\nexport function setImportantStyles(element, styles) {\n  for (const k in styles) {\n    element.style.setProperty(\n        getVendorJsPropertyName(styles, k), styles[k].toString(), 'important');\n  }\n}\n\n\n/**\n * Sets the CSS style of the specified element with optional units, e.g. \"px\".\n * @param {?Element} element\n * @param {string} property\n * @param {*} value\n * @param {string=} opt_units\n * @param {boolean=} opt_bypassCache\n */\nexport function setStyle(element, property, value, opt_units, opt_bypassCache) {\n  const propertyName = getVendorJsPropertyName(element.style, property,\n      opt_bypassCache);\n  if (propertyName) {\n    element.style[propertyName] =\n      /** @type {string} */ (opt_units ? value + opt_units : value);\n  }\n}\n\n\n/**\n * Returns the value of the CSS style of the specified element.\n * @param {!Element} element\n * @param {string} property\n * @param {boolean=} opt_bypassCache\n * @return {*}\n */\nexport function getStyle(element, property, opt_bypassCache) {\n  const propertyName = getVendorJsPropertyName(element.style, property,\n      opt_bypassCache);\n  if (!propertyName) {\n    return undefined;\n  }\n  return element.style[propertyName];\n}\n\n\n/**\n * Sets the CSS styles of the specified element. The styles\n * a specified as a map from CSS property names to their values.\n * @param {!Element} element\n * @param {!Object<string, *>} styles\n */\nexport function setStyles(element, styles) {\n  for (const k in styles) {\n    setStyle(element, k, styles[k]);\n  }\n}\n\n\n/**\n * Shows or hides the specified element.\n * @param {!Element} element\n * @param {boolean=} opt_display\n */\nexport function toggle(element, opt_display) {\n  if (opt_display === undefined) {\n    opt_display = getStyle(element, 'display') == 'none';\n  }\n  setStyle(element, 'display', opt_display ? '' : 'none');\n}\n\n\n/**\n * Returns a pixel value.\n * @param {number} value\n * @return {string}\n */\nexport function px(value) {\n  return `${value}px`;\n}\n\n/**\n * Returns a degree value.\n * @param {number} value\n * @return {string}\n */\nexport function deg(value) {\n  return `${value}deg`;\n}\n\n/**\n * Returns a \"translateX\" for CSS \"transform\" property.\n * @param {number|string} value\n * @return {string}\n */\nexport function translateX(value) {\n  if (typeof value == 'string') {\n    return `translateX(${value})`;\n  }\n  return `translateX(${px(value)})`;\n}\n\n\n/**\n * Returns a \"translateX\" for CSS \"transform\" property.\n * @param {number|string} x\n * @param {(number|string)=} opt_y\n * @return {string}\n */\nexport function translate(x, opt_y) {\n  if (typeof x == 'number') {\n    x = px(x);\n  }\n  if (opt_y === undefined) {\n    return `translate(${x})`;\n  }\n  if (typeof opt_y == 'number') {\n    opt_y = px(opt_y);\n  }\n  return `translate(${x}, ${opt_y})`;\n}\n\n\n/**\n * Returns a \"scale\" for CSS \"transform\" property.\n * @param {number|string} value\n * @return {string}\n */\nexport function scale(value) {\n  return `scale(${value})`;\n}\n\n/**\n * Returns a \"rotate\" for CSS \"transform\" property.\n * @param {number|string} value\n * @return {string}\n */\nexport function rotate(value) {\n  if (typeof value == 'number') {\n    value = deg(value);\n  }\n  return `rotate(${value})`;\n}\n\n/**\n * Remove alpha value from a rgba color value.\n * Return the new color property with alpha equals if has the alpha value.\n * Caller needs to make sure the input color value is a valid rgba/rgb value\n * @param {string} rgbaColor\n * @return {string}\n */\nexport function removeAlphaFromColor(rgbaColor) {\n  return rgbaColor.replace(\n      /\\(([^,]+),([^,]+),([^,)]+),[^)]+\\)/g, '($1,$2,$3, 1)');\n}\n\n/**\n * Gets the computed style of the element. The helper is necessary to enforce\n * the possible `null` value returned by a buggy Firefox.\n *\n * @param {!Window} win\n * @param {!Element} el\n * @return {!Object<string, string>}\n */\nexport function computedStyle(win, el) {\n  const style = /** @type {?CSSStyleDeclaration} */(win.getComputedStyle(el));\n  return /** @type {!Object<string, string>} */(style) || map();\n}\n\n\n/**\n * Resets styles that were set dynamically (i.e. inline)\n * @param {!Element} element\n * @param {!Array<string>} properties\n */\nexport function resetStyles(element, properties) {\n  const styleObj = {};\n  properties.forEach(prop => {\n    styleObj[prop] = null;\n  });\n  setStyles(element, styleObj);\n}\n","/**\n * Copyright 2015 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* @const */\nconst toString_ = Object.prototype.toString;\n\n/**\n * Returns the ECMA [[Class]] of a value\n * @param {*} value\n * @return {string}\n */\nfunction toString(value) {\n  return toString_.call(value);\n}\n\n/**\n * Determines if value is actually an Array.\n * @param {*} value\n * @return {boolean}\n */\nexport function isArray(value) {\n  return Array.isArray(value);\n}\n\n/**\n * Converts an array-like object to an array.\n * @param {?IArrayLike<T>|string} arrayLike\n * @return {!Array<T>}\n * @template T\n */\nexport function toArray(arrayLike) {\n  if (!arrayLike) {\n    return [];\n  }\n  const array = new Array(arrayLike.length);\n  for (let i = 0; i < arrayLike.length; i++) {\n    array[i] = arrayLike[i];\n  }\n  return array;\n}\n\n/**\n * Determines if value is actually an Object.\n * @param {*} value\n * @return {boolean}\n */\nexport function isObject(value) {\n  return toString(value) === '[object Object]';\n}\n\n/**\n * Determines if value is of number type and finite.\n * NaN and Infinity are not considered a finite number.\n * String numbers are not considered numbers.\n * @param {*} value\n * @return {boolean}\n */\nexport function isFiniteNumber(value) {\n  return (typeof value === 'number' && isFinite(value));\n}\n\n/**\n * Checks whether `s` is a valid value of `enumObj`.\n *\n * @param {!Object<T>} enumObj\n * @param {T} s\n * @return {boolean}\n * @template T\n */\nexport function isEnumValue(enumObj, s) {\n  for (const k in enumObj) {\n    if (enumObj[k] === s) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/**\n * Externs declare that access `defaultView` from `document` or\n * `ownerDocument` is of type `(Window|null)` but most of our parameter types\n * assume that it is never null. This is OK in practice as we ever only get\n * null on disconnected documents or old IE.\n * This helper function casts it into just a simple Window return type.\n *\n * @param {!Window|null} winOrNull\n * @return {!Window}\n */\nexport function toWin(winOrNull) {\n  return /** @type {!Window} */ (winOrNull);\n}\n\n","/**\n * Copyright 2017 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {tryDecodeUriComponent_} from './url-try-decode-uri-component';\n\nconst regex = /(?:^[#?]?|&)([^=&]+)(?:=([^&]*))?/g;\n\n/**\n * Parses the query string of an URL. This method returns a simple key/value\n * map. If there are duplicate keys the latest value is returned.\n *\n * DO NOT import the function from this file. Instead, import parseQueryString\n * from `src/url.js`.\n *\n * @param {string} queryString\n * @return {!JsonObject}\n */\nexport function parseQueryString_(queryString) {\n  const params = /** @type {!JsonObject} */ (Object.create(null));\n  if (!queryString) {\n    return params;\n  }\n\n  let match;\n  while ((match = regex.exec(queryString))) {\n    const name = tryDecodeUriComponent_(match[1], match[1]);\n    const value = match[2] ? tryDecodeUriComponent_(match[2], match[2]) : '';\n    params[name] = value;\n  }\n  return params;\n}\n","/**\n * Copyright 2017 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Tries to decode a URI component, falling back to opt_fallback (or an empty\n * string)\n *\n * DO NOT import the function from this file. Instead, import\n * tryDecodeUriComponent from `src/url.js`.\n *\n * @param {string} component\n * @param {string=} fallback\n * @return {string}\n */\nexport function tryDecodeUriComponent_(component, fallback = '') {\n  try {\n    return decodeURIComponent(component);\n  } catch (e) {\n    return fallback;\n  }\n}\n","/**\n * Copyright 2015 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {LruCache} from './utils/lru-cache';\nimport {dict} from './utils/object';\nimport {endsWith, startsWith} from './string';\nimport {getMode} from './mode';\nimport {isArray} from './types';\nimport {parseQueryString_} from './url-parse-query-string';\nimport {tryDecodeUriComponent_} from './url-try-decode-uri-component';\nimport {urls} from './config';\nimport {user} from './log';\n\n/**\n * @type {!JsonObject}\n */\nconst SERVING_TYPE_PREFIX = dict({\n  // No viewer\n  'c': true,\n  // In viewer\n  'v': true,\n  // Ad landing page\n  'a': true,\n  // Ad\n  'ad': true,\n});\n\n/**\n * Cached a-tag to avoid memory allocation during URL parsing.\n * @type {HTMLAnchorElement}\n */\nlet a;\n\n/**\n * We cached all parsed URLs. As of now there are no use cases\n * of AMP docs that would ever parse an actual large number of URLs,\n * but we often parse the same one over and over again.\n * @type {LruCache}\n */\nlet cache;\n\n/** @private @const Matches amp_js_* parameters in query string. */\nconst AMP_JS_PARAMS_REGEX = /[?&]amp_js[^&]*/;\n\n/** @private @const Matches amp_gsa parameters in query string. */\nconst AMP_GSA_PARAMS_REGEX = /[?&]amp_gsa[^&]*/;\n\n/** @private @const Matches amp_r parameters in query string. */\nconst AMP_R_PARAMS_REGEX = /[?&]amp_r[^&]*/;\n\n/** @private @const Matches usqp parameters from goog experiment in query string. */\nconst GOOGLE_EXPERIMENT_PARAMS_REGEX = /[?&]usqp[^&]*/;\n\nconst INVALID_PROTOCOLS = [\n  /*eslint no-script-url: 0*/ 'javascript:',\n  /*eslint no-script-url: 0*/ 'data:',\n  /*eslint no-script-url: 0*/ 'vbscript:',\n];\n\n/** @const {string} */\nexport const SOURCE_ORIGIN_PARAM = '__amp_source_origin';\n\n/**\n * Returns the correct origin for a given window.\n * @param {!Window} win\n * @return {string} origin\n */\nexport function getWinOrigin(win) {\n  return win.origin || parseUrlDeprecated(win.location.href).origin;\n}\n\n/**\n * Returns a Location-like object for the given URL. If it is relative,\n * the URL gets resolved.\n * Consider the returned object immutable. This is enforced during\n * testing by freezing the object.\n * @param {string} url\n * @param {boolean=} opt_nocache\n * @return {!Location}\n */\nexport function parseUrlDeprecated(url, opt_nocache) {\n  if (!a) {\n    a = /** @type {!HTMLAnchorElement} */ (self.document.createElement('a'));\n    cache = self.UrlCache || (self.UrlCache = new LruCache(100));\n  }\n\n  return parseUrlWithA(a, url, opt_nocache ? null : cache);\n}\n\n/**\n * Returns a Location-like object for the given URL. If it is relative,\n * the URL gets resolved.\n * Consider the returned object immutable. This is enforced during\n * testing by freezing the object.\n * @param {!HTMLAnchorElement} a\n * @param {string} url\n * @param {LruCache=} opt_cache\n * @return {!Location}\n * @restricted\n */\nexport function parseUrlWithA(a, url, opt_cache) {\n  if (opt_cache && opt_cache.has(url)) {\n    return opt_cache.get(url);\n  }\n\n  a.href = url;\n\n  // IE11 doesn't provide full URL components when parsing relative URLs.\n  // Assigning to itself again does the trick #3449.\n  if (!a.protocol) {\n    a.href = a.href;\n  }\n\n  const info = /** @type {!Location} */({\n    href: a.href,\n    protocol: a.protocol,\n    host: a.host,\n    hostname: a.hostname,\n    port: a.port == '0' ? '' : a.port,\n    pathname: a.pathname,\n    search: a.search,\n    hash: a.hash,\n    origin: null, // Set below.\n  });\n\n  // Some IE11 specific polyfills.\n  // 1) IE11 strips out the leading '/' in the pathname.\n  if (info.pathname[0] !== '/') {\n    info.pathname = '/' + info.pathname;\n  }\n\n  // 2) For URLs with implicit ports, IE11 parses to default ports while\n  // other browsers leave the port field empty.\n  if ((info.protocol == 'http:' && info.port == 80)\n      || (info.protocol == 'https:' && info.port == 443)) {\n    info.port = '';\n    info.host = info.hostname;\n  }\n\n  // For data URI a.origin is equal to the string 'null' which is not useful.\n  // We instead return the actual origin which is the full URL.\n  if (a.origin && a.origin != 'null') {\n    info.origin = a.origin;\n  } else if (info.protocol == 'data:' || !info.host) {\n    info.origin = info.href;\n  } else {\n    info.origin = info.protocol + '//' + info.host;\n  }\n\n  // Freeze during testing to avoid accidental mutation.\n  const frozen = (getMode().test && Object.freeze) ? Object.freeze(info) : info;\n\n  if (opt_cache) {\n    opt_cache.put(url, frozen);\n  }\n\n  return frozen;\n}\n\n/**\n * Appends the string just before the fragment part (or optionally\n * to the front of the query string) of the URL.\n * @param {string} url\n * @param {string} paramString\n * @param {boolean=} opt_addToFront\n * @return {string}\n */\nexport function appendEncodedParamStringToUrl(url, paramString,\n  opt_addToFront) {\n  if (!paramString) {\n    return url;\n  }\n  const mainAndFragment = url.split('#', 2);\n  const mainAndQuery = mainAndFragment[0].split('?', 2);\n\n  let newUrl = mainAndQuery[0] + (\n    mainAndQuery[1]\n      ? (opt_addToFront\n        ? `?${paramString}&${mainAndQuery[1]}`\n        : `?${mainAndQuery[1]}&${paramString}`)\n      : `?${paramString}`);\n  newUrl += mainAndFragment[1] ? `#${mainAndFragment[1]}` : '';\n  return newUrl;\n}\n/**\n * Appends a query string field and value to a url. `key` and `value`\n * will be ran through `encodeURIComponent` before appending.\n * @param {string} url\n * @param {string} key\n * @param {string} value\n * @param {boolean=} opt_addToFront\n * @return {string}\n */\nexport function addParamToUrl(url, key, value, opt_addToFront) {\n  const field = `${encodeURIComponent(key)}=${encodeURIComponent(value)}`;\n  return appendEncodedParamStringToUrl(url, field, opt_addToFront);\n}\n\n/**\n * Appends query string fields and values to a url. The `params` objects'\n * `key`s and `value`s will be transformed into query string keys/values.\n * @param {string} url\n * @param {!JsonObject<string, string|!Array<string>>} params\n * @return {string}\n */\nexport function addParamsToUrl(url, params) {\n  return appendEncodedParamStringToUrl(url, serializeQueryString(params));\n}\n\n/**\n * Serializes the passed parameter map into a query string with both keys\n * and values encoded.\n * @param {!JsonObject<string, string|!Array<string>>} params\n * @return {string}\n */\nexport function serializeQueryString(params) {\n  const s = [];\n  for (const k in params) {\n    const v = params[k];\n    if (v == null) {\n      continue;\n    } else if (isArray(v)) {\n      for (let i = 0; i < v.length; i++) {\n        const sv = /** @type {string} */ (v[i]);\n        s.push(`${encodeURIComponent(k)}=${encodeURIComponent(sv)}`);\n      }\n    } else {\n      const sv = /** @type {string} */ (v);\n      s.push(`${encodeURIComponent(k)}=${encodeURIComponent(sv)}`);\n    }\n  }\n  return s.join('&');\n}\n\n/**\n * Returns `true` if the URL is secure: either HTTPS or localhost (for testing).\n * @param {string|!Location} url\n * @return {boolean}\n */\nexport function isSecureUrlDeprecated(url) {\n  if (typeof url == 'string') {\n    url = parseUrlDeprecated(url);\n  }\n  return (url.protocol == 'https:' ||\n      url.hostname == 'localhost' ||\n      endsWith(url.hostname, '.localhost'));\n}\n\n/**\n * Asserts that a given url is HTTPS or protocol relative. It's a user-level\n * assert.\n *\n * Provides an exception for localhost.\n *\n * @param {?string|undefined} urlString\n * @param {!Element|string} elementContext Element where the url was found.\n * @param {string=} sourceName Used for error messages.\n * @return {string}\n */\nexport function assertHttpsUrl(\n  urlString, elementContext, sourceName = 'source') {\n  user().assert(urlString != null, '%s %s must be available',\n      elementContext, sourceName);\n  // (erwinm, #4560): type cast necessary until #4560 is fixed.\n  const theUrlString = /** @type {string} */ (urlString);\n  user().assert(isSecureUrlDeprecated(theUrlString) || /^(\\/\\/)/.test(theUrlString),\n      '%s %s must start with ' +\n      '\"https://\" or \"//\" or be relative and served from ' +\n      'either https or from localhost. Invalid value: %s',\n      elementContext, sourceName, theUrlString);\n  return theUrlString;\n}\n\n/**\n * Asserts that a given url is an absolute HTTP or HTTPS URL.\n * @param {string} urlString\n * @return {string}\n */\nexport function assertAbsoluteHttpOrHttpsUrl(urlString) {\n  user().assert(/^https?\\:/i.test(urlString),\n      'URL must start with \"http://\" or \"https://\". Invalid value: %s',\n      urlString);\n  return parseUrlDeprecated(urlString).href;\n}\n\n\n/**\n * Parses the query string of an URL. This method returns a simple key/value\n * map. If there are duplicate keys the latest value is returned.\n *\n * This function is implemented in a separate file to avoid a circular\n * dependency.\n *\n * @param {string} queryString\n * @return {!JsonObject}\n */\nexport function parseQueryString(queryString) {\n  return parseQueryString_(queryString);\n}\n\n/**\n * Returns the URL without fragment. If URL doesn't contain fragment, the same\n * string is returned.\n * @param {string} url\n * @return {string}\n */\nexport function removeFragment(url) {\n  const index = url.indexOf('#');\n  if (index == -1) {\n    return url;\n  }\n  return url.substring(0, index);\n}\n\n/**\n * Returns the fragment from the URL. If the URL doesn't contain fragment,\n * the empty string is returned.\n * @param {string} url\n * @return {string}\n */\nexport function getFragment(url) {\n  const index = url.indexOf('#');\n  if (index == -1) {\n    return '';\n  }\n  return url.substring(index);\n}\n\n/**\n * Returns whether the URL has the origin of a proxy.\n * @param {string|!Location} url URL of an AMP document.\n * @return {boolean}\n */\nexport function isProxyOrigin(url) {\n  if (typeof url == 'string') {\n    url = parseUrlDeprecated(url);\n  }\n  return urls.cdnProxyRegex.test(url.origin);\n}\n\n/**\n * For proxy-origin URLs, returns the serving type. Otherwise, returns null.\n * E.g., 'https://amp-com.cdn.ampproject.org/a/s/amp.com/amp_document.html'\n * returns 'a'.\n * @param {string|!Location} url URL of an AMP document.\n * @return {?string}\n */\nexport function getProxyServingType(url) {\n  if (typeof url == 'string') {\n    url = parseUrlDeprecated(url);\n  }\n  if (!isProxyOrigin(url)) {\n    return null;\n  }\n  const path = url.pathname.split('/', 2);\n  return path[1];\n}\n\n/**\n * Returns whether the URL origin is localhost.\n * @param {string|!Location} url URL of an AMP document.\n * @return {boolean}\n */\nexport function isLocalhostOrigin(url) {\n  if (typeof url == 'string') {\n    url = parseUrlDeprecated(url);\n  }\n  return urls.localhostRegex.test(url.origin);\n}\n\n/**\n * Returns whether the URL has valid protocol.\n * Deep link protocol is valid, but not javascript etc.\n * @param {string|!Location} url\n * @return {boolean}\n */\nexport function isProtocolValid(url) {\n  if (!url) {\n    return true;\n  }\n  if (typeof url == 'string') {\n    url = parseUrlDeprecated(url);\n  }\n  return !INVALID_PROTOCOLS.includes(url.protocol);\n}\n\n/**\n * Returns a URL without AMP JS parameters.\n * @param {string} url\n * @return {string}\n */\nexport function removeAmpJsParamsFromUrl(url) {\n  const parsed = parseUrlDeprecated(url);\n  const search = removeAmpJsParamsFromSearch(parsed.search);\n  return parsed.origin + parsed.pathname + search + parsed.hash;\n\n}\n\n/**\n * Returns a URL without a query string.\n * @param {string} url\n * @return {string}\n */\nexport function removeSearch(url) {\n  const index = url.indexOf('?');\n  if (index == -1) {\n    return url;\n  }\n  const fragment = getFragment(url);\n  return url.substring(0, index) + fragment;\n}\n\n/**\n * Removes parameters that start with amp js parameter pattern and returns the\n * new search string.\n * @param {string} urlSearch\n * @return {string}\n */\nfunction removeAmpJsParamsFromSearch(urlSearch) {\n  if (!urlSearch || urlSearch == '?') {\n    return '';\n  }\n  const search = urlSearch\n      .replace(AMP_JS_PARAMS_REGEX, '')\n      .replace(AMP_GSA_PARAMS_REGEX, '')\n      .replace(AMP_R_PARAMS_REGEX, '')\n      .replace(GOOGLE_EXPERIMENT_PARAMS_REGEX, '')\n      .replace(/^[?&]/, ''); // Removes first ? or &.\n  return search ? '?' + search : '';\n}\n\n/**\n * Returns the source URL of an AMP document for documents served\n * on a proxy origin or directly.\n * @param {string|!Location} url URL of an AMP document.\n * @return {string}\n */\nexport function getSourceUrl(url) {\n  if (typeof url == 'string') {\n    url = parseUrlDeprecated(url);\n  }\n\n  // Not a proxy URL - return the URL itself.\n  if (!isProxyOrigin(url)) {\n    return url.href;\n  }\n\n  // A proxy URL.\n  // Example path that is being matched here.\n  // https://cdn.ampproject.org/c/s/www.origin.com/foo/\n  // The /s/ is optional and signals a secure origin.\n  const path = url.pathname.split('/');\n  const prefix = path[1];\n  user().assert(SERVING_TYPE_PREFIX[prefix],\n      'Unknown path prefix in url %s', url.href);\n  const domainOrHttpsSignal = path[2];\n  const origin = domainOrHttpsSignal == 's'\n    ? 'https://' + decodeURIComponent(path[3])\n    : 'http://' + decodeURIComponent(domainOrHttpsSignal);\n  // Sanity test that what we found looks like a domain.\n  user().assert(origin.indexOf('.') > 0, 'Expected a . in origin %s', origin);\n  path.splice(1, domainOrHttpsSignal == 's' ? 3 : 2);\n  return origin + path.join('/') +\n      removeAmpJsParamsFromSearch(url.search) + (url.hash || '');\n}\n\n/**\n * Returns the source origin of an AMP document for documents served\n * on a proxy origin or directly.\n * @param {string|!Location} url URL of an AMP document.\n * @return {string} The source origin of the URL.\n */\nexport function getSourceOrigin(url) {\n  return parseUrlDeprecated(getSourceUrl(url)).origin;\n}\n\n/**\n * Returns absolute URL resolved based on the relative URL and the base.\n * @param {string} relativeUrlString\n * @param {string|!Location} baseUrl\n * @return {string}\n */\nexport function resolveRelativeUrl(relativeUrlString, baseUrl) {\n  if (typeof baseUrl == 'string') {\n    baseUrl = parseUrlDeprecated(baseUrl);\n  }\n  if (typeof URL == 'function') {\n    return new URL(relativeUrlString, baseUrl.href).toString();\n  }\n  return resolveRelativeUrlFallback_(relativeUrlString, baseUrl);\n}\n\n/**\n * Fallback for URL resolver when URL class is not available.\n * @param {string} relativeUrlString\n * @param {string|!Location} baseUrl\n * @return {string}\n * @private Visible for testing.\n */\nexport function resolveRelativeUrlFallback_(relativeUrlString, baseUrl) {\n  if (typeof baseUrl == 'string') {\n    baseUrl = parseUrlDeprecated(baseUrl);\n  }\n  relativeUrlString = relativeUrlString.replace(/\\\\/g, '/');\n  const relativeUrl = parseUrlDeprecated(relativeUrlString);\n\n  // Absolute URL.\n  if (startsWith(relativeUrlString.toLowerCase(), relativeUrl.protocol)) {\n    return relativeUrl.href;\n  }\n\n  // Protocol-relative URL.\n  if (startsWith(relativeUrlString, '//')) {\n    return baseUrl.protocol + relativeUrlString;\n  }\n\n  // Absolute path.\n  if (startsWith(relativeUrlString, '/')) {\n    return baseUrl.origin + relativeUrlString;\n  }\n\n  // Relative path.\n  return baseUrl.origin + baseUrl.pathname.replace(/\\/[^/]*$/, '/')\n      + relativeUrlString;\n}\n\n\n/**\n * Add \"__amp_source_origin\" query parameter to the URL.\n * @param {!Window} win\n * @param {string} url\n * @return {string}\n */\nexport function getCorsUrl(win, url) {\n  checkCorsUrl(url);\n  const sourceOrigin = getSourceOrigin(win.location.href);\n  return addParamToUrl(url, SOURCE_ORIGIN_PARAM, sourceOrigin);\n}\n\n\n/**\n * Checks if the url has __amp_source_origin and throws if it does.\n * @param {string} url\n */\nexport function checkCorsUrl(url) {\n  const parsedUrl = parseUrlDeprecated(url);\n  const query = parseQueryString(parsedUrl.search);\n  user().assert(!(SOURCE_ORIGIN_PARAM in query),\n      'Source origin is not allowed in %s', url);\n}\n\n/**\n * Tries to decode a URI component, falling back to opt_fallback (or an empty\n * string)\n *\n * @param {string} component\n * @param {string=} opt_fallback\n * @return {string}\n */\nexport function tryDecodeUriComponent(component, opt_fallback) {\n  return tryDecodeUriComponent_(component, opt_fallback);\n}\n","/**\n * Copyright 2016 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {bytesToString, stringToBytes, utf8Encode} from './bytes';\n\n/**\n * Character mapping from base64url to base64.\n * @const {!Object<string, string>}\n */\nconst base64UrlDecodeSubs = {'-': '+', '_': '/', '.': '='};\n\n/**\n * Character mapping from base64 to base64url.\n * @const {!Object<string, string>}\n */\nconst base64UrlEncodeSubs = {'+': '-', '/': '_', '=': '.'};\n\n/**\n * Converts a string which is in base64url encoding into a Uint8Array\n * containing the decoded value.\n * @param {string} str\n * @return {!Uint8Array}\n */\nexport function base64UrlDecodeToBytes(str) {\n  const encoded = atob(str.replace(/[-_.]/g, ch => base64UrlDecodeSubs[ch]));\n  return stringToBytes(encoded);\n}\n\n/**\n * Converts a string which is in base64 encoding into a Uint8Array\n * containing the decoded value.\n * @param {string} str\n * @return {!Uint8Array}\n */\nexport function base64DecodeToBytes(str) {\n  return stringToBytes(atob(str));\n}\n\n/**\n * Converts a bytes array into base64url encoded string.\n * base64url is defined in RFC 4648. It is sometimes referred to as \"web safe\".\n * @param {!Uint8Array} bytes\n * @return {string}\n */\nexport function base64UrlEncodeFromBytes(bytes) {\n  const str = bytesToString(bytes);\n  return btoa(str).replace(/[+/=]/g, ch => base64UrlEncodeSubs[ch]);\n}\n\n/**\n * Converts a string into base64url encoded string.\n * base64url is defined in RFC 4648. It is sometimes referred to as \"web safe\".\n * @param {string} str\n * @return {string}\n */\nexport function base64UrlEncodeFromString(str) {\n  const bytes = utf8Encode(str);\n  return base64UrlEncodeFromBytes(bytes);\n}\n\n/**\n * Converts a bytes array into base64 encoded string.\n * @param {!Uint8Array} bytes\n * @return {string}\n */\nexport function base64EncodeFromBytes(bytes) {\n  return btoa(bytesToString(bytes));\n}\n","/**\n * Copyright 2016 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {dev} from '../log';\n\n/**\n * Interpret a byte array as a UTF-8 string.\n * @param {!BufferSource} bytes\n * @return {string}\n */\nexport function utf8Decode(bytes) {\n  if (typeof TextDecoder !== 'undefined') {\n    return new TextDecoder('utf-8').decode(bytes);\n  }\n  const asciiString = bytesToString(new Uint8Array(bytes.buffer || bytes));\n  return decodeURIComponent(escape(asciiString));\n}\n\n/**\n * Turn a string into UTF-8 bytes.\n * @param {string} string\n * @return {!Uint8Array}\n */\nexport function utf8Encode(string) {\n  if (typeof TextEncoder !== 'undefined') {\n    return new TextEncoder('utf-8').encode(string);\n  }\n  return stringToBytes(unescape(encodeURIComponent(string)));\n}\n\n/**\n * Converts a string which holds 8-bit code points, such as the result of atob,\n * into a Uint8Array with the corresponding bytes.\n * If you have a string of characters, you probably want to be using utf8Encode.\n * @param {string} str\n * @return {!Uint8Array}\n */\nexport function stringToBytes(str) {\n  const bytes = new Uint8Array(str.length);\n  for (let i = 0; i < str.length; i++) {\n    const charCode = str.charCodeAt(i);\n    dev().assert(charCode <= 255, 'Characters must be in range [0,255]');\n    bytes[i] = charCode;\n  }\n  return bytes;\n}\n\n/**\n * Converts a 8-bit bytes array into a string\n * @param {!Uint8Array} bytes\n * @return {string}\n */\nexport function bytesToString(bytes) {\n  // Intentionally avoids String.fromCharCode.apply so we don't suffer a\n  // stack overflow. #10495, https://jsperf.com/bytesToString-2\n  const array = new Array(bytes.length);\n  for (let i = 0; i < bytes.length; i++) {\n    array[i] = String.fromCharCode(bytes[i]);\n  }\n  return array.join('');\n}\n\n/**\n * Converts a 4-item byte array to an unsigned integer.\n * Assumes bytes are big endian.\n * @param {!Uint8Array} bytes\n * @return {number}\n */\nexport function bytesToUInt32(bytes) {\n  if (bytes.length != 4) {\n    throw new Error('Received byte array with length != 4');\n  }\n  const val = (bytes[0] & 0xFF) << 24 |\n     (bytes[1] & 0xFF) << 16 |\n     (bytes[2] & 0xFF) << 8 |\n     (bytes[3] & 0xFF);\n  // Convert to unsigned.\n  return val >>> 0;\n}\n\n/**\n * Generate a random bytes array with specific length using\n * win.crypto.getRandomValues. Return null if it is not available.\n * @param {!Window} win\n * @param {number} length\n * @return {?Uint8Array}\n */\nexport function getCryptoRandomBytesArray(win, length) {\n  if (!win.crypto || !win.crypto.getRandomValues) {\n    return null;\n  }\n\n  // Widely available in browsers we support:\n  // http://caniuse.com/#search=getRandomValues\n  const uint8array = new Uint8Array(length);\n  win.crypto.getRandomValues(uint8array);\n  return uint8array;\n}\n","/**\n * Copyright 2018 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {dev} from '../log';\n\n/** @const {string} */\nconst TAG = 'lru-cache';\n\n/**\n * @template T\n */\nexport class LruCache {\n  /**\n   * @param {number} capacity\n   */\n  constructor(capacity) {\n    /** @private @const {number} */\n    this.capacity_ = capacity;\n\n    /** @private {number} */\n    this.size_ = 0;\n\n    /**\n     * An incrementing counter to define the last access.\n     * @private {number}\n     */\n    this.access_ = 0;\n\n    /** @private {!Object<(number|string), {payload: T, access: number}>} */\n    this.cache_ = Object.create(null);\n  }\n\n  /**\n   * Returns whether key is cached.\n   *\n   * @param {number|string} key\n   * @return {boolean}\n   */\n  has(key) {\n    return !!this.cache_[key];\n  }\n\n  /**\n   * @param {number|string} key\n   * @return {T} The cached payload.\n   */\n  get(key) {\n    const cacheable = this.cache_[key];\n    if (cacheable) {\n      cacheable.access = ++this.access_;\n      return cacheable.payload;\n    }\n    return undefined;\n  }\n\n  /**\n   * @param {number|string} key\n   * @param {T} payload The payload to cache.\n   */\n  put(key, payload) {\n    if (!this.has(key)) {\n      this.size_++;\n    }\n    this.cache_[key] = {payload, access: this.access_};\n    this.evict_();\n  }\n\n  /**\n   * Evicts the oldest cache entry, if we've exceeded capacity.\n   */\n  evict_() {\n    if (this.size_ <= this.capacity_) {\n      return;\n    }\n\n    dev().warn(TAG, 'Trimming LRU cache');\n    const cache = this.cache_;\n    let oldest = this.access_ + 1;\n    let oldestKey;\n    for (const key in cache) {\n      const {access} = cache[key];\n      if (access < oldest) {\n        oldest = access;\n        oldestKey = key;\n      }\n    }\n\n    if (oldestKey !== undefined) {\n      delete cache[oldestKey];\n      this.size_--;\n    }\n  }\n}\n","/**\n * Copyright 2015 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {isObject} from '../types';\n\n/* @const */\nconst hasOwn_ = Object.prototype.hasOwnProperty;\n\n/**\n * Returns a map-like object.\n * If opt_initial is provided, copies its own properties into the\n * newly created object.\n * @param {T=} opt_initial This should typically be an object literal.\n * @return {T}\n * @template T\n */\nexport function map(opt_initial) {\n  const obj = Object.create(null);\n  if (opt_initial) {\n    Object.assign(obj, opt_initial);\n  }\n  return obj;\n}\n\n/**\n * Return an empty JsonObject or makes the passed in object literal\n * an JsonObject.\n * The JsonObject type is just a simple object that is at-dict.\n * See\n * https://github.com/google/closure-compiler/wiki/@struct-and-@dict-Annotations\n * for what a dict is type-wise.\n * The linter enforces that the argument is, in fact, at-dict like.\n * @param {!Object=} opt_initial\n * @return {!JsonObject}\n */\nexport function dict(opt_initial) {\n  // We do not copy. The linter enforces that the passed in object is a literal\n  // and thus the caller cannot have a reference to it.\n  return /** @type {!JsonObject} */ (opt_initial || {});\n}\n\n/**\n * Checks if the given key is a property in the map.\n *\n * @param {T}  obj a map like property.\n * @param {string}  key\n * @return {boolean}\n * @template T\n */\nexport function hasOwn(obj, key) {\n  return hasOwn_.call(obj, key);\n}\n\n/**\n * Returns obj[key] iff key is obj's own property (is not inherited).\n * Otherwise, returns undefined.\n *\n * @param {Object} obj\n * @param {string} key\n * @return {*}\n */\nexport function ownProperty(obj, key) {\n  if (hasOwn(obj, key)) {\n    return obj[key];\n  } else {\n    return undefined;\n  }\n}\n\n/**\n * Deep merges source into target.\n *\n * @param {!Object} target\n * @param {!Object} source\n * @param {number} depth The maximum merge depth. If exceeded, Object.assign\n *                       will be used instead.\n * @return {!Object}\n * @throws {Error} If source contains a circular reference.\n * Note: Only nested objects are deep-merged, primitives and arrays are not.\n */\nexport function deepMerge(target, source, depth = 10) {\n  // Keep track of seen objects to detect recursive references.\n  const seen = [];\n\n  /** @type {!Array<{t: !Object, s: !Object, d: number}>} */\n  const queue = [];\n  queue.push({t: target, s: source, d: 0});\n\n  // BFS to ensure objects don't have recursive references at shallower depths.\n  while (queue.length > 0) {\n    const {t, s, d} = queue.shift();\n    if (seen.includes(s)) {\n      throw new Error('Source object has a circular reference.');\n    }\n    seen.push(s);\n    if (t === s) {\n      continue;\n    }\n    if (d > depth) {\n      Object.assign(t, s);\n      continue;\n    }\n    Object.keys(s).forEach(key => {\n      const newValue = s[key];\n      // Perform a deep merge IFF both target and source have the same key\n      // whose corresponding values are objects.\n      if (hasOwn(t, key)) {\n        const oldValue = t[key];\n        if (isObject(newValue) && isObject(oldValue)) {\n          queue.push({t: oldValue, s: newValue, d: d + 1});\n          return;\n        }\n      }\n      t[key] = newValue;\n    });\n  }\n  return target;\n}\n\n/**\n * @param {!Object} o An object to remove properties from\n * @param {!Array<string>} props A list of properties to remove from the Object\n * @return {!Object} An object with the given properties removed\n */\nexport function omit(o, props) {\n  return Object.keys(o).reduce((acc, key) => {\n    if (!props.includes(key)) {\n      acc[key] = o[key];\n    }\n    return acc;\n  }, {});\n}\n","/**\n * Copyright 2016 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {base64DecodeToBytes} from './base64';\n\n\n/**\n * Converts a text in PEM format into a binary array buffer.\n * @param {string} pem\n * @return {!Uint8Array}\n * @visibleForTesting\n */\nexport function pemToBytes(pem) {\n  pem = pem.trim();\n\n  // Remove pem prefix, e.g. \"----BEGIN PUBLIC KEY----\".\n  pem = pem.replace(/^\\-+BEGIN[^-]*\\-+/, '');\n\n  // Remove pem suffix, e.g. \"----END PUBLIC KEY----\".\n  pem = pem.replace(/\\-+END[^-]*\\-+$/, '');\n\n  // Remove line breaks.\n  pem = pem.replace(/[\\r\\n]/g, '').trim();\n\n  return base64DecodeToBytes(pem);\n}\n","/**\n * Copyright 2016 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Returns a Deferred struct, which holds a pending promise and its associated\n * resolve and reject functions.\n *\n * This is preferred instead of creating a Promise instance to extract the\n * resolve/reject functions yourself:\n *\n * ```\n * // Avoid doing\n * let resolve;\n * const promise = new Promise(res => {\n *   resolve = res;\n * });\n *\n * // Good\n * const deferred = new Deferred();\n * const { promise, resolve } = deferred;\n * ```\n *\n * @template T\n */\nexport class Deferred {\n  /**\n   * Creates an instance of Deferred.\n   */\n  constructor() {\n    let resolve, reject;\n\n    /**\n     * @const {!Promise<T>}\n     */\n    this.promise = new /*OK*/Promise((res, rej) => {\n      resolve = res;\n      reject = rej;\n    });\n\n    /**\n     * @const {function(T=)}\n     */\n    this.resolve = resolve;\n\n    /**\n     * @const {function(*=)}\n     */\n    this.reject = reject;\n  }\n}\n\n/**\n * Creates a promise resolved to the return value of fn.\n * If fn sync throws, it will cause the promise to reject.\n *\n * @param {function():T} fn\n * @return {!Promise<T>}\n * @template T\n */\nexport function tryResolve(fn) {\n  return new Promise(resolve => {\n    resolve(fn());\n  });\n}\n\n/**\n * Returns a promise which resolves if a threshold amount of the given promises\n * resolve, and rejects otherwise.\n * @param {!Array<!Promise>} promises The array of promises to test.\n * @param {number} count The number of promises that must resolve for the\n *     returned promise to resolve.\n * @return {!Promise} A promise that resolves if any of the given promises\n *     resolve, and which rejects otherwise.\n */\nexport function some(promises, count = 1) {\n  return new Promise((resolve, reject) => {\n    count = Math.max(count, 0);\n    const extra = promises.length - count;\n    if (extra < 0) {\n      reject(new Error('not enough promises to resolve'));\n    }\n    if (promises.length == 0) {\n      resolve([]);\n    }\n    const values = [];\n    const reasons = [];\n\n    const onFulfilled = value => {\n      if (values.length < count) {\n        values.push(value);\n      }\n      if (values.length == count) {\n        resolve(values);\n      }\n    };\n    const onRejected = reason => {\n      if (reasons.length <= extra) {\n        reasons.push(reason);\n      }\n      if (reasons.length > extra) {\n        reject(reasons);\n      }\n    };\n    for (let i = 0; i < promises.length; i++) {\n      Promise.resolve(promises[i]).then(onFulfilled, onRejected);\n    }\n  });\n}\n\n/**\n * Resolves with the result of the last promise added.\n * @implements {IThenable}\n */\nexport class LastAddedResolver {\n  /**\n   * @param {!Array<!Promise>=} opt_promises\n   */\n  constructor(opt_promises) {\n    let resolve_, reject_;\n    /** @private @const {!Promise} */\n    this.promise_ = new Promise((resolve, reject) => {\n      resolve_ = resolve;\n      reject_ = reject;\n    });\n\n    /** @private */\n    this.resolve_ = resolve_;\n\n    /** @private */\n    this.reject_ = reject_;\n\n    /** @private */\n    this.count_ = 0;\n\n    if (opt_promises) {\n      for (let i = 0; i < opt_promises.length; i++) {\n        this.add(opt_promises[i]);\n      }\n    }\n  }\n\n  /**\n   * Add a promise to possibly be resolved.\n   * @param {!Promise} promise\n   * @return {!Promise}\n   */\n  add(promise) {\n    const countAtAdd = ++this.count_;\n    Promise.resolve(promise).then(result => {\n      if (this.count_ === countAtAdd) {\n        this.resolve_(result);\n      }\n    }, error => {\n      // Don't follow behavior of Promise.all and Promise.race error so that\n      // this will only reject when most recently added promise fails.\n      if (this.count_ === countAtAdd) {\n        this.reject_(error);\n      }\n    });\n    return this.promise_;\n  }\n\n  /** @override */\n  then(opt_resolve, opt_reject) {\n    return this.promise_.then(opt_resolve, opt_reject);\n  }\n}\n","/*! https://mths.be/cssescape v1.5.1 by @mathias | MIT license */\n\n\n/**\n * This regex consists of 4 matching capture groups and one (non-matching) fallback:\n *\n * - (\\0), catch the null terminator character so it may be replaced by UTF\n *   Replacement Char\n * - ^(-)$, catch a solitary dash char, so that it may be backslash escaped.\n *   This is a separate capture group so that the legal-chars (group 4) doesn't\n *   capture it first, since that group doesn't need to escape its dash.\n * - ([\\x01-\\x1f\\x7f]|^-?[0-9]), catch a UTF control char, or any leading\n *   number (with an optional leading dash). The control or the number (but not\n *   the leading dash) must be hex-escaped,.\n * - ([\\x80-\\uffff0-9a-zA-Z_-]+), catch legal-chars, with the exception of a\n *   solitary dash, which will already have matched in group 1.\n * - [^], finally, a catch-all that allows us to backslash escape the char.\n *\n * Together, this matches everything necessary for CSS.escape.\n */\nvar regex = /(\\0)|^(-)$|([\\x01-\\x1f\\x7f]|^-?[0-9])|([\\x80-\\uffff0-9a-zA-Z_-]+)|[^]/g;\n\nfunction escaper(match, nil, dash, hexEscape, chars) {\n  // Chars is the legal-chars (group 4) capture\n  if (chars) {\n    return chars;\n  }\n  // Nil is the null terminator (group 1) capture\n  if (nil) {\n    return '\\uFFFD';\n  }\n  // Both UTF control chars, and leading numbers (with optional leading dash)\n  // (group 3) must be backslash escaped with a trailing space.  Funnily, the\n  // leading dash must not be escaped, but the number. :shrug:\n  if (hexEscape) {\n    return match.slice(0, -1) + '\\\\' + match.slice(-1).charCodeAt(0).toString(16) + ' '\n  }\n  // Finally, the solitary dash and the catch-all chars require backslash\n  // escaping.\n  return '\\\\' + match;\n}\n\n/**\n * https://drafts.csswg.org/cssom/#serialize-an-identifier\n * @param {string} value\n * @return {string}\n */\nexport function cssEscape(value) {\n  return String(value).replace(regex, escaper);\n}\n","/**\n * Copyright 2018 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/** Version: 0.1.22.23 */\n/**\n * Copyright 2018 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n/**\n * @param {!Document} doc\n * @return {string}\n */\nfunction getReadyState(doc) {\n  return /** @type {string} */ (doc['readyState']);\n}\n\n\n/**\n * Whether the document is ready.\n * @param {!Document} doc\n * @return {boolean}\n */\nfunction isDocumentReady(doc) {\n  const readyState = getReadyState(doc);\n  return readyState != 'loading' && readyState != 'uninitialized';\n}\n\n/**\n * Calls the callback when document is ready.\n * @param {!Document} doc\n * @param {function(!Document)} callback\n */\nfunction onDocumentReady(doc, callback) {\n  onDocumentState(doc, isDocumentReady, callback);\n}\n\n/**\n * Calls the callback when document's state satisfies the stateFn.\n * @param {!Document} doc\n * @param {function(!Document):boolean} stateFn\n * @param {function(!Document)} callback\n */\nfunction onDocumentState(doc, stateFn, callback) {\n  let ready = stateFn(doc);\n  if (ready) {\n    callback(doc);\n  } else {\n    const readyListener = () => {\n      if (stateFn(doc)) {\n        if (!ready) {\n          ready = true;\n          callback(doc);\n        }\n        doc.removeEventListener('readystatechange', readyListener);\n      }\n    };\n    doc.addEventListener('readystatechange', readyListener);\n  }\n}\n\n/**\n * Returns a promise that is resolved when document is ready.\n * @param {!Document} doc\n * @return {!Promise<!Document>}\n */\nfunction whenDocumentReady(doc) {\n  return new Promise(resolve => {\n    onDocumentReady(doc, resolve);\n  });\n}\n\n/**\n * Copyright 2018 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n/**\n * @interface\n */\nclass Doc {\n\n  /**\n   * @return {!Window}\n   */\n  getWin() {}\n\n  /**\n   * The `Document` node or analog.\n   * @return {!Node}\n   */\n  getRootNode() {}\n\n  /**\n   * The `Document.documentElement` element or analog.\n   * @return {!Element}\n   */\n  getRootElement() {}\n\n  /**\n   * The `Document.head` element or analog. Returns `null` if not available\n   * yet.\n   * @return {!Element}\n   */\n  getHead() {}\n\n  /**\n   * The `Document.body` element or analog. Returns `null` if not available\n   * yet.\n   * @return {?Element}\n   */\n  getBody() {}\n\n  /**\n   * Whether the document has been fully constructed.\n   * @return {boolean}\n   */\n  isReady() {}\n\n  /**\n   * Resolved when document has been fully constructed.\n   * @return {!Promise}\n   */\n  whenReady() {}\n}\n\n\n/** @implements {Doc} */\nclass GlobalDoc {\n\n  /**\n   * @param {!Window|!Document} winOrDoc\n   */\n  constructor(winOrDoc) {\n    const isWin = !!winOrDoc.document;\n    /** @private @const {!Window} */\n    this.win_ = isWin ?\n        /** @type {!Window} */ (winOrDoc) :\n        /** @type {!Window} */ (\n            (/** @type {!Document} */ (winOrDoc)).defaultView);\n    /** @private @const {!Document} */\n    this.doc_ = isWin ?\n        /** @type {!Window} */ (winOrDoc).document :\n        /** @type {!Document} */ (winOrDoc);\n  }\n\n  /** @override */\n  getWin() {\n    return this.win_;\n  }\n\n  /** @override */\n  getRootNode() {\n    return this.doc_;\n  }\n\n  /** @override */\n  getRootElement() {\n    return this.doc_.documentElement;\n  }\n\n  /** @override */\n  getHead() {\n    // `document.head` always has a chance to be parsed, at least partially.\n    return /** @type {!Element} */ (this.doc_.head);\n  }\n\n  /** @override */\n  getBody() {\n    return this.doc_.body;\n  }\n\n  /** @override */\n  isReady() {\n    return isDocumentReady(this.doc_);\n  }\n\n  /** @override */\n  whenReady() {\n    return whenDocumentReady(this.doc_);\n  }\n}\n\n\n/**\n * @param {!Document|!Window|!Doc} input\n * @return {!Doc}\n */\nfunction resolveDoc(input) {\n  // Is it a `Document`\n  if ((/** @type {!Document} */ (input)).nodeType === /* DOCUMENT */ 9) {\n    return new GlobalDoc(/** @type {!Document} */ (input));\n  }\n  // Is it a `Window`?\n  if ((/** @type {!Window} */ (input)).document) {\n    return new GlobalDoc(/** @type {!Window} */ (input));\n  }\n  return /** @type {!Doc} */ (input);\n}\n\n/**\n * Copyright 2018 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n/**\n */\nclass PageConfig {\n\n  /**\n   * @param {string} productOrPublicationId\n   * @param {boolean} locked\n   */\n  constructor(productOrPublicationId, locked) {\n    let publicationId, productId, label;\n    const div = productOrPublicationId.indexOf(':');\n    if (div != -1) {\n      // The argument is a product id.\n      productId = productOrPublicationId;\n      publicationId = productId.substring(0, div);\n      label = productId.substring(div + 1);\n    } else {\n      // The argument is a publication id.\n      publicationId = productOrPublicationId;\n      productId = null;\n      label = null;\n    }\n\n    /** @private @const {string} */\n    this.publicationId_ = publicationId;\n    /** @private @const {?string} */\n    this.productId_ = productId;\n    /** @private @const {?string} */\n    this.label_ = label;\n    /** @private @const {boolean} */\n    this.locked_ = locked;\n  }\n\n  /**\n   * @return {string}\n   */\n  getPublicationId() {\n    return this.publicationId_;\n  }\n\n  /**\n   * @return {?string}\n   */\n  getProductId() {\n    return this.productId_;\n  }\n\n  /**\n   * @return {?string}\n   */\n  getLabel() {\n    return this.label_;\n  }\n\n  /**\n   * @return {boolean}\n   */\n  isLocked() {\n    return this.locked_;\n  }\n}\n\n/**\n * Copyright 2018 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Copyright 2018 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Copyright 2018 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Copyright 2018 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Copyright 2018 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n/**\n * Whether the element have a next node in the document order.\n * This means either:\n *  a. The element itself has a nextSibling.\n *  b. Any of the element ancestors has a nextSibling.\n * @param {!Element} element\n * @param {?Node=} opt_stopNode\n * @return {boolean}\n */\nfunction hasNextNodeInDocumentOrder(element, opt_stopNode) {\n  let currentElement = element;\n  do {\n    if (currentElement.nextSibling) {\n      return true;\n    }\n  } while ((currentElement = currentElement.parentNode) &&\n            currentElement != opt_stopNode);\n  return false;\n}\n\n/**\n * Copyright 2018 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Determines if value is actually an Array.\n * @param {*} value\n * @return {boolean}\n */\nfunction isArray(value) {\n  return Array.isArray(value);\n}\n\n/**\n * Copyright 2018 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Simple wrapper around JSON.parse that casts the return value\n * to JsonObject.\n * Create a new wrapper if an array return value is desired.\n * @param {*} json JSON string to parse\n * @return {?JsonObject|undefined} May be extend to parse arrays.\n */\nfunction parseJson(json) {\n  return /** @type {?JsonObject} */(JSON.parse(/** @type {string} */ (json)));\n}\n\n/**\n * Parses the given `json` string without throwing an exception if not valid.\n * Returns `undefined` if parsing fails.\n * Returns the `Object` corresponding to the JSON string when parsing succeeds.\n * @param {*} json JSON string to parse\n * @param {function(!Error)=} opt_onFailed Optional function that will be called\n *     with the error if parsing fails.\n * @return {?JsonObject|undefined} May be extend to parse arrays.\n */\nfunction tryParseJson(json, opt_onFailed) {\n  try {\n    return parseJson(json);\n  } catch (e) {\n    if (opt_onFailed) {\n      opt_onFailed(e);\n    }\n    return undefined;\n  }\n}\n\n/**\n * Copyright 2018 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nconst ALREADY_SEEN = '__SWG-SEEN__';\n\n\n/**\n */\nclass PageConfigResolver {\n\n  /**\n   * @param {!Window|!Document|!Doc} winOrDoc\n   */\n  constructor(winOrDoc) {\n    /** @private @const {!Doc} */\n    this.doc_ = resolveDoc(winOrDoc);\n\n    /** @private {?function((!PageConfig|!Promise))} */\n    this.configResolver_ = null;\n\n    /** @private @const {!Promise<!PageConfig>} */\n    this.configPromise_ = new Promise(resolve => {\n      this.configResolver_ = resolve;\n    });\n\n    /** @private @const {!MetaParser} */\n    this.metaParser_ = new MetaParser(this.doc_);\n    /** @private @const {!JsonLdParser} */\n    this.ldParser_ = new JsonLdParser(this.doc_);\n    /** @private @const {!MicrodataParser} */\n    this.microdataParser_ = new MicrodataParser(this.doc_);\n  }\n\n  /**\n   * @return {!Promise<!PageConfig>}\n   */\n  resolveConfig() {\n    // Try resolve the config at different times.\n    Promise.resolve().then(this.check.bind(this));\n    this.doc_.whenReady().then(this.check.bind(this));\n    return this.configPromise_;\n  }\n\n  /**\n   * @return {?PageConfig}\n   */\n  check() {\n    // Already resolved.\n    if (!this.configResolver_) {\n      return null;\n    }\n    let config = this.metaParser_.check();\n    if (!config) {\n      config = this.ldParser_.check();\n    }\n    if (!config) {\n      config = this.microdataParser_.check();\n    }\n    if (config) {\n      // Product ID has been found: initialize the rest of the config.\n      this.configResolver_(config);\n      this.configResolver_ = null;\n    } else if (this.doc_.isReady()) {\n      this.configResolver_(Promise.reject(\n          new Error('No config could be discovered in the page')));\n      this.configResolver_ = null;\n    }\n    return config;\n  }\n}\n\n\nclass MetaParser {\n  /**\n   * @param {!Doc} doc\n   */\n  constructor(doc) {\n    /** @private @const {!Doc} */\n    this.doc_ = doc;\n  }\n\n  /**\n   * @return {?PageConfig}\n   */\n  check() {\n    if (!this.doc_.getBody()) {\n      // Wait until the whole `<head>` is parsed.\n      return null;\n    }\n\n    // Try to find product id.\n    const productId = getMetaTag(this.doc_.getRootNode(),\n        'subscriptions-product-id');\n    if (!productId) {\n      return null;\n    }\n\n    // Is locked?\n    const accessibleForFree = getMetaTag(this.doc_.getRootNode(),\n        'subscriptions-accessible-for-free');\n    const locked = (accessibleForFree &&\n        accessibleForFree.toLowerCase() == 'false') || false;\n\n    return new PageConfig(productId, locked);\n  }\n}\n\n\nclass JsonLdParser {\n  /**\n   * @param {!Doc} doc\n   */\n  constructor(doc) {\n    /** @private @const {!Doc} */\n    this.doc_ = doc;\n  }\n\n  /**\n   * @return {?PageConfig}\n   */\n  check() {\n    if (!this.doc_.getBody()) {\n      // Wait until the whole `<head>` is parsed.\n      return null;\n    }\n\n    const domReady = this.doc_.isReady();\n\n    // type: 'application/ld+json'\n    const elements = this.doc_.getRootNode().querySelectorAll(\n        'script[type=\"application/ld+json\"]');\n    for (let i = 0; i < elements.length; i++) {\n      const element = elements[i];\n      if (element[ALREADY_SEEN] ||\n          !element.textContent ||\n          !domReady && !hasNextNodeInDocumentOrder(element)) {\n        continue;\n      }\n      element[ALREADY_SEEN] = true;\n      if (element.textContent.indexOf('NewsArticle') == -1) {\n        continue;\n      }\n      const possibleConfig = this.tryExtractConfig_(element);\n      if (possibleConfig) {\n        return possibleConfig;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * @param {!Element} element\n   * @return {?PageConfig}\n   */\n  tryExtractConfig_(element) {\n    const json = tryParseJson(element.textContent);\n    if (!json) {\n      return null;\n    }\n\n    // Must be a NewsArticle.\n    if (!this.checkType_(json, 'NewsArticle')) {\n      return null;\n    }\n\n    // Must have a isPartOf[@type=Product].\n    let productId = null;\n    const partOfArray = this.valueArray_(json, 'isPartOf');\n    if (partOfArray) {\n      for (let i = 0; i < partOfArray.length; i++) {\n        productId = this.discoverProductId_(partOfArray[i]);\n        if (productId) {\n          break;\n        }\n      }\n    }\n    if (!productId) {\n      return null;\n    }\n\n    // Found product id, just check for the access flag.\n    const isAccessibleForFree = this.bool_(\n        this.singleValue_(json, 'isAccessibleForFree'),\n        /* default */ true);\n\n    return new PageConfig(productId, !isAccessibleForFree);\n  }\n\n  /**\n   * @param {*} value\n   * @param {boolean} def\n   * @return {boolean}\n   */\n  bool_(value, def) {\n    if (value == null || value === '') {\n      return def;\n    }\n    if (typeof value == 'boolean') {\n      return value;\n    }\n    if (typeof value == 'string') {\n      const lowercase = value.toLowerCase();\n      if (lowercase == 'false') {\n        return false;\n      }\n      if (lowercase == 'true') {\n        return true;\n      }\n    }\n    return def;\n  }\n\n  /**\n   * @param {!Object} json\n   * @return {?string}\n   */\n  discoverProductId_(json) {\n    // Must have type `Product`.\n    if (!this.checkType_(json, 'Product')) {\n      return null;\n    }\n    return /** @type {?string} */ (this.singleValue_(json, 'productID'));\n  }\n\n  /**\n   * @param {!Object} json\n   * @param {string} name\n   * @return {?Array}\n   */\n  valueArray_(json, name) {\n    const value = json[name];\n    if (value == null || value === '') {\n      return null;\n    }\n    return isArray(value) ? value : [value];\n  }\n\n  /**\n   * @param {!Object} json\n   * @param {string} name\n   * @return {*}\n   */\n  singleValue_(json, name) {\n    const valueArray = this.valueArray_(json, name);\n    const value = valueArray && valueArray[0];\n    return (value == null || value === '') ? null : value;\n  }\n\n  /**\n   * @param {!Object} json\n   * @param {string} expectedType\n   * @return {boolean}\n   */\n  checkType_(json, expectedType) {\n    const typeArray = this.valueArray_(json, '@type');\n    if (!typeArray) {\n      return false;\n    }\n    return (typeArray.includes(expectedType) ||\n        typeArray.includes('http://schema.org/' + expectedType));\n  }\n}\n\nclass MicrodataParser {\n  /**\n   * @param {!Doc} doc\n   */\n  constructor(doc) {\n    /** @private @const {!Doc} */\n    this.doc_ = doc;\n    /** @private {?boolean} */\n    this.access_ = null;\n    /** @private {?string} */\n    this.productId_ = null;\n  }\n\n  /**\n   * Returns false if access is restricted, otherwise true\n   * @param {!Element} root An element that is an item of type 'NewsArticle'\n   * @return {?boolean} locked access\n   * @private\n   */\n  discoverAccess_(root) {\n    const ALREADY_SEEN = 'alreadySeenForAccessInfo';\n    const nodeList = root\n        .querySelectorAll(\"[itemprop='isAccessibleForFree']\");\n    for (let i = 0; nodeList[i]; i++) {\n      const element = nodeList[i];\n      const content = element.getAttribute('content') || element.textContent;\n      if (!content) {\n        continue;\n      }\n      if (this.isValidElement_(element, root, ALREADY_SEEN)) {\n        let accessForFree = null;\n        if (content.toLowerCase() == 'true') {\n          accessForFree = true;\n        } else if (content.toLowerCase() == 'false') {\n          accessForFree = false;\n        }\n        return accessForFree;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Verifies if an element is valid based on the following\n   * - child of an item of type 'NewsArticle'\n   * - not a child of an item of any other type\n   * - not seen before, marked using the alreadySeen tag\n   * @param {?Element} current the element to be verified\n   * @param {!Element} root the parent to track up to\n   * @param {!string} alreadySeen used to tag already visited nodes\n   * @return {!boolean} valid node\n   * @private\n   */\n  isValidElement_(current, root, alreadySeen) {\n    for (let node = current;\n        node && !node[alreadySeen]; node = node.parentNode) {\n      node[alreadySeen] = true;\n      if (node.hasAttribute('itemscope')) {\n        /**{?string} */\n        const type = node.getAttribute('itemtype');\n        if (type.indexOf('http://schema.org/NewsArticle') >= 0) {\n          return true;\n        } else {\n          return false;\n        }\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Obtains the product ID that meets the requirements\n   * - child of an item of type 'NewsArticle'\n   * - Not a child of an item of type 'Section'\n   * - child of an item of type 'productID'\n   * @param {!Element} root An element that is an item of type 'NewsArticle'\n   * @return {?string} product ID, if found\n   * @private\n   */\n  discoverProductId_(root) {\n    const ALREADY_SEEN = 'alreadySeenForProductInfo';\n    const nodeList = root\n        .querySelectorAll('[itemprop=\"productID\"]');\n    for (let i = 0; nodeList[i]; i++) {\n      const element = nodeList[i];\n      const content = element.getAttribute('content') || element.textContent;\n      const item = element.closest('[itemtype][itemscope]');\n      const type = item.getAttribute('itemtype');\n      if (type.indexOf('http://schema.org/Product') <= -1) {\n        continue;\n      }\n      if (this.isValidElement_(item.parentElement, root, ALREADY_SEEN)) {\n        return content;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Returns PageConfig if available\n   * @return {?PageConfig} PageConfig found so far\n   */\n  getPageConfig_() {\n    let locked = null;\n    if (this.access_ != null) {\n      locked = !this.access_;\n    } else if (this.doc_.isReady()) {\n      // Default to unlocked\n      locked = false;\n    }\n    if (this.productId_ != null && locked != null) {\n      return new PageConfig(this.productId_, locked);\n    }\n    return null;\n  }\n\n  /**\n   * Extracts page config from Microdata in the DOM\n   * @return {?PageConfig} PageConfig found\n   */\n  tryExtractConfig_() {\n    let config = this.getPageConfig_();\n    if (config) {\n      return config;\n    }\n    const nodeList = this.doc_.getRootNode().querySelectorAll(\n        '[itemscope][itemtype*=\"http://schema.org/NewsArticle\"]');\n    for (let i = 0; nodeList[i] && config == null; i++) {\n      const element = nodeList[i];\n      if (this.access_ == null) {\n        this.access_ = this.discoverAccess_(element);\n      }\n      if (!this.productId_) {\n        this.productId_ = this.discoverProductId_(element);\n      }\n      config = this.getPageConfig_();\n    }\n    return config;\n  }\n\n  /**\n   * @return {?PageConfig}\n   */\n  check() {\n    if (!this.doc_.getBody()) {\n      // Wait until the whole `<head>` is parsed.\n      return null;\n    }\n    return this.tryExtractConfig_();\n  }\n}\n\n/**\n * Returns the value from content attribute of a meta tag with given name.\n *\n * If multiple tags are found, the first value is returned.\n *\n * @param {!Node} rootNode\n * @param {string} name The tag name to look for.\n * @return {?string} attribute value or empty string.\n * @private\n */\nfunction getMetaTag(rootNode, name) {\n  const el = rootNode.querySelector(`meta[name=\"${name}\"]`);\n  if (el) {\n    return el.getAttribute('content');\n  }\n  return null;\n}\n\n/**\n * Copyright 2018 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nexport {\n  Doc,\n  PageConfig,\n  PageConfigResolver,\n};\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}