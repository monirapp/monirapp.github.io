{"version":3,"sources":["node_modules/browser-pack/_prelude.js","build/amp-subscriptions-google-0.1.css.js","extensions/amp-subscriptions-google/0.1/amp-subscriptions-google.js","extensions/amp-subscriptions/0.1/doc-impl.js","extensions/amp-subscriptions/0.1/entitlement.js","node_modules/document-register-element/build/document-register-element.patched.js","node_modules/promise-pjs/promise.js","src/config.js","src/cookies.js","src/dom.js","src/element-service.js","src/experiments.js","src/log.js","src/mode-object.js","src/mode.js","src/polyfills.js","src/polyfills/array-includes.js","src/polyfills/custom-elements.js","src/polyfills/document-contains.js","src/polyfills/domtokenlist-toggle.js","src/polyfills/math-sign.js","src/polyfills/object-assign.js","src/polyfills/promise.js","src/render-delaying-services.js","src/service.js","src/services.js","src/string.js","src/style-installer.js","src/style.js","src/types.js","src/url-parse-query-string.js","src/url-try-decode-uri-component.js","src/url.js","src/utils/lru-cache.js","src/utils/object.js","src/utils/promise.js","third_party/css-escape/css-escape.js","third_party/subscriptions-project/config.js","third_party/subscriptions-project/swg.js"],"names":[],"mappings":"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AACzC,UAAI,CAAC,IAAL,EAAW;AACT,eAAO,mBAAP;AACD;AACD,UAAM,MAAM,WAAW,KAAK,SAAL,CAAe,IAAf,CAAvB;AACA,UAAM,SAAS,KAAK,QAAL,KAAkB,EAAjC;AACA,UAAM,UAAU,KAAK,SAAL,KAAmB,KAAnC;AACA,UAAM,cAAc,KAAK,aAAL,CAApB;AACA,UAAM,aAAa,KAAK,MAAL,KAAgB,IAAnC;AACA,aAAO,IAAI,WAAJ,CAAgB,EAAC,cAAD,EAAS,QAAT,EAAc,SAAS,EAAvB;AACrB,wBADqB,EACZ,wBADY,EACC,sBADD,EAAhB,CAAP;AAED;;;;;;;AC5GH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;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","file":"amp-subscriptions-google-0.1.max.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","export const CSS = \".swg-button,.swg-button-dark,.swg-button-light{border:0;border-radius:4px;box-sizing:border-box;outline:0;padding:11px 8px;width:240px;min-width:150px;height:40px;min-height:40px}.swg-button-dark:after,.swg-button-light:after,.swg-button:after{display:block;max-width:200px;max-height:40px;width:100%;height:100%;margin:auto;content:\\\"\\\";border:0;background-origin:content-box;background-position:50%;background-repeat:no-repeat;background-size:contain}.swg-button,.swg-button-light{background-color:#fff;box-shadow:0 1px 1px 0 rgba(60,64,67,0.3),0 1px 3px 1px rgba(60,64,67,0.15)}.swg-button-light:after,.swg-button:after{background-image:url(\\\"data:image/svg+xml;charset=utf-8,%3Csvg width='235' height='24' xmlns='http://www.w3.org/2000/svg'%3E%3Cg fill='none' fill-rule='evenodd'%3E%3Cpath d='M169.367 19c-5.09 0-9.367-4.265-9.367-9.5s4.277-9.5 9.367-9.5c2.818 0 4.823 1.133 6.33 2.622l-1.775 1.827c-1.082-1.04-2.55-1.857-4.555-1.857-3.72 0-6.628 3.081-6.628 6.908 0 3.827 2.907 6.908 6.628 6.908 2.411 0 3.78-1 4.664-1.898.724-.745 1.19-1.806 1.37-3.265h-6.034V8.643h8.494c.09.459.139 1.02.139 1.622 0 1.95-.516 4.357-2.183 6.072-1.627 1.734-3.691 2.663-6.45 2.663z' fill='%234285F4' fill-rule='nonzero'/%3E%3Cpath d='M192 13c0 3.456-2.69 6-6 6s-6-2.544-6-6c0-3.476 2.69-6 6-6s6 2.524 6 6zm-2.63 0c0-2.164-1.563-3.636-3.37-3.636-1.807 0-3.37 1.482-3.37 3.636 0 2.134 1.563 3.636 3.37 3.636 1.807 0 3.37-1.492 3.37-3.636z' fill='%23E94235' fill-rule='nonzero'/%3E%3Cpath d='M205 13c0 3.456-2.69 6-6 6-3.3 0-6-2.544-6-6 0-3.476 2.69-6 6-6s6 2.524 6 6zm-2.62 0c0-2.164-1.563-3.636-3.37-3.636-1.807 0-3.37 1.482-3.37 3.636 0 2.134 1.563 3.636 3.37 3.636 1.807.01 3.37-1.492 3.37-3.636z' fill='%23FABB05' fill-rule='nonzero'/%3E%3Cpath d='M217 7.362v10.53c0 4.337-2.499 6.108-5.457 6.108-2.786 0-4.452-1.908-5.083-3.465l2.192-.93c.392.96 1.35 2.085 2.891 2.085 1.896 0 3.064-1.204 3.064-3.445v-.841h-.087c-.564.714-1.656 1.33-3.025 1.33-2.872 0-5.495-2.554-5.495-5.842C206 9.584 208.633 7 211.495 7c1.37 0 2.46.626 3.025 1.311h.087v-.949H217zm-2.221 5.54c0-2.066-1.35-3.582-3.064-3.582-1.742 0-3.197 1.507-3.197 3.582 0 2.045 1.455 3.533 3.197 3.533 1.714 0 3.064-1.488 3.064-3.533z' fill='%234285F4' fill-rule='nonzero'/%3E%3Cpath fill='%2334A853' fill-rule='nonzero' d='M223 1v18h-3V1z'/%3E%3Cpath d='M232.844 14.973l2.046 1.363c-.662.981-2.256 2.664-5.014 2.664-3.42 0-5.876-2.634-5.876-6 0-3.566 2.487-6 5.585-6 3.119 0 4.643 2.474 5.144 3.816l.271.681-8.032 3.326c.612 1.202 1.574 1.823 2.918 1.823s2.276-.671 2.958-1.673zm-6.307-2.163l5.375-2.224c-.301-.751-1.184-1.272-2.237-1.272-1.343 0-3.208 1.182-3.138 3.496z' fill='%23E94235' fill-rule='nonzero'/%3E%3Cpath d='M6.576 19.384c-1.248 0-2.468-.408-3.66-1.224-1.192-.816-1.972-1.96-2.34-3.432l2.016-.816c.24.944.732 1.74 1.476 2.388.744.648 1.58.972 2.508.972.96 0 1.78-.252 2.46-.756.68-.504 1.02-1.188 1.02-2.052 0-.96-.34-1.7-1.02-2.22-.68-.52-1.756-1.004-3.228-1.452-1.52-.48-2.672-1.1-3.456-1.86-.784-.76-1.176-1.732-1.176-2.916 0-1.232.488-2.304 1.464-3.216.976-.912 2.248-1.368 3.816-1.368 1.456 0 2.64.364 3.552 1.092.912.728 1.504 1.524 1.776 2.388l-2.016.84c-.144-.544-.5-1.048-1.068-1.512-.568-.464-1.3-.696-2.196-.696-.848 0-1.572.236-2.172.708-.6.472-.9 1.06-.9 1.764 0 .64.276 1.18.828 1.62.552.44 1.364.836 2.436 1.188.848.272 1.556.536 2.124.792a9.842 9.842 0 0 1 1.728 1.02 4.065 4.065 0 0 1 1.32 1.584c.296.632.444 1.364.444 2.196 0 .832-.172 1.576-.516 2.232a4.19 4.19 0 0 1-1.368 1.56 6.875 6.875 0 0 1-3.852 1.176zM24.936 19h-2.112v-1.632h-.096c-.336.56-.848 1.036-1.536 1.428a4.345 4.345 0 0 1-2.184.588c-1.472 0-2.588-.448-3.348-1.344-.76-.896-1.14-2.096-1.14-3.6v-7.2h2.208v6.84c0 2.192.968 3.288 2.904 3.288.912 0 1.656-.368 2.232-1.104.576-.736.864-1.584.864-2.544V7.24h2.208V19zm8.904.384c-.896 0-1.7-.192-2.412-.576-.712-.384-1.244-.864-1.596-1.44h-.096V19h-2.112V1.816h2.208V7.24l-.096 1.632h.096c.352-.576.884-1.056 1.596-1.44.712-.384 1.516-.576 2.412-.576 1.52 0 2.832.6 3.936 1.8 1.104 1.2 1.656 2.688 1.656 4.464 0 1.776-.552 3.264-1.656 4.464-1.104 1.2-2.416 1.8-3.936 1.8zm-.36-2.016c1.024 0 1.904-.388 2.64-1.164.736-.776 1.104-1.804 1.104-3.084s-.368-2.308-1.104-3.084c-.736-.776-1.616-1.164-2.64-1.164-1.04 0-1.924.384-2.652 1.152-.728.768-1.092 1.8-1.092 3.096s.364 2.328 1.092 3.096c.728.768 1.612 1.152 2.652 1.152zm12.336 2.016c-1.312 0-2.396-.32-3.252-.96a5.682 5.682 0 0 1-1.884-2.4l1.968-.816c.624 1.472 1.688 2.208 3.192 2.208.688 0 1.252-.152 1.692-.456.44-.304.66-.704.66-1.2 0-.768-.536-1.288-1.608-1.56l-2.376-.576c-.752-.192-1.464-.556-2.136-1.092-.672-.536-1.008-1.26-1.008-2.172 0-1.04.46-1.884 1.38-2.532.92-.648 2.012-.972 3.276-.972 1.04 0 1.968.236 2.784.708a3.99 3.99 0 0 1 1.752 2.028l-1.92.792c-.432-1.04-1.328-1.56-2.688-1.56-.656 0-1.208.136-1.656.408-.448.272-.672.64-.672 1.104 0 .672.52 1.128 1.56 1.368l2.328.552c1.104.256 1.92.696 2.448 1.32.528.624.792 1.328.792 2.112 0 1.056-.432 1.936-1.296 2.64-.864.704-1.976 1.056-3.336 1.056zm11.928 0c-1.76 0-3.208-.596-4.344-1.788-1.136-1.192-1.704-2.684-1.704-4.476 0-1.792.568-3.284 1.704-4.476 1.136-1.192 2.584-1.788 4.344-1.788 1.312 0 2.4.32 3.264.96a5.621 5.621 0 0 1 1.896 2.424l-2.016.84c-.608-1.472-1.704-2.208-3.288-2.208-.976 0-1.836.4-2.58 1.2-.744.8-1.116 1.816-1.116 3.048s.372 2.248 1.116 3.048c.744.8 1.604 1.2 2.58 1.2 1.648 0 2.784-.736 3.408-2.208l1.968.84c-.4.96-1.044 1.764-1.932 2.412-.888.648-1.988.972-3.3.972zm9.36-.384h-2.208V7.24h2.112v1.92h.096c.224-.64.684-1.168 1.38-1.584.696-.416 1.372-.624 2.028-.624.656 0 1.208.096 1.656.288l-.84 2.064c-.288-.112-.68-.168-1.176-.168-.8 0-1.508.316-2.124.948-.616.632-.924 1.46-.924 2.484V19zm8.904-14.712a1.504 1.504 0 0 1-1.104.456c-.432 0-.8-.152-1.104-.456a1.504 1.504 0 0 1-.456-1.104c0-.432.152-.8.456-1.104a1.504 1.504 0 0 1 1.104-.456c.432 0 .8.152 1.104.456.304.304.456.672.456 1.104 0 .432-.152.8-.456 1.104zm0 14.712H73.8V7.24h2.208V19zm9.096.384c-.896 0-1.7-.192-2.412-.576-.712-.384-1.244-.864-1.596-1.44H81V19h-2.112V1.816h2.208V7.24L81 8.872h.096c.352-.576.884-1.056 1.596-1.44.712-.384 1.516-.576 2.412-.576 1.52 0 2.832.6 3.936 1.8 1.104 1.2 1.656 2.688 1.656 4.464 0 1.776-.552 3.264-1.656 4.464-1.104 1.2-2.416 1.8-3.936 1.8zm-.36-2.016c1.024 0 1.904-.388 2.64-1.164.736-.776 1.104-1.804 1.104-3.084s-.368-2.308-1.104-3.084c-.736-.776-1.616-1.164-2.64-1.164-1.04 0-1.924.384-2.652 1.152-.728.768-1.092 1.8-1.092 3.096s.364 2.328 1.092 3.096c.728.768 1.612 1.152 2.652 1.152zm13.296 2.016c-1.776 0-3.22-.592-4.332-1.776-1.112-1.184-1.668-2.68-1.668-4.488 0-1.712.54-3.184 1.62-4.416 1.08-1.232 2.46-1.848 4.14-1.848 1.744 0 3.14.568 4.188 1.704 1.048 1.136 1.572 2.656 1.572 4.56l-.024.408h-9.288c.064 1.184.46 2.12 1.188 2.808.728.688 1.58 1.032 2.556 1.032 1.584 0 2.656-.672 3.216-2.016l1.968.816c-.384.912-1.016 1.676-1.896 2.292-.88.616-1.96.924-3.24.924zm3.168-7.68c-.048-.672-.356-1.312-.924-1.92-.568-.608-1.412-.912-2.532-.912-.816 0-1.524.256-2.124.768-.6.512-1.012 1.2-1.236 2.064h6.816zM123.72 19h-2.256l-2.928-9.024L115.632 19H113.4l-3.792-11.76h2.304l2.616 8.88h.024l2.904-8.88h2.28l2.904 8.88h.024l2.592-8.88h2.256L123.72 19zm7.632-14.712a1.504 1.504 0 0 1-1.104.456c-.432 0-.8-.152-1.104-.456a1.504 1.504 0 0 1-.456-1.104c0-.432.152-.8.456-1.104a1.504 1.504 0 0 1 1.104-.456c.432 0 .8.152 1.104.456.304.304.456.672.456 1.104 0 .432-.152.8-.456 1.104zm0 14.712h-2.208V7.24h2.208V19zm7.968.192c-1.232 0-2.172-.328-2.82-.984-.648-.656-.972-1.584-.972-2.784V9.256h-2.064V7.24h2.064v-3.6h2.208v3.6h2.88v2.016h-2.88v6c0 1.28.528 1.92 1.584 1.92.4 0 .736-.064 1.008-.192l.768 1.896c-.48.208-1.072.312-1.776.312zm5.616-17.376V7.24l-.096 1.632h.096c.32-.56.824-1.036 1.512-1.428a4.389 4.389 0 0 1 2.208-.588c1.456 0 2.568.448 3.336 1.344.768.896 1.152 2.096 1.152 3.6V19h-2.208v-6.864c0-2.176-.968-3.264-2.904-3.264-.912 0-1.656.364-2.232 1.092-.576.728-.864 1.572-.864 2.532V19h-2.208V1.816h2.208z' fill='%235F6368'/%3E%3C/g%3E%3C/svg%3E\\\")}.swg-button-dark{background-color:#000}.swg-button-dark:after{background-image:url(\\\"data:image/svg+xml;charset=utf-8,%3Csvg width='235' height='24' xmlns='http://www.w3.org/2000/svg'%3E%3Cg fill='none' fill-rule='evenodd'%3E%3Cpath d='M169.367 19c-5.09 0-9.367-4.265-9.367-9.5s4.277-9.5 9.367-9.5c2.818 0 4.823 1.133 6.33 2.622l-1.775 1.827c-1.082-1.04-2.55-1.857-4.555-1.857-3.72 0-6.628 3.081-6.628 6.908 0 3.827 2.907 6.908 6.628 6.908 2.411 0 3.78-1 4.664-1.898.724-.745 1.19-1.806 1.37-3.265h-6.034V8.643h8.494c.09.459.139 1.02.139 1.622 0 1.95-.516 4.357-2.183 6.072-1.627 1.734-3.691 2.663-6.45 2.663z' fill='%234285F4' fill-rule='nonzero'/%3E%3Cpath d='M192 13c0 3.456-2.69 6-6 6s-6-2.544-6-6c0-3.476 2.69-6 6-6s6 2.524 6 6zm-2.63 0c0-2.164-1.563-3.636-3.37-3.636-1.807 0-3.37 1.482-3.37 3.636 0 2.134 1.563 3.636 3.37 3.636 1.807 0 3.37-1.492 3.37-3.636z' fill='%23E94235' fill-rule='nonzero'/%3E%3Cpath d='M205 13c0 3.456-2.69 6-6 6-3.3 0-6-2.544-6-6 0-3.476 2.69-6 6-6s6 2.524 6 6zm-2.62 0c0-2.164-1.563-3.636-3.37-3.636-1.807 0-3.37 1.482-3.37 3.636 0 2.134 1.563 3.636 3.37 3.636 1.807.01 3.37-1.492 3.37-3.636z' fill='%23FABB05' fill-rule='nonzero'/%3E%3Cpath d='M217 7.362v10.53c0 4.337-2.499 6.108-5.457 6.108-2.786 0-4.452-1.908-5.083-3.465l2.192-.93c.392.96 1.35 2.085 2.891 2.085 1.896 0 3.064-1.204 3.064-3.445v-.841h-.087c-.564.714-1.656 1.33-3.025 1.33-2.872 0-5.495-2.554-5.495-5.842C206 9.584 208.633 7 211.495 7c1.37 0 2.46.626 3.025 1.311h.087v-.949H217zm-2.221 5.54c0-2.066-1.35-3.582-3.064-3.582-1.742 0-3.197 1.507-3.197 3.582 0 2.045 1.455 3.533 3.197 3.533 1.714 0 3.064-1.488 3.064-3.533z' fill='%234285F4' fill-rule='nonzero'/%3E%3Cpath fill='%2334A853' fill-rule='nonzero' d='M223 1v18h-3V1z'/%3E%3Cpath d='M232.844 14.973l2.046 1.363c-.662.981-2.256 2.664-5.014 2.664-3.42 0-5.876-2.634-5.876-6 0-3.566 2.487-6 5.585-6 3.119 0 4.643 2.474 5.144 3.816l.271.681-8.032 3.326c.612 1.202 1.574 1.823 2.918 1.823s2.276-.671 2.958-1.673zm-6.307-2.163l5.375-2.224c-.301-.751-1.184-1.272-2.237-1.272-1.343 0-3.208 1.182-3.138 3.496z' fill='%23E94235' fill-rule='nonzero'/%3E%3Cpath d='M6.576 19.384c-1.248 0-2.468-.408-3.66-1.224-1.192-.816-1.972-1.96-2.34-3.432l2.016-.816c.24.944.732 1.74 1.476 2.388.744.648 1.58.972 2.508.972.96 0 1.78-.252 2.46-.756.68-.504 1.02-1.188 1.02-2.052 0-.96-.34-1.7-1.02-2.22-.68-.52-1.756-1.004-3.228-1.452-1.52-.48-2.672-1.1-3.456-1.86-.784-.76-1.176-1.732-1.176-2.916 0-1.232.488-2.304 1.464-3.216.976-.912 2.248-1.368 3.816-1.368 1.456 0 2.64.364 3.552 1.092.912.728 1.504 1.524 1.776 2.388l-2.016.84c-.144-.544-.5-1.048-1.068-1.512-.568-.464-1.3-.696-2.196-.696-.848 0-1.572.236-2.172.708-.6.472-.9 1.06-.9 1.764 0 .64.276 1.18.828 1.62.552.44 1.364.836 2.436 1.188.848.272 1.556.536 2.124.792a9.842 9.842 0 0 1 1.728 1.02 4.065 4.065 0 0 1 1.32 1.584c.296.632.444 1.364.444 2.196 0 .832-.172 1.576-.516 2.232a4.19 4.19 0 0 1-1.368 1.56 6.875 6.875 0 0 1-3.852 1.176zM24.936 19h-2.112v-1.632h-.096c-.336.56-.848 1.036-1.536 1.428a4.345 4.345 0 0 1-2.184.588c-1.472 0-2.588-.448-3.348-1.344-.76-.896-1.14-2.096-1.14-3.6v-7.2h2.208v6.84c0 2.192.968 3.288 2.904 3.288.912 0 1.656-.368 2.232-1.104.576-.736.864-1.584.864-2.544V7.24h2.208V19zm8.904.384c-.896 0-1.7-.192-2.412-.576-.712-.384-1.244-.864-1.596-1.44h-.096V19h-2.112V1.816h2.208V7.24l-.096 1.632h.096c.352-.576.884-1.056 1.596-1.44.712-.384 1.516-.576 2.412-.576 1.52 0 2.832.6 3.936 1.8 1.104 1.2 1.656 2.688 1.656 4.464 0 1.776-.552 3.264-1.656 4.464-1.104 1.2-2.416 1.8-3.936 1.8zm-.36-2.016c1.024 0 1.904-.388 2.64-1.164.736-.776 1.104-1.804 1.104-3.084s-.368-2.308-1.104-3.084c-.736-.776-1.616-1.164-2.64-1.164-1.04 0-1.924.384-2.652 1.152-.728.768-1.092 1.8-1.092 3.096s.364 2.328 1.092 3.096c.728.768 1.612 1.152 2.652 1.152zm12.336 2.016c-1.312 0-2.396-.32-3.252-.96a5.682 5.682 0 0 1-1.884-2.4l1.968-.816c.624 1.472 1.688 2.208 3.192 2.208.688 0 1.252-.152 1.692-.456.44-.304.66-.704.66-1.2 0-.768-.536-1.288-1.608-1.56l-2.376-.576c-.752-.192-1.464-.556-2.136-1.092-.672-.536-1.008-1.26-1.008-2.172 0-1.04.46-1.884 1.38-2.532.92-.648 2.012-.972 3.276-.972 1.04 0 1.968.236 2.784.708a3.99 3.99 0 0 1 1.752 2.028l-1.92.792c-.432-1.04-1.328-1.56-2.688-1.56-.656 0-1.208.136-1.656.408-.448.272-.672.64-.672 1.104 0 .672.52 1.128 1.56 1.368l2.328.552c1.104.256 1.92.696 2.448 1.32.528.624.792 1.328.792 2.112 0 1.056-.432 1.936-1.296 2.64-.864.704-1.976 1.056-3.336 1.056zm11.928 0c-1.76 0-3.208-.596-4.344-1.788-1.136-1.192-1.704-2.684-1.704-4.476 0-1.792.568-3.284 1.704-4.476 1.136-1.192 2.584-1.788 4.344-1.788 1.312 0 2.4.32 3.264.96a5.621 5.621 0 0 1 1.896 2.424l-2.016.84c-.608-1.472-1.704-2.208-3.288-2.208-.976 0-1.836.4-2.58 1.2-.744.8-1.116 1.816-1.116 3.048s.372 2.248 1.116 3.048c.744.8 1.604 1.2 2.58 1.2 1.648 0 2.784-.736 3.408-2.208l1.968.84c-.4.96-1.044 1.764-1.932 2.412-.888.648-1.988.972-3.3.972zm9.36-.384h-2.208V7.24h2.112v1.92h.096c.224-.64.684-1.168 1.38-1.584.696-.416 1.372-.624 2.028-.624.656 0 1.208.096 1.656.288l-.84 2.064c-.288-.112-.68-.168-1.176-.168-.8 0-1.508.316-2.124.948-.616.632-.924 1.46-.924 2.484V19zm8.904-14.712a1.504 1.504 0 0 1-1.104.456c-.432 0-.8-.152-1.104-.456a1.504 1.504 0 0 1-.456-1.104c0-.432.152-.8.456-1.104a1.504 1.504 0 0 1 1.104-.456c.432 0 .8.152 1.104.456.304.304.456.672.456 1.104 0 .432-.152.8-.456 1.104zm0 14.712H73.8V7.24h2.208V19zm9.096.384c-.896 0-1.7-.192-2.412-.576-.712-.384-1.244-.864-1.596-1.44H81V19h-2.112V1.816h2.208V7.24L81 8.872h.096c.352-.576.884-1.056 1.596-1.44.712-.384 1.516-.576 2.412-.576 1.52 0 2.832.6 3.936 1.8 1.104 1.2 1.656 2.688 1.656 4.464 0 1.776-.552 3.264-1.656 4.464-1.104 1.2-2.416 1.8-3.936 1.8zm-.36-2.016c1.024 0 1.904-.388 2.64-1.164.736-.776 1.104-1.804 1.104-3.084s-.368-2.308-1.104-3.084c-.736-.776-1.616-1.164-2.64-1.164-1.04 0-1.924.384-2.652 1.152-.728.768-1.092 1.8-1.092 3.096s.364 2.328 1.092 3.096c.728.768 1.612 1.152 2.652 1.152zm13.296 2.016c-1.776 0-3.22-.592-4.332-1.776-1.112-1.184-1.668-2.68-1.668-4.488 0-1.712.54-3.184 1.62-4.416 1.08-1.232 2.46-1.848 4.14-1.848 1.744 0 3.14.568 4.188 1.704 1.048 1.136 1.572 2.656 1.572 4.56l-.024.408h-9.288c.064 1.184.46 2.12 1.188 2.808.728.688 1.58 1.032 2.556 1.032 1.584 0 2.656-.672 3.216-2.016l1.968.816c-.384.912-1.016 1.676-1.896 2.292-.88.616-1.96.924-3.24.924zm3.168-7.68c-.048-.672-.356-1.312-.924-1.92-.568-.608-1.412-.912-2.532-.912-.816 0-1.524.256-2.124.768-.6.512-1.012 1.2-1.236 2.064h6.816zM123.72 19h-2.256l-2.928-9.024L115.632 19H113.4l-3.792-11.76h2.304l2.616 8.88h.024l2.904-8.88h2.28l2.904 8.88h.024l2.592-8.88h2.256L123.72 19zm7.632-14.712a1.504 1.504 0 0 1-1.104.456c-.432 0-.8-.152-1.104-.456a1.504 1.504 0 0 1-.456-1.104c0-.432.152-.8.456-1.104a1.504 1.504 0 0 1 1.104-.456c.432 0 .8.152 1.104.456.304.304.456.672.456 1.104 0 .432-.152.8-.456 1.104zm0 14.712h-2.208V7.24h2.208V19zm7.968.192c-1.232 0-2.172-.328-2.82-.984-.648-.656-.972-1.584-.972-2.784V9.256h-2.064V7.24h2.064v-3.6h2.208v3.6h2.88v2.016h-2.88v6c0 1.28.528 1.92 1.584 1.92.4 0 .736-.064 1.008-.192l.768 1.896c-.48.208-1.072.312-1.776.312zm5.616-17.376V7.24l-.096 1.632h.096c.32-.56.824-1.036 1.512-1.428a4.389 4.389 0 0 1 2.208-.588c1.456 0 2.568.448 3.336 1.344.768.896 1.152 2.096 1.152 3.6V19h-2.208v-6.864c0-2.176-.968-3.264-2.904-3.264-.912 0-1.656.364-2.232 1.092-.576.728-.864 1.572-.864 2.532V19h-2.208V1.816h2.208z' fill='%23FFF'/%3E%3C/g%3E%3C/svg%3E\\\")}.swg-button-light:hover,.swg-button:hover{background-color:#f8f8f8}.swg-button-light:focus,.swg-button:focus{box-shadow:#e8e8e8}.swg-button-light:active,.swg-button:active{background-color:#fff}.swg-button-dark:hover{background-color:#3c4043}.swg-button-dark:focus{box-shadow:#202124}.swg-button-dark:active{background-color:#5f6368}.swg-button-light:lang(ar):after,.swg-button:lang(ar):after{background-image:url(https://news.google.com/swg/js/v1/i18n/b-ar-lt.svg)}.swg-button-dark:lang(ar):after{background-image:url(https://news.google.com/swg/js/v1/i18n/b-ar-dk.svg)}.swg-button-light:lang(de):after,.swg-button:lang(de):after{background-image:url(https://news.google.com/swg/js/v1/i18n/b-de-lt.svg)}.swg-button-dark:lang(de):after{background-image:url(https://news.google.com/swg/js/v1/i18n/b-de-dk.svg)}.swg-button-light:lang(es):after,.swg-button:lang(es):after{background-image:url(https://news.google.com/swg/js/v1/i18n/b-es-lt.svg)}.swg-button-dark:lang(es):after{background-image:url(https://news.google.com/swg/js/v1/i18n/b-es-dk.svg)}.swg-button-light:lang(es-latam):after,.swg-button:lang(es-latam):after{background-image:url(https://news.google.com/swg/js/v1/i18n/b-es-latam-lt.svg)}.swg-button-dark:lang(es-latam):after{background-image:url(https://news.google.com/swg/js/v1/i18n/b-es-latam-dk.svg)}.swg-button-light:lang(es-latn):after,.swg-button:lang(es-latn):after{background-image:url(https://news.google.com/swg/js/v1/i18n/b-es-latam-lt.svg)}.swg-button-dark:lang(es-latn):after{background-image:url(https://news.google.com/swg/js/v1/i18n/b-es-latam-dk.svg)}.swg-button-light:lang(fr):after,.swg-button:lang(fr):after{background-image:url(https://news.google.com/swg/js/v1/i18n/b-fr-lt.svg)}.swg-button-dark:lang(fr):after{background-image:url(https://news.google.com/swg/js/v1/i18n/b-fr-dk.svg)}.swg-button-light:lang(hi):after,.swg-button:lang(hi):after{background-image:url(https://news.google.com/swg/js/v1/i18n/b-hi-lt.svg)}.swg-button-dark:lang(hi):after{background-image:url(https://news.google.com/swg/js/v1/i18n/b-hi-dk.svg)}.swg-button-light:lang(id):after,.swg-button:lang(id):after{background-image:url(https://news.google.com/swg/js/v1/i18n/b-id-lt.svg)}.swg-button-dark:lang(id):after{background-image:url(https://news.google.com/swg/js/v1/i18n/b-id-dk.svg)}.swg-button-light:lang(it):after,.swg-button:lang(it):after{background-image:url(https://news.google.com/swg/js/v1/i18n/b-it-lt.svg)}.swg-button-dark:lang(it):after{background-image:url(https://news.google.com/swg/js/v1/i18n/b-it-dk.svg)}.swg-button-light:lang(jp):after,.swg-button:lang(jp):after{background-image:url(https://news.google.com/swg/js/v1/i18n/b-jp-lt.svg)}.swg-button-dark:lang(jp):after{background-image:url(https://news.google.com/swg/js/v1/i18n/b-jp-dk.svg)}.swg-button-light:lang(ko):after,.swg-button:lang(ko):after{background-image:url(https://news.google.com/swg/js/v1/i18n/b-ko-lt.svg)}.swg-button-dark:lang(ko):after{background-image:url(https://news.google.com/swg/js/v1/i18n/b-ko-dk.svg)}.swg-button-light:lang(ms):after,.swg-button:lang(ms):after{background-image:url(https://news.google.com/swg/js/v1/i18n/b-ms-lt.svg)}.swg-button-dark:lang(ms):after{background-image:url(https://news.google.com/swg/js/v1/i18n/b-ms-dk.svg)}.swg-button-light:lang(nl):after,.swg-button:lang(nl):after{background-image:url(https://news.google.com/swg/js/v1/i18n/b-nl-lt.svg)}.swg-button-dark:lang(nl):after{background-image:url(https://news.google.com/swg/js/v1/i18n/b-nl-dk.svg)}.swg-button-light:lang(pl):after,.swg-button:lang(pl):after{background-image:url(https://news.google.com/swg/js/v1/i18n/b-pl-lt.svg)}.swg-button-dark:lang(pl):after{background-image:url(https://news.google.com/swg/js/v1/i18n/b-pl-dk.svg)}.swg-button-light:lang(pt):after,.swg-button:lang(pt):after{background-image:url(https://news.google.com/swg/js/v1/i18n/b-pt-lt.svg)}.swg-button-dark:lang(pt):after{background-image:url(https://news.google.com/swg/js/v1/i18n/b-pt-dk.svg)}.swg-button-light:lang(pt-br):after,.swg-button:lang(pt-br):after{background-image:url(https://news.google.com/swg/js/v1/i18n/b-pt-br-lt.svg)}.swg-button-dark:lang(pt-br):after{background-image:url(https://news.google.com/swg/js/v1/i18n/b-pt-br-dk.svg)}.swg-button-light:lang(ru):after,.swg-button:lang(ru):after{background-image:url(https://news.google.com/swg/js/v1/i18n/b-ru-lt.svg)}.swg-button-dark:lang(ru):after{background-image:url(https://news.google.com/swg/js/v1/i18n/b-ru-dk.svg)}.swg-button-light:lang(se):after,.swg-button:lang(se):after{background-image:url(https://news.google.com/swg/js/v1/i18n/b-se-lt.svg)}.swg-button-dark:lang(se):after{background-image:url(https://news.google.com/swg/js/v1/i18n/b-se-dk.svg)}.swg-button-light:lang(th):after,.swg-button:lang(th):after{background-image:url(https://news.google.com/swg/js/v1/i18n/b-th-lt.svg)}.swg-button-dark:lang(th):after{background-image:url(https://news.google.com/swg/js/v1/i18n/b-th-dk.svg)}.swg-button-light:lang(tr):after,.swg-button:lang(tr):after{background-image:url(https://news.google.com/swg/js/v1/i18n/b-tr-lt.svg)}.swg-button-dark:lang(tr):after{background-image:url(https://news.google.com/swg/js/v1/i18n/b-tr-dk.svg)}.swg-button-light:lang(uk):after,.swg-button:lang(uk):after{background-image:url(https://news.google.com/swg/js/v1/i18n/b-uk-lt.svg)}.swg-button-dark:lang(uk):after{background-image:url(https://news.google.com/swg/js/v1/i18n/b-uk-dk.svg)}.swg-button-light:lang(zh-tw):after,.swg-button:lang(zh-tw):after{background-image:url(https://news.google.com/swg/js/v1/i18n/b-zh-tw-lt.svg)}.swg-button-dark:lang(zh-tw):after{background-image:url(https://news.google.com/swg/js/v1/i18n/b-zh-tw-dk.svg)}\\n/*# sourceURL=/extensions/amp-subscriptions-google/0.1/amp-subscriptions-google.css*/\";\n","/**\n * Copyright 2018 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {CSS} from '../../../build/amp-subscriptions-google-0.1.css';\nimport {\n  ConfiguredRuntime,\n  Fetcher,\n  SubscribeResponse,\n} from '../../../third_party/subscriptions-project/swg';\nimport {DocImpl} from '../../amp-subscriptions/0.1/doc-impl';\nimport {Entitlement, GrantReason} from '../../amp-subscriptions/0.1/entitlement';\nimport {PageConfig} from '../../../third_party/subscriptions-project/config';\nimport {Services} from '../../../src/services';\nimport {installStylesForDoc} from '../../../src/style-installer';\nimport {parseUrlDeprecated} from '../../../src/url';\n\nconst TAG = 'amp-subscriptions-google';\nconst PLATFORM_ID = 'subscribe.google.com';\nconst GOOGLE_DOMAIN_RE = /(^|\\.)google\\.(com?|[a-z]{2}|com?\\.[a-z]{2}|cat)$/;\n\n\n/**\n */\nexport class GoogleSubscriptionsPlatformService {\n  /**\n   * @param {!../../../src/service/ampdoc-impl.AmpDoc} ampdoc\n   */\n  constructor(ampdoc) {\n    /** @private {!../../../src/service/ampdoc-impl.AmpDoc} */\n    this.ampdoc_ = ampdoc;\n  }\n\n  /**\n   * @param {!JsonObject} platformConfig\n   * @param {!../../amp-subscriptions/0.1/service-adapter.ServiceAdapter} serviceAdapter\n   * @return {!GoogleSubscriptionsPlatform}\n   */\n  createPlatform(platformConfig, serviceAdapter) {\n    return new GoogleSubscriptionsPlatform(this.ampdoc_,\n        platformConfig, serviceAdapter);\n  }\n}\n\n\n/**\n * @implements {../../amp-subscriptions/0.1/subscription-platform.SubscriptionPlatform}\n */\nexport class GoogleSubscriptionsPlatform {\n\n  /**\n   * @param {!../../../src/service/ampdoc-impl.AmpDoc} ampdoc\n   * @param {!JsonObject} platformConfig\n   * @param {!../../amp-subscriptions/0.1/service-adapter.ServiceAdapter} serviceAdapter\n   */\n  constructor(ampdoc, platformConfig, serviceAdapter) {\n    /**\n     * @private @const\n     * {!../../amp-subscriptions/0.1/service-adapter.ServiceAdapter}\n     */\n    this.serviceAdapter_ = serviceAdapter;\n    /** @private @const {!ConfiguredRuntime} */\n    this.runtime_ = new ConfiguredRuntime(\n        new DocImpl(ampdoc),\n        serviceAdapter.getPageConfig(),\n        {\n          fetcher: new AmpFetcher(ampdoc.win),\n        }\n    );\n    this.runtime_.setOnLoginRequest(request => {\n      this.onLoginRequest_(request && request.linkRequested);\n    });\n    this.runtime_.setOnLinkComplete(() => {\n      this.onLinkComplete_();\n    });\n    this.runtime_.setOnNativeSubscribeRequest(() => {\n      this.onNativeSubscribeRequest_();\n    });\n    this.runtime_.setOnSubscribeResponse(promise => {\n      promise.then(response => {\n        this.onSubscribeResponse_(response);\n      });\n    });\n\n    /** @const @private {!JsonObject} */\n    this.serviceConfig_ = platformConfig;\n\n    /** @private {boolean} */\n    this.isGoogleViewer_ = false;\n    this.resolveGoogleViewer_(Services.viewerForDoc(ampdoc));\n\n    // Install styles.\n    installStylesForDoc(ampdoc, CSS, () => {}, false, TAG);\n  }\n\n  /**\n   * @param {boolean} linkRequested\n   * @private\n   */\n  onLoginRequest_(linkRequested) {\n    if (linkRequested && this.isGoogleViewer_) {\n      this.runtime_.linkAccount();\n    } else {\n      this.maybeComplete_(this.serviceAdapter_.delegateActionToLocal(\n          'login'));\n    }\n  }\n\n  /** @private */\n  onLinkComplete_() {\n    this.runtime_.reset();\n    this.serviceAdapter_.reAuthorizePlatform(this);\n  }\n\n  /** @private */\n  onNativeSubscribeRequest_() {\n    this.maybeComplete_(this.serviceAdapter_.delegateActionToLocal(\n        'subscribe'));\n  }\n\n  /**\n   * @param {!Promise<boolean>} promise\n   * @private\n   */\n  maybeComplete_(promise) {\n    promise.then(result => {\n      if (result) {\n        this.runtime_.reset();\n      }\n    });\n  }\n\n  /**\n   * @param {!SubscribeResponse} response\n   * @private\n   */\n  onSubscribeResponse_(response) {\n    response.complete().then(() => {\n      this.runtime_.reset();\n      this.serviceAdapter_.reAuthorizePlatform(this);\n    });\n  }\n\n  /** @override */\n  getEntitlements() {\n    return this.runtime_.getEntitlements().then(swgEntitlements => {\n      const swgEntitlement = swgEntitlements.getEntitlementForThis();\n      if (!swgEntitlement) {\n        return null;\n      }\n      swgEntitlements.ack();\n      return new Entitlement({\n        source: swgEntitlement.source,\n        raw: swgEntitlements.raw,\n        service: PLATFORM_ID,\n        granted: true, //swgEntitlements.getEntitlementForThis makes sure this is true.\n        grantReason: GrantReason.SUBSCRIBER, // there is no other case of subscription for SWG as of now.\n        dataObject: swgEntitlement.json(),\n      });\n    });\n  }\n\n  /** @override */\n  getServiceId() {\n    return PLATFORM_ID;\n  }\n\n  /** @override */\n  activate(entitlement) {\n    // Offers or abbreviated offers may need to be shown depending on\n    // whether the access has been granted and whether user is a subscriber.\n    if (!entitlement.granted) {\n      this.runtime_.showOffers({list: 'amp'});\n    } else if (!entitlement.isSubscriber()) {\n      this.runtime_.showAbbrvOffer({list: 'amp'});\n    }\n  }\n\n  /**\n   * Returns if pingback is enabled for this platform\n   * @return {boolean}\n   */\n  isPingbackEnabled() {\n    return false;\n  }\n\n  /**\n   * Performs the pingback to the subscription platform\n   */\n  pingback() {}\n\n  /** @override */\n  supportsCurrentViewer() {\n    return this.isGoogleViewer_;\n  }\n\n  /**\n   * @param {!../../../src/service/viewer-impl.Viewer} viewer\n   * @private\n   */\n  resolveGoogleViewer_(viewer) {\n    // This is a very light veiwer resolution since there's no real security\n    // implication - this only affects on-platform preferences.\n    const viewerUrl = viewer.getParam('viewerUrl');\n    if (viewerUrl) {\n      this.isGoogleViewer_ = GOOGLE_DOMAIN_RE.test(\n          parseUrlDeprecated(viewerUrl).hostname);\n    } else {\n      // This can only be resolved asynchronously in this case. However, the\n      // action execution must be done synchronously. Thus we have to allow\n      // a minimal race condition here.\n      viewer.getViewerOrigin().then(origin => {\n        if (origin) {\n          this.isGoogleViewer_ = GOOGLE_DOMAIN_RE.test(\n              parseUrlDeprecated(origin).hostname);\n        }\n      });\n    }\n  }\n\n  /** @override */\n  getBaseScore() {\n    return this.serviceConfig_['baseScore'] || 0;\n  }\n\n  /** @override */\n  executeAction(action) {\n    if (action === 'subscribe') {\n      this.runtime_.showOffers({list: 'amp', isClosable: true});\n      return Promise.resolve(true);\n    }\n    return Promise.resolve(false);\n  }\n\n  /** @override */\n  decorateUI(element, action, options) {\n    if (action === 'subscribe') {\n      element.textContent = '';\n      this.runtime_.attachButton(element, options, () => {});\n    }\n  }\n}\n\n\n/**\n * Adopts fetcher protocol required for SwG to AMP fetching rules.\n * @implements {Fetcher}\n */\nclass AmpFetcher {\n\n  /**\n   * @param {!Window} win\n   */\n  constructor(win) {\n    /** @const @private {!../../../src/service/xhr-impl.Xhr} */\n    this.xhr_ = Services.xhrFor(win);\n  }\n\n  /** @override */\n  fetchCredentialedJson(url) {\n    return this.xhr_.fetchJson(url, {\n      credentials: 'include',\n    }).then(response => response.json());\n  }\n}\n\n\n// Register the extension services.\nAMP.extension(TAG, '0.1', function(AMP) {\n  AMP.registerServiceForDoc('subscriptions-google', ampdoc => {\n    const platformService = new GoogleSubscriptionsPlatformService(ampdoc);\n    Services.subscriptionsServiceForDoc(ampdoc).then(service => {\n      service.registerPlatform(PLATFORM_ID,\n          (platformConfig, serviceAdapter) => {\n            return platformService.createPlatform(platformConfig,\n                serviceAdapter);\n          }\n      );\n    });\n    return platformService;\n  });\n});\n\n\n/**\n * TODO(dvoytenko): remove once compiler type checking is fixed for third_party.\n * @package @visibleForTesting\n */\nexport function getFetcherClassForTesting() {\n  return Fetcher;\n}\n\n/**\n * TODO(dvoytenko): remove once compiler type checking is fixed for third_party.\n * @package @visibleForTesting\n */\nexport function getPageConfigClassForTesting() {\n  return PageConfig;\n}\n\n/**\n * TODO(dvoytenko): remove once compiler type checking is fixed for third_party.\n * @package @visibleForTesting\n */\nexport function getSubscribeResponseClassForTesting() {\n  return SubscribeResponse;\n}\n","/**\n * Copyright 2018 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Doc} from '../../../third_party/subscriptions-project/config';\nimport {dev} from '../../../src/log';\n\n\n/**\n * Adopts config document to ampdoc.\n * @implements {Doc}\n */\nexport class DocImpl {\n\n  /**\n   * @param {!../../../src/service/ampdoc-impl.AmpDoc} ampdoc\n   */\n  constructor(ampdoc) {\n    /** @private @const {!../../../src/service/ampdoc-impl.AmpDoc} */\n    this.ampdoc_ = ampdoc;\n  }\n\n  /** @override */\n  getWin() {\n    return this.ampdoc_.win;\n  }\n\n  /** @override */\n  getRootNode() {\n    return this.ampdoc_.getRootNode();\n  }\n\n  /** @override */\n  getRootElement() {\n    const root = this.ampdoc_.getRootNode();\n    return dev().assertElement(root.documentElement || root.body || root);\n  }\n\n  /** @override */\n  getHead() {\n    return dev().assertElement(this.ampdoc_.getHeadNode());\n  }\n\n  /** @override */\n  getBody() {\n    return this.ampdoc_.isBodyAvailable() ? this.ampdoc_.getBody() : null;\n  }\n\n  /** @override */\n  isReady() {\n    return this.ampdoc_.isReady();\n  }\n\n  /** @override */\n  whenReady() {\n    return this.ampdoc_.whenReady();\n  }\n}\n\n\n/** @package Visible for testing only. */\nexport function getDocClassForTesting() {\n  return Doc;\n}\n","/**\n * Copyright 2018 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport {dict} from '../../../src/utils/object';\n\n/** @enum {string} */\nexport const GrantReason = {\n  'SUBSCRIBER': 'SUBSCRIBER',\n  'METERING': 'METERING',\n};\n\n/**\n * The single entitlement object.\n */\nexport class Entitlement {\n\n  /**\n   * @param {string} service\n   * @return {!Entitlement}\n   */\n  static empty(service) {\n    return new Entitlement({\n      source: '',\n      raw: '',\n      service,\n      granted: false,\n    });\n  }\n\n  /**\n   * @param {Object} input\n   * @param {string} [input.source]\n   * @param {string} [input.raw]\n   * @param {string} [input.service]\n   * @param {boolean} [input.granted]\n   * @param {?GrantReason} [input.grantReason]\n   * @param {?JsonObject} [input.dataObject]\n   */\n  constructor({source, raw = '', service, granted = false,\n    grantReason = '', dataObject}) {\n    /** @const {string} */\n    this.raw = raw;\n    /** @const {string} */\n    this.source = source;\n    /** {string} */\n    this.service = service;\n    /** @const {boolean} */\n    this.granted = granted;\n    /** @const {?string} */\n    this.grantReason = grantReason;\n    /** @const {?JsonObject} */\n    this.data = dataObject;\n  }\n\n  /**\n   * Returns json format of entitlements\n   * @return {!JsonObject}\n   */\n  json() {\n    const entitlementJson = dict({\n      'source': this.source,\n      'service': this.service,\n      'granted': this.granted,\n      'grantReason': this.grantReason,\n      'data': this.data,\n    });\n    return (entitlementJson);\n  }\n\n  /**\n   * Returns json to be used for pingback.\n   *\n   * @return {!JsonObject}\n   */\n  jsonForPingback() {\n    return /** @type {!JsonObject} */ (Object.assign({},\n        {'raw': this.raw},\n        this.json()));\n  }\n\n  /**\n   * @param {?JsonObject} json\n   * @param {?string} rawData\n   * @return {!Entitlement}\n   */\n  static parseFromJson(json, rawData = null) {\n    if (!json) {\n      json = dict();\n    }\n    const raw = rawData || JSON.stringify(json);\n    const source = json['source'] || '';\n    const granted = json['granted'] || false;\n    const grantReason = json['grantReason'];\n    const dataObject = json['data'] || null;\n    return new Entitlement({source, raw, service: '',\n      granted, grantReason, dataObject});\n  }\n\n  /**\n   * Returns if the user is a subscriber.\n   * @return {boolean}\n   */\n  isSubscriber() {\n    return this.granted && this.grantReason === GrantReason.SUBSCRIBER;\n  }\n}\n","/*!\n\nCopyright (C) 2014-2016 by Andrea Giammarchi - @WebReflection\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\n*/\n// global window Object\n// optional polyfill info\n//    'auto' used by default, everything is feature detected\n//    'force' use the polyfill even if not fully needed\nfunction installCustomElements(window, polyfill) {'use strict';\n\n  // DO NOT USE THIS FILE DIRECTLY, IT WON'T WORK\n  // THIS IS A PROJECT BASED ON A BUILD SYSTEM\n  // THIS FILE IS JUST WRAPPED UP RESULTING IN\n  // build/document-register-element.node.js\n\n  var\n    document = window.document,\n    Object = window.Object\n  ;\n\n  var htmlClass = (function (info) {\n    // (C) Andrea Giammarchi - @WebReflection - MIT Style\n    var\n      catchClass = /^[A-Z]+[a-z]/,\n      filterBy = function (re) {\n        var arr = [], tag;\n        for (tag in register) {\n          if (re.test(tag)) arr.push(tag);\n        }\n        return arr;\n      },\n      add = function (Class, tag) {\n        tag = tag.toLowerCase();\n        if (!(tag in register)) {\n          register[Class] = (register[Class] || []).concat(tag);\n          register[tag] = (register[tag.toUpperCase()] = Class);\n        }\n      },\n      register = (Object.create || Object)(null),\n      htmlClass = {},\n      i, section, tags, Class\n    ;\n    for (section in info) {\n      for (Class in info[section]) {\n        tags = info[section][Class];\n        register[Class] = tags;\n        for (i = 0; i < tags.length; i++) {\n          register[tags[i].toLowerCase()] =\n          register[tags[i].toUpperCase()] = Class;\n        }\n      }\n    }\n    htmlClass.get = function get(tagOrClass) {\n      return typeof tagOrClass === 'string' ?\n        (register[tagOrClass] || (catchClass.test(tagOrClass) ? [] : '')) :\n        filterBy(tagOrClass);\n    };\n    htmlClass.set = function set(tag, Class) {\n      return (catchClass.test(tag) ?\n        add(tag, Class) :\n        add(Class, tag)\n      ), htmlClass;\n    };\n    return htmlClass;\n  }({\n    \"collections\": {\n      \"HTMLAllCollection\": [\n        \"all\"\n      ],\n      \"HTMLCollection\": [\n        \"forms\"\n      ],\n      \"HTMLFormControlsCollection\": [\n        \"elements\"\n      ],\n      \"HTMLOptionsCollection\": [\n        \"options\"\n      ]\n    },\n    \"elements\": {\n      \"Element\": [\n        \"element\"\n      ],\n      \"HTMLAnchorElement\": [\n        \"a\"\n      ],\n      \"HTMLAppletElement\": [\n        \"applet\"\n      ],\n      \"HTMLAreaElement\": [\n        \"area\"\n      ],\n      \"HTMLAttachmentElement\": [\n        \"attachment\"\n      ],\n      \"HTMLAudioElement\": [\n        \"audio\"\n      ],\n      \"HTMLBRElement\": [\n        \"br\"\n      ],\n      \"HTMLBaseElement\": [\n        \"base\"\n      ],\n      \"HTMLBodyElement\": [\n        \"body\"\n      ],\n      \"HTMLButtonElement\": [\n        \"button\"\n      ],\n      \"HTMLCanvasElement\": [\n        \"canvas\"\n      ],\n      \"HTMLContentElement\": [\n        \"content\"\n      ],\n      \"HTMLDListElement\": [\n        \"dl\"\n      ],\n      \"HTMLDataElement\": [\n        \"data\"\n      ],\n      \"HTMLDataListElement\": [\n        \"datalist\"\n      ],\n      \"HTMLDetailsElement\": [\n        \"details\"\n      ],\n      \"HTMLDialogElement\": [\n        \"dialog\"\n      ],\n      \"HTMLDirectoryElement\": [\n        \"dir\"\n      ],\n      \"HTMLDivElement\": [\n        \"div\"\n      ],\n      \"HTMLDocument\": [\n        \"document\"\n      ],\n      \"HTMLElement\": [\n        \"element\",\n        \"abbr\",\n        \"address\",\n        \"article\",\n        \"aside\",\n        \"b\",\n        \"bdi\",\n        \"bdo\",\n        \"cite\",\n        \"code\",\n        \"command\",\n        \"dd\",\n        \"dfn\",\n        \"dt\",\n        \"em\",\n        \"figcaption\",\n        \"figure\",\n        \"footer\",\n        \"header\",\n        \"i\",\n        \"kbd\",\n        \"mark\",\n        \"nav\",\n        \"noscript\",\n        \"rp\",\n        \"rt\",\n        \"ruby\",\n        \"s\",\n        \"samp\",\n        \"section\",\n        \"small\",\n        \"strong\",\n        \"sub\",\n        \"summary\",\n        \"sup\",\n        \"u\",\n        \"var\",\n        \"wbr\"\n      ],\n      \"HTMLEmbedElement\": [\n        \"embed\"\n      ],\n      \"HTMLFieldSetElement\": [\n        \"fieldset\"\n      ],\n      \"HTMLFontElement\": [\n        \"font\"\n      ],\n      \"HTMLFormElement\": [\n        \"form\"\n      ],\n      \"HTMLFrameElement\": [\n        \"frame\"\n      ],\n      \"HTMLFrameSetElement\": [\n        \"frameset\"\n      ],\n      \"HTMLHRElement\": [\n        \"hr\"\n      ],\n      \"HTMLHeadElement\": [\n        \"head\"\n      ],\n      \"HTMLHeadingElement\": [\n        \"h1\",\n        \"h2\",\n        \"h3\",\n        \"h4\",\n        \"h5\",\n        \"h6\"\n      ],\n      \"HTMLHtmlElement\": [\n        \"html\"\n      ],\n      \"HTMLIFrameElement\": [\n        \"iframe\"\n      ],\n      \"HTMLImageElement\": [\n        \"img\"\n      ],\n      \"HTMLInputElement\": [\n        \"input\"\n      ],\n      \"HTMLKeygenElement\": [\n        \"keygen\"\n      ],\n      \"HTMLLIElement\": [\n        \"li\"\n      ],\n      \"HTMLLabelElement\": [\n        \"label\"\n      ],\n      \"HTMLLegendElement\": [\n        \"legend\"\n      ],\n      \"HTMLLinkElement\": [\n        \"link\"\n      ],\n      \"HTMLMapElement\": [\n        \"map\"\n      ],\n      \"HTMLMarqueeElement\": [\n        \"marquee\"\n      ],\n      \"HTMLMediaElement\": [\n        \"media\"\n      ],\n      \"HTMLMenuElement\": [\n        \"menu\"\n      ],\n      \"HTMLMenuItemElement\": [\n        \"menuitem\"\n      ],\n      \"HTMLMetaElement\": [\n        \"meta\"\n      ],\n      \"HTMLMeterElement\": [\n        \"meter\"\n      ],\n      \"HTMLModElement\": [\n        \"del\",\n        \"ins\"\n      ],\n      \"HTMLOListElement\": [\n        \"ol\"\n      ],\n      \"HTMLObjectElement\": [\n        \"object\"\n      ],\n      \"HTMLOptGroupElement\": [\n        \"optgroup\"\n      ],\n      \"HTMLOptionElement\": [\n        \"option\"\n      ],\n      \"HTMLOutputElement\": [\n        \"output\"\n      ],\n      \"HTMLParagraphElement\": [\n        \"p\"\n      ],\n      \"HTMLParamElement\": [\n        \"param\"\n      ],\n      \"HTMLPictureElement\": [\n        \"picture\"\n      ],\n      \"HTMLPreElement\": [\n        \"pre\"\n      ],\n      \"HTMLProgressElement\": [\n        \"progress\"\n      ],\n      \"HTMLQuoteElement\": [\n        \"blockquote\",\n        \"q\",\n        \"quote\"\n      ],\n      \"HTMLScriptElement\": [\n        \"script\"\n      ],\n      \"HTMLSelectElement\": [\n        \"select\"\n      ],\n      \"HTMLShadowElement\": [\n        \"shadow\"\n      ],\n      \"HTMLSlotElement\": [\n        \"slot\"\n      ],\n      \"HTMLSourceElement\": [\n        \"source\"\n      ],\n      \"HTMLSpanElement\": [\n        \"span\"\n      ],\n      \"HTMLStyleElement\": [\n        \"style\"\n      ],\n      \"HTMLTableCaptionElement\": [\n        \"caption\"\n      ],\n      \"HTMLTableCellElement\": [\n        \"td\",\n        \"th\"\n      ],\n      \"HTMLTableColElement\": [\n        \"col\",\n        \"colgroup\"\n      ],\n      \"HTMLTableElement\": [\n        \"table\"\n      ],\n      \"HTMLTableRowElement\": [\n        \"tr\"\n      ],\n      \"HTMLTableSectionElement\": [\n        \"thead\",\n        \"tbody\",\n        \"tfoot\"\n      ],\n      \"HTMLTemplateElement\": [\n        \"template\"\n      ],\n      \"HTMLTextAreaElement\": [\n        \"textarea\"\n      ],\n      \"HTMLTimeElement\": [\n        \"time\"\n      ],\n      \"HTMLTitleElement\": [\n        \"title\"\n      ],\n      \"HTMLTrackElement\": [\n        \"track\"\n      ],\n      \"HTMLUListElement\": [\n        \"ul\"\n      ],\n      \"HTMLUnknownElement\": [\n        \"unknown\",\n        \"vhgroupv\",\n        \"vkeygen\"\n      ],\n      \"HTMLVideoElement\": [\n        \"video\"\n      ]\n    },\n    \"nodes\": {\n      \"Attr\": [\n        \"node\"\n      ],\n      \"Audio\": [\n        \"audio\"\n      ],\n      \"CDATASection\": [\n        \"node\"\n      ],\n      \"CharacterData\": [\n        \"node\"\n      ],\n      \"Comment\": [\n        \"#comment\"\n      ],\n      \"Document\": [\n        \"#document\"\n      ],\n      \"DocumentFragment\": [\n        \"#document-fragment\"\n      ],\n      \"DocumentType\": [\n        \"node\"\n      ],\n      \"HTMLDocument\": [\n        \"#document\"\n      ],\n      \"Image\": [\n        \"img\"\n      ],\n      \"Option\": [\n        \"option\"\n      ],\n      \"ProcessingInstruction\": [\n        \"node\"\n      ],\n      \"ShadowRoot\": [\n        \"#shadow-root\"\n      ],\n      \"Text\": [\n        \"#text\"\n      ],\n      \"XMLDocument\": [\n        \"xml\"\n      ]\n    }\n  }));\n  \n  \n    \n  // passed at runtime, configurable\n  // via nodejs module\n  if (!polyfill) polyfill = 'auto';\n  \n  var\n    // V0 polyfill entry\n    REGISTER_ELEMENT = 'registerElement',\n  \n    // IE < 11 only + old WebKit for attributes + feature detection\n    EXPANDO_UID = '__' + REGISTER_ELEMENT + (window.Math.random() * 10e4 >> 0),\n  \n    // shortcuts and costants\n    ADD_EVENT_LISTENER = 'addEventListener',\n    ATTACHED = 'attached',\n    CALLBACK = 'Callback',\n    DETACHED = 'detached',\n    EXTENDS = 'extends',\n  \n    ATTRIBUTE_CHANGED_CALLBACK = 'attributeChanged' + CALLBACK,\n    ATTACHED_CALLBACK = ATTACHED + CALLBACK,\n    CONNECTED_CALLBACK = 'connected' + CALLBACK,\n    DISCONNECTED_CALLBACK = 'disconnected' + CALLBACK,\n    CREATED_CALLBACK = 'created' + CALLBACK,\n    DETACHED_CALLBACK = DETACHED + CALLBACK,\n  \n    ADDITION = 'ADDITION',\n    MODIFICATION = 'MODIFICATION',\n    REMOVAL = 'REMOVAL',\n  \n    DOM_ATTR_MODIFIED = 'DOMAttrModified',\n    DOM_CONTENT_LOADED = 'DOMContentLoaded',\n    DOM_SUBTREE_MODIFIED = 'DOMSubtreeModified',\n  \n    PREFIX_TAG = '<',\n    PREFIX_IS = '=',\n  \n    // valid and invalid node names\n    validName = /^[A-Z][A-Z0-9]*(?:-[A-Z0-9]+)+$/,\n    invalidNames = [\n      'ANNOTATION-XML',\n      'COLOR-PROFILE',\n      'FONT-FACE',\n      'FONT-FACE-SRC',\n      'FONT-FACE-URI',\n      'FONT-FACE-FORMAT',\n      'FONT-FACE-NAME',\n      'MISSING-GLYPH'\n    ],\n  \n    // registered types and their prototypes\n    types = [],\n    protos = [],\n  \n    // to query subnodes\n    query = '',\n  \n    // html shortcut used to feature detect\n    documentElement = document.documentElement,\n  \n    // ES5 inline helpers || basic patches\n    indexOf = types.indexOf || function (v) {\n      for(var i = this.length; i-- && this[i] !== v;){}\n      return i;\n    },\n  \n    // other helpers / shortcuts\n    OP = Object.prototype,\n    hOP = OP.hasOwnProperty,\n    iPO = OP.isPrototypeOf,\n  \n    defineProperty = Object.defineProperty,\n    empty = [],\n    gOPD = Object.getOwnPropertyDescriptor,\n    gOPN = Object.getOwnPropertyNames,\n    gPO = Object.getPrototypeOf,\n    sPO = Object.setPrototypeOf,\n  \n    // jshint proto: true\n    hasProto = !!Object.__proto__,\n  \n    // V1 helpers\n    fixGetClass = false,\n    DRECEV1 = '__dreCEv1',\n    customElements = window.customElements,\n    usableCustomElements = polyfill !== 'force' && !!(\n      customElements &&\n      customElements.define &&\n      customElements.get &&\n      customElements.whenDefined\n    ),\n    Dict = Object.create || Object,\n    Map = window.Map || function Map() {\n      var K = [], V = [], i;\n      return {\n        get: function (k) {\n          return V[indexOf.call(K, k)];\n        },\n        set: function (k, v) {\n          i = indexOf.call(K, k);\n          if (i < 0) V[K.push(k) - 1] = v;\n          else V[i] = v;\n        }\n      };\n    },\n    Promise = window.Promise || function (fn) {\n      var\n        notify = [],\n        done = false,\n        p = {\n          'catch': function () {\n            return p;\n          },\n          'then': function (cb) {\n            notify.push(cb);\n            if (done) setTimeout(resolve, 1);\n            return p;\n          }\n        }\n      ;\n      function resolve(value) {\n        done = true;\n        while (notify.length) notify.shift()(value);\n      }\n      fn(resolve);\n      return p;\n    },\n    justCreated = false,\n    constructors = Dict(null),\n    waitingList = Dict(null),\n    nodeNames = new Map(),\n    secondArgument = function (is) {\n      return is.toLowerCase();\n    },\n  \n    // used to create unique instances\n    create = Object.create || function Bridge(proto) {\n      // silly broken polyfill probably ever used but short enough to work\n      return proto ? ((Bridge.prototype = proto), new Bridge()) : this;\n    },\n  \n    // will set the prototype if possible\n    // or copy over all properties\n    setPrototype = sPO || (\n      hasProto ?\n        function (o, p) {\n          o.__proto__ = p;\n          return o;\n        } : (\n      (gOPN && gOPD) ?\n        (function(){\n          function setProperties(o, p) {\n            for (var\n              key,\n              names = gOPN(p),\n              i = 0, length = names.length;\n              i < length; i++\n            ) {\n              key = names[i];\n              if (!hOP.call(o, key)) {\n                defineProperty(o, key, gOPD(p, key));\n              }\n            }\n          }\n          return function (o, p) {\n            do {\n              setProperties(o, p);\n            } while ((p = gPO(p)) && !iPO.call(p, o));\n            return o;\n          };\n        }()) :\n        function (o, p) {\n          for (var key in p) {\n            o[key] = p[key];\n          }\n          return o;\n        }\n    )),\n  \n    // DOM shortcuts and helpers, if any\n  \n    MutationObserver = window.MutationObserver ||\n                       window.WebKitMutationObserver,\n  \n    HTMLElementPrototype = (\n      window.HTMLElement ||\n      window.Element ||\n      window.Node\n    ).prototype,\n  \n    IE8 = !iPO.call(HTMLElementPrototype, documentElement),\n  \n    safeProperty = IE8 ? function (o, k, d) {\n      o[k] = d.value;\n      return o;\n    } : defineProperty,\n  \n    isValidNode = IE8 ?\n      function (node) {\n        return node.nodeType === 1;\n      } :\n      function (node) {\n        return iPO.call(HTMLElementPrototype, node);\n      },\n  \n    targets = IE8 && [],\n  \n    attachShadow = HTMLElementPrototype.attachShadow,\n    cloneNode = HTMLElementPrototype.cloneNode,\n    dispatchEvent = HTMLElementPrototype.dispatchEvent,\n    getAttribute = HTMLElementPrototype.getAttribute,\n    hasAttribute = HTMLElementPrototype.hasAttribute,\n    removeAttribute = HTMLElementPrototype.removeAttribute,\n    setAttribute = HTMLElementPrototype.setAttribute,\n  \n    // replaced later on\n    createElement = document.createElement,\n    patchedCreateElement = createElement,\n  \n    // shared observer for all attributes\n    attributesObserver = MutationObserver && {\n      attributes: true,\n      characterData: true,\n      attributeOldValue: true\n    },\n  \n    // useful to detect only if there's no MutationObserver\n    DOMAttrModified = MutationObserver || function(e) {\n      doesNotSupportDOMAttrModified = false;\n      documentElement.removeEventListener(\n        DOM_ATTR_MODIFIED,\n        DOMAttrModified\n      );\n    },\n  \n    // will both be used to make DOMNodeInserted asynchronous\n    asapQueue,\n    asapTimer = 0,\n  \n    // internal flags\n    V0 = REGISTER_ELEMENT in document,\n    setListener = true,\n    justSetup = false,\n    doesNotSupportDOMAttrModified = true,\n    dropDomContentLoaded = true,\n  \n    // needed for the innerHTML helper\n    notFromInnerHTMLHelper = true,\n  \n    // optionally defined later on\n    onSubtreeModified,\n    callDOMAttrModified,\n    getAttributesMirror,\n    observer,\n    observe,\n  \n    // based on setting prototype capability\n    // will check proto or the expando attribute\n    // in order to setup the node once\n    patchIfNotAlready,\n    patch\n  ;\n  \n  // only if needed\n  if (!V0) {\n  \n    if (sPO || hasProto) {\n        patchIfNotAlready = function (node, proto) {\n          if (!iPO.call(proto, node)) {\n            setupNode(node, proto);\n          }\n        };\n        patch = setupNode;\n    } else {\n        patchIfNotAlready = function (node, proto) {\n          if (!node[EXPANDO_UID]) {\n            node[EXPANDO_UID] = Object(true);\n            setupNode(node, proto);\n          }\n        };\n        patch = patchIfNotAlready;\n    }\n  \n    if (IE8) {\n      doesNotSupportDOMAttrModified = false;\n      (function (){\n        var\n          descriptor = gOPD(HTMLElementPrototype, ADD_EVENT_LISTENER),\n          addEventListener = descriptor.value,\n          patchedRemoveAttribute = function (name) {\n            var e = new CustomEvent(DOM_ATTR_MODIFIED, {bubbles: true});\n            e.attrName = name;\n            e.prevValue = getAttribute.call(this, name);\n            e.newValue = null;\n            e[REMOVAL] = e.attrChange = 2;\n            removeAttribute.call(this, name);\n            dispatchEvent.call(this, e);\n          },\n          patchedSetAttribute = function (name, value) {\n            var\n              had = hasAttribute.call(this, name),\n              old = had && getAttribute.call(this, name),\n              e = new CustomEvent(DOM_ATTR_MODIFIED, {bubbles: true})\n            ;\n            setAttribute.call(this, name, value);\n            e.attrName = name;\n            e.prevValue = had ? old : null;\n            e.newValue = value;\n            if (had) {\n              e[MODIFICATION] = e.attrChange = 1;\n            } else {\n              e[ADDITION] = e.attrChange = 0;\n            }\n            dispatchEvent.call(this, e);\n          },\n          onPropertyChange = function (e) {\n            // jshint eqnull:true\n            var\n              node = e.currentTarget,\n              superSecret = node[EXPANDO_UID],\n              propertyName = e.propertyName,\n              event\n            ;\n            if (superSecret.hasOwnProperty(propertyName)) {\n              superSecret = superSecret[propertyName];\n              event = new CustomEvent(DOM_ATTR_MODIFIED, {bubbles: true});\n              event.attrName = superSecret.name;\n              event.prevValue = superSecret.value || null;\n              event.newValue = (superSecret.value = node[propertyName] || null);\n              if (event.prevValue == null) {\n                event[ADDITION] = event.attrChange = 0;\n              } else {\n                event[MODIFICATION] = event.attrChange = 1;\n              }\n              dispatchEvent.call(node, event);\n            }\n          }\n        ;\n        descriptor.value = function (type, handler, capture) {\n          if (\n            type === DOM_ATTR_MODIFIED &&\n            this[ATTRIBUTE_CHANGED_CALLBACK] &&\n            this.setAttribute !== patchedSetAttribute\n          ) {\n            this[EXPANDO_UID] = {\n              className: {\n                name: 'class',\n                value: this.className\n              }\n            };\n            this.setAttribute = patchedSetAttribute;\n            this.removeAttribute = patchedRemoveAttribute;\n            addEventListener.call(this, 'propertychange', onPropertyChange);\n          }\n          addEventListener.call(this, type, handler, capture);\n        };\n        defineProperty(HTMLElementPrototype, ADD_EVENT_LISTENER, descriptor);\n      }());\n    } else if (!MutationObserver) {\n      documentElement[ADD_EVENT_LISTENER](DOM_ATTR_MODIFIED, DOMAttrModified);\n      documentElement.setAttribute(EXPANDO_UID, 1);\n      documentElement.removeAttribute(EXPANDO_UID);\n      if (doesNotSupportDOMAttrModified) {\n        onSubtreeModified = function (e) {\n          var\n            node = this,\n            oldAttributes,\n            newAttributes,\n            key\n          ;\n          if (node === e.target) {\n            oldAttributes = node[EXPANDO_UID];\n            node[EXPANDO_UID] = (newAttributes = getAttributesMirror(node));\n            for (key in newAttributes) {\n              if (!(key in oldAttributes)) {\n                // attribute was added\n                return callDOMAttrModified(\n                  0,\n                  node,\n                  key,\n                  oldAttributes[key],\n                  newAttributes[key],\n                  ADDITION\n                );\n              } else if (newAttributes[key] !== oldAttributes[key]) {\n                // attribute was changed\n                return callDOMAttrModified(\n                  1,\n                  node,\n                  key,\n                  oldAttributes[key],\n                  newAttributes[key],\n                  MODIFICATION\n                );\n              }\n            }\n            // checking if it has been removed\n            for (key in oldAttributes) {\n              if (!(key in newAttributes)) {\n                // attribute removed\n                return callDOMAttrModified(\n                  2,\n                  node,\n                  key,\n                  oldAttributes[key],\n                  newAttributes[key],\n                  REMOVAL\n                );\n              }\n            }\n          }\n        };\n        callDOMAttrModified = function (\n          attrChange,\n          currentTarget,\n          attrName,\n          prevValue,\n          newValue,\n          action\n        ) {\n          var e = {\n            attrChange: attrChange,\n            currentTarget: currentTarget,\n            attrName: attrName,\n            prevValue: prevValue,\n            newValue: newValue\n          };\n          e[action] = attrChange;\n          onDOMAttrModified(e);\n        };\n        getAttributesMirror = function (node) {\n          for (var\n            attr, name,\n            result = {},\n            attributes = node.attributes,\n            i = 0, length = attributes.length;\n            i < length; i++\n          ) {\n            attr = attributes[i];\n            name = attr.name;\n            if (name !== 'setAttribute') {\n              result[name] = attr.value;\n            }\n          }\n          return result;\n        };\n      }\n    }\n  \n    // set as enumerable, writable and configurable\n    document[REGISTER_ELEMENT] = function registerElement(type, options) {\n      upperType = type.toUpperCase();\n      if (setListener) {\n        // only first time document.registerElement is used\n        // we need to set this listener\n        // setting it by default might slow down for no reason\n        setListener = false;\n        if (MutationObserver) {\n          observer = (function(attached, detached){\n            function checkEmAll(list, callback) {\n              for (var i = 0, length = list.length; i < length; callback(list[i++])){}\n            }\n            return new MutationObserver(function (records) {\n              for (var\n                current, node, newValue,\n                i = 0, length = records.length; i < length; i++\n              ) {\n                current = records[i];\n                if (current.type === 'childList') {\n                  checkEmAll(current.addedNodes, attached);\n                  checkEmAll(current.removedNodes, detached);\n                } else {\n                  node = current.target;\n                  if (notFromInnerHTMLHelper &&\n                      node[ATTRIBUTE_CHANGED_CALLBACK] &&\n                      current.attributeName !== 'style') {\n                    newValue = getAttribute.call(node, current.attributeName);\n                    if (newValue !== current.oldValue) {\n                      node[ATTRIBUTE_CHANGED_CALLBACK](\n                        current.attributeName,\n                        current.oldValue,\n                        newValue\n                      );\n                    }\n                  }\n                }\n              }\n            });\n          }(executeAction(ATTACHED), executeAction(DETACHED)));\n          observe = function (node) {\n            observer.observe(\n              node,\n              {\n                childList: true,\n                subtree: true\n              }\n            );\n            return node;\n          };\n          observe(document);\n          if (attachShadow) {\n            HTMLElementPrototype.attachShadow = function () {\n              return observe(attachShadow.apply(this, arguments));\n            };\n          }\n        } else {\n          asapQueue = [];\n          document[ADD_EVENT_LISTENER]('DOMNodeInserted', onDOMNode(ATTACHED));\n          document[ADD_EVENT_LISTENER]('DOMNodeRemoved', onDOMNode(DETACHED));\n        }\n  \n        document[ADD_EVENT_LISTENER](DOM_CONTENT_LOADED, onReadyStateChange);\n        document[ADD_EVENT_LISTENER]('readystatechange', onReadyStateChange);\n  \n        HTMLElementPrototype.cloneNode = function (deep) {\n          var\n            node = cloneNode.call(this, !!deep),\n            i = getTypeIndex(node)\n          ;\n          if (-1 < i) patch(node, protos[i]);\n          if (deep && query.length) loopAndSetup(node.querySelectorAll(query));\n          return node;\n        };\n      }\n  \n      if (justSetup) return (justSetup = false);\n  \n      if (-2 < (\n        indexOf.call(types, PREFIX_IS + upperType) +\n        indexOf.call(types, PREFIX_TAG + upperType)\n      )) {\n        throwTypeError(type);\n      }\n  \n      if (!validName.test(upperType) || -1 < indexOf.call(invalidNames, upperType)) {\n        throw new Error('The type ' + type + ' is invalid');\n      }\n  \n      var\n        constructor = function () {\n          return extending ?\n            document.createElement(nodeName, upperType) :\n            document.createElement(nodeName);\n        },\n        opt = options || OP,\n        extending = hOP.call(opt, EXTENDS),\n        nodeName = extending ? options[EXTENDS].toUpperCase() : upperType,\n        upperType,\n        i\n      ;\n  \n      if (extending && -1 < (\n        indexOf.call(types, PREFIX_TAG + nodeName)\n      )) {\n        throwTypeError(nodeName);\n      }\n  \n      i = types.push((extending ? PREFIX_IS : PREFIX_TAG) + upperType) - 1;\n  \n      query = query.concat(\n        query.length ? ',' : '',\n        extending ? nodeName + '[is=\"' + type.toLowerCase() + '\"]' : nodeName\n      );\n  \n      constructor.prototype = (\n        protos[i] = hOP.call(opt, 'prototype') ?\n          opt.prototype :\n          create(HTMLElementPrototype)\n      );\n  \n      if (query.length) loopAndVerify(\n        document.querySelectorAll(query),\n        ATTACHED\n      );\n  \n      return constructor;\n    };\n  \n    document.createElement = (patchedCreateElement = function (localName, typeExtension) {\n      var\n        is = getIs(typeExtension),\n        node = is ?\n          createElement.call(document, localName, secondArgument(is)) :\n          createElement.call(document, localName),\n        name = '' + localName,\n        i = indexOf.call(\n          types,\n          (is ? PREFIX_IS : PREFIX_TAG) +\n          (is || name).toUpperCase()\n        ),\n        setup = -1 < i\n      ;\n      if (is) {\n        node.setAttribute('is', is = is.toLowerCase());\n        if (setup) {\n          setup = isInQSA(name.toUpperCase(), is);\n        }\n      }\n      notFromInnerHTMLHelper = !document.createElement.innerHTMLHelper;\n      if (setup) patch(node, protos[i]);\n      return node;\n    });\n  \n  }\n  \n  function ASAP() {\n    var queue = asapQueue.splice(0, asapQueue.length);\n    asapTimer = 0;\n    while (queue.length) {\n      queue.shift().call(\n        null, queue.shift()\n      );\n    }\n  }\n  \n  function loopAndVerify(list, action) {\n    for (var i = 0, length = list.length; i < length; i++) {\n      verifyAndSetupAndAction(list[i], action);\n    }\n  }\n  \n  function loopAndSetup(list) {\n    for (var i = 0, length = list.length, node; i < length; i++) {\n      node = list[i];\n      patch(node, protos[getTypeIndex(node)]);\n    }\n  }\n  \n  function executeAction(action) {\n    return function (node) {\n      if (isValidNode(node)) {\n        verifyAndSetupAndAction(node, action);\n        if (query.length) loopAndVerify(\n          node.querySelectorAll(query),\n          action\n        );\n      }\n    };\n  }\n  \n  function getTypeIndex(target) {\n    var\n      is = getAttribute.call(target, 'is'),\n      nodeName = target.nodeName.toUpperCase(),\n      i = indexOf.call(\n        types,\n        is ?\n            PREFIX_IS + is.toUpperCase() :\n            PREFIX_TAG + nodeName\n      )\n    ;\n    return is && -1 < i && !isInQSA(nodeName, is) ? -1 : i;\n  }\n  \n  function isInQSA(name, type) {\n    return -1 < query.indexOf(name + '[is=\"' + type + '\"]');\n  }\n  \n  function onDOMAttrModified(e) {\n    var\n      node = e.currentTarget,\n      attrChange = e.attrChange,\n      attrName = e.attrName,\n      target = e.target,\n      addition = e[ADDITION] || 2,\n      removal = e[REMOVAL] || 3\n    ;\n    if (notFromInnerHTMLHelper &&\n        (!target || target === node) &&\n        node[ATTRIBUTE_CHANGED_CALLBACK] &&\n        attrName !== 'style' && (\n          e.prevValue !== e.newValue ||\n          // IE9, IE10, and Opera 12 gotcha\n          e.newValue === '' && (\n            attrChange === addition ||\n            attrChange === removal\n          )\n    )) {\n      node[ATTRIBUTE_CHANGED_CALLBACK](\n        attrName,\n        attrChange === addition ? null : e.prevValue,\n        attrChange === removal ? null : e.newValue\n      );\n    }\n  }\n  \n  function onDOMNode(action) {\n    var executor = executeAction(action);\n    return function (e) {\n      asapQueue.push(executor, e.target);\n      if (asapTimer) clearTimeout(asapTimer);\n      asapTimer = setTimeout(ASAP, 1);\n    };\n  }\n  \n  function onReadyStateChange(e) {\n    if (dropDomContentLoaded) {\n      dropDomContentLoaded = false;\n      e.currentTarget.removeEventListener(DOM_CONTENT_LOADED, onReadyStateChange);\n    }\n    if (query.length) loopAndVerify(\n      (e.target || document).querySelectorAll(query),\n      e.detail === DETACHED ? DETACHED : ATTACHED\n    );\n    if (IE8) purge();\n  }\n  \n  function patchedSetAttribute(name, value) {\n    // jshint validthis:true\n    var self = this;\n    setAttribute.call(self, name, value);\n    onSubtreeModified.call(self, {target: self});\n  }\n  \n  function setupNode(node, proto) {\n    setPrototype(node, proto);\n    if (observer) {\n      observer.observe(node, attributesObserver);\n    } else {\n      if (doesNotSupportDOMAttrModified) {\n        node.setAttribute = patchedSetAttribute;\n        node[EXPANDO_UID] = getAttributesMirror(node);\n        node[ADD_EVENT_LISTENER](DOM_SUBTREE_MODIFIED, onSubtreeModified);\n      }\n      node[ADD_EVENT_LISTENER](DOM_ATTR_MODIFIED, onDOMAttrModified);\n    }\n    if (node[CREATED_CALLBACK] && notFromInnerHTMLHelper) {\n      node.created = true;\n      node[CREATED_CALLBACK]();\n      node.created = false;\n    }\n  }\n  \n  function purge() {\n    for (var\n      node,\n      i = 0,\n      length = targets.length;\n      i < length; i++\n    ) {\n      node = targets[i];\n      if (!documentElement.contains(node)) {\n        length--;\n        targets.splice(i--, 1);\n        verifyAndSetupAndAction(node, DETACHED);\n      }\n    }\n  }\n  \n  function throwTypeError(type) {\n    throw new Error('A ' + type + ' type is already registered');\n  }\n  \n  function verifyAndSetupAndAction(node, action) {\n    var\n      fn,\n      i = getTypeIndex(node)\n    ;\n    if (-1 < i) {\n      patchIfNotAlready(node, protos[i]);\n      i = 0;\n      if (action === ATTACHED && !node[ATTACHED]) {\n        node[DETACHED] = false;\n        node[ATTACHED] = true;\n        i = 1;\n        if (IE8 && indexOf.call(targets, node) < 0) {\n          targets.push(node);\n        }\n      } else if (action === DETACHED && !node[DETACHED]) {\n        node[ATTACHED] = false;\n        node[DETACHED] = true;\n        i = 1;\n      }\n      if (i && (fn = node[action + CALLBACK])) fn.call(node);\n    }\n  }\n  \n  \n  \n  // V1 in da House!\n  function CustomElementRegistry() {}\n  \n  CustomElementRegistry.prototype = {\n    constructor: CustomElementRegistry,\n    // a workaround for the stubborn WebKit\n    define: usableCustomElements ?\n      function (name, Class, options) {\n        if (options) {\n          CERDefine(name, Class, options);\n        } else {\n          var NAME = name.toUpperCase();\n          constructors[NAME] = {\n            constructor: Class,\n            create: [NAME]\n          };\n          nodeNames.set(Class, NAME);\n          customElements.define(name, Class);\n        }\n      } :\n      CERDefine,\n    get: usableCustomElements ?\n      function (name) {\n        return customElements.get(name) || get(name);\n      } :\n      get,\n    whenDefined: usableCustomElements ?\n      function (name) {\n        return Promise.race([\n          customElements.whenDefined(name),\n          whenDefined(name)\n        ]);\n      } :\n      whenDefined\n  };\n  \n  function CERDefine(name, Class, options) {\n    var\n      is = options && options[EXTENDS] || '',\n      CProto = Class.prototype,\n      proto = create(CProto),\n      attributes = Class.observedAttributes || empty,\n      definition = {prototype: proto}\n    ;\n    // TODO: is this needed at all since it's inherited?\n    // defineProperty(proto, 'constructor', {value: Class});\n    safeProperty(proto, CREATED_CALLBACK, {\n        value: function () {\n          if (justCreated) justCreated = false;\n          else if (!this[DRECEV1]) {\n            this[DRECEV1] = true;\n            new Class(this);\n            if (CProto[CREATED_CALLBACK])\n              CProto[CREATED_CALLBACK].call(this);\n            var info = constructors[nodeNames.get(Class)];\n            if (!usableCustomElements || info.create.length > 1) {\n              notifyAttributes(this);\n            }\n          }\n      }\n    });\n    safeProperty(proto, ATTRIBUTE_CHANGED_CALLBACK, {\n      value: function (name) {\n        if (-1 < indexOf.call(attributes, name))\n          CProto[ATTRIBUTE_CHANGED_CALLBACK].apply(this, arguments);\n      }\n    });\n    if (CProto[CONNECTED_CALLBACK]) {\n      safeProperty(proto, ATTACHED_CALLBACK, {\n        value: CProto[CONNECTED_CALLBACK]\n      });\n    }\n    if (CProto[DISCONNECTED_CALLBACK]) {\n      safeProperty(proto, DETACHED_CALLBACK, {\n        value: CProto[DISCONNECTED_CALLBACK]\n      });\n    }\n    if (is) definition[EXTENDS] = is;\n    name = name.toUpperCase();\n    constructors[name] = {\n      constructor: Class,\n      create: is ? [is, secondArgument(name)] : [name]\n    };\n    nodeNames.set(Class, name);\n    document[REGISTER_ELEMENT](name.toLowerCase(), definition);\n    whenDefined(name);\n    waitingList[name].r();\n  }\n  \n  function get(name) {\n    var info = constructors[name.toUpperCase()];\n    return info && info.constructor;\n  }\n  \n  function getIs(options) {\n    return typeof options === 'string' ?\n        options : (options && options.is || '');\n  }\n  \n  function notifyAttributes(self) {\n    var\n      callback = self[ATTRIBUTE_CHANGED_CALLBACK],\n      attributes = callback ? self.attributes : empty,\n      i = attributes.length,\n      attribute\n    ;\n    while (i--) {\n      attribute =  attributes[i]; // || attributes.item(i);\n      callback.call(\n        self,\n        attribute.name || attribute.nodeName,\n        null,\n        attribute.value || attribute.nodeValue\n      );\n    }\n  }\n  \n  function whenDefined(name) {\n    name = name.toUpperCase();\n    if (!(name in waitingList)) {\n      waitingList[name] = {};\n      waitingList[name].p = new Promise(function (resolve) {\n        waitingList[name].r = resolve;\n      });\n    }\n    return waitingList[name].p;\n  }\n  \n  function polyfillV1() {\n    if (customElements) delete window.customElements;\n    defineProperty(window, 'customElements', {\n      configurable: true,\n      value: new CustomElementRegistry()\n    });\n    defineProperty(window, 'CustomElementRegistry', {\n      configurable: true,\n      value: CustomElementRegistry\n    });\n    for (var\n      patchClass = function (name) {\n        var Class = window[name];\n        if (Class) {\n          window[name] = function CustomElementsV1(self) {\n            var info, isNative;\n            if (!self) self = this;\n            if (!self[DRECEV1]) {\n              justCreated = true;\n              info = constructors[nodeNames.get(self.constructor)];\n              isNative = usableCustomElements && info.create.length === 1;\n              self = isNative ?\n                Reflect.construct(Class, empty, info.constructor) :\n                document.createElement.apply(document, info.create);\n              self[DRECEV1] = true;\n              justCreated = false;\n              if (!isNative) notifyAttributes(self);\n            }\n            return self;\n          };\n          window[name].prototype = Class.prototype;\n          try {\n            Class.prototype.constructor = window[name];\n          } catch(WebKit) {\n            fixGetClass = true;\n            defineProperty(Class, DRECEV1, {value: window[name]});\n          }\n        }\n      },\n      Classes = htmlClass.get(/^HTML[A-Z]*[a-z]/),\n      i = Classes.length;\n      i--;\n      patchClass(Classes[i])\n    ) {}\n    (document.createElement = function (name, options) {\n      var is = getIs(options);\n      return is ?\n        patchedCreateElement.call(this, name, secondArgument(is)) :\n        patchedCreateElement.call(this, name);\n    });\n    if (!V0) {\n      justSetup = true;\n      document[REGISTER_ELEMENT]('');\n    }\n  }\n  \n  // if customElements is not there at all\n  if (!customElements || polyfill === 'force') polyfillV1();\n  else {\n    // if available test extends work as expected\n    try {\n      (function (DRE, options, name) {\n        options[EXTENDS] = 'a';\n        DRE.prototype = create(HTMLAnchorElement.prototype);\n        DRE.prototype.constructor = DRE;\n        window.customElements.define(name, DRE, options);\n        if (\n          getAttribute.call(document.createElement('a', {is: name}), 'is') !== name ||\n          (usableCustomElements && getAttribute.call(new DRE(), 'is') !== name)\n        ) {\n          throw options;\n        }\n      }(\n        function DRE() {\n          return Reflect.construct(HTMLAnchorElement, [], DRE);\n        },\n        {},\n        'document-register-element-a'\n      ));\n    } catch(o_O) {\n      // or force the polyfill if not\n      // and keep internal original reference\n      polyfillV1();\n    }\n  }\n  \n  try {\n    createElement.call(document, 'a', 'a');\n  } catch(FireFox) {\n    secondArgument = function (is) {\n      return {is: is.toLowerCase()};\n    };\n  }\n  \n}\n\nexports.installCustomElements = installCustomElements;\n\n","'use strict';\n\n/**\n * Constructs a ES6/Promises A+ Promise instance.\n *\n * @constructor\n * @param {function(function(*=), function (*=))} resolver\n */\nfunction Promise(resolver) {\n  if (!(this instanceof Promise)) {\n    throw new TypeError('Constructor Promise requires `new`');\n  }\n  if (!isFunction(resolver)) {\n    throw new TypeError('Must pass resolver function');\n  }\n\n  /**\n   * @type {function(this:Promise,*=,function(*=),function(*=),Deferred):!Promise}\n   * @private\n   */\n  this._state = PendingPromise;\n\n  /**\n   * @type {*}\n   * @private\n   */\n  this._value = [];\n\n  /**\n   * @type {boolean}\n   * @private\n   */\n  this._isChainEnd = true;\n\n  doResolve(\n    this,\n    adopter(this, FulfilledPromise),\n    adopter(this, RejectedPromise),\n    { then: resolver }\n  );\n}\n\n/****************************\n  Public Instance Methods\n ****************************/\n\n/**\n * Creates a new promise instance that will receive the result of this promise\n * as inputs to the onFulfilled or onRejected callbacks.\n *\n * @param {function(*)} onFulfilled\n * @param {function(*)} onRejected\n */\nPromise.prototype.then = function(onFulfilled, onRejected) {\n  onFulfilled = isFunction(onFulfilled) ? onFulfilled : void 0;\n  onRejected = isFunction(onRejected) ? onRejected : void 0;\n\n  if (onFulfilled || onRejected) {\n    this._isChainEnd = false;\n  }\n\n  return this._state(\n    this._value,\n    onFulfilled,\n    onRejected\n  );\n};\n\n/**\n * Creates a new promise that will handle the rejected state of this promise.\n *\n * @param {function(*)} onRejected\n * @returns {!Promise}\n */\nPromise.prototype.catch = function(onRejected) {\n  return this.then(void 0, onRejected);\n};\n\n/****************************\n  Public Static Methods\n ****************************/\n\n/**\n * Creates a fulfilled Promise of value. If value is itself a then-able,\n * resolves with the then-able's value.\n *\n * @this {!Promise}\n * @param {*=} value\n * @returns {!Promise}\n */\nPromise.resolve = function(value) {\n  var Constructor = this;\n  var promise;\n\n  if (isObject(value) && value instanceof this) {\n    promise = value;\n  } else {\n    promise = new Constructor(function(resolve) {\n      resolve(value);\n    });\n  }\n\n  return /** @type {!Promise} */(promise);\n};\n\n/**\n * Creates a rejected Promise of reason.\n *\n * @this {!Promise}\n * @param {*=} reason\n * @returns {!Promise}\n */\nPromise.reject = function(reason) {\n  var Constructor = this;\n  var promise = new Constructor(function(_, reject) {\n    reject(reason);\n  });\n\n  return /** @type {!Promise} */(promise);\n};\n\n/**\n * Creates a Promise that will resolve with an array of the values of the\n * passed in promises. If any promise rejects, the returned promise will\n * reject.\n *\n * @this {!Promise}\n * @param {!Array<Promise|*>} promises\n * @returns {!Promise}\n */\nPromise.all = function(promises) {\n  var Constructor = this;\n  var promise = new Constructor(function(resolve, reject) {\n    var length = promises.length;\n    var values = new Array(length);\n\n    if (length === 0) {\n      return resolve(values);\n    }\n\n    each(promises, function(promise, index) {\n      Constructor.resolve(promise).then(function(value) {\n        values[index] = value;\n        if (--length === 0) {\n          resolve(values);\n        }\n      }, reject);\n    });\n  });\n\n  return /** @type {!Promise} */(promise);\n};\n\n/**\n * Creates a Promise that will resolve or reject based on the first\n * resolved or rejected promise.\n *\n * @this {!Promise}\n * @param {!Array<Promise|*>} promises\n * @returns {!Promise}\n */\nPromise.race = function(promises) {\n  var Constructor = this;\n  var promise = new Constructor(function(resolve, reject) {\n    for (var i = 0; i < promises.length; i++) {\n      Constructor.resolve(promises[i]).then(resolve, reject);\n    }\n  });\n\n  return /** @type {!Promise} */(promise);\n};\n\nvar onPossiblyUnhandledRejection = function(reason, promise) {\n  throw reason;\n};\n\n/**\n * An internal use static function.\n */\nPromise._overrideUnhandledExceptionHandler = function(handler) {\n  onPossiblyUnhandledRejection = handler;\n};\n\n/****************************\n  Private functions\n ****************************/\n\n/**\n * The Fulfilled Promise state. Calls onFulfilled with the resolved value of\n * this promise, creating a new promise.\n *\n * If there is no onFulfilled, returns the current promise to avoid an promise\n * instance.\n *\n * @this {!Promise} The current promise\n * @param {*=} value The current promise's resolved value.\n * @param {function(*=)=} onFulfilled\n * @param {function(*=)=} unused\n * @param {Deferred} deferred A deferred object that holds a promise and its\n *     resolve and reject functions. It IS NOT passed when called from\n *     Promise#then to save an object instance (since we may return the current\n *     promise). It IS passed in when adopting the Fulfilled state from the\n *     Pending state.\n * @returns {!Promise}\n */\nfunction FulfilledPromise(value, onFulfilled, unused, deferred) {\n  if (!onFulfilled) {\n    deferredAdopt(deferred, FulfilledPromise, value);\n    return this;\n  }\n  if (!deferred) {\n    deferred = new Deferred(this.constructor);\n  }\n  defer(tryCatchDeferred(deferred, onFulfilled, value));\n  return deferred.promise;\n}\n\n/**\n * The Rejected Promise state. Calls onRejected with the resolved value of\n * this promise, creating a new promise.\n *\n * If there is no onRejected, returns the current promise to avoid an promise\n * instance.\n *\n * @this {!Promise} The current promise\n * @param {*=} reason The current promise's rejection reason.\n * @param {function(*=)=} unused\n * @param {function(*=)=} onRejected\n * @param {Deferred} deferred A deferred object that holds a promise and its\n *     resolve and reject functions. It IS NOT passed when called from\n *     Promise#then to save an object instance (since we may return the current\n *     promise). It IS passed in when adopting the Rejected state from the\n *     Pending state.\n * @returns {!Promise}\n */\nfunction RejectedPromise(reason, unused, onRejected, deferred) {\n  if (!onRejected) {\n    deferredAdopt(deferred, RejectedPromise, reason);\n    return this;\n  }\n  if (!deferred) {\n    deferred = new Deferred(this.constructor);\n  }\n  defer(tryCatchDeferred(deferred, onRejected, reason));\n  return deferred.promise;\n}\n\n/**\n * The Pending Promise state. Eventually calls onFulfilled once the promise has\n * resolved, or onRejected once the promise rejects.\n *\n * If there is no onFulfilled and no onRejected, returns the current promise to\n * avoid an promise instance.\n *\n * @this {!Promise} The current promise\n * @param {*=} queue The current promise's pending promises queue.\n * @param {function(*=)=} onFulfilled\n * @param {function(*=)=} onRejected\n * @param {Deferred} deferred A deferred object that holds a promise and its\n *     resolve and reject functions. It IS NOT passed when called from\n *     Promise#then to save an object instance (since we may return the current\n *     promise). It IS passed in when adopting the Pending state from the\n *     Pending state of another promise.\n * @returns {!Promise}\n */\nfunction PendingPromise(queue, onFulfilled, onRejected, deferred) {\n  if (!deferred) {\n    if (!onFulfilled && !onRejected) { return this; }\n    deferred = new Deferred(this.constructor);\n  }\n  queue.push({\n    deferred: deferred,\n    onFulfilled: onFulfilled || deferred.resolve,\n    onRejected: onRejected || deferred.reject\n  });\n  return deferred.promise;\n}\n\n/**\n * Constructs a deferred instance that holds a promise and its resolve and\n * reject functions.\n *\n * @constructor\n */\nfunction Deferred(Promise) {\n  var deferred = this;\n  /** @type {!Promise} */\n  this.promise = new Promise(function(resolve, reject) {\n    /** @type {function(*=)} */\n    deferred.resolve = resolve;\n\n    /** @type {function(*=)} */\n    deferred.reject = reject;\n  });\n  return deferred;\n}\n\n/**\n * Transitions the state of promise to another state. This is only ever called\n * on with a promise that is currently in the Pending state.\n *\n * @param {!Promise} promise\n * @param {function(this:Promise,*=,function(*=),function(*=),Deferred):!Promise} state\n * @param {*=} value\n */\nfunction adopt(promise, state, value, adoptee) {\n  var queue = promise._value;\n  promise._state = state;\n  promise._value = value;\n\n  if (adoptee && state === PendingPromise) {\n    adoptee._state(value, void 0, void 0, {\n      promise: promise,\n      resolve: void 0,\n      reject: void 0\n    });\n  }\n\n  for (var i = 0; i < queue.length; i++) {\n    var next = queue[i];\n    promise._state(\n      value,\n      next.onFulfilled,\n      next.onRejected,\n      next.deferred\n    );\n  }\n  queue.length = 0;\n\n  // Determine if this rejected promise will be \"handled\".\n  if (state === RejectedPromise && promise._isChainEnd) {\n    setTimeout(function() {\n      if (promise._isChainEnd) {\n        onPossiblyUnhandledRejection(value, promise);\n      }\n    }, 0);\n  }\n}\n\n/**\n * A partial application of adopt.\n *\n * @param {!Promise} promise\n * @param {function(this:Promise,*=,function(*=),function(*=),Deferred):!Promise} state\n * @returns {function(*=)}\n */\nfunction adopter(promise, state) {\n  return function(value) {\n    adopt(promise, state, value);\n  };\n}\n\n/**\n * Updates a deferred promises state. Necessary for updating an adopting\n * promise's state when the adoptee resolves.\n *\n * @param {?Deferred} deferred\n * @param {function(this:Promise,*=,function(*=),function(*=),Deferred):!Promise} state\n * @param {*=} value\n */\nfunction deferredAdopt(deferred, state, value) {\n  if (deferred) {\n    var promise = deferred.promise;\n    promise._state = state;\n    promise._value = value;\n  }\n}\n\n/**\n * A no-op function to prevent double resolving.\n */\nfunction noop() {}\n\n/**\n * Tests if fn is a Function\n *\n * @param {*} fn\n * @returns {boolean}\n */\nfunction isFunction(fn) {\n  return typeof fn === 'function';\n}\n\n/**\n * Tests if fn is an Object\n *\n * @param {*} obj\n * @returns {boolean}\n */\nfunction isObject(obj) {\n  return obj === Object(obj);\n}\n\n/**\n * Iterates over each element of an array, calling the iterator with the\n * element and its index.\n *\n * @param {!Array} collection\n * @param {function(*=,number)} iterator\n */\nfunction each(collection, iterator) {\n  for (var i = 0; i < collection.length; i++) {\n    iterator(collection[i], i);\n  }\n}\n\n/**\n * Creates a function that will attempt to resolve the deferred with the return\n * of fn. If any error is raised, rejects instead.\n *\n * @param {!Deferred} deferred\n * @param {function(*=)} fn\n * @param {*} arg\n * @returns {function()}\n */\nfunction tryCatchDeferred(deferred, fn, arg) {\n  var promise = deferred.promise;\n  var resolve = deferred.resolve;\n  var reject = deferred.reject;\n  return function() {\n    try {\n      var result = fn(arg);\n      doResolve(promise, resolve, reject, result, result);\n    } catch (e) {\n      reject(e);\n    }\n  };\n}\n\n/**\n * Queues and executes multiple deferred functions on another run loop.\n */\nvar defer = (function() {\n  /**\n   * Defers fn to another run loop.\n   */\n  var scheduleFlush;\n  if (typeof window !== 'undefined' && window.postMessage) {\n    window.addEventListener('message', flush);\n    scheduleFlush = function() {\n      window.postMessage('macro-task', '*');\n    };\n  } else {\n    scheduleFlush = function() {\n      setTimeout(flush, 0);\n    };\n  }\n\n  var queue = new Array(16);\n  var length = 0;\n\n  function flush() {\n    for (var i = 0; i < length; i++) {\n      var fn = queue[i];\n      queue[i] = null;\n      fn();\n    }\n    length = 0;\n  }\n\n  /**\n   * @param {function()} fn\n   */\n  function defer(fn) {\n    if (length === 0) { scheduleFlush(); }\n    queue[length++] = fn;\n  }\n\n  return defer;\n})();\n\n/**\n * The Promise resolution procedure.\n * https://github.com/promises-aplus/promises-spec#the-promise-resolution-procedure\n *\n * @param {!Promise} promise\n * @param {function(*=)} resolve\n * @param {function(*=)} reject\n * @param {*} value\n * @param {*=} context\n */\nfunction doResolve(promise, resolve, reject, value, context) {\n  var _reject = reject;\n  var then;\n  var _resolve;\n  try {\n    if (value === promise) {\n      throw new TypeError('Cannot fulfill promise with itself');\n    }\n    var isObj = isObject(value);\n    if (isObj && value instanceof promise.constructor) {\n      adopt(promise, value._state, value._value, value);\n    } else if (isObj && (then = value.then) && isFunction(then)) {\n      _resolve = function(value) {\n        _resolve = _reject = noop;\n        doResolve(promise, resolve, reject, value, value);\n      };\n      _reject = function(reason) {\n        _resolve = _reject = noop;\n        reject(reason);\n      };\n      then.call(\n        context,\n        function(value) { _resolve(value); },\n        function(reason) { _reject(reason); }\n      );\n    } else {\n      resolve(value);\n    }\n  } catch (e) {\n    _reject(e);\n  }\n}\n\nmodule.exports = Promise;\n","/**\n * Copyright 2016 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Allows for runtime configuration. Internally, the runtime should\n * use the src/config.js module for various constants. We can use the\n * AMP_CONFIG global to translate user-defined configurations to this\n * module.\n * @type {!Object<string, string>}\n */\nconst env = self.AMP_CONFIG || {};\n\nconst thirdPartyFrameRegex = typeof env['thirdPartyFrameRegex'] == 'string' ?\n  new RegExp(env['thirdPartyFrameRegex']) : env['thirdPartyFrameRegex'];\n\nconst cdnProxyRegex = typeof env['cdnProxyRegex'] == 'string' ?\n  new RegExp(env['cdnProxyRegex']) : env['cdnProxyRegex'];\n\n/** @type {!Object<string, string|boolean|RegExp>} */\nexport const urls = {\n  thirdParty: env['thirdPartyUrl'] || 'https://3p.ampproject.net',\n  thirdPartyFrameHost: env['thirdPartyFrameHost'] || 'ampproject.net',\n  thirdPartyFrameRegex: thirdPartyFrameRegex || /^d-\\d+\\.ampproject\\.net$/,\n  cdn: env['cdnUrl'] || 'https://cdn.ampproject.org',\n  /* Note that cdnProxyRegex is only ever checked against origins\n   * (proto://host[:port]) so does not need to consider path\n   */\n  cdnProxyRegex: cdnProxyRegex ||\n      /^https:\\/\\/([a-zA-Z0-9_-]+\\.)?cdn\\.ampproject\\.org$/,\n  localhostRegex: /^https?:\\/\\/localhost(:\\d+)?$/,\n  errorReporting: env['errorReportingUrl'] ||\n      'https://amp-error-reporting.appspot.com/r',\n  localDev: env['localDev'] || false,\n};\n\nexport const config = {\n  urls,\n};\n","/**\n * Copyright 2015 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {endsWith} from './string';\nimport {\n  isProxyOrigin,\n  parseUrlDeprecated,\n  tryDecodeUriComponent,\n} from './url';\nimport {urls} from './config';\n\n\n/**\n * Returns the value of the cookie. The cookie access is restricted and must\n * go through the privacy review. Before using this method please file a\n * GitHub issue with \"Privacy Review\" label.\n *\n * Returns the cookie's value or `null`.\n *\n * @param {!Window} win\n * @param {string} name\n * @return {?string}\n */\nexport function getCookie(win, name) {\n  const cookieString = tryGetDocumentCookieNoInline(win);\n  if (!cookieString) {\n    return null;\n  }\n  const cookies = cookieString.split(';');\n  for (let i = 0; i < cookies.length; i++) {\n    const cookie = cookies[i].trim();\n    const eq = cookie.indexOf('=');\n    if (eq == -1) {\n      continue;\n    }\n    if (tryDecodeUriComponent(cookie.substring(0, eq).trim()) == name) {\n      const value = cookie.substring(eq + 1).trim();\n      return tryDecodeUriComponent(value, value);\n    }\n  }\n  return null;\n}\n\n/**\n * This method should not be inlined to prevent TryCatch deoptimization.\n * NoInline keyword at the end of function name also prevents Closure compiler\n * from inlining the function.\n * @param {!Window} win\n * @return {string}\n */\nfunction tryGetDocumentCookieNoInline(win) {\n  try {\n    return win.document.cookie;\n  } catch (e) {\n    // Act as if no cookie is available. Exceptions can be thrown when\n    // AMP docs are opened on origins that do not allow setting\n    // cookies such as null origins.\n    return '';\n  }\n}\n\n/**\n * Sets the value of the cookie. The cookie access is restricted and must\n * go through the privacy review. Before using this method please file a\n * GitHub issue with \"Privacy Review\" label.\n *\n * @param {!Window} win\n * @param {string} name\n * @param {string} value\n * @param {time} expirationTime\n * @param {{\n *   highestAvailableDomain:(boolean|undefined),\n *   domain:(string|undefined)\n * }=} opt_options\n *     - highestAvailableDomain: If true, set the cookie at the widest domain\n *       scope allowed by the browser. E.g. on example.com if we are currently\n *       on www.example.com.\n *     - domain: Explicit domain to set.\n *     - allowOnProxyOrigin: Allow setting a cookie on the AMP Cache.\n */\nexport function setCookie(win, name, value, expirationTime, opt_options) {\n  checkOriginForSettingCookie(win, opt_options, name);\n  if (opt_options && opt_options.highestAvailableDomain) {\n    const parts = win.location.hostname.split('.');\n    let domain = parts[parts.length - 1];\n    for (let i = parts.length - 2; i >= 0; i--) {\n      domain = parts[i] + '.' + domain;\n      trySetCookie(win, name, value, expirationTime, domain);\n      if (getCookie(win, name) == value) {\n        return;\n      }\n    }\n  }\n  let domain = undefined;\n  if (opt_options && opt_options.domain) {\n    domain = opt_options.domain;\n  }\n  trySetCookie(win, name, value, expirationTime, domain);\n}\n\n/**\n * Attempt to set a cookie with the given params.\n *\n * @param {!Window} win\n * @param {string} name\n * @param {string} value\n * @param {time} expirationTime\n * @param {string|undefined} domain\n */\nfunction trySetCookie(win, name, value, expirationTime, domain) {\n  // We do not allow setting cookies on the domain that contains both\n  // the cdn. and www. hosts.\n  if (domain == 'ampproject.org') {\n    // Actively delete them.\n    value = 'delete';\n    expirationTime = 0;\n  }\n  const cookie = encodeURIComponent(name) + '=' +\n      encodeURIComponent(value) +\n      '; path=/' +\n      (domain ? '; domain=' + domain : '') +\n      '; expires=' + new Date(expirationTime).toUTCString();\n  try {\n    win.document.cookie = cookie;\n  } catch (ignore) {\n    // Do not throw if setting the cookie failed Exceptions can be thrown\n    // when AMP docs are opened on origins that do not allow setting\n    // cookies such as null origins.\n  }\n}\n\n/**\n * Throws if a given cookie should not be set on the given origin.\n * This is a defense-in-depth. Callers should never run into this.\n *\n * @param {!Window} win\n * @param {!Object|undefined} options\n * @param {string} name For the error message.\n */\nfunction checkOriginForSettingCookie(win, options, name) {\n  if (options && options.allowOnProxyOrigin) {\n    return;\n  }\n  if (isProxyOrigin(win.location.href)) {\n    throw new Error('Should never attempt to set cookie on proxy origin: '\n        + name);\n  }\n\n  const current = parseUrlDeprecated(win.location.href).hostname.toLowerCase();\n  const proxy = parseUrlDeprecated(urls.cdn).hostname.toLowerCase();\n  if (current == proxy || endsWith(current, '.' + proxy)) {\n    throw new Error('Should never attempt to set cookie on proxy origin.'\n        + ' (in depth check): ' + name);\n  }\n}\n","/**\n * Copyright 2015 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Deferred} from './utils/promise';\nimport {cssEscape} from '../third_party/css-escape/css-escape';\nimport {dev} from './log';\nimport {dict} from './utils/object';\nimport {startsWith} from './string';\nimport {toWin} from './types';\n\nconst HTML_ESCAPE_CHARS = {\n  '&': '&amp;',\n  '<': '&lt;',\n  '>': '&gt;',\n  '\"': '&quot;',\n  \"'\": '&#x27;',\n  '`': '&#x60;',\n};\nconst HTML_ESCAPE_REGEX = /(&|<|>|\"|'|`)/g;\n\n/** @const {string} */\nexport const UPGRADE_TO_CUSTOMELEMENT_PROMISE =\n    '__AMP_UPG_PRM';\n\n/** @const {string} */\nexport const UPGRADE_TO_CUSTOMELEMENT_RESOLVER =\n    '__AMP_UPG_RES';\n\n/**\n * Waits until the child element is constructed. Once the child is found, the\n * callback is executed.\n * @param {!Element} parent\n * @param {function(!Element):boolean} checkFunc\n * @param {function()} callback\n */\nexport function waitForChild(parent, checkFunc, callback) {\n  if (checkFunc(parent)) {\n    callback();\n    return;\n  }\n  /** @const {!Window} */\n  const win = toWin(parent.ownerDocument.defaultView);\n  if (win.MutationObserver) {\n    /** @const {MutationObserver} */\n    const observer = new win.MutationObserver(() => {\n      if (checkFunc(parent)) {\n        observer.disconnect();\n        callback();\n      }\n    });\n    observer.observe(parent, {childList: true});\n  } else {\n    /** @const {number} */\n    const interval = win.setInterval(() => {\n      if (checkFunc(parent)) {\n        win.clearInterval(interval);\n        callback();\n      }\n    }, /* milliseconds */ 5);\n  }\n}\n\n/**\n * Waits until the child element is constructed. Once the child is found, the\n * promise is resolved.\n * @param {!Element} parent\n * @param {function(!Element):boolean} checkFunc\n * @return {!Promise}\n */\nexport function waitForChildPromise(parent, checkFunc) {\n  return new Promise(resolve => {\n    waitForChild(parent, checkFunc, resolve);\n  });\n}\n\n/**\n * Waits for document's body to be available.\n * Will be deprecated soon; use {@link AmpDoc#whenBodyAvailable} or\n * @{link DocumentState#onBodyAvailable} instead.\n * @param {!Document} doc\n * @param {function()} callback\n */\nexport function waitForBody(doc, callback) {\n  waitForChild(doc.documentElement, () => !!doc.body, callback);\n}\n\n\n/**\n * Waits for document's body to be available.\n * @param {!Document} doc\n * @return {!Promise}\n */\nexport function waitForBodyPromise(doc) {\n  return new Promise(resolve => {\n    waitForBody(doc, resolve);\n  });\n}\n\n\n/**\n * Removes the element.\n * @param {!Element} element\n */\nexport function removeElement(element) {\n  if (element.parentElement) {\n    element.parentElement.removeChild(element);\n  }\n}\n\n\n/**\n * Removes all child nodes of the specified element.\n * @param {!Element} parent\n */\nexport function removeChildren(parent) {\n  while (parent.firstChild) {\n    parent.removeChild(parent.firstChild);\n  }\n}\n\n\n/**\n * Copies all children nodes of element \"from\" to element \"to\". Child nodes\n * are deeply cloned. Notice, that this method should be used with care and\n * preferably on smaller subtrees.\n * @param {!Element} from\n * @param {!Element|!DocumentFragment} to\n */\nexport function copyChildren(from, to) {\n  const frag = to.ownerDocument.createDocumentFragment();\n  for (let n = from.firstChild; n; n = n.nextSibling) {\n    frag.appendChild(n.cloneNode(true));\n  }\n  to.appendChild(frag);\n}\n\n/**\n * Insert the element in the root after the element named after or\n * if that is null at the beginning.\n * @param {!Element|!ShadowRoot} root\n * @param {!Element} element\n * @param {?Node} after\n */\nexport function insertAfterOrAtStart(root, element, after) {\n  const before = after ? after.nextSibling : root.firstChild;\n  root.insertBefore(element, before);\n}\n\n/**\n * Add attributes to an element.\n * @param {!Element} element\n * @param {!JsonObject<string, string>} attributes\n * @return {!Element} created element\n */\nexport function addAttributesToElement(element, attributes) {\n  for (const attr in attributes) {\n    element.setAttribute(attr, attributes[attr]);\n  }\n  return element;\n}\n\n/**\n * Create a new element on document with specified tagName and attributes.\n * @param {!Document} doc\n * @param {string} tagName\n * @param {!JsonObject<string, string>} attributes\n * @return {!Element} created element\n */\nexport function createElementWithAttributes(doc, tagName, attributes) {\n  const element = doc.createElement(tagName);\n  return addAttributesToElement(element, attributes);\n}\n\n/**\n * Returns true if node is connected (attached).\n * @param {!Node} node\n * @return {boolean}\n * @see https://dom.spec.whatwg.org/#connected\n */\nexport function isConnectedNode(node) {\n  const connected = node.isConnected;\n  if (connected !== undefined) {\n    return connected;\n  }\n\n  // \"An element is connected if its shadow-including root is a document.\"\n  let n = node;\n  do {\n    n = rootNodeFor(n);\n    if (n.host) {\n      n = n.host;\n    } else {\n      break;\n    }\n  } while (true);\n  return n.nodeType === Node.DOCUMENT_NODE;\n}\n\n/**\n * Returns the root for a given node. Does not cross shadow DOM boundary.\n * @param {!Node} node\n * @return {!Node}\n */\nexport function rootNodeFor(node) {\n  if (Node.prototype.getRootNode) {\n    // Type checker says `getRootNode` may return null.\n    return node.getRootNode() || node;\n  }\n  let n;\n  for (n = node; !!n.parentNode; n = n.parentNode) {}\n  return n;\n}\n\n/**\n * Finds the closest element that satisfies the callback from this element\n * up the DOM subtree.\n * @param {!Element} element\n * @param {function(!Element):boolean} callback\n * @param {Element=} opt_stopAt optional elemnt to stop the search at.\n * @return {?Element}\n */\nexport function closest(element, callback, opt_stopAt) {\n  for (let el = element; el && el !== opt_stopAt; el = el.parentElement) {\n    if (callback(el)) {\n      return el;\n    }\n  }\n  return null;\n}\n\n\n/**\n * Finds the closest node that satisfies the callback from this node\n * up the DOM subtree.\n * @param {!Node} node\n * @param {function(!Node):boolean} callback\n * @return {?Node}\n */\nexport function closestNode(node, callback) {\n  for (let n = node; n; n = n.parentNode) {\n    if (callback(n)) {\n      return n;\n    }\n  }\n  return null;\n}\n\n\n/**\n * Finds the closest element with the specified name from this element\n * up the DOM subtree.\n * @param {!Element} element\n * @param {string} tagName\n * @return {?Element}\n */\nexport function closestByTag(element, tagName) {\n  if (element.closest) {\n    return element.closest(tagName);\n  }\n  tagName = tagName.toUpperCase();\n  return closest(element, el => {\n    return el.tagName == tagName;\n  });\n}\n\n/**\n * Finds the closest element with the specified selector from this element\n * @param {!Element} element\n * @param {string} selector\n * @return {?Element} closest ancestor if found.\n */\nexport function closestBySelector(element, selector) {\n  if (element.closest) {\n    return element.closest(selector);\n  }\n\n  return closest(element, el => {\n    return matches(el, selector);\n  });\n}\n\n/**\n * Checks if the given element matches the selector\n * @param  {!Element} el The element to verify\n * @param  {string} selector The selector to check against\n * @return {boolean} True if the element matched the selector. False otherwise.\n */\nexport function matches(el, selector) {\n  const matcher = el.matches ||\n      el.webkitMatchesSelector ||\n      el.mozMatchesSelector ||\n      el.msMatchesSelector ||\n      el.oMatchesSelector;\n  if (matcher) {\n    return matcher.call(el, selector);\n  }\n  return false; // IE8 always returns false.\n}\n\n/**\n * Finds the first descendant element with the specified name.\n * @param {!Element|!Document|!ShadowRoot} element\n * @param {string} tagName\n * @return {?Element}\n */\nexport function elementByTag(element, tagName) {\n  let elements;\n  // getElementsByTagName() is not supported on ShadowRoot.\n  if (typeof element.getElementsByTagName === 'function') {\n    elements = element.getElementsByTagName(tagName);\n  } else {\n    elements = element./*OK*/querySelectorAll(tagName);\n  }\n  return (elements && elements[0]) || null;\n}\n\n\n/**\n * Finds the first child element that satisfies the callback.\n * @param {!Element} parent\n * @param {function(!Element):boolean} callback\n * @return {?Element}\n */\nexport function childElement(parent, callback) {\n  for (let child = parent.firstElementChild; child;\n    child = child.nextElementSibling) {\n    if (callback(child)) {\n      return child;\n    }\n  }\n  return null;\n}\n\n\n/**\n * Finds all child elements that satisfy the callback.\n * @param {!Element} parent\n * @param {function(!Element):boolean} callback\n * @return {!Array<!Element>}\n */\nexport function childElements(parent, callback) {\n  const children = [];\n  for (let child = parent.firstElementChild; child;\n    child = child.nextElementSibling) {\n    if (callback(child)) {\n      children.push(child);\n    }\n  }\n  return children;\n}\n\n\n/**\n * Finds the last child element that satisfies the callback.\n * @param {!Element} parent\n * @param {function(!Element):boolean} callback\n * @return {?Element}\n */\nexport function lastChildElement(parent, callback) {\n  for (let child = parent.lastElementChild; child;\n    child = child.previousElementSibling) {\n    if (callback(child)) {\n      return child;\n    }\n  }\n  return null;\n}\n\n/**\n * Finds all child nodes that satisfy the callback.\n * These nodes can include Text, Comment and other child nodes.\n * @param {!Node} parent\n * @param {function(!Node):boolean} callback\n * @return {!Array<!Node>}\n */\nexport function childNodes(parent, callback) {\n  const nodes = [];\n  for (let child = parent.firstChild; child;\n    child = child.nextSibling) {\n    if (callback(child)) {\n      nodes.push(child);\n    }\n  }\n  return nodes;\n}\n\n/**\n * @type {boolean|undefined}\n * @visibleForTesting\n */\nlet scopeSelectorSupported;\n\n/**\n * @param {boolean|undefined} val\n * @visibleForTesting\n */\nexport function setScopeSelectorSupportedForTesting(val) {\n  scopeSelectorSupported = val;\n}\n\n/**\n * Test that the :scope selector is supported and behaves correctly.\n * @param {!Element} parent\n * @return {boolean}\n */\nfunction isScopeSelectorSupported(parent) {\n  const doc = parent.ownerDocument;\n  try {\n    const testElement = doc.createElement('div');\n    const testChild = doc.createElement('div');\n    testElement.appendChild(testChild);\n    // NOTE(cvializ, #12383): Firefox's implementation is incomplete,\n    // therefore we test actual functionality of`:scope` as well.\n    return testElement./*OK*/querySelector(':scope div') === testChild;\n  } catch (e) {\n    return false;\n  }\n}\n\n/**\n * Finds the first child element that has the specified attribute.\n * @param {!Element} parent\n * @param {string} attr\n * @return {?Element}\n */\nexport function childElementByAttr(parent, attr) {\n  return scopedQuerySelector/*OK*/(parent, `> [${attr}]`);\n}\n\n\n/**\n * Finds the last child element that has the specified attribute.\n * @param {!Element} parent\n * @param {string} attr\n * @return {?Element}\n */\nexport function lastChildElementByAttr(parent, attr) {\n  return lastChildElement(parent, el => {\n    return el.hasAttribute(attr);\n  });\n}\n\n\n/**\n * Finds all child elements that has the specified attribute.\n * @param {!Element} parent\n * @param {string} attr\n * @return {!NodeList<!Element>}\n */\nexport function childElementsByAttr(parent, attr) {\n  return scopedQuerySelectorAll/*OK*/(parent, `> [${attr}]`);\n}\n\n\n/**\n * Finds the first child element that has the specified tag name.\n * @param {!Element} parent\n * @param {string} tagName\n * @return {?Element}\n */\nexport function childElementByTag(parent, tagName) {\n  return scopedQuerySelector/*OK*/(parent, `> ${tagName}`);\n}\n\n\n/**\n * Finds all child elements with the specified tag name.\n * @param {!Element} parent\n * @param {string} tagName\n * @return {!NodeList<!Element>}\n */\nexport function childElementsByTag(parent, tagName) {\n  return scopedQuerySelectorAll/*OK*/(parent, `> ${tagName}`);\n}\n\n\n/**\n * Finds the first element that matches `selector`, scoped inside `root`.\n * Note: in IE, this causes a quick mutation of the element's class list.\n * @param {!Element} root\n * @param {string} selector\n * @return {?Element}\n */\nexport function scopedQuerySelector(root, selector) {\n  if (scopeSelectorSupported == null) {\n    scopeSelectorSupported = isScopeSelectorSupported(root);\n  }\n  if (scopeSelectorSupported) {\n    return root./*OK*/querySelector(`:scope ${selector}`);\n  }\n\n  // Only IE.\n  const unique = 'i-amphtml-scoped';\n  root.classList.add(unique);\n  const element = root./*OK*/querySelector(`.${unique} ${selector}`);\n  root.classList.remove(unique);\n  return element;\n}\n\n\n/**\n * Finds the every element that matches `selector`, scoped inside `root`.\n * Note: in IE, this causes a quick mutation of the element's class list.\n * @param {!Element} root\n * @param {string} selector\n * @return {!NodeList<!Element>}\n */\nexport function scopedQuerySelectorAll(root, selector) {\n  if (scopeSelectorSupported == null) {\n    scopeSelectorSupported = isScopeSelectorSupported(root);\n  }\n  if (scopeSelectorSupported) {\n    return root./*OK*/querySelectorAll(`:scope ${selector}`);\n  }\n\n  // Only IE.\n  const unique = 'i-amphtml-scoped';\n  root.classList.add(unique);\n  const elements = root./*OK*/querySelectorAll(`.${unique} ${selector}`);\n  root.classList.remove(unique);\n  return elements;\n}\n\n\n/**\n * Returns element data-param- attributes as url parameters key-value pairs.\n * e.g. data-param-some-attr=value -> {someAttr: value}.\n * @param {!Element} element\n * @param {function(string):string=} opt_computeParamNameFunc to compute the\n *    parameter name, get passed the camel-case parameter name.\n * @param {!RegExp=} opt_paramPattern Regex pattern to match data attributes.\n * @return {!JsonObject}\n */\nexport function getDataParamsFromAttributes(element, opt_computeParamNameFunc,\n  opt_paramPattern) {\n  const computeParamNameFunc = opt_computeParamNameFunc || (key => key);\n  const {dataset} = element;\n  const params = dict();\n  const paramPattern = opt_paramPattern ? opt_paramPattern : /^param(.+)/;\n  for (const key in dataset) {\n    const matches = key.match(paramPattern);\n    if (matches) {\n      const param = matches[1][0].toLowerCase() + matches[1].substr(1);\n      params[computeParamNameFunc(param)] = dataset[key];\n    }\n  }\n  return params;\n}\n\n/**\n * Whether the element have a next node in the document order.\n * This means either:\n *  a. The element itself has a nextSibling.\n *  b. Any of the element ancestors has a nextSibling.\n * @param {!Element} element\n * @param {?Node} opt_stopNode\n * @return {boolean}\n */\nexport function hasNextNodeInDocumentOrder(element, opt_stopNode) {\n  let currentElement = element;\n  do {\n    if (currentElement.nextSibling) {\n      return true;\n    }\n  } while ((currentElement = currentElement.parentNode) &&\n            currentElement != opt_stopNode);\n  return false;\n}\n\n\n/**\n * Finds all ancestor elements that satisfy predicate.\n * @param {!Element} child\n * @param {function(!Element):boolean} predicate\n * @return {!Array<!Element>}\n */\nexport function ancestorElements(child, predicate) {\n  const ancestors = [];\n  for (let ancestor = child.parentElement; ancestor;\n    ancestor = ancestor.parentElement) {\n    if (predicate(ancestor)) {\n      ancestors.push(ancestor);\n    }\n  }\n  return ancestors;\n}\n\n\n/**\n * Finds all ancestor elements that has the specified tag name.\n * @param {!Element} child\n * @param {string} tagName\n * @return {!Array<!Element>}\n */\nexport function ancestorElementsByTag(child, tagName) {\n  tagName = tagName.toUpperCase();\n  return ancestorElements(child, el => {\n    return el.tagName == tagName;\n  });\n}\n\n/**\n * Returns a clone of the content of a template element.\n *\n * Polyfill to replace .content access for browsers that do not support\n * HTMLTemplateElements natively.\n *\n * @param {!HTMLTemplateElement|!Element} template\n * @return {!DocumentFragment}\n */\nexport function templateContentClone(template) {\n  if ('content' in template) {\n    return template.content.cloneNode(true);\n  } else {\n    const content = template.ownerDocument.createDocumentFragment();\n    copyChildren(template, content);\n    return content;\n  }\n}\n\n/**\n * Iterate over an array-like. Some collections like NodeList are\n * lazily evaluated in some browsers, and accessing `length` forces full\n * evaluation. We can improve performance by iterating until an element is\n * `undefined` to avoid checking the `length` property.\n * Test cases: https://jsperf.com/iterating-over-collections-of-elements\n * @param {!IArrayLike<T>} iterable\n * @param {function(T, number)} cb\n * @template T\n */\nexport function iterateCursor(iterable, cb) {\n  for (let i = 0, value; (value = iterable[i]) !== undefined; i++) {\n    cb(value, i);\n  }\n}\n\n/**\n * This method wraps around window's open method. It first tries to execute\n * `open` call with the provided target and if it fails, it retries the call\n * with the `_top` target. This is necessary given that in some embedding\n * scenarios, such as iOS' WKWebView, navigation to `_blank` and other targets\n * is blocked by default.\n *\n * @param {!Window} win\n * @param {string} url\n * @param {string} target\n * @param {string=} opt_features\n * @return {?Window}\n */\nexport function openWindowDialog(win, url, target, opt_features) {\n  // Try first with the specified target. If we're inside the WKWebView or\n  // a similar environments, this method is expected to fail by default for\n  // all targets except `_top`.\n  let res;\n  try {\n    res = win.open(url, target, opt_features);\n  } catch (e) {\n    dev().error('DOM', 'Failed to open url on target: ', target, e);\n  }\n\n  // Then try with `_top` target.\n  if (!res && target != '_top') {\n    res = win.open(url, '_top');\n  }\n  return res;\n}\n\n/**\n * Whether the element is a script tag with application/json type.\n * @param {!Element} element\n * @return {boolean}\n */\nexport function isJsonScriptTag(element) {\n  return element.tagName == 'SCRIPT' &&\n            element.getAttribute('type').toUpperCase() == 'APPLICATION/JSON';\n}\n\n/**\n * Whether the element is a script tag with application/json type.\n * @param {!Element} element\n * @return {boolean}\n */\nexport function isJsonLdScriptTag(element) {\n  return element.tagName == 'SCRIPT' &&\n      element.getAttribute('type').toUpperCase() == 'APPLICATION/LD+JSON';\n}\n\n/**\n * Whether the page's direction is right to left or not.\n * @param {!Document} doc\n * @return {boolean}\n */\nexport function isRTL(doc) {\n  const dir = doc.body.getAttribute('dir')\n                 || doc.documentElement.getAttribute('dir')\n                 || 'ltr';\n  return dir == 'rtl';\n}\n\n\n/**\n * Escapes an ident (ID or a class name) to be used as a CSS selector.\n *\n * See https://drafts.csswg.org/cssom/#serialize-an-identifier.\n *\n * @param {string} ident\n * @return {string}\n */\nexport function escapeCssSelectorIdent(ident) {\n  return cssEscape(ident);\n}\n\n/**\n * Escapes an ident in a way that can be used by :nth-child() psuedo-class.\n *\n * See https://github.com/w3c/csswg-drafts/issues/2306.\n *\n * @param {string|number} ident\n * @return {string}\n */\nexport function escapeCssSelectorNth(ident) {\n  const escaped = String(ident);\n  // Ensure it doesn't close the nth-child psuedo class.\n  dev().assert(escaped.indexOf(')') === -1);\n  return escaped;\n}\n\n/**\n * Escapes `<`, `>` and other HTML charcaters with their escaped forms.\n * @param {string} text\n * @return {string}\n */\nexport function escapeHtml(text) {\n  if (!text) {\n    return text;\n  }\n  return text.replace(HTML_ESCAPE_REGEX, escapeHtmlChar);\n}\n\n/**\n * @param {string} c\n * @return {string}\n */\nfunction escapeHtmlChar(c) {\n  return HTML_ESCAPE_CHARS[c];\n}\n\n/**\n * Tries to focus on the given element; fails silently if browser throws an\n * exception.\n * @param {!Element} element\n */\nexport function tryFocus(element) {\n  try {\n    element./*OK*/focus();\n  } catch (e) {\n    // IE <= 7 may throw exceptions when focusing on hidden items.\n  }\n}\n\n/**\n * Whether the given window is in an iframe or not.\n * @param {!Window} win\n * @return {boolean}\n */\nexport function isIframed(win) {\n  return win.parent && win.parent != win;\n}\n\n/**\n * Determines if this element is an AMP element\n * @param {!Element} element\n * @return {boolean}\n */\nexport function isAmpElement(element) {\n  const tag = element.tagName;\n  // Use prefix to recognize AMP element. This is necessary because stub\n  // may not be attached yet.\n  return startsWith(tag, 'AMP-') &&\n      // Some \"amp-*\" elements are not really AMP elements. :smh:\n      !(tag == 'AMP-STICKY-AD-TOP-PADDING' || tag == 'AMP-BODY');\n}\n\n/**\n * Return a promise that resolve when an AMP element upgrade from HTMLElement\n * to CustomElement\n * @param {!Element} element\n * @return {!Promise<!Element>}\n */\nexport function whenUpgradedToCustomElement(element) {\n  dev().assert(isAmpElement(element), 'element is not AmpElement');\n  if (element.createdCallback) {\n    // Element already is CustomElement;\n    return Promise.resolve(element);\n  }\n  // If Element is still HTMLElement, wait for it to upgrade to customElement\n  // Note: use pure string to avoid obfuscation between versions.\n  if (!element[UPGRADE_TO_CUSTOMELEMENT_PROMISE]) {\n    const deferred = new Deferred();\n    element[UPGRADE_TO_CUSTOMELEMENT_PROMISE] = deferred.promise;\n    element[UPGRADE_TO_CUSTOMELEMENT_RESOLVER] = deferred.resolve;\n\n  }\n\n  return element[UPGRADE_TO_CUSTOMELEMENT_PROMISE];\n}\n\n/**\n * Replacement for `Element.requestFullscreen()` method.\n * https://developer.mozilla.org/en-US/docs/Web/API/Element/requestFullscreen\n * @param {!Element} element\n */\nexport function fullscreenEnter(element) {\n  const requestFs = element.requestFullscreen\n   || element.requestFullScreen\n   || element.webkitRequestFullscreen\n   || element.webkitRequestFullScreen\n   || element.webkitEnterFullscreen\n   || element.webkitEnterFullScreen\n   || element.msRequestFullscreen\n   || element.msRequestFullScreen\n   || element.mozRequestFullscreen\n   || element.mozRequestFullScreen;\n  if (requestFs) {\n    requestFs.call(element);\n  }\n}\n\n/**\n * Replacement for `Document.exitFullscreen()` method.\n * https://developer.mozilla.org/en-US/docs/Web/API/Document/exitFullscreen\n * @param {!Element} element\n */\nexport function fullscreenExit(element) {\n  let exitFs = element.cancelFullScreen\n               || element.exitFullscreen\n               || element.exitFullScreen\n               || element.webkitExitFullscreen\n               || element.webkitExitFullScreen\n               || element.webkitCancelFullScreen\n               || element.mozCancelFullScreen\n               || element.msExitFullscreen;\n  if (exitFs) {\n    exitFs.call(element);\n    return;\n  }\n  if (element.ownerDocument) {\n    exitFs = element.ownerDocument.cancelFullScreen\n             || element.ownerDocument.exitFullscreen\n             || element.ownerDocument.exitFullScreen\n             || element.ownerDocument.webkitExitFullscreen\n             || element.ownerDocument.webkitExitFullScreen\n             || element.ownerDocument.webkitCancelFullScreen\n             || element.ownerDocument.mozCancelFullScreen\n             || element.ownerDocument.msExitFullscreen;\n  }\n  if (exitFs) {\n    exitFs.call(element.ownerDocument);\n    return;\n  }\n}\n\n\n/**\n * Replacement for `Document.fullscreenElement`.\n * https://developer.mozilla.org/en-US/docs/Web/API/Document/fullscreenElement\n * @param {!Element} element\n * @return {boolean}\n */\nexport function isFullscreenElement(element) {\n  const isFullscreen = element.webkitDisplayingFullscreen;\n  if (isFullscreen) {\n    return true;\n  }\n  if (element.ownerDocument) {\n    const fullscreenElement = element.ownerDocument.fullscreenElement\n             || element.ownerDocument.webkitFullscreenElement\n             || element.ownerDocument.mozFullScreenElement\n             || element.webkitCurrentFullScreenElement;\n    if (fullscreenElement == element) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/**\n * Returns true if node is not disabled.\n *\n * IE8 can return false positives, see {@link matches}.\n * @param {!Element} element\n * @return {boolean}\n * @see https://www.w3.org/TR/html5/forms.html#concept-fe-disabled\n */\nexport function isEnabled(element) {\n  return !(element.disabled || matches(element, ':disabled'));\n}\n","/**\n * Copyright 2016 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as dom from './dom';\nimport {\n  getAmpdoc,\n  getExistingServiceForDocInEmbedScope,\n  getService,\n  getServicePromise,\n  getServicePromiseForDoc,\n  getServicePromiseOrNull,\n  getServicePromiseOrNullForDoc,\n  getTopWindow,\n} from './service';\nimport {toWin} from './types';\nimport {user} from './log';\n\n/**\n * Returns a promise for a service for the given id and window. Also expects an\n * element that has the actual implementation. The promise resolves when the\n * implementation loaded. Users should typically wrap this as a special purpose\n * function (e.g. Services.viewportForDoc(...)) for type safety and because the\n * factory should not be passed around.\n * @param {!Window} win\n * @param {string} id of the service.\n * @param {string} extension Name of the custom extension that provides the\n *     implementation of this service.\n * @param {boolean=} opt_element Whether this service is provided by an element,\n *     not the extension.\n * @return {!Promise<*>}\n */\nexport function getElementService(win, id, extension, opt_element) {\n  return getElementServiceIfAvailable(win, id, extension, opt_element).then(\n      service => assertService(service, id, extension));\n}\n\n/**\n * Same as getElementService but produces null if the given element is not\n * actually available on the current page.\n * @param {!Window} win\n * @param {string} id of the service.\n * @param {string} extension Name of the custom extension that provides the\n *     implementation of this service.\n * @param {boolean=} opt_element Whether this service is provided by an\n *     element, not the extension.\n * @return {!Promise<?Object>}\n */\nexport function getElementServiceIfAvailable(win, id, extension, opt_element) {\n  const s = getServicePromiseOrNull(win, id);\n  if (s) {\n    return /** @type {!Promise<?Object>} */ (s);\n  }\n  return getElementServicePromiseOrNull(win, id, extension, opt_element);\n}\n\n/**\n * @param {!Window} win\n * @param {string} elementName Name of an extended custom element.\n * @return {boolean} Whether this element is scheduled to be loaded.\n */\nfunction isElementScheduled(win, elementName) {\n  // Set in custom-element.js\n  if (!win.ampExtendedElements) {\n    return false;\n  }\n  return !!win.ampExtendedElements[elementName];\n}\n\n\n/**\n * Returns a promise for a service for the given id and window. Also expects an\n * element that has the actual implementation. The promise resolves when the\n * implementation loaded. Users should typically wrap this as a special purpose\n * function (e.g. Services.viewportForDoc(...)) for type safety and because the\n * factory should not be passed around.\n * @param {!Element|!./service/ampdoc-impl.AmpDoc} elementOrAmpDoc\n * @param {string} id of the service.\n * @param {string} extension Name of the custom extension that provides the\n *     implementation of this service.\n * @param {boolean=} opt_element Whether this service is provided by an element,\n *     not the extension.\n * @return {!Promise<*>}\n */\nexport function getElementServiceForDoc(elementOrAmpDoc, id, extension,\n  opt_element) {\n  return getElementServiceIfAvailableForDoc(\n      elementOrAmpDoc, id, extension, opt_element)\n      .then(service => assertService(service, id, extension));\n}\n\n/**\n * Same as getElementService but produces null if the given element is not\n * actually available on the current page.\n * @param {!Element|!./service/ampdoc-impl.AmpDoc} elementOrAmpDoc\n * @param {string} id of the service.\n * @param {string} extension Name of the custom extension that provides the\n *     implementation of this service.\n * @param {boolean=} opt_element Whether this service is provided by an\n *     element, not the extension.\n * @return {!Promise<?Object>}\n */\nexport function getElementServiceIfAvailableForDoc(\n  elementOrAmpDoc, id, extension, opt_element) {\n  const ampdoc = getAmpdoc(elementOrAmpDoc);\n  const s = getServicePromiseOrNullForDoc(elementOrAmpDoc, id);\n  if (s) {\n    return /** @type {!Promise<?Object>} */ (s);\n  }\n\n  return ampdoc.whenBodyAvailable()\n      .then(() => waitForExtensionIfPresent(\n          ampdoc.win, extension,\n          ampdoc.getHeadNode()))\n      .then(() => {\n        // If this service is provided by an element, then we can't depend on\n        // the service (they may not use the element).\n        if (opt_element) {\n          return getServicePromiseOrNullForDoc(elementOrAmpDoc, id);\n        } else if (isElementScheduled(ampdoc.win, extension)) {\n          return getServicePromiseForDoc(elementOrAmpDoc, id);\n        }\n        return null;\n      });\n}\n\n/**\n * Returns a promise for service for the given id in the embed scope of\n * a given node, if it exists. Otherwise, falls back to ampdoc scope IFF\n * the given node is in the top-level window.\n * @param {!Element|!./service/ampdoc-impl.AmpDoc} elementOrAmpDoc\n * @param {string} id of the service.\n * @param {string} extension Name of the custom element that provides\n *     the implementation of this service.\n * @return {!Promise<?Object>}\n */\nexport function getElementServiceIfAvailableForDocInEmbedScope(\n  elementOrAmpDoc, id, extension) {\n  const s = getExistingServiceForDocInEmbedScope(elementOrAmpDoc, id);\n  if (s) {\n    return /** @type {!Promise<?Object>} */ (Promise.resolve(s));\n  }\n  // Return embed-scope element service promise if scheduled.\n  if (elementOrAmpDoc.nodeType) {\n    const win = toWin(elementOrAmpDoc.ownerDocument.defaultView);\n    const topWin = getTopWindow(win);\n    // In embeds, doc-scope services are window-scope. But make sure to\n    // only do this for embeds (not the top window), otherwise we'd grab\n    // a promise from the wrong service holder which would never resolve.\n    if (win !== topWin) {\n      return getElementServicePromiseOrNull(win, id, extension);\n    } else {\n      // Fallback to ampdoc IFF the given node is _not_ FIE.\n      return getElementServiceIfAvailableForDoc(elementOrAmpDoc, id, extension);\n    }\n  }\n  return /** @type {!Promise<?Object>} */ (Promise.resolve(null));\n}\n\n/**\n * Throws user error if `service` is null.\n * @param {Object} service\n * @param {string} id\n * @param {string} extension\n * @return {!Object}\n * @private\n */\nfunction assertService(service, id, extension) {\n  return /** @type {!Object} */ (user().assert(service,\n      'Service %s was requested to be provided through %s, ' +\n      'but %s is not loaded in the current page. To fix this ' +\n      'problem load the JavaScript file for %s in this page.',\n      id, extension, extension, extension));\n}\n\n/**\n * Get list of all the extension JS files\n * @param {HTMLHeadElement|Element|ShadowRoot} head\n * @return {!Array<string>}\n */\nexport function extensionScriptsInNode(head) {\n  // ampdoc.getHeadNode() can return null\n  if (!head) {\n    return [];\n  }\n  const scripts = [];\n  const list = head.querySelectorAll('script[custom-element]');\n  for (let i = 0; i < list.length; i++) {\n    scripts.push(list[i].getAttribute('custom-element'));\n  }\n  return scripts;\n}\n\n/**\n * Waits for body to be present then verifies that an extension script is\n * present in head for installation.\n * @param {!./service/ampdoc-impl.AmpDoc} ampdoc\n * @param {string} extensionId\n * @return {!Promise<boolean>}\n */\nexport function isExtensionScriptInNode(ampdoc, extensionId) {\n  return ampdoc.whenBodyAvailable()\n      .then(() => {\n        return extensionScriptInNode(\n            ampdoc.getHeadNode(), extensionId);\n      });\n}\n\n/**\n * Verifies that an extension script is present in head for\n * installation.\n * @param {HTMLHeadElement|Element|ShadowRoot} head\n * @param {string} extensionId\n * @private\n */\nfunction extensionScriptInNode(head, extensionId) {\n  return extensionScriptsInNode(head).includes(extensionId);\n}\n\n/**\n * Waits for an extension if its script is present\n * @param {!Window} win\n * @param {string} extension\n * @param {HTMLHeadElement|Element|ShadowRoot} head\n * @return {!Promise}\n * @private\n */\nfunction waitForExtensionIfPresent(win, extension, head) {\n  /**\n   * If there is an extension script wait for it to load before trying\n   * to get the service. Prevents a race condition when everything but\n   * the extensions is in cache. If there is no script then it's either\n   * not present, or the service was defined by a test. In those cases\n   * we don't wait around for an extension that does not exist.\n   */\n\n  // TODO(jpettitt) investigate registerExtension to short circuit\n  // the dom call in extensionScriptsInNode()\n  if (!extensionScriptInNode(head, extension)) {\n    return Promise.resolve();\n  }\n\n  const extensions = getService(win, 'extensions');\n  return /** @type {!Promise<?Object>} */ (\n    extensions.waitForExtension(win, extension));\n}\n\n/**\n * Returns the promise for service with `id` on the given window if available.\n * Otherwise, resolves with null (service was not registered).\n * @param {!Window} win\n * @param {string} id\n * @param {string} extension\n * @param {boolean=} opt_element\n * @return {!Promise<Object>}\n * @private\n */\nfunction getElementServicePromiseOrNull(win, id, extension, opt_element) {\n  return dom.waitForBodyPromise(win.document)\n      .then(() => waitForExtensionIfPresent(win, extension, win.document.head))\n      .then(() => {\n        // If this service is provided by an element, then we can't depend on\n        // the service (they may not use the element).\n        if (opt_element) {\n          return getServicePromiseOrNull(win, id);\n        } else if (isElementScheduled(win, extension)) {\n          return getServicePromise(win, id);\n        }\n        return null;\n      });\n}\n","/**\n * Copyright 2015 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Experiments system allows a developer to opt-in to test\n * features that are not yet fully tested.\n *\n * Experiments page: https://cdn.ampproject.org/experiments.html *\n */\n\nimport {getCookie, setCookie} from './cookies';\nimport {hasOwn} from './utils/object';\nimport {parseQueryString} from './url';\n\n/** @const {string} */\nconst COOKIE_NAME = 'AMP_EXP';\n\n/** @const {number} */\nconst COOKIE_MAX_AGE_DAYS = 180; // 6 month\n\n/** @const {time} */\nconst COOKIE_EXPIRATION_INTERVAL = COOKIE_MAX_AGE_DAYS * 24 * 60 * 60 * 1000;\n\n/** @const {string} */\nconst TOGGLES_WINDOW_PROPERTY = '__AMP__EXPERIMENT_TOGGLES';\n\n/**\n * @typedef {{\n *   isTrafficEligible: function(!Window):boolean,\n *   branches: !Array<string>\n * }}\n */\nexport let ExperimentInfo;\n\n/**\n * Whether we are in canary.\n * @param {!Window} win\n * @return {boolean}\n */\nexport function isCanary(win) {\n  return !!(win.AMP_CONFIG && win.AMP_CONFIG.canary);\n}\n\n/**\n * Returns binary type, e.g., canary, control, or production.\n * @param {!Window} win\n * @return {string}\n */\nexport function getBinaryType(win) {\n  return win.AMP_CONFIG && win.AMP_CONFIG.type ?\n    win.AMP_CONFIG.type : 'unknown';\n}\n\n/**\n * Whether the specified experiment is on or off.\n * @param {!Window} win\n * @param {string} experimentId\n * @return {boolean}\n */\nexport function isExperimentOn(win, experimentId) {\n  const toggles = experimentToggles(win);\n  return !!toggles[experimentId];\n}\n\n/**\n * Toggles the experiment on or off. Returns the actual value of the experiment\n * after toggling is done.\n * @param {!Window} win\n * @param {string} experimentId\n * @param {boolean=} opt_on\n * @param {boolean=} opt_transientExperiment  Whether to toggle the\n *     experiment state \"transiently\" (i.e., for this page load only) or\n *     durably (by saving the experiment IDs to the cookie after toggling).\n *     Default: false (save durably).\n * @return {boolean} New state for experimentId.\n */\nexport function toggleExperiment(win, experimentId, opt_on,\n  opt_transientExperiment) {\n  const currentlyOn = isExperimentOn(win, /*OK*/experimentId);\n  const on = !!(opt_on !== undefined ? opt_on : !currentlyOn);\n  if (on != currentlyOn) {\n    const toggles = experimentToggles(win);\n    toggles[experimentId] = on;\n\n    if (!opt_transientExperiment) {\n      const cookieToggles = getExperimentTogglesFromCookie(win);\n      cookieToggles[experimentId] = on;\n      saveExperimentTogglesToCookie(win, cookieToggles);\n    }\n  }\n  return on;\n}\n\n/**\n * Calculate whether the experiment is on or off based off of the\n * cookieFlag or the global config frequency given.\n * @param {!Window} win\n * @return {!Object<string, boolean>}\n */\nexport function experimentToggles(win) {\n  if (win[TOGGLES_WINDOW_PROPERTY]) {\n    return win[TOGGLES_WINDOW_PROPERTY];\n  }\n  win[TOGGLES_WINDOW_PROPERTY] = Object.create(null);\n  const toggles = win[TOGGLES_WINDOW_PROPERTY];\n\n  // Read the default config of this build.\n  if (win.AMP_CONFIG) {\n    for (const experimentId in win.AMP_CONFIG) {\n      const frequency = win.AMP_CONFIG[experimentId];\n      if (typeof frequency === 'number' && frequency >= 0 && frequency <= 1) {\n        toggles[experimentId] = Math.random() < frequency;\n      }\n    }\n  }\n  // Read document level override from meta tag.\n  if (win.AMP_CONFIG\n      && Array.isArray(win.AMP_CONFIG['allow-doc-opt-in'])\n      && win.AMP_CONFIG['allow-doc-opt-in'].length > 0) {\n    const allowed = win.AMP_CONFIG['allow-doc-opt-in'];\n    const meta =\n        win.document.head.querySelector('meta[name=\"amp-experiments-opt-in\"]');\n    if (meta) {\n      const optedInExperiments = meta.getAttribute('content').split(',');\n      for (let i = 0; i < optedInExperiments.length; i++) {\n        if (allowed.indexOf(optedInExperiments[i]) != -1) {\n          toggles[optedInExperiments[i]] = true;\n        }\n      }\n    }\n  }\n\n  Object.assign(toggles, getExperimentTogglesFromCookie(win));\n\n  if (win.AMP_CONFIG\n      && Array.isArray(win.AMP_CONFIG['allow-url-opt-in'])\n      && win.AMP_CONFIG['allow-url-opt-in'].length > 0) {\n    const allowed = win.AMP_CONFIG['allow-url-opt-in'];\n    const hash = win.location.originalHash || win.location.hash;\n    const params = parseQueryString(hash);\n    for (let i = 0; i < allowed.length; i++) {\n      const param = params[`e-${allowed[i]}`];\n      if (param == '1') {\n        toggles[allowed[i]] = true;\n      }\n      if (param == '0') {\n        toggles[allowed[i]] = false;\n      }\n    }\n  }\n  return toggles;\n}\n\n/**\n * Returns the cached experiments toggles, or null if they have not been\n * computed yet.\n * @param {!Window} win\n * @return {Object<string, boolean>}\n */\nexport function experimentTogglesOrNull(win) {\n  return win[TOGGLES_WINDOW_PROPERTY] || null;\n}\n\n/**\n * Returns a set of experiment IDs currently on.\n * @param {!Window} win\n * @return {!Object<string, boolean>}\n */\nfunction getExperimentTogglesFromCookie(win) {\n  const experimentCookie = getCookie(win, COOKIE_NAME);\n  const tokens = experimentCookie ? experimentCookie.split(/\\s*,\\s*/g) : [];\n\n  const toggles = Object.create(null);\n  for (let i = 0; i < tokens.length; i++) {\n    if (tokens[i].length == 0) {\n      continue;\n    }\n    if (tokens[i][0] == '-') {\n      toggles[tokens[i].substr(1)] = false;\n    } else {\n      toggles[tokens[i]] = true;\n    }\n  }\n\n  return toggles;\n}\n\n/**\n * Saves a set of experiment IDs currently on.\n * @param {!Window} win\n * @param {!Object<string, boolean>} toggles\n */\nfunction saveExperimentTogglesToCookie(win, toggles) {\n  const experimentIds = [];\n  for (const experiment in toggles) {\n    experimentIds.push((toggles[experiment] === false ? '-' : '') + experiment);\n  }\n\n  setCookie(win, COOKIE_NAME, experimentIds.join(','),\n      Date.now() + COOKIE_EXPIRATION_INTERVAL, {\n        // Set explicit domain, so the cookie gets send to sub domains.\n        domain: win.location.hostname,\n        allowOnProxyOrigin: true,\n      });\n}\n\n/**\n * See getExperimentTogglesFromCookie().\n * @param {!Window} win\n * @return {!Object<string, boolean>}\n * @visibleForTesting\n */\nexport function getExperimentToglesFromCookieForTesting(win) {\n  return getExperimentTogglesFromCookie(win);\n}\n\n/**\n * Resets the experimentsToggle cache for testing purposes.\n * @param {!Window} win\n * @visibleForTesting\n */\nexport function resetExperimentTogglesForTesting(win) {\n  setCookie(win, COOKIE_NAME, '', 0, {\n    domain: win.location.hostname,\n  });\n  win[TOGGLES_WINDOW_PROPERTY] = null;\n}\n\n/**\n * In some browser implementations of Math.random(), sequential calls of\n * Math.random() are correlated and can cause a bias.  In particular,\n * if the previous random() call was < 0.001 (as it will be if we select\n * into an experiment), the next value could be less than 0.5 more than\n * 50.7% of the time.  This provides an implementation that roots down into\n * the crypto API, when available, to produce less biased samples.\n *\n * @return {number} Pseudo-random floating-point value on the range [0, 1).\n */\nfunction slowButAccuratePrng() {\n  // TODO(tdrl): Implement.\n  return Math.random();\n}\n\n/**\n * Container for alternate random number generator implementations.  This\n * allows us to set an \"accurate\" PRNG for branch selection, but to mock it\n * out easily in tests.\n *\n * @visibleForTesting\n * @const {!{accuratePrng: function():number}}\n */\nexport const RANDOM_NUMBER_GENERATORS = {\n  accuratePrng: slowButAccuratePrng,\n};\n\n/**\n * Selects, uniformly at random, a single item from the array.\n * @param {!Array<string>} arr Object to select from.\n * @return {?string} Single item from arr or null if arr was empty.\n */\nfunction selectRandomItem(arr) {\n  const rn = RANDOM_NUMBER_GENERATORS.accuratePrng();\n  return arr[Math.floor(rn * arr.length)] || null;\n}\n\n/**\n * Selects which page-level experiment branches are enabled. If a given\n * experiment name is already set (including to the null / no branches selected\n * state), this won't alter its state.\n *\n * Check whether a given experiment is set using isExperimentOn(win,\n * experimentName) and, if it is on, look for which branch is selected in\n * win.experimentBranches[experimentName].\n *\n * @param {!Window} win Window context on which to save experiment\n *     selection state.\n * @param {!Object<string, !ExperimentInfo>} experiments  Set of experiments to\n *     configure for this page load.\n * @return {!Object<string, string>} Map of experiment names to selected\n *     branches.\n */\nexport function randomlySelectUnsetExperiments(win, experiments) {\n  win.experimentBranches = win.experimentBranches || {};\n  const selectedExperiments = {};\n  for (const experimentName in experiments) {\n    // Skip experimentName if it is not a key of experiments object or if it\n    // has already been populated by some other property.\n    if (!hasOwn(experiments, experimentName)) {\n      continue;\n    }\n    if (hasOwn(win.experimentBranches, experimentName)) {\n      selectedExperiments[experimentName] =\n          win.experimentBranches[experimentName];\n      continue;\n    }\n\n    if (!experiments[experimentName].isTrafficEligible ||\n        !experiments[experimentName].isTrafficEligible(win)) {\n      win.experimentBranches[experimentName] = null;\n      continue;\n    }\n\n    // If we're in the experiment, but we haven't already forced a specific\n    // experiment branch (e.g., via a test setup), then randomize the branch\n    // choice.\n    if (!win.experimentBranches[experimentName] &&\n      isExperimentOn(win, /*OK*/experimentName)) {\n      const {branches} = experiments[experimentName];\n      win.experimentBranches[experimentName] = selectRandomItem(branches);\n      selectedExperiments[experimentName] =\n          win.experimentBranches[experimentName];\n    }\n  }\n  return selectedExperiments;\n}\n\n/**\n * Returns the experiment branch enabled for the given experiment ID.\n * For example, 'control' or 'experiment'.\n *\n * @param {!Window} win Window context to check for experiment state.\n * @param {string} experimentName Name of the experiment to check.\n * @return {?string} Active experiment branch ID for experimentName (possibly\n *     null if experimentName has been tested but no branch was enabled).\n */\nexport function getExperimentBranch(win, experimentName) {\n  return win.experimentBranches ? win.experimentBranches[experimentName] : null;\n}\n\n/**\n * Force enable (or disable) a specific branch of a given experiment name.\n * Disables the experiment name altogether if branchId is falseish.\n *\n * @param {!Window} win Window context to check for experiment state.\n * @param {string} experimentName Name of the experiment to check.\n * @param {?string} branchId ID of branch to force or null to disable\n *     altogether.\n * @visibleForTesting\n */\nexport function forceExperimentBranch(win, experimentName, branchId) {\n  win.experimentBranches = win.experimentBranches || {};\n  toggleExperiment(win, experimentName, !!branchId, true);\n  win.experimentBranches[experimentName] = branchId;\n}\n","/**\n * Copyright 2015 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {getMode} from './mode';\nimport {getModeObject} from './mode-object';\nimport {isEnumValue} from './types';\n\n/**\n * Triple zero width space.\n *\n * This is added to user error messages, so that we can later identify\n * them, when the only thing that we have is the message. This is the\n * case in many browsers when the global exception handler is invoked.\n *\n * @const {string}\n */\nexport const USER_ERROR_SENTINEL = '\\u200B\\u200B\\u200B';\n\n\n/**\n * Four zero width space.\n *\n * @const {string}\n */\nexport const USER_ERROR_EMBED_SENTINEL = '\\u200B\\u200B\\u200B\\u200B';\n\n\n/**\n * @param {string} message\n * @return {boolean} Whether this message was a user error.\n */\nexport function isUserErrorMessage(message) {\n  return message.indexOf(USER_ERROR_SENTINEL) >= 0;\n}\n\n/**\n * @param {string} message\n * @return {boolean} Whether this message was a a user error from an iframe embed.\n */\nexport function isUserErrorEmbed(message) {\n  return message.indexOf(USER_ERROR_EMBED_SENTINEL) >= 0;\n}\n\n\n/**\n * @enum {number}\n * @private Visible for testing only.\n */\nexport const LogLevel = {\n  OFF: 0,\n  ERROR: 1,\n  WARN: 2,\n  INFO: 3,\n  FINE: 4,\n};\n\n/**\n * Sets reportError function. Called from error.js to break cyclic\n * dependency.\n * @param {function(*, !Element=)|undefined} fn\n */\nexport function setReportError(fn) {\n  self.reportError = fn;\n}\n\n/**\n * @type {!LogLevel|undefined}\n * @private\n */\nlet levelOverride_ = undefined;\n\n/**\n * @param {!LogLevel} level\n */\nexport function overrideLogLevel(level) {\n  levelOverride_ = level;\n}\n\n/**\n * Logging class. Use of sentinel string instead of a boolean to check user/dev\n * errors because errors could be rethrown by some native code as a new error,\n * and only a message would survive. Also, some browser don’t support a 5th\n * error object argument in window.onerror. List of supporting browser can be\n * found here:\n * https://blog.sentry.io/2016/01/04/client-javascript-reporting-window-onerror.html\n * @final\n * @private Visible for testing only.\n */\nexport class Log {\n  /**\n   * opt_suffix will be appended to error message to identify the type of the\n   * error message. We can't rely on the error object to pass along the type\n   * because some browsers do not have this param in its window.onerror API.\n   * See:\n   * https://blog.sentry.io/2016/01/04/client-javascript-reporting-window-onerror.html\n   *\n   * @param {!Window} win\n   * @param {function(!./mode.ModeDef):!LogLevel} levelFunc\n   * @param {string=} opt_suffix\n   */\n  constructor(win, levelFunc, opt_suffix) {\n    /**\n     * In tests we use the main test window instead of the iframe where\n     * the tests runs because only the former is relayed to the console.\n     * @const {!Window}\n     */\n    this.win = (getMode().test && win.AMP_TEST_IFRAME) ? win.parent : win;\n\n    /** @private @const {function(!./mode.ModeDef):!LogLevel} */\n    this.levelFunc_ = levelFunc;\n\n    /** @private @const {!LogLevel} */\n    this.level_ = this.defaultLevel_();\n\n    /** @private @const {string} */\n    this.suffix_ = opt_suffix || '';\n  }\n\n  /**\n   * @return {!LogLevel}\n   * @private\n   */\n  getLevel_() {\n    return (levelOverride_ !== undefined) ? levelOverride_ : this.level_;\n  }\n\n  /**\n   * @return {!LogLevel}\n   * @private\n   */\n  defaultLevel_() {\n    // No console - can't enable logging.\n    if (!this.win.console || !this.win.console.log) {\n      return LogLevel.OFF;\n    }\n\n    // Logging has been explicitly disabled.\n    if (getMode().log == '0') {\n      return LogLevel.OFF;\n    }\n\n    // Logging is enabled for tests directly.\n    if (getMode().test && this.win.ENABLE_LOG) {\n      return LogLevel.FINE;\n    }\n\n    // LocalDev by default allows INFO level, unless overriden by `#log`.\n    if (getMode().localDev && !getMode().log) {\n      return LogLevel.INFO;\n    }\n\n    // Delegate to the specific resolver.\n    return this.levelFunc_(getModeObject());\n  }\n\n  /**\n   * @param {string} tag\n   * @param {string} level\n   * @param {!Array} messages\n   */\n  msg_(tag, level, messages) {\n    if (this.getLevel_() != LogLevel.OFF) {\n      let fn = this.win.console.log;\n      if (level == 'ERROR') {\n        fn = this.win.console.error || fn;\n      } else if (level == 'INFO') {\n        fn = this.win.console.info || fn;\n      } else if (level == 'WARN') {\n        fn = this.win.console.warn || fn;\n      }\n      if (getMode().localDev) {\n        messages.unshift('[' + tag + ']');\n      }\n      fn.apply(this.win.console, messages);\n    }\n  }\n\n  /**\n   * Whether the logging is enabled.\n   * @return {boolean}\n   */\n  isEnabled() {\n    return this.getLevel_() != LogLevel.OFF;\n  }\n\n  /**\n   * Reports a fine-grained message.\n   * @param {string} tag\n   * @param {...*} var_args\n   */\n  fine(tag, var_args) {\n    if (this.getLevel_() >= LogLevel.FINE) {\n      this.msg_(tag, 'FINE', Array.prototype.slice.call(arguments, 1));\n    }\n  }\n\n  /**\n   * Reports a informational message.\n   * @param {string} tag\n   * @param {...*} var_args\n   */\n  info(tag, var_args) {\n    if (this.getLevel_() >= LogLevel.INFO) {\n      this.msg_(tag, 'INFO', Array.prototype.slice.call(arguments, 1));\n    }\n  }\n\n  /**\n   * Reports a warning message.\n   * @param {string} tag\n   * @param {...*} var_args\n   */\n  warn(tag, var_args) {\n    if (this.getLevel_() >= LogLevel.WARN) {\n      this.msg_(tag, 'WARN', Array.prototype.slice.call(arguments, 1));\n    }\n  }\n\n  /**\n   * Reports an error message. If the logging is disabled, the error is rethrown\n   * asynchronously.\n   * @param {string} tag\n   * @param {...*} var_args\n   * @return {!Error|undefined}\n   * @private\n   */\n  error_(tag, var_args) {\n    if (this.getLevel_() >= LogLevel.ERROR) {\n      this.msg_(tag, 'ERROR', Array.prototype.slice.call(arguments, 1));\n    } else {\n      const error = createErrorVargs.apply(null,\n          Array.prototype.slice.call(arguments, 1));\n      this.prepareError_(error);\n      return error;\n    }\n  }\n\n  /**\n   * Reports an error message.\n   * @param {string} tag\n   * @param {...*} var_args\n   */\n  error(tag, var_args) {\n    const error = this.error_.apply(this, arguments);\n    if (error) {\n      error.name = tag || error.name;\n      // reportError is installed globally per window in the entry point.\n      self.reportError(error);\n    }\n  }\n\n  /**\n   * Reports an error message and marks with an expected property. If the\n   * logging is disabled, the error is rethrown asynchronously.\n   * @param {string} unusedTag\n   * @param {...*} var_args\n   */\n  expectedError(unusedTag, var_args) {\n    const error = this.error_.apply(this, arguments);\n    if (error) {\n      error.expected = true;\n      // reportError is installed globally per window in the entry point.\n      self.reportError(error);\n    }\n  }\n\n  /**\n   * Creates an error object.\n   * @param {...*} var_args\n   * @return {!Error}\n   */\n  createError(var_args) {\n    const error = createErrorVargs.apply(null, arguments);\n    this.prepareError_(error);\n    return error;\n  }\n\n  /**\n   * Creates an error object with its expected property set to true.\n   * @param {...*} var_args\n   * @return {!Error}\n   */\n  createExpectedError(var_args) {\n    const error = createErrorVargs.apply(null, arguments);\n    this.prepareError_(error);\n    error.expected = true;\n    return error;\n  }\n\n  /**\n   * Throws an error if the first argument isn't trueish.\n   *\n   * Supports argument substitution into the message via %s placeholders.\n   *\n   * Throws an error object that has two extra properties:\n   * - associatedElement: This is the first element provided in the var args.\n   *   It can be used for improved display of error messages.\n   * - messageArray: The elements of the substituted message as non-stringified\n   *   elements in an array. When e.g. passed to console.error this yields\n   *   native displays of things like HTML elements.\n   *\n   * @param {T} shouldBeTrueish The value to assert. The assert fails if it does\n   *     not evaluate to true.\n   * @param {string=} opt_message The assertion message\n   * @param {...*} var_args Arguments substituted into %s in the message.\n   * @return {T} The value of shouldBeTrueish.\n   * @template T\n   * eslint \"google-camelcase/google-camelcase\": 0\n   */\n  assert(shouldBeTrueish, opt_message, var_args) {\n    let firstElement;\n    if (!shouldBeTrueish) {\n      const message = opt_message || 'Assertion failed';\n      const splitMessage = message.split('%s');\n      const first = splitMessage.shift();\n      let formatted = first;\n      const messageArray = [];\n      pushIfNonEmpty(messageArray, first);\n      for (let i = 2; i < arguments.length; i++) {\n        const val = arguments[i];\n        if (val && val.tagName) {\n          firstElement = val;\n        }\n        const nextConstant = splitMessage.shift();\n        messageArray.push(val);\n        pushIfNonEmpty(messageArray, nextConstant.trim());\n        formatted += toString(val) + nextConstant;\n      }\n      const e = new Error(formatted);\n      e.fromAssert = true;\n      e.associatedElement = firstElement;\n      e.messageArray = messageArray;\n      this.prepareError_(e);\n      // reportError is installed globally per window in the entry point.\n      self.reportError(e);\n      throw e;\n    }\n    return shouldBeTrueish;\n  }\n\n  /**\n   * Throws an error if the first argument isn't an Element\n   *\n   * Otherwise see `assert` for usage\n   *\n   * @param {*} shouldBeElement\n   * @param {string=} opt_message The assertion message\n   * @return {!Element} The value of shouldBeTrueish.\n   * @template T\n   * eslint \"google-camelcase/google-camelcase\": 2\n   */\n  assertElement(shouldBeElement, opt_message) {\n    const shouldBeTrueish = shouldBeElement && shouldBeElement.nodeType == 1;\n    this.assert(shouldBeTrueish, (opt_message || 'Element expected') + ': %s',\n        shouldBeElement);\n    return /** @type {!Element} */ (shouldBeElement);\n  }\n\n  /**\n   * Throws an error if the first argument isn't a string. The string can\n   * be empty.\n   *\n   * For more details see `assert`.\n   *\n   * @param {*} shouldBeString\n   * @param {string=} opt_message The assertion message\n   * @return {string} The string value. Can be an empty string.\n   * eslint \"google-camelcase/google-camelcase\": 2\n   */\n  assertString(shouldBeString, opt_message) {\n    this.assert(typeof shouldBeString == 'string',\n        (opt_message || 'String expected') + ': %s', shouldBeString);\n    return /** @type {string} */ (shouldBeString);\n  }\n\n  /**\n   * Throws an error if the first argument isn't a number. The allowed values\n   * include `0` and `NaN`.\n   *\n   * For more details see `assert`.\n   *\n   * @param {*} shouldBeNumber\n   * @param {string=} opt_message The assertion message\n   * @return {number} The number value. The allowed values include `0`\n   *   and `NaN`.\n   */\n  assertNumber(shouldBeNumber, opt_message) {\n    this.assert(typeof shouldBeNumber == 'number',\n        (opt_message || 'Number expected') + ': %s', shouldBeNumber);\n    return /** @type {number} */ (shouldBeNumber);\n  }\n\n  /**\n   * Throws an error if the first argument isn't a boolean.\n   *\n   * For more details see `assert`.\n   *\n   * @param {*} shouldBeBoolean\n   * @param {string=} opt_message The assertion message\n   * @return {boolean} The boolean value.\n   */\n  assertBoolean(shouldBeBoolean, opt_message) {\n    this.assert(!!shouldBeBoolean === shouldBeBoolean,\n        (opt_message || 'Boolean expected') + ': %s', shouldBeBoolean);\n    return /** @type {boolean} */ (shouldBeBoolean);\n  }\n\n  /**\n   * Asserts and returns the enum value. If the enum doesn't contain such a\n   * value, the error is thrown.\n   *\n   * @param {!Object<T>} enumObj\n   * @param {string} s\n   * @param {string=} opt_enumName\n   * @return {T}\n   * @template T\n   * eslint \"google-camelcase/google-camelcase\": 2\n   */\n  assertEnumValue(enumObj, s, opt_enumName) {\n    if (isEnumValue(enumObj, s)) {\n      return s;\n    }\n    this.assert(false,\n        'Unknown %s value: \"%s\"',\n        opt_enumName || 'enum', s);\n  }\n\n  /**\n   * @param {!Error} error\n   * @private\n   */\n  prepareError_(error) {\n    error = duplicateErrorIfNecessary(error);\n    if (this.suffix_) {\n      if (!error.message) {\n        error.message = this.suffix_;\n      } else if (error.message.indexOf(this.suffix_) == -1) {\n        error.message += this.suffix_;\n      }\n    } else if (isUserErrorMessage(error.message)) {\n      error.message = error.message.replace(USER_ERROR_SENTINEL, '');\n    }\n  }\n}\n\n/**\n * @param {string|!Element} val\n * @return {string}\n */\nfunction toString(val) {\n  // Do check equivalent to `val instanceof Element` without cross-window bug\n  if (val && val.nodeType == 1) {\n    return val.tagName.toLowerCase() + (val.id ? '#' + val.id : '');\n  }\n  return /** @type {string} */ (val);\n}\n\n\n/**\n * @param {!Array} array\n * @param {*} val\n */\nfunction pushIfNonEmpty(array, val) {\n  if (val != '') {\n    array.push(val);\n  }\n}\n\n/**\n * Some exceptions (DOMException, namely) have read-only message.\n * @param {!Error} error\n * @return {!Error};\n */\nexport function duplicateErrorIfNecessary(error) {\n  const {message} = error;\n  const test = String(Math.random());\n  error.message = test;\n\n  if (error.message === test) {\n    error.message = message;\n    return error;\n  }\n\n  const e = new Error(error.message);\n  // Copy all the extraneous things we attach.\n  for (const prop in error) {\n    e[prop] = error[prop];\n  }\n  // Ensure these are copied.\n  e.stack = error.stack;\n  return e;\n}\n\n/**\n * @param {...*} var_args\n * @return {!Error}\n * @visibleForTesting\n */\nexport function createErrorVargs(var_args) {\n  let error = null;\n  let message = '';\n  for (let i = 0; i < arguments.length; i++) {\n    const arg = arguments[i];\n    if (arg instanceof Error && !error) {\n      error = duplicateErrorIfNecessary(arg);\n    } else {\n      if (message) {\n        message += ' ';\n      }\n      message += arg;\n    }\n  }\n\n  if (!error) {\n    error = new Error(message);\n  } else if (message) {\n    error.message = message + ': ' + error.message;\n  }\n  return error;\n}\n\n\n/**\n * Rethrows the error without terminating the current context. This preserves\n * whether the original error designation is a user error or a dev error.\n * @param {...*} var_args\n */\nexport function rethrowAsync(var_args) {\n  const error = createErrorVargs.apply(null, arguments);\n  setTimeout(() => {\n    // reportError is installed globally per window in the entry point.\n    self.reportError(error);\n    throw error;\n  });\n}\n\n\n/**\n * Cache for logs. We do not use a Service since the service module depends\n * on Log and closure literally can't even.\n * @type {{user: ?Log, dev: ?Log, userForEmbed: ?Log}}\n */\nself.log = (self.log || {\n  user: null,\n  dev: null,\n  userForEmbed: null,\n});\n\nconst logs = self.log;\n\n/**\n * Eventually holds a constructor for Log objects. Lazily initialized, so we\n * can avoid ever referencing the real constructor except in JS binaries\n * that actually want to include the implementation.\n * @type {?Function}\n */\nlet logConstructor = null;\n\n/**\n * Initializes log contructor.\n */\nexport function initLogConstructor() {\n  logConstructor = Log;\n  // Initialize instances for use. If a binary (an extension for example) that\n  // does not call `initLogConstructor` invokes `dev()` or `user()` earlier than\n  // the binary that does call `initLogConstructor` (amp.js), the extension will\n  // throw an error as that extension will never be able to initialize the log\n  // instances and we also don't want it to call `initLogConstructor` either\n  // (since that will cause the Log implementation to be bundled into that\n  // binary). So we must initialize the instances eagerly so that they are ready\n  // for use (stored globally) after the main binary calls `initLogConstructor`.\n  dev();\n  user();\n}\n\n/**\n * Resets log contructor for testing.\n */\nexport function resetLogConstructorForTesting() {\n  logConstructor = null;\n}\n\n/**\n * Publisher level log.\n *\n * Enabled in the following conditions:\n *  1. Not disabled using `#log=0`.\n *  2. Development mode is enabled via `#development=1` or logging is explicitly\n *     enabled via `#log=D` where D >= 1.\n *  3. AMP.setLogLevel(D) is called, where D >= 1.\n *\n * @param {!Element=} opt_element\n * @return {!Log}\n */\nexport function user(opt_element) {\n  if (!logs.user) {\n    logs.user = getUserLogger(USER_ERROR_SENTINEL);\n  }\n  if (!isFromEmbed(logs.user.win, opt_element)) {\n    return logs.user;\n  } else {\n    if (logs.userForEmbed) {\n      return logs.userForEmbed;\n    }\n    return logs.userForEmbed = getUserLogger(USER_ERROR_EMBED_SENTINEL);\n  }\n}\n\n/**\n * Getter for user logger\n * @param {string=} suffix\n * @return {!Log}\n */\nfunction getUserLogger(suffix) {\n  if (!logConstructor) {\n    throw new Error('failed to call initLogConstructor');\n  }\n  return new logConstructor(self, mode => {\n    const logNum = parseInt(mode.log, 10);\n    if (mode.development || logNum >= 1) {\n      return LogLevel.FINE;\n    }\n    return LogLevel.WARN;\n  }, suffix);\n}\n\n/**\n * AMP development log. Calls to `devLog().assert` and `dev.fine` are stripped\n * in the PROD binary. However, `devLog().assert` result is preserved in either\n * case.\n *\n * Enabled in the following conditions:\n *  1. Not disabled using `#log=0`.\n *  2. Logging is explicitly enabled via `#log=D`, where D >= 2.\n *  3. AMP.setLogLevel(D) is called, where D >= 2.\n *\n * @return {!Log}\n */\nexport function dev() {\n  if (logs.dev) {\n    return logs.dev;\n  }\n  if (!logConstructor) {\n    throw new Error('failed to call initLogConstructor');\n  }\n  return logs.dev = new logConstructor(self, mode => {\n    const logNum = parseInt(mode.log, 10);\n    if (logNum >= 3) {\n      return LogLevel.FINE;\n    }\n    if (logNum >= 2) {\n      return LogLevel.INFO;\n    }\n    return LogLevel.OFF;\n  });\n}\n\n/**\n * @param {!Window} win\n * @param {!Element=} opt_element\n * @return {boolean} isEmbed\n */\nexport function isFromEmbed(win, opt_element) {\n  if (!opt_element) {\n    return false;\n  }\n  return opt_element.ownerDocument.defaultView != win;\n}\n","/**\n * Copyright 2016 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {getMode} from './mode';\n\n/**\n * Provides info about the current app. This return value may be cached and\n * passed around as it will always be DCE'd.\n * @param {?Window=} opt_win\n * @return {!./mode.ModeDef}\n */\nexport function getModeObject(opt_win) {\n  return {\n    localDev: getMode(opt_win).localDev,\n    development: getMode(opt_win).development,\n    filter: getMode(opt_win).filter,\n    minified: getMode(opt_win).minified,\n    lite: getMode(opt_win).lite,\n    test: getMode(opt_win).test,\n    log: getMode(opt_win).log,\n    version: getMode(opt_win).version,\n    rtvVersion: getMode(opt_win).rtvVersion,\n  };\n}\n","/**\n * Copyright 2015 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {parseQueryString_} from './url-parse-query-string';\n\n/**\n * @typedef {{\n *   localDev: boolean,\n *   development: boolean,\n *   filter: (string|undefined),\n *   minified: boolean,\n *   lite: boolean,\n *   test: boolean,\n *   log: (string|undefined),\n *   version: string,\n *   rtvVersion: string,\n * }}\n */\nexport let ModeDef;\n\n/** @type {string} */\nconst version = '$internalRuntimeVersion$';\n\n/**\n * `rtvVersion` is the prefixed version we serve off of the cdn.\n * The prefix denotes canary(00) or prod(01) or an experiment version ( > 01).\n * @type {string}\n */\nlet rtvVersion = '';\n\n/**\n * Provides info about the current app.\n * @param {?Window=} opt_win\n * @return {!ModeDef}\n */\nexport function getMode(opt_win) {\n  const win = opt_win || self;\n  if (win.AMP_MODE) {\n    return win.AMP_MODE;\n  }\n  return win.AMP_MODE = getMode_(win);\n}\n\n/**\n * Provides info about the current app.\n * @param {!Window} win\n * @return {!ModeDef}\n */\nfunction getMode_(win) {\n  // Magic constants that are replaced by closure compiler.\n  // IS_MINIFIED is always replaced with true when closure compiler is used\n  // while IS_DEV is only replaced when `gulp dist` is called without the\n  // --fortesting flag.\n  const IS_DEV = true;\n  const IS_MINIFIED = false;\n\n  const localDevEnabled = !!(self.AMP_CONFIG && self.AMP_CONFIG.localDev);\n  const runningTests = IS_DEV && !!(win.AMP_TEST || win.__karma__);\n  const isLocalDev = IS_DEV && (localDevEnabled || runningTests);\n  const hashQuery = parseQueryString_(\n      // location.originalHash is set by the viewer when it removes the fragment\n      // from the URL.\n      win.location.originalHash || win.location.hash);\n\n  const searchQuery = parseQueryString_(win.location.search);\n\n  if (!rtvVersion) {\n    rtvVersion = getRtvVersion(win, isLocalDev);\n  }\n\n  // The `minified`, `test` and `localDev` properties are replaced\n  // as boolean literals when we run `gulp dist` without the `--fortesting`\n  // flags. This improved DCE on the production file we deploy as the code\n  // paths for localhost/testing/development are eliminated.\n  return {\n    localDev: isLocalDev,\n    // Triggers validation or enable pub level logging. Validation can be\n    // bypassed via #validate=0.\n    // Note that AMP_DEV_MODE flag is used for testing purposes.\n    development: !!(hashQuery['development'] == '1' || win.AMP_DEV_MODE),\n    examiner: hashQuery['development'] == '2',\n    // Allows filtering validation errors by error category. For the\n    // available categories, see ErrorCategory in validator/validator.proto.\n    filter: hashQuery['filter'],\n    // amp-geo override\n    geoOverride: hashQuery['amp-geo'],\n    minified: IS_MINIFIED,\n    // Whether document is in an amp-lite viewer. It signal that the user\n    // would prefer to use less bandwidth.\n    lite: searchQuery['amp_lite'] != undefined,\n    test: runningTests,\n    log: hashQuery['log'],\n    version,\n    rtvVersion,\n  };\n}\n\n/**\n * Retrieve the `rtvVersion` which will have a numeric prefix\n * denoting canary/prod/experiment (unless `isLocalDev` is true).\n *\n * @param {!Window} win\n * @param {boolean} isLocalDev\n * @return {string}\n */\nfunction getRtvVersion(win, isLocalDev) {\n  // If it's local dev then we won't actually have a full version so\n  // just use the version.\n  if (isLocalDev) {\n    return version;\n  }\n\n  if (win.AMP_CONFIG && win.AMP_CONFIG.v) {\n    return win.AMP_CONFIG.v;\n  }\n\n  // Currently `$internalRuntimeVersion$` and thus `mode.version` contain only\n  // major version. The full version however must also carry the minor version.\n  // We will default to production default `01` minor version for now.\n  // TODO(erwinmombay): decide whether $internalRuntimeVersion$ should contain\n  // minor version.\n  return `01${version}`;\n}\n\n\n/**\n * @param {!Window} win\n * @param {boolean} isLocalDev\n * @return {string}\n * @visibleForTesting\n */\nexport function getRtvVersionForTesting(win, isLocalDev) {\n  return getRtvVersion(win, isLocalDev);\n}\n\n\n/** @visibleForTesting */\nexport function resetRtvVersionForTesting() {\n  rtvVersion = '';\n}\n","/**\n * Copyright 2015 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {getMode} from './mode';\nimport {install as installArrayIncludes} from './polyfills/array-includes';\nimport {install as installCustomElements} from './polyfills/custom-elements';\nimport {\n  install as installDOMTokenListToggle,\n} from './polyfills/domtokenlist-toggle';\nimport {install as installDocContains} from './polyfills/document-contains';\nimport {install as installMathSign} from './polyfills/math-sign';\nimport {install as installObjectAssign} from './polyfills/object-assign';\nimport {install as installPromise} from './polyfills/promise';\nimport {installCustomElements as installRegisterElement} from\n  'document-register-element/build/document-register-element.patched';\nimport {isExperimentOn} from './experiments';\n\nif (isExperimentOn(self, 'custom-elements-v1') || getMode().test) {\n  installCustomElements(self, class {});\n} else {\n  installRegisterElement(self, 'auto');\n}\ninstallDOMTokenListToggle(self);\ninstallMathSign(self);\ninstallObjectAssign(self);\ninstallPromise(self);\ninstallDocContains(self);\ninstallArrayIncludes(self);\n","/**\n * Copyright 2016 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n/**\n * Returns true if the element is in the array and false otherwise.\n *\n * @param {*} value\n * @param {number=} opt_fromIndex\n * @return {boolean}\n * @this {Array}\n */\nfunction includes(value, opt_fromIndex) {\n  const fromIndex = opt_fromIndex || 0;\n  const len = this.length;\n  let i = fromIndex >= 0 ? fromIndex : Math.max(len + fromIndex, 0);\n  for (; i < len; i++) {\n    const other = this[i];\n    // If value has been found OR (value is NaN AND other is NaN)\n    /*eslint \"no-self-compare\": 0*/\n    if (other === value || (value !== value && other !== other)) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/**\n* Sets the Array.contains polyfill if it does not exist.\n* @param {!Window} win\n*/\nexport function install(win) {\n  if (!win.Array.prototype.includes) {\n    win.Object.defineProperty(Array.prototype, 'includes', {\n      enumerable: false,\n      configurable: true,\n      writable: true,\n      value: includes,\n    });\n  }\n}\n","/**\n * Copyright 2018 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @typedef {{\n *   promise: !Promise<undefined>,\n *   resolve: function(),\n * }}\n */\nlet DeferredDef;\n\n/**\n * @typedef {!Function}\n */\nlet CustomElementConstructorDef;\n\n/**\n * @typedef {{\n *  name: string,\n *  ctor: !CustomElementConstructorDef,\n * }}\n */\nlet CustomElementDef;\n\n/**\n * Validates the custom element's name.\n * This intentionally ignores \"valid\" higher Unicode Code Points.\n * https://html.spec.whatwg.org/multipage/custom-elements.html#valid-custom-element-name\n */\nconst VALID_NAME = /^[a-z][a-z0-9._]*-[a-z0-9._-]*$/;\nconst INVALID_NAMES = [\n  'annotation-xml',\n  'color-profile',\n  'font-face',\n  'font-face-src',\n  'font-face-uri',\n  'font-face-format',\n  'font-face-name',\n  'missing-glyph',\n];\n\n/**\n * Asserts that the custom element name conforms to the spec.\n *\n * @param {!Function} SyntaxError\n * @param {string} name\n */\nfunction assertValidName(SyntaxError, name) {\n  if (!VALID_NAME.test(name) || INVALID_NAMES.indexOf(name) >= 0) {\n    throw new SyntaxError(`invalid custom element name \"${name}\"`);\n  }\n}\n\n/**\n * Does win have a full Custom Elements registry?\n *\n * @param {!Window} win\n * @return {boolean}\n */\nfunction hasCustomElements(win) {\n  const {customElements} = win;\n\n  return !!(\n    customElements &&\n    customElements.define &&\n    customElements.get &&\n    customElements.whenDefined);\n}\n\n/**\n * Was HTMLElement already patched for this window?\n *\n * @param {!Window} win\n * @return {boolean}\n */\nfunction isPatched(win) {\n  const tag = win.HTMLElement.toString();\n  return tag.indexOf('[native code]') === -1;\n}\n\n/**\n * The public Custom Elements API.\n */\nclass CustomElementRegistry {\n  /**\n   * @param {!Window} win\n   * @param {!Registry} registry\n   */\n  constructor(win, registry) {\n    /**\n     * @const @private\n     */\n    this.win_ = win;\n\n    /**\n     * @const @private\n     */\n    this.registry_ = registry;\n\n    /**\n     * @type {!Object<string, DeferredDef>}\n     * @private\n     * @const\n     */\n    this.pendingDefines_ = this.win_.Object.create(null);\n  }\n\n  /**\n   * Register the custom element.\n   *\n   * @param {string} name\n   * @param {!CustomElementConstructorDef} ctor\n   * @param {!Object=} options\n   */\n  define(name, ctor, options) {\n    this.registry_.define(name, ctor, options);\n\n    // If anyone is waiting for this custom element to be defined, resolve\n    // their promise.\n    const pending = this.pendingDefines_;\n    const deferred = pending[name];\n    if (deferred) {\n      deferred.resolve();\n      delete pending[name];\n    }\n  }\n\n  /**\n   * Get the constructor of the (already defined) custom element.\n   *\n   * @param {string} name\n   * @return {!CustomElementConstructorDef|undefined}\n   */\n  get(name) {\n    const def = this.registry_.getByName(name);\n    if (def) {\n      return def.ctor;\n    }\n  }\n\n  /**\n   * Returns a promise that waits until the custom element is defined.\n   * If the custom element is already defined, returns a resolved promise.\n   *\n   * @param {string} name\n   * @return {!Promise<undefined>}\n   */\n  whenDefined(name) {\n    const {Promise, SyntaxError} = this.win_;\n    assertValidName(SyntaxError, name);\n\n    if (this.registry_.getByName(name)) {\n      return Promise.resolve();\n    }\n\n    const pending = this.pendingDefines_;\n    const deferred = pending[name];\n    if (deferred) {\n      return deferred.promise;\n    }\n\n    let resolve;\n    const promise = new /*OK*/Promise(res => resolve = res);\n    pending[name] = {\n      promise,\n      resolve,\n    };\n\n    return promise;\n  }\n\n  /**\n   * Upgrade all custom elements inside root.\n   *\n   * @param {!Node} root\n   */\n  upgrade(root) {\n    this.registry_.upgrade(root);\n  }\n}\n\n/**\n * This internal APIs necessary to run the CustomElementRegistry.\n * Since Registry is never exposed externally, all methods are actually\n * available on the instance.\n */\nclass Registry {\n  /**\n   * @param {!Window} win\n   */\n  constructor(win) {\n    /**\n     * @private @const\n     */\n    this.win_ = win;\n\n    /**\n     * @private @const\n     */\n    this.doc_ = win.document;\n\n    /**\n     * @type {!Object<string, !CustomElementDef>}\n     * @private\n     * @const\n     */\n    this.definitions_ = win.Object.create(null);\n\n    /**\n     * A up-to-date DOM selector for all custom elements.\n     * @type {string}\n     */\n    this.query_ = '';\n\n    /**\n     * The currently upgrading element.\n     * @private {Element}\n     */\n    this.current_ = null;\n  }\n\n  /**\n   * The currently-being-upgraded custom element.\n   *\n   * When an already created (through the DOM parsing APIs, or innerHTML)\n   * custom element node is being upgraded, we can't just create a new node\n   * (it's illegal in the spec). But we still need to run the custom element's\n   * constructor code on the node. We avoid this conundrum by running the\n   * constructor while returning this current node in the HTMLElement\n   * class constructor (the base class of all custom elements).\n   *\n   * @return {Element}\n   */\n  current() {\n    const current = this.current_;\n    this.current_ = null;\n    return current;\n  }\n\n  /**\n   * Finds the custom element definition by name.\n   *\n   * @param {string} name\n   * @return {CustomElementDef|undefined}\n   */\n  getByName(name) {\n    const definition = this.definitions_[name];\n    if (definition) {\n      return definition;\n    }\n  }\n\n  /**\n   * Finds the custom element definition by constructor instance.\n   *\n   * @param {CustomElementConstructorDef} ctor\n   * @return {CustomElementDef|undefined}\n   */\n  getByConstructor(ctor) {\n    const definitions = this.definitions_;\n\n    for (const name in definitions) {\n      const def = definitions[name];\n      if (def.ctor === ctor) {\n        return def;\n      }\n    }\n  }\n\n  /**\n   * Registers the custom element definition, and upgrades all elements by that\n   * name in the root document.\n   *\n   * @param {string} name\n   * @param {!CustomElementConstructorDef} ctor\n   * @param {!Object|undefined} options\n   */\n  define(name, ctor, options) {\n    const {Error, SyntaxError} = this.win_;\n\n    if (options) {\n      throw new Error('Extending native custom elements is not supported');\n    }\n\n    assertValidName(SyntaxError, name);\n\n    if (this.getByName(name) ||\n        this.getByConstructor(ctor)) {\n      throw new Error(`duplicate definition \"${name}\"`);\n    }\n\n    // TODO(jridgewell): Record connectedCallback, disconnectedCallback,\n    // adoptedCallback, attributeChangedCallback, and observedAttributes.\n    // TODO(jridgewell): If attributeChangedCallback, gather observedAttributes\n    this.definitions_[name] = {\n      name,\n      ctor,\n    };\n\n    this.observe_(name);\n    this.upgrade(this.doc_, name);\n  }\n\n  /**\n   * Upgrades custom elements descendants of root (but not including root).\n   *\n   * When called with an opt_query, it both upgrades and connects the custom\n   * elements (this is used during the custom element define algorithm).\n   *\n   * @param {!Node} root\n   * @param {string=} opt_query\n   */\n  upgrade(root, opt_query) {\n    // Only CustomElementRegistry.p.define provides a query (the newly defined\n    // custom element). In this case, we are both upgrading _and_ connecting\n    // the custom elements.\n    const newlyDefined = !!opt_query;\n    const query = opt_query || this.query_;\n    const upgradeCandidates = this.queryAll_(root, query);\n\n    for (let i = 0; i < upgradeCandidates.length; i++) {\n      const candidate = upgradeCandidates[i];\n      if (newlyDefined) {\n        this.connectedCallback_(candidate);\n      } else {\n        this.upgradeSelf(candidate);\n      }\n    }\n  }\n\n  /**\n   * Upgrades the custom element node, if a custom element has been registered\n   * by this name.\n   *\n   * @param {!Node} node\n   */\n  upgradeSelf(node) {\n    const def = this.getByName(node.localName);\n    if (!def) {\n      return;\n    }\n\n    this.upgradeSelf_(/** @type {!Element} */(node), def);\n  }\n\n  /**\n   * @param {!Node} root\n   * @param {string} query\n   * @return {!Array|!NodeList}\n   */\n  queryAll_(root, query) {\n    if (!query || !root.querySelectorAll) {\n      // Nothing to do...\n      return [];\n    }\n\n    return root.querySelectorAll(query);\n  }\n\n  /**\n   * Upgrades the (already created via DOM parsing) custom element.\n   *\n   * @param {!Element} node\n   * @param {!CustomElementDef} def\n   */\n  upgradeSelf_(node, def) {\n    const {ctor} = def;\n    if (node instanceof ctor) {\n      return;\n    }\n\n    // Despite how it looks, this is not a useless construction.\n    // HTMLElementPolyfill (the base class of all custom elements) will return\n    // the current node, allowing the custom element's subclass constructor to\n    // run on the node. The node itself is already constructed, so the return\n    // value is just the node.\n    this.current_ = node;\n    const el = new ctor();\n\n    if (el !== node) {\n      throw new this.win_.Error(\n          'Constructor illegally returned a different instance.');\n    }\n  }\n\n  /**\n   * Fires connectedCallback on the custom element, if it has one.\n   * This also upgrades the custom element, since it may not have been\n   * accessible via the root document before (a detached DOM tree).\n   *\n   * @param {!Node} node\n   */\n  connectedCallback_(node) {\n    const def = this.getByName(node.localName);\n    if (!def) {\n      return;\n    }\n    this.upgradeSelf_(/** @type {!Element} */(node), def);\n    // TODO(jridgewell): It may be appropriate to adoptCallback, if the node\n    // used to be in another doc.\n    // TODO(jridgewell): I should be calling the definitions connectedCallback\n    // with node as the context.\n    if (node.connectedCallback) {\n      node.connectedCallback();\n    }\n  }\n\n  /**\n   * Fires disconnectedCallback on the custom element, if it has one.\n   *\n   * @param {!Node} node\n   */\n  disconnectedCallback_(node) {\n    // TODO(jridgewell): I should be calling the definitions connectedCallback\n    // with node as the context.\n    if (node.disconnectedCallback) {\n      node.disconnectedCallback();\n    }\n  }\n\n  /**\n   * Records name as a registered custom element to observe.\n   *\n   * Starts the Mutation Observer if this is the first registered custom\n   * element. This is deferred until the first custom element is defined to\n   * speed up initial rendering of the page.\n   *\n   * Mutation Observers are conveniently available in every browser we care\n   * about. When a node is connected to the root document, all custom\n   * elements (including that node iteself) will be upgraded and call\n   * connectedCallback. When a node is disconnectedCallback from the root\n   * document, all custom elements will call disconnectedCallback.\n   *\n   * @param {string} name\n   */\n  observe_(name) {\n    if (this.query_) {\n      this.query_ += `,${name}`;\n      return;\n    }\n\n    this.query_ = name;\n\n    // The first registered name starts the mutation observer.\n    const observer = new this.win_.MutationObserver(records => {\n      if (records) {\n        this.handleRecords_(records);\n      }\n    });\n    observer.observe(this.doc_, {\n      childList: true,\n      subtree: true,\n    });\n  }\n\n  /**\n   * Handle all the Mutation Observer's Mutation Records.\n   * All added custom elements will be upgraded (if not already) and call\n   * connectedCallback. All removed custom elements will call\n   * disconnectedCallback.\n   *\n   * @param {!Array<!MutationRecord>} records\n   */\n  handleRecords_(records) {\n    for (let i = 0; i < records.length; i++) {\n      const record = records[i];\n      if (!record) {\n        continue;\n      }\n\n      const {addedNodes, removedNodes} = record;\n      for (let i = 0; i < addedNodes.length; i++) {\n        const node = addedNodes[i];\n        const connectedCandidates = this.queryAll_(node, this.query_);\n        this.connectedCallback_(node);\n        for (let i = 0; i < connectedCandidates.length; i++) {\n          this.connectedCallback_(connectedCandidates[i]);\n        }\n      }\n\n      for (let i = 0; i < removedNodes.length; i++) {\n        const node = removedNodes[i];\n        const disconnectedCandidates = this.queryAll_(node, this.query_);\n        this.disconnectedCallback_(node);\n        for (let i = 0; i < disconnectedCandidates.length; i++) {\n          this.disconnectedCallback_(disconnectedCandidates[i]);\n        }\n      }\n    }\n  }\n}\n\n/**\n * Does the polyfilling.\n * @param {!Window} win\n */\nfunction polyfill(win) {\n  const {HTMLElement, Element, Node, Document, Object, document} = win;\n  const {createElement, cloneNode, importNode} = document;\n\n  const registry = new Registry(win);\n  const customElements = new CustomElementRegistry(win, registry);\n\n  // Expose the custom element registry.\n  // Object.getOwnPropertyDescriptor(window, 'customElements')\n  // {get: ƒ, set: undefined, enumerable: true, configurable: true}\n  Object.defineProperty(win, 'customElements', {\n    enumerable: true,\n    configurable: true,\n    // writable: false,\n    value: customElements,\n  });\n\n  // Patch createElement to immediately upgrade the custom element.\n  // This has the added benefit that it avoids the \"already created but needs\n  // constructor code run\" chicken-and-egg problem.\n  Document.prototype.createElement = function createElementPolyfill(name) {\n    const def = registry.getByName(name);\n    if (def) {\n      return new def.ctor();\n    }\n    return createElement.apply(this, arguments);\n  };\n\n  // Patch importNode to immediately upgrade custom elements.\n  // TODO(jridgewell): Can fire adoptedCallback for cross doc imports.\n  Document.prototype.importNode = function importNodePolyfill() {\n    const imported = importNode.apply(this, arguments);\n    if (imported) {\n      registry.upgradeSelf(imported);\n      registry.upgrade(imported);\n    }\n    return imported;\n  };\n\n  // Patch cloneNode to immediately upgrade custom elements.\n  Node.prototype.cloneNode = function cloneNodePolyfill() {\n    const cloned = cloneNode.apply(this, arguments);\n    registry.upgradeSelf(cloned);\n    registry.upgrade(cloned);\n    return cloned;\n  };\n\n  // Patch the innerHTML setter to immediately upgrade custom elements.\n  // Note, this could technically fire connectedCallbacks if this node was\n  // connected, but we leave that to the Mutation Observer.\n  const innerHTMLDesc = Object.getOwnPropertyDescriptor(Element.prototype,\n      'innerHTML');\n  const innerHTMLSetter = innerHTMLDesc.set;\n  innerHTMLDesc.set = function(html) {\n    innerHTMLSetter.call(this, html);\n    registry.upgrade(this);\n  };\n  Object.defineProperty(Element.prototype, 'innerHTML', innerHTMLDesc);\n\n  /**\n   * You can't use the real HTMLElement constructor, because you can't subclass\n   * it without using native classes. So, mock its approximation using\n   * createElement.\n   */\n  function HTMLElementPolyfill() {\n    const {constructor} = this;\n\n    // If we're upgrading an already created custom element, we can't create\n    // another new node (by the spec, it must be the same node).\n    let el = registry.current();\n\n    // If there's not a already created custom element, we're being invoked via\n    // `new`ing the constructor.\n    //\n    // Technically, we could get here via createElement, but we patched that.\n    // If it the custom element was registered, the patch turned it into a\n    // `new` call.\n    // If it was not registered, the native createElement is used. And if\n    // native createElement is being used and we got to this code, we're really\n    // in an infinite loop (a native createElement call just below) so we've\n    // got bigger problems.\n    //\n    // So just take my word we got here via `new`.\n    if (!el) {\n      // The custom element definition is an invariant. If the custom element\n      // is registered, everything works. If it's not, it throws in the member\n      // property access (only defined custom elements can be directly\n      // constructed via `new`).\n      const def = registry.getByConstructor(constructor);\n      el = createElement.call(document, def.name);\n    }\n\n    // Finally, if the node was already constructed, we need to reset it's\n    // prototype to the custom element prototype. And if it wasn't already\n    // constructed, we created a new node via native createElement, and we need\n    // to reset it's prototype. Basically always reset the prototype.\n    Object.setPrototypeOf(el, constructor.prototype);\n    return el;\n  }\n  subClass(Object, HTMLElement, HTMLElementPolyfill);\n\n  // Expose the polyfilled HTMLElement constructor for everyone to extend from.\n  win.HTMLElement = HTMLElementPolyfill;\n}\n\n/**\n * Wraps HTMLElement in a Reflect.construct constructor, so that transpiled\n * classes can `_this = superClass.call(this)` during their construction.\n *\n * This is only used when Custom Elements v1 is already available _and_ we're\n * using transpiled classes (which use ES5 construction idioms).\n *\n * @param {!Window} win\n */\nfunction wrapHTMLElement(win) {\n  const {HTMLElement, Reflect, Object} = win;\n  /**\n   */\n  function HTMLElementWrapper() {\n    const ctor = /** @type {function(...?):?|undefined} */(\n      /** @type {!HTMLElement} */(this).constructor);\n\n    // Reflect.construct allows us to construct a new HTMLElement without using\n    // `new` (which will always fail because native HTMLElement is a restricted\n    // constructor).\n    return Reflect.construct(HTMLElement, [], ctor);\n  }\n  subClass(Object, HTMLElement, HTMLElementWrapper);\n\n  // Expose the wrapped HTMLElement constructor for everyone to extend from.\n  win.HTMLElement = HTMLElementWrapper;\n}\n\n/**\n * Setups up prototype inheritance\n *\n * @param {!Object} Object\n * @param {!Function} superClass\n * @param {!Function} subClass\n */\nfunction subClass(Object, superClass, subClass) {\n  // Object.getOwnPropertyDescriptor(superClass.prototype, 'constructor')\n  // {value: ƒ, writable: true, enumerable: false, configurable: true}\n  subClass.prototype = Object.create(superClass.prototype, {\n    constructor: {\n      // enumerable: false,\n      configurable: true,\n      writable: true,\n      value: subClass,\n    },\n  });\n}\n\n/**\n * Polyfills Custom Elements v1 API. This has 4 modes:\n *\n * 1. Custom elements v1 already supported, using native classes\n * 2. Custom elements v1 already supported, using transpiled classes\n * 3. Custom elements v1 not supported, using native classes\n * 4. Custom elements v1 not supported, using transpiled classes\n *\n * In mode 1, nothing is done. In mode 2, a minimal polyfill is used to support\n * extending the HTMLElement base class. In mode 3 and 4, a full polyfill is\n * done.\n *\n * @param {!Window} win\n * @param {!Function} ctor\n */\nexport function install(win, ctor) {\n  if (isPatched(win)) {\n    return;\n  }\n\n  let install = true;\n  let installWrapper = false;\n\n  if (hasCustomElements(win)) {\n    // If ctor is constructable without new, it's a function. That means it was\n    // compiled down, and we need to do the minimal polyfill because all you\n    // cannot extend HTMLElement without native classes.\n    try {\n      const {Object, Reflect} = win;\n\n      // \"Construct\" ctor using ES5 idioms\n      const instance = Object.create(ctor.prototype);\n      ctor.call(instance);\n\n      // If that succeeded, we're in a transpiled environment\n      // Let's find out if we can wrap HTMLElement and avoid a full patch.\n      installWrapper = !!(Reflect && Reflect.construct);\n    } catch (e) {\n\n      // The ctor threw when we constructed is via ES5, so it's a real class.\n      // We're ok to not install the polyfill.\n      install = false;\n    }\n  }\n\n  if (installWrapper) {\n    wrapHTMLElement(win);\n  } else if (install) {\n    polyfill(win);\n  }\n}\n","/**\n * Copyright 2016 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n/**\n * Polyfill for `document.contains()` method. Notice that according to spec\n * `document.contains` is inclusionary.\n * See https://developer.mozilla.org/en-US/docs/Web/API/Node/contains\n * @param {?Node} node\n * @return {boolean}\n * @this {Node}\n */\nfunction documentContainsPolyfill(node) {\n  // Per spec, \"contains\" method is inclusionary\n  // i.e. `node.contains(node) == true`. However, we still need to test\n  // equality to the document itself.\n  return node == this || this.documentElement.contains(node);\n}\n\n\n/**\n * Polyfills `HTMLDocument.contains` API.\n * @param {!Window} win\n */\nexport function install(win) {\n  // HTMLDocument is undefined in Internet Explorer 10, but it has Document,\n  // so we use that as a fallback.\n  const documentClass = win.HTMLDocument || win.Document;\n  if (!documentClass.prototype.contains) {\n    win.Object.defineProperty(documentClass.prototype, 'contains', {\n      enumerable: false,\n      configurable: true,\n      writable: true,\n      value: documentContainsPolyfill,\n    });\n  }\n}\n","/**\n * Copyright 2016 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n/**\n * Polyfill for `DOMTokenList.prototype.toggle(token, opt_force)` method. This\n * is specially important because IE does not support `opt_force` attribute. See\n * https://goo.gl/hgKNYY for details.\n * @param {string} token\n * @param {boolean=} opt_force\n * @this {DOMTokenList}\n * @return {boolean}\n */\nfunction domTokenListTogglePolyfill(token, opt_force) {\n  const remove = opt_force === undefined ? this.contains(token) : !opt_force;\n  if (remove) {\n    this.remove(token);\n    return false;\n  } else {\n    this.add(token);\n    return true;\n  }\n}\n\n\n/**\n * Polyfills `DOMTokenList.prototype.toggle` API in IE.\n * @param {!Window} win\n */\nexport function install(win) {\n  if (isIe(win) && win.DOMTokenList) {\n    win.Object.defineProperty(win.DOMTokenList.prototype, 'toggle', {\n      enumerable: false,\n      configurable: true,\n      writable: true,\n      value: domTokenListTogglePolyfill,\n    });\n  }\n}\n\n\n/**\n * Whether the current browser is a IE browser.\n * @param {!Window} win\n * @return {boolean}\n */\nfunction isIe(win) {\n  return /Trident|MSIE|IEMobile/i.test(win.navigator.userAgent);\n}\n","/**\n * Copyright 2016 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Parses the number x and returns its sign. For positive x returns 1, for\n * negative, -1. For 0 and -0, returns 0 and -0 respectively. For any number\n * that parses to NaN, returns NaN.\n *\n * @param {number} x\n * @return {number}\n */\nexport function sign(x) {\n  x = Number(x);\n\n  // If x is 0, -0, or NaN, return it.\n  if (!x) {\n    return x;\n  }\n\n  return x > 0 ? 1 : -1;\n}\n\n\n/**\n * Sets the Math.sign polyfill if it does not exist.\n * @param {!Window} win\n */\nexport function install(win) {\n  if (!win.Math.sign) {\n    win.Object.defineProperty(win.Math, 'sign', {\n      enumerable: false,\n      configurable: true,\n      writable: true,\n      value: sign,\n    });\n  }\n}\n","/**\n * Copyright 2016 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nconst {hasOwnProperty} = Object.prototype;\n\n/**\n * Copies values of all enumerable own properties from one or more source\n * objects (provided as extended arguments to the function) to a target object.\n *\n * @param {!Object} target\n * @param {...Object} var_args\n * @return {!Object}\n */\nexport function assign(target, var_args) {\n  if (target == null) {\n    throw new TypeError('Cannot convert undefined or null to object');\n  }\n\n  const output = Object(target);\n  for (let i = 1; i < arguments.length; i++) {\n    const source = arguments[i];\n    if (source != null) {\n      for (const key in source) {\n        if (hasOwnProperty.call(source, key)) {\n          output[key] = source[key];\n        }\n      }\n    }\n  }\n  return output;\n}\n\n\n/**\n * Sets the Object.assign polyfill if it does not exist.\n * @param {!Window} win\n */\nexport function install(win) {\n  if (!win.Object.assign) {\n    win.Object.defineProperty(win.Object, 'assign', {\n      enumerable: false,\n      configurable: true,\n      writable: true,\n      value: assign,\n    });\n  }\n}\n","/**\n * Copyright 2016 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nimport * as Promise from 'promise-pjs/promise';\n\n/**\n * Sets the Promise polyfill if it does not exist.\n * @param {!Window} win\n */\nexport function install(win) {\n  if (!win.Promise) {\n    win.Promise = /** @type {?} */ (Promise);\n    // In babel the * export is an Object with a default property.\n    // In closure compiler it is the Promise function itself.\n    if (Promise.default) {\n      win.Promise = Promise.default;\n    }\n    // We copy the individual static methods, because closure\n    // compiler flattens the polyfill namespace.\n    win.Promise.resolve = Promise.resolve;\n    win.Promise.reject = Promise.reject;\n    win.Promise.all = Promise.all;\n    win.Promise.race = Promise.race;\n  }\n}\n","/**\n * Copyright 2016 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Services} from './services';\nimport {dev} from './log';\nimport {getServicePromise} from './service';\n\n/**\n * A map of services that delay rendering. The key is the name of the service\n * and the value is a DOM query which is used to check if the service is needed\n * in the current document.\n * Do not add a service unless absolutely necessary.\n *\n * \\   \\  /  \\  /   / /   \\     |   _  \\     |  \\ |  | |  | |  \\ |  |  / _____|\n *  \\   \\/    \\/   / /  ^  \\    |  |_)  |    |   \\|  | |  | |   \\|  | |  |  __\n *   \\            / /  /_\\  \\   |      /     |  . `  | |  | |  . `  | |  | |_ |\n *    \\    /\\    / /  _____  \\  |  |\\  \\----.|  |\\   | |  | |  |\\   | |  |__| |\n *     \\__/  \\__/ /__/     \\__\\ | _| `._____||__| \\__| |__| |__| \\__|  \\______|\n *\n * The equivalent of this list is used for server-side rendering (SSR) and any\n * changes made to it must be made in coordination with caches that implement\n * SSR. For more information on SSR see bit.ly/amp-ssr.\n *\n * @const {!Object<string, string>}\n */\nconst SERVICES = {\n  'amp-dynamic-css-classes': '[custom-element=amp-dynamic-css-classes]',\n  'variant': 'amp-experiment',\n  'amp-story': 'amp-story[standalone]',\n};\n\n/**\n * Maximum milliseconds to wait for all extensions to load before erroring.\n * @const\n */\nconst LOAD_TIMEOUT = 3000;\n\n/**\n * Detects any render delaying services that are required on the page, and\n * returns a promise with a timeout.\n * @param {!Window} win\n * @return {!Promise<!Array<*>>} resolves to an Array that has the same length\n *     as the detected render delaying services\n */\nexport function waitForServices(win) {\n  const promises = includedServices(win).map(service => {\n    return Services.timerFor(win).timeoutPromise(\n        LOAD_TIMEOUT,\n        getServicePromise(win, service),\n        `Render timeout waiting for service ${service} to be ready.`\n    );\n  });\n  return Promise.all(promises);\n}\n\n/**\n * Returns true if the page has a render delaying service.\n * @param {!Window} win\n * @return {boolean}\n */\nexport function hasRenderDelayingServices(win) {\n  return includedServices(win).length > 0;\n}\n\n/**\n * Detects which, if any, render-delaying extensions are included on the page.\n * @param {!Window} win\n * @return {!Array<string>}\n */\nexport function includedServices(win) {\n  /** @const {!Document} */\n  const doc = win.document;\n  dev().assert(doc.body);\n\n  return Object.keys(SERVICES).filter(service => {\n    return doc.querySelector(SERVICES[service]);\n  });\n}\n","/**\n * Copyright 2015 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Registration and getter functions for AMP services.\n *\n * Invariant: Service getters never return null for registered services.\n */\n\n// src/polyfills.js must be the first import.\nimport './polyfills'; // eslint-disable-line sort-imports-es6-autofix/sort-imports-es6\n\nimport {Deferred} from './utils/promise';\nimport {dev} from './log';\nimport {toWin} from './types';\n\n\n/**\n * Holds info about a service.\n * - obj: Actual service implementation when available.\n * - promise: Promise for the obj.\n * - resolve: Function to resolve the promise with the object.\n * - context: Argument for ctor, either a window or an ampdoc.\n * - ctor: Function that constructs and returns the service.\n * @typedef {{\n *   obj: (?Object),\n *   promise: (?Promise),\n *   resolve: (?function(!Object)),\n *   context: (?Window|?./service/ampdoc-impl.AmpDoc),\n *   ctor: (?function(new:Object, !Window)|\n *          ?function(new:Object, !./service/ampdoc-impl.AmpDoc)),\n * }}\n */\nlet ServiceHolderDef;\n\n\n/**\n * This interface provides a `dispose` method that will be called by\n * runtime when a service needs to be disposed of.\n * @interface\n */\nexport class Disposable {\n\n  /**\n   * Instructs the service to release any resources it might be holding. Can\n   * be called only once in the lifecycle of a service.\n   */\n  dispose() {}\n}\n\n\n/**\n * This interface provides a `adoptEmbedWindow` method that will be called by\n * runtime for a new embed window.\n * @interface\n */\nexport class EmbeddableService {\n\n  /**\n   * Instructs the service to adopt the embed window and add any necessary\n   * listeners and resources.\n   * @param {!Window} unusedEmbedWin\n   */\n  adoptEmbedWindow(unusedEmbedWin) {}\n}\n\n\n/**\n * Returns a service with the given id. Assumes that it has been registered\n * already.\n * @param {!Window} win\n * @param {string} id\n * @param {boolean=} opt_fallbackToTopWin\n * @return {Object} The service.\n */\nexport function getExistingServiceInEmbedScope(win, id, opt_fallbackToTopWin) {\n  // First, try to resolve via local (embed) window.\n  const local = getLocalExistingServiceForEmbedWinOrNull(win, id);\n  if (local) {\n    return local;\n  }\n  if (opt_fallbackToTopWin) {\n    return getService(win, id);\n  }\n  return null;\n}\n\n/**\n * Returns a service with the given id. Assumes that it has been constructed\n * already.\n *\n * Unlike most service getters, passing `Node` is necessary for some FIE-scope\n * services since sometimes we only have the FIE Document for context.\n *\n * @param {!Node|!./service/ampdoc-impl.AmpDoc} nodeOrDoc\n * @param {string} id\n * @param {boolean=} opt_fallbackToTopWin\n * @return {Object} The service.\n */\nexport function getExistingServiceForDocInEmbedScope(\n  nodeOrDoc, id, opt_fallbackToTopWin) {\n  // First, try to resolve via local (embed) window.\n  if (nodeOrDoc.nodeType) {\n    // If a node is passed, try to resolve via this node.\n    const win = toWin(/** @type {!Document} */ (\n      nodeOrDoc.ownerDocument || nodeOrDoc).defaultView);\n    const local = getLocalExistingServiceForEmbedWinOrNull(win, id);\n    if (local) {\n      return local;\n    }\n  }\n  // If an ampdoc is passed or fallback is allowed, continue resolving.\n  if (!nodeOrDoc.nodeType || opt_fallbackToTopWin) {\n    return getServiceForDocDeprecated(nodeOrDoc, id);\n  }\n  return null;\n}\n\n/**\n * Installs a service override on amp-doc level.\n * @param {!Window} embedWin\n * @param {string} id\n * @param {!Object} service The service.\n */\nexport function installServiceInEmbedScope(embedWin, id, service) {\n  const topWin = getTopWindow(embedWin);\n  dev().assert(embedWin != topWin,\n      'Service override can only be installed in embed window: %s', id);\n  dev().assert(!getLocalExistingServiceForEmbedWinOrNull(embedWin, id),\n      'Service override has already been installed: %s', id);\n  registerServiceInternal(embedWin, embedWin, id, () => service);\n  getServiceInternal(embedWin, id); // Force service to build.\n}\n\n/**\n * @param {!Window} embedWin\n * @param {string} id\n * @return {?Object}\n */\nfunction getLocalExistingServiceForEmbedWinOrNull(embedWin, id) {\n  // Note that this method currently only resolves against the given window.\n  // It does not try to go all the way up the parent window chain. We can change\n  // this in the future, but for now this gives us a better performance.\n  const topWin = getTopWindow(embedWin);\n  if (embedWin != topWin && isServiceRegistered(embedWin, id)) {\n    return getServiceInternal(embedWin, id);\n  } else {\n    return null;\n  }\n}\n\n/**\n * Registers a service given a class to be used as implementation.\n * @param {!Window} win\n * @param {string} id of the service.\n * @param {function(new:Object, !Window)} constructor\n * @param {boolean=} opt_instantiate Whether to immediately create the service\n */\nexport function registerServiceBuilder(win,\n  id,\n  constructor,\n  opt_instantiate) {\n  win = getTopWindow(win);\n  registerServiceInternal(win, win, id, constructor);\n  if (opt_instantiate) {\n    getServiceInternal(win, id);\n  }\n}\n\n\n/**\n * Returns a service and registers it given a class to be used as\n * implementation.\n * @param {!Node|!./service/ampdoc-impl.AmpDoc} nodeOrDoc\n * @param {string} id of the service.\n * @param {function(new:Object, !./service/ampdoc-impl.AmpDoc)} constructor\n * @param {boolean=} opt_instantiate Whether to immediately create the service\n */\nexport function registerServiceBuilderForDoc(nodeOrDoc,\n  id,\n  constructor,\n  opt_instantiate) {\n  const ampdoc = getAmpdoc(nodeOrDoc);\n  const holder = getAmpdocServiceHolder(ampdoc);\n  registerServiceInternal(holder, ampdoc, id, constructor);\n  if (opt_instantiate) {\n    getServiceInternal(holder, id);\n  }\n}\n\n\n/**\n * Returns a service for the given id and window (a per-window singleton). Users\n * should typically wrap this as a special purpose function (e.g.\n * `Services.vsyncFor(win)`) for type safety and because the factory should not\n * be passed around.\n * @param {!Window} win\n * @param {string} id of the service.\n * @template T\n * @return {T}\n */\nexport function getService(win, id) {\n  win = getTopWindow(win);\n  return getServiceInternal(win, id);\n}\n\n\n/**\n * Returns a promise for a service for the given id and window. Also expects an\n * element that has the actual implementation. The promise resolves when the\n * implementation loaded. Users should typically wrap this as a special purpose\n * function (e.g. `Services.vsyncFor(win)`) for type safety and because the\n * factory should not be passed around.\n * @param {!Window} win\n * @param {string} id of the service.\n * @return {!Promise<!Object>}\n */\nexport function getServicePromise(win, id) {\n  return getServicePromiseInternal(win, id);\n}\n\n\n/**\n * Returns a service or null with the given id.\n * @param {!Window} win\n * @param {string} id\n * @return {?Object} The service.\n */\nexport function getExistingServiceOrNull(win, id) {\n  win = getTopWindow(win);\n  if (isServiceRegistered(win, id)) {\n    return getServiceInternal(win, id);\n  } else {\n    return null;\n  }\n}\n\n\n/**\n * Like getServicePromise but returns null if the service was never registered.\n * @param {!Window} win\n * @param {string} id\n * @return {?Promise<!Object>}\n */\nexport function getServicePromiseOrNull(win, id) {\n  return getServicePromiseOrNullInternal(win, id);\n}\n\n\n/**\n * Returns a service for the given id and ampdoc (a per-ampdoc singleton).\n * Expects service `id` to be registered.\n * @param {!Element|!./service/ampdoc-impl.AmpDoc} elementOrAmpDoc\n * @param {string} id\n * @return {T}\n * @template T\n */\nexport function getServiceForDoc(elementOrAmpDoc, id) {\n  const ampdoc = getAmpdoc(elementOrAmpDoc);\n  const holder = getAmpdocServiceHolder(ampdoc);\n  return getServiceInternal(holder, id);\n}\n\n\n/**\n * tl;dr -- Use getServiceForDoc() instead of this.\n *\n * Privileged variant of getServiceForDoc() that accepts non-element params,\n * e.g. window.document. This is currently necessary for doc-level services\n * used in startup, e.g. Chunks. Eventually we want to remove this function\n * and have callers find the appropriate AmpDoc and use getServiceForDoc().\n *\n * @param {!Node|!./service/ampdoc-impl.AmpDoc} nodeOrDoc\n * @param {string} id\n * @return {T}\n * @template T\n */\nexport function getServiceForDocDeprecated(nodeOrDoc, id) {\n  const ampdoc = getAmpdoc(nodeOrDoc);\n  const holder = getAmpdocServiceHolder(ampdoc);\n  return getServiceInternal(holder, id);\n}\n\n\n/**\n * Returns a promise for a service for the given id and ampdoc. Also expects\n * a service that has the actual implementation. The promise resolves when\n * the implementation loaded.\n * @param {!Element|!./service/ampdoc-impl.AmpDoc} elementOrAmpDoc\n * @param {string} id\n * @return {!Promise<!Object>}\n */\nexport function getServicePromiseForDoc(elementOrAmpDoc, id) {\n  return getServicePromiseInternal(\n      getAmpdocServiceHolder(elementOrAmpDoc), id);\n}\n\n\n/**\n * Like getServicePromiseForDoc but returns null if the service was never\n * registered for this ampdoc.\n * @param {!Element|!./service/ampdoc-impl.AmpDoc} elementOrAmpDoc\n * @param {string} id\n * @return {?Promise<!Object>}\n */\nexport function getServicePromiseOrNullForDoc(elementOrAmpDoc, id) {\n  return getServicePromiseOrNullInternal(\n      getAmpdocServiceHolder(elementOrAmpDoc), id);\n}\n\n/**\n * Set the parent and top windows on a child window (friendly iframe).\n * @param {!Window} win\n * @param {!Window} parentWin\n */\nexport function setParentWindow(win, parentWin) {\n  win.__AMP_PARENT = parentWin;\n  win.__AMP_TOP = getTopWindow(parentWin);\n}\n\n\n/**\n * Returns the parent window for a child window (friendly iframe).\n * @param {!Window} win\n * @return {!Window}\n */\nexport function getParentWindow(win) {\n  return win.__AMP_PARENT || win;\n}\n\n\n/**\n * Returns the top window where AMP Runtime is installed for a child window\n * (friendly iframe).\n * @param {!Window} win\n * @return {!Window}\n */\nexport function getTopWindow(win) {\n  return win.__AMP_TOP || win;\n}\n\n\n/**\n * Returns the parent \"friendly\" iframe if the node belongs to a child window.\n * @param {!Node} node\n * @param {!Window} topWin\n * @return {?HTMLIFrameElement}\n */\nexport function getParentWindowFrameElement(node, topWin) {\n  const childWin = (node.ownerDocument || node).defaultView;\n  if (childWin && childWin != topWin && getTopWindow(childWin) == topWin) {\n    try {\n      return /** @type {?HTMLIFrameElement} */ (childWin.frameElement);\n    } catch (e) {\n      // Ignore the error.\n    }\n  }\n  return null;\n}\n\n\n/**\n * @param {!Node|!./service/ampdoc-impl.AmpDoc} nodeOrDoc\n * @return {!./service/ampdoc-impl.AmpDoc}\n */\nexport function getAmpdoc(nodeOrDoc) {\n  if (nodeOrDoc.nodeType) {\n    const win = toWin(/** @type {!Document} */ (\n      nodeOrDoc.ownerDocument || nodeOrDoc).defaultView);\n    return getAmpdocService(win).getAmpDoc(/** @type {!Node} */ (nodeOrDoc));\n  }\n  return /** @type {!./service/ampdoc-impl.AmpDoc} */ (nodeOrDoc);\n}\n\n\n/**\n * @param {!Node|!./service/ampdoc-impl.AmpDoc} nodeOrDoc\n * @return {!./service/ampdoc-impl.AmpDoc|!Window}\n */\nfunction getAmpdocServiceHolder(nodeOrDoc) {\n  const ampdoc = getAmpdoc(nodeOrDoc);\n  return ampdoc.isSingleDoc() ? ampdoc.win : ampdoc;\n}\n\n\n/**\n * This is essentially a duplicate of `ampdoc.js`, but necessary to avoid\n * circular dependencies.\n * @param {!Window} win\n * @return {!./service/ampdoc-impl.AmpDocService}\n */\nfunction getAmpdocService(win) {\n  return /** @type {!./service/ampdoc-impl.AmpDocService} */ (\n    getService(win, 'ampdoc'));\n}\n\n\n/**\n * Get service `id` from `holder`. Assumes the service\n * has already been registered.\n * @param {!Object} holder Object holding the service instance.\n * @param {string} id of the service.\n * @return {Object}\n * @template T\n */\nfunction getServiceInternal(holder, id) {\n  dev().assert(isServiceRegistered(holder, id),\n      `Expected service ${id} to be registered`);\n  const services = getServices(holder);\n  const s = services[id];\n  if (!s.obj) {\n    dev().assert(s.ctor, `Service ${id} registered without ctor nor impl.`);\n    dev().assert(s.context, `Service ${id} registered without context.`);\n    s.obj = new s.ctor(s.context);\n    dev().assert(s.obj, `Service ${id} constructed to null.`);\n    s.ctor = null;\n    s.context = null;\n    // The service may have been requested already, in which case we have a\n    // pending promise we need to fulfill.\n    if (s.resolve) {\n      s.resolve(s.obj);\n    }\n  }\n  return s.obj;\n}\n\n/**\n * @param {!Object} holder Object holding the service instance.\n * @param {!Window|!./service/ampdoc-impl.AmpDoc} context Win or AmpDoc.\n * @param {string} id of the service.\n * @param {?function(new:Object, !Window)|?function(new:Object, !./service/ampdoc-impl.AmpDoc)} ctor Constructor function to new the service. Called with context.\n */\nfunction registerServiceInternal(holder, context, id, ctor) {\n  const services = getServices(holder);\n  let s = services[id];\n\n  if (!s) {\n    s = services[id] = {\n      obj: null,\n      promise: null,\n      resolve: null,\n      context: null,\n      ctor: null,\n    };\n  }\n\n  if (s.ctor || s.obj) {\n    // Service already registered.\n    return;\n  }\n\n  s.ctor = ctor;\n  s.context = context;\n\n  // The service may have been requested already, in which case there is a\n  // pending promise that needs to fulfilled.\n  if (s.resolve) {\n    // getServiceInternal will resolve the promise.\n    getServiceInternal(holder, id);\n  }\n}\n\n/**\n * @param {!Object} holder\n * @param {string} id of the service.\n * @return {!Promise<!Object>}\n */\nfunction getServicePromiseInternal(holder, id) {\n  const cached = getServicePromiseOrNullInternal(holder, id);\n  if (cached) {\n    return cached;\n  }\n  // Service is not registered.\n\n  // TODO(@cramforce): Add a check that if the element is eventually registered\n  // that the service is actually provided and this promise resolves.\n  const deferred = new Deferred();\n  const {promise, resolve} = deferred;\n\n  const services = getServices(holder);\n  services[id] = {\n    obj: null,\n    promise,\n    resolve,\n    context: null,\n    ctor: null,\n  };\n  return promise;\n}\n\n\n/**\n * Returns a promise for service `id` if the service has been registered\n * on `holder`.\n * @param {!Object} holder\n * @param {string} id of the service.\n * @return {?Promise<!Object>}\n */\nfunction getServicePromiseOrNullInternal(holder, id) {\n  const services = getServices(holder);\n  const s = services[id];\n  if (s) {\n    if (s.promise) {\n      return s.promise;\n    } else {\n      // Instantiate service if not already instantiated.\n      getServiceInternal(holder, id);\n      return s.promise = Promise.resolve(/** @type {!Object} */ (s.obj));\n    }\n  }\n  return null;\n}\n\n\n/**\n * Returns the object that holds the services registered in a holder.\n * @param {!Object} holder\n * @return {!Object<string,!ServiceHolderDef>}\n */\nfunction getServices(holder) {\n  let {services} = holder;\n  if (!services) {\n    services = holder.services = {};\n  }\n  return services;\n}\n\n\n/**\n * Whether the specified service implements `Disposable` interface.\n * @param {!Object} service\n * @return {boolean}\n */\nexport function isDisposable(service) {\n  return typeof service.dispose == 'function';\n}\n\n\n/**\n * Asserts that the specified service implements `Disposable` interface and\n * typecasts the instance to `Disposable`.\n * @param {!Object} service\n * @return {!Disposable}\n */\nexport function assertDisposable(service) {\n  dev().assert(isDisposable(service), 'required to implement Disposable');\n  return /** @type {!Disposable} */ (service);\n}\n\n\n/**\n * Disposes all disposable (implements `Disposable` interface) services in\n * ampdoc scope.\n * @param {!./service/ampdoc-impl.AmpDoc} ampdoc\n */\nexport function disposeServicesForDoc(ampdoc) {\n  disposeServicesInternal(ampdoc);\n}\n\n\n/**\n * Disposes all disposable (implements `Disposable` interface) services in\n * embed scope.\n * @param {!Window} embedWin\n */\nexport function disposeServicesForEmbed(embedWin) {\n  disposeServicesInternal(embedWin);\n}\n\n\n/**\n * @param {!Object} holder Object holding the service instances.\n */\nfunction disposeServicesInternal(holder) {\n  // TODO(dvoytenko): Consider marking holder as destroyed for later-arriving\n  // service to be canceled automatically.\n  const services = getServices(holder);\n  for (const id in services) {\n    if (!Object.prototype.hasOwnProperty.call(services, id)) {\n      continue;\n    }\n    const serviceHolder = services[id];\n    if (serviceHolder.obj) {\n      disposeServiceInternal(id, serviceHolder.obj);\n    } else if (serviceHolder.promise) {\n      serviceHolder.promise.then(\n          instance => disposeServiceInternal(id, instance));\n    }\n  }\n}\n\n\n/**\n * @param {string} id\n * @param {!Object} service\n */\nfunction disposeServiceInternal(id, service) {\n  if (!isDisposable(service)) {\n    return;\n  }\n  try {\n    assertDisposable(service).dispose();\n  } catch (e) {\n    // Ensure that a failure to dispose a service does not disrupt other\n    // services.\n    dev().error('SERVICE', 'failed to dispose service', id, e);\n  }\n}\n\n\n/**\n * Whether the specified service implements `EmbeddableService` interface.\n * @param {!Object} service\n * @return {boolean}\n */\nexport function isEmbeddable(service) {\n  return typeof service.adoptEmbedWindow == 'function';\n}\n\n\n/**\n * Adopts an embeddable (implements `EmbeddableService` interface) service\n * in embed scope.\n * @param {!Window} embedWin\n * @param {string} serviceId\n */\nexport function adoptServiceForEmbed(embedWin, serviceId) {\n  const adopted = adoptServiceForEmbedIfEmbeddable(embedWin, serviceId);\n  dev().assert(adopted, `Service ${serviceId} not found on parent ` +\n      'or doesn\\'t implement EmbeddableService.');\n}\n\n\n/**\n * Adopts an embeddable (implements `EmbeddableService` interface) service\n * in embed scope.\n * @param {!Window} embedWin\n * @param {string} serviceId\n * @return {boolean}\n */\nexport function adoptServiceForEmbedIfEmbeddable(embedWin, serviceId) {\n  const frameElement = /** @type {!Node} */ (dev().assert(\n      embedWin.frameElement,\n      'frameElement not found for embed'));\n  const ampdoc = getAmpdoc(frameElement);\n  const holder = getAmpdocServiceHolder(ampdoc);\n  if (!isServiceRegistered(holder, serviceId)) {\n    return false;\n  }\n  const service = getServiceForDocDeprecated(frameElement, serviceId);\n  if (!isEmbeddable(service)) {\n    return false;\n  }\n  service.adoptEmbedWindow(embedWin);\n  return true;\n}\n\n\n/**\n * Resets a single service, so it gets recreated on next getService invocation.\n * @param {!Object} holder\n * @param {string} id of the service.\n */\nexport function resetServiceForTesting(holder, id) {\n  if (holder.services) {\n    holder.services[id] = null;\n  }\n}\n\n/**\n * @param {!Object} holder Object holding the service instance.\n * @param {string} id of the service.\n * @return {boolean}\n */\nfunction isServiceRegistered(holder, id) {\n  const service = holder.services && holder.services[id];\n  // All registered services must have an implementation or a constructor.\n  return !!(service && (service.ctor || service.obj));\n}\n","/**\n * Copyright 2017 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  getAmpdoc,\n  getExistingServiceForDocInEmbedScope,\n  getExistingServiceOrNull,\n  getService,\n  getServiceForDoc,\n  getServiceForDocDeprecated,\n  getServicePromiseForDoc,\n} from './service';\nimport {\n  getElementServiceForDoc,\n  getElementServiceIfAvailable,\n  getElementServiceIfAvailableForDoc,\n  getElementServiceIfAvailableForDocInEmbedScope,\n} from './element-service';\n\n/** @typedef {!../extensions/amp-subscriptions/0.1/amp-subscriptions.SubscriptionService} */\nexport let SubscriptionService;\n\nexport class Services {\n  /**\n   * Hint: Add extensions folder path to compile.js with\n   * warnings cannot find modules.\n   */\n\n  /**\n   * Returns a promise for the Access service.\n   * @param {!Element|!./service/ampdoc-impl.AmpDoc} elementOrAmpDoc\n   * @return {!Promise<!../extensions/amp-access/0.1/amp-access.AccessService>}\n   */\n  static accessServiceForDoc(elementOrAmpDoc) {\n    return (/** @type {!Promise<!../extensions/amp-access/0.1/amp-access.AccessService>} */ (\n      getElementServiceForDoc(elementOrAmpDoc, 'access', 'amp-access')));\n  }\n\n  /**\n   * Returns a promise for the Access service or a promise for null if the\n   * service is not available on the current page.\n   * @param {!Element|!./service/ampdoc-impl.AmpDoc} elementOrAmpDoc\n   * @return {!Promise<?../extensions/amp-access/0.1/amp-access.AccessService>}\n   */\n  static accessServiceForDocOrNull(elementOrAmpDoc) {\n    return (/** @type {!Promise<?../extensions/amp-access/0.1/amp-access.AccessService>} */ (\n      getElementServiceIfAvailableForDoc(elementOrAmpDoc, 'access',\n          'amp-access')));\n  }\n\n  /**\n   * Returns a promise for the Subscriptions service.\n   * @param {!Element|!./service/ampdoc-impl.AmpDoc} elementOrAmpDoc\n   * @return {!Promise<!SubscriptionService>}\n   */\n  static subscriptionsServiceForDoc(elementOrAmpDoc) {\n    return (/** @type {!Promise<!SubscriptionService>} */ (\n      getElementServiceForDoc(elementOrAmpDoc, 'subscriptions',\n          'amp-subscriptions')));\n  }\n\n  /**\n   * Returns a promise for the Subscriptions service.\n   * @param {!Element|!./service/ampdoc-impl.AmpDoc} elementOrAmpDoc\n   * @return {!Promise<?SubscriptionService>}\n   */\n  static subscriptionsServiceForDocOrNull(elementOrAmpDoc) {\n    return (/** @type {!Promise<?SubscriptionService>} */ (\n      getElementServiceIfAvailableForDoc(elementOrAmpDoc, 'subscriptions',\n          'amp-subscriptions')));\n  }\n\n  /**\n   * Unlike most service getters, passing `Node` is necessary for some FIE-scope\n   * services since sometimes we only have the FIE Document for context.\n   * @param {!Node|!./service/ampdoc-impl.AmpDoc} nodeOrDoc\n   * @return {!./service/action-impl.ActionService}\n   */\n  static actionServiceForDoc(nodeOrDoc) {\n    return /** @type {!./service/action-impl.ActionService} */ (\n      getExistingServiceForDocInEmbedScope(\n          nodeOrDoc, 'action', /* opt_fallbackToTopWin */ true));\n  }\n\n  /**\n   * @param {!Element|!./service/ampdoc-impl.AmpDoc} elementOrAmpDoc\n   * @return {!Promise<!Activity>}\n   */\n  static activityForDoc(elementOrAmpDoc) {\n    return /** @type {!Promise<!Activity>} */ (\n      getElementServiceForDoc(elementOrAmpDoc, 'activity', 'amp-analytics'));\n  }\n\n  /**\n   * Returns the global instance of the `AmpDocService` service that can be\n   * used to resolve an ampdoc for any node: either in the single-doc or\n   * shadow-doc environment.\n   * @param {!Window} window\n   * @return {!./service/ampdoc-impl.AmpDocService}\n   */\n  static ampdocServiceFor(window) {\n    return /** @type {!./service/ampdoc-impl.AmpDocService} */ (\n      getService(window, 'ampdoc'));\n  }\n\n  /**\n   * Returns the AmpDoc for the specified context node.\n   * @param {!Element|!./service/ampdoc-impl.AmpDoc} elementOrAmpDoc\n   * @return {!./service/ampdoc-impl.AmpDoc}\n   */\n  static ampdoc(elementOrAmpDoc) {\n    return getAmpdoc(elementOrAmpDoc);\n  }\n\n  /**\n   * @param {!Element|!./service/ampdoc-impl.AmpDoc} elementOrAmpDoc\n   * @param {boolean=} loadAnalytics\n   * @return {!Promise<!../extensions/amp-analytics/0.1/instrumentation.InstrumentationService>}\n   */\n  static analyticsForDoc(elementOrAmpDoc, loadAnalytics = false) {\n    if (loadAnalytics) {\n      // Get Extensions service and force load analytics extension.\n      const ampdoc = getAmpdoc(elementOrAmpDoc);\n      Services.extensionsFor(ampdoc.win)./*OK*/installExtensionForDoc(\n          ampdoc, 'amp-analytics');\n    }\n    return /** @type {!Promise<!../extensions/amp-analytics/0.1/instrumentation.InstrumentationService>} */ (\n      getElementServiceForDoc(elementOrAmpDoc, 'amp-analytics-instrumentation',\n          'amp-analytics'));\n  }\n\n  /**\n   * @param {!Element|!./service/ampdoc-impl.AmpDoc} elementOrAmpDoc\n   * @return {!Promise<?../extensions/amp-analytics/0.1/instrumentation.InstrumentationService>}\n   */\n  static analyticsForDocOrNull(elementOrAmpDoc) {\n    return /** @type {!Promise<?../extensions/amp-analytics/0.1/instrumentation.InstrumentationService>} */ (\n      getElementServiceIfAvailableForDoc(elementOrAmpDoc,\n          'amp-analytics-instrumentation', 'amp-analytics'));\n  }\n\n  /**\n   * @param {!Window} window\n   * @return {!./service/batched-xhr-impl.BatchedXhr}\n   */\n  static batchedXhrFor(window) {\n    return /** @type {!./service/batched-xhr-impl.BatchedXhr} */ (\n      getService(window, 'batched-xhr'));\n  }\n\n  /**\n   * @param {!Element|!./service/ampdoc-impl.AmpDoc} elementOrAmpDoc\n   * @return {!Promise<?../extensions/amp-bind/0.1/bind-impl.Bind>}\n   */\n  static bindForDocOrNull(elementOrAmpDoc) {\n    return /** @type {!Promise<?../extensions/amp-bind/0.1/bind-impl.Bind>} */ (\n      getElementServiceIfAvailableForDocInEmbedScope(\n          elementOrAmpDoc, 'bind', 'amp-bind'));\n  }\n\n  /**\n   * @param {!Element|!./service/ampdoc-impl.AmpDoc} elementOrAmpDoc\n   * @return {!Promise<!./service/cid-impl.Cid>}\n   */\n  static cidForDoc(elementOrAmpDoc) {\n    return /** @type {!Promise<!./service/cid-impl.Cid>} */ (\n      getServicePromiseForDoc(elementOrAmpDoc, 'cid'));\n  }\n\n  /**\n   * @param {!Element|!./service/ampdoc-impl.AmpDoc} elementOrAmpDoc\n   * @return {!./service/navigation.Navigation}\n   */\n  static navigationForDoc(elementOrAmpDoc) {\n    return /** @type {!./service/navigation.Navigation} */ (\n      getServiceForDoc(elementOrAmpDoc, 'navigation'));\n  }\n\n  /**\n   * @param {!Window} window\n   * @return {!./service/crypto-impl.Crypto}\n   */\n  static cryptoFor(window) {\n    return (/** @type {!./service/crypto-impl.Crypto} */ (\n      getService(window, 'crypto')));\n  }\n\n  /**\n   * @param {!Element|!./service/ampdoc-impl.AmpDoc} elementOrAmpDoc\n   * @return {!./service/document-info-impl.DocumentInfoDef} Info about the doc\n   */\n  static documentInfoForDoc(elementOrAmpDoc) {\n    return /** @type {!./service/document-info-impl.DocInfo} */ (\n      getServiceForDoc(elementOrAmpDoc, 'documentInfo')).get();\n  }\n\n  /**\n   * @param {!Window} window\n   * @return {!./service/document-state.DocumentState}\n   */\n  static documentStateFor(window) {\n    return getService(window, 'documentState');\n  }\n\n  /**\n   * @param {!Window} window\n   * @return {!./service/extensions-impl.Extensions}\n   */\n  static extensionsFor(window) {\n    return /** @type {!./service/extensions-impl.Extensions} */ (\n      getService(window, 'extensions'));\n  }\n\n  /**\n   * Returns service implemented in service/history-impl.\n   * @param {!Element|!./service/ampdoc-impl.AmpDoc} elementOrAmpDoc\n   * @return {!./service/history-impl.History}\n   */\n  static historyForDoc(elementOrAmpDoc) {\n    return /** @type {!./service/history-impl.History} */ (\n      getServiceForDoc(elementOrAmpDoc, 'history'));\n  }\n\n  /**\n   * @param {!Window} win\n   * @return {!./input.Input}\n   */\n  static inputFor(win) {\n    return getService(win, 'input');\n  }\n\n  /**\n   * @param {!Element|!./service/ampdoc-impl.AmpDoc} elementOrAmpDoc\n   * @return {!./service/layers-impl.LayoutLayers}\n   */\n  static layersForDoc(elementOrAmpDoc) {\n    return /** @type {!./service/layers-impl.LayoutLayers} */ (\n      getServiceForDoc(elementOrAmpDoc, 'layers'));\n  }\n\n  /**\n   * @param {!Window} window\n   * @return {!./service/performance-impl.Performance}\n   */\n  static performanceFor(window) {\n    return /** @type {!./service/performance-impl.Performance}*/ (\n      getService(window, 'performance'));\n  }\n\n  /**\n   * @param {!Window} window\n   * @return {!./service/performance-impl.Performance}\n   */\n  static performanceForOrNull(window) {\n    return /** @type {!./service/performance-impl.Performance}*/ (\n      getExistingServiceOrNull(window, 'performance'));\n  }\n\n  /**\n   * @param {!Window} window\n   * @return {!./service/platform-impl.Platform}\n   */\n  static platformFor(window) {\n    return /** @type {!./service/platform-impl.Platform} */ (\n      getService(window, 'platform'));\n  }\n\n  /**\n   * Uses getServiceForDocDeprecated() since Resources is a startup service.\n   * @param {!Node|!./service/ampdoc-impl.AmpDoc} nodeOrDoc\n   * @return {!./service/resources-impl.Resources}\n   */\n  static resourcesForDoc(nodeOrDoc) {\n    return /** @type {!./service/resources-impl.Resources} */ (\n      getServiceForDocDeprecated(nodeOrDoc, 'resources'));\n  }\n\n  /**\n   * @param {!Window} win\n   * @return {?Promise<?{incomingFragment: string, outgoingFragment: string}>}\n   */\n  static shareTrackingForOrNull(win) {\n    return (/** @type {!Promise<?{incomingFragment: string, outgoingFragment: string}>} */ (\n      getElementServiceIfAvailable(win, 'share-tracking',\n          'amp-share-tracking', true)));\n  }\n\n  /**\n   * @param {!Window} win\n   * @return {?Promise<?../extensions/amp-story/1.0/variable-service.StoryVariableDef>}\n   */\n  static storyVariableServiceForOrNull(win) {\n    return (\n    /** @type {!Promise<?../extensions/amp-story/1.0/variable-service.StoryVariableDef>} */\n      (getElementServiceIfAvailable(win, 'story-variable', 'amp-story',\n          true)));\n  }\n\n  /**\n   * Version of the story store service depends on which version of amp-story\n   * the publisher is loading. They all have the same implementation.\n   * @param {!Window} win\n   * @return {?Promise<?../extensions/amp-story/1.0/amp-story-store-service.AmpStoryStoreService|?../extensions/amp-story/0.1/amp-story-store-service.AmpStoryStoreService>}\n   */\n  static storyStoreServiceForOrNull(win) {\n    return (\n    /** @type {!Promise<?../extensions/amp-story/1.0/amp-story-store-service.AmpStoryStoreService|?../extensions/amp-story/0.1/amp-story-store-service.AmpStoryStoreService>} */\n      (getElementServiceIfAvailable(win, 'story-store', 'amp-story')));\n  }\n\n  /**\n   * @param {!Window} win\n   * @return {?../extensions/amp-story/1.0/amp-story-store-service.AmpStoryStoreService}\n   */\n  static storyStoreService(win) {\n    return (/** @type {?../extensions/amp-story/1.0/amp-story-store-service.AmpStoryStoreService} */\n      (getExistingServiceOrNull(win, 'story-store')));\n  }\n\n  /**\n   * @param {!Window} win\n   * @return {?../extensions/amp-story/1.0/amp-story-request-service.AmpStoryRequestService}\n   */\n  static storyRequestService(win) {\n    return (/** @type {?../extensions/amp-story/1.0/amp-story-request-service.AmpStoryRequestService} */\n      (getExistingServiceOrNull(win, 'story-request')));\n  }\n\n  /**\n   * @param {!Window} win\n   * @return {!Promise<?../extensions/amp-story/1.0/localization.LocalizationService>}\n   */\n  static localizationServiceForOrNull(win) {\n    return (\n    /** @type {!Promise<?../extensions/amp-story/1.0/localization.LocalizationService>} */\n      (getElementServiceIfAvailable(win, 'localization', 'amp-story', true)));\n  }\n\n  /**\n   * @param {!Window} win\n   * @return {!../extensions/amp-story/1.0/localization.LocalizationService}\n   */\n  static localizationService(win) {\n    return getService(win, 'localization');\n  }\n\n  /**\n   * TODO(#14357): Remove this when amp-story:0.1 is deprecated.\n   * @param {!Window} win\n   * @return {!../extensions/amp-story/0.1/amp-story-store-service.AmpStoryStoreService}\n   */\n  static storyStoreServiceV01(win) {\n    return getService(win, 'story-store');\n  }\n\n  /**\n   * TODO(#14357): Remove this when amp-story:0.1 is deprecated.\n   * @param {!Window} win\n   * @return {!../extensions/amp-story/0.1/amp-story-request-service.AmpStoryRequestService}\n   */\n  static storyRequestServiceV01(win) {\n    return getService(win, 'story-request-v01');\n  }\n\n  /**\n   * TODO(#14357): Remove this when amp-story:0.1 is deprecated.\n   * @param {!Window} win\n   * @return {!Promise<?../extensions/amp-story/0.1/localization.LocalizationService>}\n   */\n  static localizationServiceForOrNullV01(win) {\n    return (\n    /** @type {!Promise<?../extensions/amp-story/0.1/localization.LocalizationService>} */\n      (getElementServiceIfAvailable(win, 'localization-v01', 'amp-story',\n          true)));\n  }\n\n  /**\n   * TODO(#14357): Remove this when amp-story:0.1 is deprecated.\n   * @param {!Window} win\n   * @return {!../extensions/amp-story/0.1/localization.LocalizationService}\n   */\n  static localizationServiceV01(win) {\n    return getService(win, 'localization-v01');\n  }\n\n  /**\n   * @param {!Window} win\n   * @return {?Promise<?../extensions/amp-viewer-integration/0.1/variable-service.ViewerIntegrationVariableDef>}\n   */\n  static viewerIntegrationVariableServiceForOrNull(win) {\n    return (\n    /** @type {!Promise<?../extensions/amp-viewer-integration/0.1/variable-service.ViewerIntegrationVariableDef>} */\n      (getElementServiceIfAvailable(win, 'viewer-integration-variable',\n          'amp-viewer-integration', true)));\n  }\n\n  /**\n   * @param {!Element|!./service/ampdoc-impl.AmpDoc} elementOrAmpDoc\n   * @return {!Promise<!../extensions/amp-animation/0.1/web-animation-service.WebAnimationService>}\n   */\n  static webAnimationServiceFor(elementOrAmpDoc) {\n    return (/** @type {!Promise<!../extensions/amp-animation/0.1/web-animation-service.WebAnimationService>} */\n      (getElementServiceForDoc(\n          elementOrAmpDoc, 'web-animation', 'amp-animation')));\n  }\n\n  /**\n   * @param {!Element|!./service/ampdoc-impl.AmpDoc} elementOrAmpDoc\n   * @return {!Promise<!./service/storage-impl.Storage>}\n   */\n  static storageForDoc(elementOrAmpDoc) {\n    return /** @type {!Promise<!./service/storage-impl.Storage>} */ (\n      getServicePromiseForDoc(elementOrAmpDoc, 'storage'));\n  }\n\n  /**\n   * @param {!Window} window\n   * @return {!./service/template-impl.Templates}\n   */\n  static templatesFor(window) {\n    return /** @type {!./service/template-impl.Templates} */ (\n      getService(window, 'templates'));\n  }\n\n  /**\n   * @param {!Window} window\n   * @return {!./service/timer-impl.Timer}\n   */\n  static timerFor(window) {\n    return /** @type {!./service/timer-impl.Timer} */ (\n      getService(window, 'timer'));\n  }\n\n  /**\n   * Unlike most service getters, passing `Node` is necessary for some FIE-scope\n   * services since sometimes we only have the FIE Document for context.\n   * @param {!Node|!./service/ampdoc-impl.AmpDoc} nodeOrDoc\n   * @return {!./service/url-replacements-impl.UrlReplacements}\n   */\n  static urlReplacementsForDoc(nodeOrDoc) {\n    return /** @type {!./service/url-replacements-impl.UrlReplacements} */ (\n      getExistingServiceForDocInEmbedScope(\n          nodeOrDoc, 'url-replace', /* opt_fallbackToTopWin */ true));\n  }\n\n  /**\n   * @param {!Element|!./service/ampdoc-impl.AmpDoc} elementOrAmpDoc\n   * @return {!Promise<!../extensions/amp-user-notification/0.1/amp-user-notification.UserNotificationManager>}\n   */\n  static userNotificationManagerForDoc(elementOrAmpDoc) {\n    return (/** @type {!Promise<!../extensions/amp-user-notification/0.1/amp-user-notification.UserNotificationManager>} */\n      (getElementServiceForDoc(elementOrAmpDoc, 'userNotificationManager',\n          'amp-user-notification')));\n  }\n\n  /**\n   * Returns a promise for the consentPolicy Service or a promise for null if\n   * the service is not available on the current page.\n   * @param {!Element|!./service/ampdoc-impl.AmpDoc} elementOrAmpDoc\n   * @return {!Promise<?../extensions/amp-consent/0.1/consent-policy-manager.ConsentPolicyManager>}\n   */\n  static consentPolicyServiceForDocOrNull(elementOrAmpDoc) {\n    return (/** @type {!Promise<?../extensions/amp-consent/0.1/consent-policy-manager.ConsentPolicyManager>} */\n      (getElementServiceIfAvailableForDoc(elementOrAmpDoc,\n          'consentPolicyManager', 'amp-consent')));\n  }\n\n  /**\n   * Returns a promise for the geo service or a promise for null if\n   * the service is not available on the current page.\n   * @param {!Element|!./service/ampdoc-impl.AmpDoc} elementOrAmpDoc\n   * @return {!Promise<?../extensions/amp-geo/0.1/amp-geo.GeoDef>}\n   */\n  static geoForDocOrNull(elementOrAmpDoc) {\n    return /** @type {!Promise<?../extensions/amp-geo/0.1/amp-geo.GeoDef>} */ (\n      getElementServiceIfAvailableForDoc(\n          elementOrAmpDoc, 'geo', 'amp-geo', true));\n  }\n\n  /**\n   * Unlike most service getters, passing `Node` is necessary for some FIE-scope\n   * services since sometimes we only have the FIE Document for context.\n   * @param {!Node|!./service/ampdoc-impl.AmpDoc} nodeOrDoc\n   * @return {!./service/url-impl.Url}\n   */\n  static urlForDoc(nodeOrDoc) {\n    return /** @type {!./service/url-impl.Url} */ (\n      getExistingServiceForDocInEmbedScope(\n          nodeOrDoc, 'url', /* opt_fallbackToTopWin */ true));\n  }\n\n  /**\n   * Returns a promise for the experiment variants or a promise for null if it\n   * is not available on the current page.\n   * @param {!Window} win\n   * @return {!Promise<?Object<string>>}\n   */\n  static variantForOrNull(win) {\n    return /** @type {!Promise<?Object<string>>} */ (\n      getElementServiceIfAvailable(win, 'variant', 'amp-experiment', true));\n  }\n\n  /**\n   * @param {!Element|!./service/ampdoc-impl.AmpDoc} elementOrAmpDoc\n   * @return {!./service/video-service-interface.VideoServiceInterface}\n   */\n  static videoManagerForDoc(elementOrAmpDoc) {\n    return (\n      /** @type {!./service/video-service-interface.VideoServiceInterface} */ (\n        getServiceForDoc(elementOrAmpDoc, 'video-manager')));\n  }\n\n  /**\n   * Uses getServiceForDocDeprecated() since Viewer is a startup service.\n   * @param {!Node|!./service/ampdoc-impl.AmpDoc} nodeOrDoc\n   * @return {!./service/viewer-impl.Viewer}\n   */\n  static viewerForDoc(nodeOrDoc) {\n    return /** @type {!./service/viewer-impl.Viewer} */ (\n      getServiceForDocDeprecated(nodeOrDoc, 'viewer'));\n  }\n\n  /**\n   * Returns promise for the viewer. This is an unusual case and necessary only\n   * for services that need reference to the viewer before it has been\n   * initialized. Most of the code, however, just should use `viewerForDoc`.\n   * @param {!Element|!./service/ampdoc-impl.AmpDoc} elementOrAmpDoc\n   * @return {!Promise<!./service/viewer-impl.Viewer>}\n   */\n  static viewerPromiseForDoc(elementOrAmpDoc) {\n    return /** @type {!Promise<!./service/viewer-impl.Viewer>} */ (\n      getServicePromiseForDoc(elementOrAmpDoc, 'viewer'));\n  }\n\n  /**\n   * @param {!Window} window\n   * @return {!./service/vsync-impl.Vsync}\n   */\n  static vsyncFor(window) {\n    return /** @type {!./service/vsync-impl.Vsync} */ (\n      getService(window, 'vsync'));\n  }\n\n  /**\n   * Uses getServiceForDocDeprecated() since Viewport is a startup service.\n   * @param {!Node|!./service/ampdoc-impl.AmpDoc} nodeOrDoc\n   * @return {!./service/viewport/viewport-impl.Viewport}\n   */\n  static viewportForDoc(nodeOrDoc) {\n    return /** @type {!./service/viewport/viewport-impl.Viewport} */ (\n      getServiceForDocDeprecated(nodeOrDoc, 'viewport'));\n  }\n\n  /**\n   * @param {!Window} window\n   * @return {!./service/xhr-impl.Xhr}\n   */\n  static xhrFor(window) {\n    return /** @type {!./service/xhr-impl.Xhr} */ (getService(window, 'xhr'));\n  }\n}\n","/**\n * Copyright 2015 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @param {string} _match\n * @param {string} character\n * @return {string}\n */\nfunction toUpperCase(_match, character) {\n  return character.toUpperCase();\n}\n\n/**\n * @param {string} match\n * @return {string}\n */\nfunction prependDashAndToLowerCase(match) {\n  return '-' + match.toLowerCase();\n}\n\n/**\n * @param {string} name Attribute name containing dashes.\n * @return {string} Dashes removed and successive character sent to upper case.\n * visibleForTesting\n */\nexport function dashToCamelCase(name) {\n  return name.replace(/-([a-z])/g, toUpperCase);\n}\n\n/**\n * Converts a string that is in camelCase to one that is in dash-case.\n *\n * @param {string} string The string to convert.\n * @return {string} The string in dash-case.\n */\nexport function camelCaseToDash(string) {\n  return string.replace(/(?!^)[A-Z]/g, prependDashAndToLowerCase);\n}\n\n/**\n * @param {string} name Attribute name with dashes\n * @return {string} Dashes replaced by underlines.\n */\nexport function dashToUnderline(name) {\n  return name.replace('-', '_');\n}\n\n/**\n * Polyfill for String.prototype.endsWith.\n * @param {string} string\n * @param {string} suffix\n * @return {boolean}\n */\nexport function endsWith(string, suffix) {\n  const index = string.length - suffix.length;\n  return index >= 0 && string.indexOf(suffix, index) == index;\n}\n\n/**\n * Polyfill for String.prototype.startsWith.\n * @param {string} string\n * @param {string} prefix\n * @return {boolean}\n */\nexport function startsWith(string, prefix) {\n  if (prefix.length > string.length) {\n    return false;\n  }\n  return string.lastIndexOf(prefix, 0) == 0;\n}\n\n/**\n * Expands placeholders in a given template string with values.\n *\n * Placeholders use ${key-name} syntax and are replaced with the value\n * returned from the given getter function.\n *\n * @param {string} template The template string to expand.\n * @param {function(string):*} getter Function used to retrieve a value for a\n *   placeholder. Returns values will be coerced into strings.\n * @param {number=} opt_maxIterations Number of times to expand the template.\n *   Defaults to 1, but should be set to a larger value your placeholder tokens\n *   can be expanded to other placeholder tokens. Take caution with large values\n *   as recursively expanding a string can be exponentially expensive.\n */\nexport function expandTemplate(template, getter, opt_maxIterations) {\n  const maxIterations = opt_maxIterations || 1;\n  for (let i = 0; i < maxIterations; i++) {\n    let matches = 0;\n    template = template.replace(/\\${([^}]*)}/g, (_a, b) => {\n      matches++;\n      return getter(b);\n    });\n    if (!matches) {\n      break;\n    }\n  }\n  return template;\n}\n\n/**\n * Hash function djb2a\n * This is intended to be a simple, fast hashing function using minimal code.\n * It does *not* have good cryptographic properties.\n * @param {string} str\n * @return {string} 32-bit unsigned hash of the string\n */\nexport function stringHash32(str) {\n  const {length} = str;\n  let hash = 5381;\n  for (let i = 0; i < length; i++) {\n    hash = hash * 33 ^ str.charCodeAt(i);\n  }\n  // Convert from 32-bit signed to unsigned.\n  return String(hash >>> 0);\n}\n","/**\n * Copyright 2015 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Services} from './services';\nimport {dev, rethrowAsync} from './log';\nimport {insertAfterOrAtStart, waitForBody} from './dom';\nimport {map} from './utils/object';\nimport {setStyles} from './style';\nimport {waitForServices} from './render-delaying-services';\n\nconst TRANSFORMER_PROP = '__AMP_CSS_TR';\nconst STYLE_MAP_PROP = '__AMP_CSS_SM';\nconst bodyVisibleSentinel = '__AMP_BODY_VISIBLE';\n\n\n/**\n * Adds the given css text to the given ampdoc.\n *\n * The style tags will be at the beginning of the head before all author\n * styles. One element can be the main runtime CSS. This is guaranteed\n * to always be the first stylesheet in the doc.\n *\n * @param {!./service/ampdoc-impl.AmpDoc} ampdoc The ampdoc that should get the new styles.\n * @param {string} cssText\n * @param {?function(!Element)|undefined} cb Called when the new styles are available.\n *     Not using a promise, because this is synchronous when possible.\n *     for better performance.\n * @param {boolean=} opt_isRuntimeCss If true, this style tag will be inserted\n *     as the first element in head and all style elements will be positioned\n *     after.\n * @param {string=} opt_ext\n * @return {!Element}\n */\nexport function installStylesForDoc(\n  ampdoc, cssText, cb, opt_isRuntimeCss, opt_ext) {\n  const cssRoot = ampdoc.getHeadNode();\n  const style = insertStyleElement(\n      cssRoot,\n      maybeTransform(cssRoot, cssText),\n      opt_isRuntimeCss || false,\n      opt_ext || null);\n\n  if (cb) {\n    const rootNode = ampdoc.getRootNode();\n    // Styles aren't always available synchronously. E.g. if there is a\n    // pending style download, it will have to finish before the new\n    // style is visible.\n    // For this reason we poll until the style becomes available.\n    // Sync case.\n    if (styleLoaded(rootNode, style)) {\n      cb(style);\n      return style;\n    }\n    // Poll until styles are available.\n    const interval = setInterval(() => {\n      if (styleLoaded(rootNode, style)) {\n        clearInterval(interval);\n        cb(style);\n      }\n    }, 4);\n  }\n  return style;\n}\n\n\n/**\n * Adds the given css text to the given document.\n * TODO(dvoytenko, #10705): Remove this method once FIE/ampdoc migration is\n * done.\n *\n * @param {!Document} doc The document that should get the new styles.\n * @param {string} cssText\n * @param {?function(!Element)|undefined} cb Called when the new styles are\n *     available. Not using a promise, because this is synchronous when\n *     possible. for better performance.\n * @param {boolean=} opt_isRuntimeCss If true, this style tag will be inserted\n *     as the first element in head and all style elements will be positioned\n *     after.\n * @param {string=} opt_ext\n * @return {!Element}\n */\nexport function installStylesLegacy(\n  doc, cssText, cb, opt_isRuntimeCss, opt_ext) {\n  const style = insertStyleElement(\n      dev().assertElement(doc.head),\n      cssText,\n      opt_isRuntimeCss || false,\n      opt_ext || null);\n\n  if (cb) {\n    // Styles aren't always available synchronously. E.g. if there is a\n    // pending style download, it will have to finish before the new\n    // style is visible.\n    // For this reason we poll until the style becomes available.\n    // Sync case.\n    if (styleLoaded(doc, style)) {\n      cb(style);\n      return style;\n    }\n    // Poll until styles are available.\n    const interval = setInterval(() => {\n      if (styleLoaded(doc, style)) {\n        clearInterval(interval);\n        cb(style);\n      }\n    }, 4);\n  }\n  return style;\n}\n\n\n/**\n * Creates the properly configured style element.\n * @param {!Element|!ShadowRoot} cssRoot\n * @param {string} cssText\n * @param {boolean} isRuntimeCss\n * @param {?string} ext\n * @return {!Element}\n */\nfunction insertStyleElement(cssRoot, cssText, isRuntimeCss, ext) {\n  let styleMap = cssRoot[STYLE_MAP_PROP];\n  if (!styleMap) {\n    styleMap = cssRoot[STYLE_MAP_PROP] = map();\n  }\n\n  const isExtCss = !isRuntimeCss &&\n      (ext && ext != 'amp-custom' && ext != 'amp-keyframes');\n  const key =\n      isRuntimeCss ? 'amp-runtime' :\n        isExtCss ? `amp-extension=${ext}` : null;\n\n  // Check if it has already been created or discovered.\n  if (key) {\n    const existing = getExistingStyleElement(cssRoot, styleMap, key);\n    if (existing) {\n      return existing;\n    }\n  }\n\n  // Create the new style element and append to cssRoot.\n  const doc = (cssRoot.ownerDocument || cssRoot);\n  const style = doc.createElement('style');\n  style./*OK*/textContent = cssText;\n  let afterElement = null;\n  // Make sure that we place style tags after the main runtime CSS. Otherwise\n  // the order is random.\n  if (isRuntimeCss) {\n    style.setAttribute('amp-runtime', '');\n  } else if (isExtCss) {\n    style.setAttribute('amp-extension', ext || '');\n    afterElement = dev().assertElement(getExistingStyleElement(\n        cssRoot, styleMap, 'amp-runtime'));\n  } else {\n    if (ext) {\n      style.setAttribute(ext, '');\n    }\n    afterElement = cssRoot.lastChild;\n  }\n  insertAfterOrAtStart(cssRoot, style, afterElement);\n  if (key) {\n    styleMap[key] = style;\n  }\n  return style;\n}\n\n\n/**\n * @param {!Element|!ShadowRoot} cssRoot\n * @param {!Object<string, !Element>} styleMap\n * @param {string} key\n * @return {?Element}\n */\nfunction getExistingStyleElement(cssRoot, styleMap, key) {\n  // Already cached.\n  if (styleMap[key]) {\n    return styleMap[key];\n  }\n  // Check if the style has already been added by the server layout.\n  const existing = cssRoot./*OK*/querySelector(`style[${key}]`);\n  if (existing) {\n    styleMap[key] = existing;\n    return existing;\n  }\n  // Nothing found.\n  return null;\n}\n\n\n/**\n * Applies a transformer to the CSS text if it has been registered.\n * @param {!Element|!ShadowRoot} cssRoot\n * @param {function(string):string} transformer\n */\nexport function installCssTransformer(cssRoot, transformer) {\n  cssRoot[TRANSFORMER_PROP] = transformer;\n}\n\n\n/**\n * Applies a transformer to the CSS text if it has been registered.\n * @param {!Element|!ShadowRoot} cssRoot\n * @param {string} cssText\n * @return {string}\n */\nfunction maybeTransform(cssRoot, cssText) {\n  const transformer = cssRoot[TRANSFORMER_PROP];\n  return transformer ? transformer(cssText) : cssText;\n}\n\n\n/**\n * Sets the document's body opacity to 1.\n * If the body is not yet available (because our script was loaded\n * synchronously), polls until it is.\n * @param {!Document} doc The document who's body we should make visible.\n * @param {boolean=} opt_waitForServices Whether the body visibility should\n *     be blocked on key services being loaded.\n */\nexport function makeBodyVisible(doc, opt_waitForServices) {\n  dev().assert(doc.defaultView, 'Passed in document must have a defaultView');\n  const win = /** @type {!Window} */ (doc.defaultView);\n  if (win[bodyVisibleSentinel]) {\n    return;\n  }\n  const set = () => {\n    win[bodyVisibleSentinel] = true;\n    setStyles(dev().assertElement(doc.body), {\n      opacity: 1,\n      visibility: 'visible',\n      'animation': 'none',\n    });\n    renderStartedNoInline(doc);\n  };\n  try {\n    waitForBody(doc, () => {\n      if (win[bodyVisibleSentinel]) {\n        return;\n      }\n      win[bodyVisibleSentinel] = true;\n      if (opt_waitForServices) {\n        waitForServices(win).catch(reason => {\n          rethrowAsync(reason);\n          return [];\n        }).then(services => {\n          set();\n          if (services.length > 0) {\n            Services.resourcesForDoc(doc)./*OK*/schedulePass(\n                1, /* relayoutAll */ true);\n          }\n          try {\n            const perf = Services.performanceFor(win);\n            perf.tick('mbv');\n            perf.flush();\n          } catch (e) {}\n        });\n      } else {\n        set();\n      }\n    });\n  } catch (e) {\n    // If there was an error during the logic above (such as service not\n    // yet installed, definitely try to make the body visible.\n    set();\n    // Avoid errors in the function to break execution flow as this is\n    // often called as a last resort.\n    rethrowAsync(e);\n  }\n}\n\n\n/**\n * @param {!Document} doc\n */\nfunction renderStartedNoInline(doc) {\n  try {\n    Services.resourcesForDoc(doc).renderStarted();\n  } catch (e) {\n    // `makeBodyVisible` is called in the error-processing cycle and thus\n    // could be triggered when runtime's initialization is incomplete which\n    // would cause unrelated errors to be thrown here.\n  }\n}\n\n\n/**\n * Indicates that the body is always visible. For instance, in case of PWA.\n * @param {!Window} win\n */\nexport function bodyAlwaysVisible(win) {\n  win[bodyVisibleSentinel] = true;\n}\n\n\n/**\n * Checks whether a style element was registered in the DOM.\n * @param {!Document|!ShadowRoot} doc\n * @param {!Element} style\n * @return {boolean}\n */\nfunction styleLoaded(doc, style) {\n  const sheets = doc.styleSheets;\n  for (let i = 0; i < sheets.length; i++) {\n    const sheet = sheets[i];\n    if (sheet.ownerNode == style) {\n      return true;\n    }\n  }\n  return false;\n}\n","/**\n * Copyright 2015 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// Note: loaded by 3p system. Cannot rely on babel polyfills.\nimport {map} from './utils/object.js';\nimport {startsWith} from './string';\n\n\n/** @type {Object<string, string>} */\nlet propertyNameCache;\n\n/** @const {!Array<string>} */\nconst vendorPrefixes = ['Webkit', 'webkit', 'Moz', 'moz', 'ms', 'O', 'o'];\n\n\n/**\n * @export\n * @param {string} camelCase camel cased string\n * @return {string} title cased string\n */\nexport function camelCaseToTitleCase(camelCase) {\n  return camelCase.charAt(0).toUpperCase() + camelCase.slice(1);\n}\n\n/**\n * Checks the style if a prefixed version of a property exists and returns\n * it or returns an empty string.\n * @private\n * @param {!Object} style\n * @param {string} titleCase the title case version of a css property name\n * @return {string} the prefixed property name or null.\n */\nfunction getVendorJsPropertyName_(style, titleCase) {\n  for (let i = 0; i < vendorPrefixes.length; i++) {\n    const propertyName = vendorPrefixes[i] + titleCase;\n    if (style[propertyName] !== undefined) {\n      return propertyName;\n    }\n  }\n  return '';\n}\n\n/**\n * Returns the possibly prefixed JavaScript property name of a style property\n * (ex. WebkitTransitionDuration) given a camelCase'd version of the property\n * (ex. transitionDuration).\n * @export\n * @param {!Object} style\n * @param {string} camelCase the camel cased version of a css property name\n * @param {boolean=} opt_bypassCache bypass the memoized cache of property\n *   mapping\n * @return {string}\n */\nexport function getVendorJsPropertyName(style, camelCase, opt_bypassCache) {\n  if (startsWith(camelCase, '--')) {\n    // CSS vars are returned as is.\n    return camelCase;\n  }\n  if (!propertyNameCache) {\n    propertyNameCache = map();\n  }\n  let propertyName = propertyNameCache[camelCase];\n  if (!propertyName || opt_bypassCache) {\n    propertyName = camelCase;\n    if (style[camelCase] === undefined) {\n      const titleCase = camelCaseToTitleCase(camelCase);\n      const prefixedPropertyName = getVendorJsPropertyName_(style, titleCase);\n\n      if (style[prefixedPropertyName] !== undefined) {\n        propertyName = prefixedPropertyName;\n      }\n    }\n    if (!opt_bypassCache) {\n      propertyNameCache[camelCase] = propertyName;\n    }\n  }\n  return propertyName;\n}\n\n\n/**\n * Sets the CSS styles of the specified element with !important. The styles\n * are specified as a map from CSS property names to their values.\n * @param {!Element} element\n * @param {!Object<string, *>} styles\n */\nexport function setImportantStyles(element, styles) {\n  for (const k in styles) {\n    element.style.setProperty(\n        getVendorJsPropertyName(styles, k), styles[k].toString(), 'important');\n  }\n}\n\n\n/**\n * Sets the CSS style of the specified element with optional units, e.g. \"px\".\n * @param {?Element} element\n * @param {string} property\n * @param {*} value\n * @param {string=} opt_units\n * @param {boolean=} opt_bypassCache\n */\nexport function setStyle(element, property, value, opt_units, opt_bypassCache) {\n  const propertyName = getVendorJsPropertyName(element.style, property,\n      opt_bypassCache);\n  if (propertyName) {\n    element.style[propertyName] =\n      /** @type {string} */ (opt_units ? value + opt_units : value);\n  }\n}\n\n\n/**\n * Returns the value of the CSS style of the specified element.\n * @param {!Element} element\n * @param {string} property\n * @param {boolean=} opt_bypassCache\n * @return {*}\n */\nexport function getStyle(element, property, opt_bypassCache) {\n  const propertyName = getVendorJsPropertyName(element.style, property,\n      opt_bypassCache);\n  if (!propertyName) {\n    return undefined;\n  }\n  return element.style[propertyName];\n}\n\n\n/**\n * Sets the CSS styles of the specified element. The styles\n * a specified as a map from CSS property names to their values.\n * @param {!Element} element\n * @param {!Object<string, *>} styles\n */\nexport function setStyles(element, styles) {\n  for (const k in styles) {\n    setStyle(element, k, styles[k]);\n  }\n}\n\n\n/**\n * Shows or hides the specified element.\n * @param {!Element} element\n * @param {boolean=} opt_display\n */\nexport function toggle(element, opt_display) {\n  if (opt_display === undefined) {\n    opt_display = getStyle(element, 'display') == 'none';\n  }\n  setStyle(element, 'display', opt_display ? '' : 'none');\n}\n\n\n/**\n * Returns a pixel value.\n * @param {number} value\n * @return {string}\n */\nexport function px(value) {\n  return `${value}px`;\n}\n\n/**\n * Returns a degree value.\n * @param {number} value\n * @return {string}\n */\nexport function deg(value) {\n  return `${value}deg`;\n}\n\n/**\n * Returns a \"translateX\" for CSS \"transform\" property.\n * @param {number|string} value\n * @return {string}\n */\nexport function translateX(value) {\n  if (typeof value == 'string') {\n    return `translateX(${value})`;\n  }\n  return `translateX(${px(value)})`;\n}\n\n\n/**\n * Returns a \"translateX\" for CSS \"transform\" property.\n * @param {number|string} x\n * @param {(number|string)=} opt_y\n * @return {string}\n */\nexport function translate(x, opt_y) {\n  if (typeof x == 'number') {\n    x = px(x);\n  }\n  if (opt_y === undefined) {\n    return `translate(${x})`;\n  }\n  if (typeof opt_y == 'number') {\n    opt_y = px(opt_y);\n  }\n  return `translate(${x}, ${opt_y})`;\n}\n\n\n/**\n * Returns a \"scale\" for CSS \"transform\" property.\n * @param {number|string} value\n * @return {string}\n */\nexport function scale(value) {\n  return `scale(${value})`;\n}\n\n/**\n * Returns a \"rotate\" for CSS \"transform\" property.\n * @param {number|string} value\n * @return {string}\n */\nexport function rotate(value) {\n  if (typeof value == 'number') {\n    value = deg(value);\n  }\n  return `rotate(${value})`;\n}\n\n/**\n * Remove alpha value from a rgba color value.\n * Return the new color property with alpha equals if has the alpha value.\n * Caller needs to make sure the input color value is a valid rgba/rgb value\n * @param {string} rgbaColor\n * @return {string}\n */\nexport function removeAlphaFromColor(rgbaColor) {\n  return rgbaColor.replace(\n      /\\(([^,]+),([^,]+),([^,)]+),[^)]+\\)/g, '($1,$2,$3, 1)');\n}\n\n/**\n * Gets the computed style of the element. The helper is necessary to enforce\n * the possible `null` value returned by a buggy Firefox.\n *\n * @param {!Window} win\n * @param {!Element} el\n * @return {!Object<string, string>}\n */\nexport function computedStyle(win, el) {\n  const style = /** @type {?CSSStyleDeclaration} */(win.getComputedStyle(el));\n  return /** @type {!Object<string, string>} */(style) || map();\n}\n\n\n/**\n * Resets styles that were set dynamically (i.e. inline)\n * @param {!Element} element\n * @param {!Array<string>} properties\n */\nexport function resetStyles(element, properties) {\n  const styleObj = {};\n  properties.forEach(prop => {\n    styleObj[prop] = null;\n  });\n  setStyles(element, styleObj);\n}\n","/**\n * Copyright 2015 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* @const */\nconst toString_ = Object.prototype.toString;\n\n/**\n * Returns the ECMA [[Class]] of a value\n * @param {*} value\n * @return {string}\n */\nfunction toString(value) {\n  return toString_.call(value);\n}\n\n/**\n * Determines if value is actually an Array.\n * @param {*} value\n * @return {boolean}\n */\nexport function isArray(value) {\n  return Array.isArray(value);\n}\n\n/**\n * Converts an array-like object to an array.\n * @param {?IArrayLike<T>|string} arrayLike\n * @return {!Array<T>}\n * @template T\n */\nexport function toArray(arrayLike) {\n  if (!arrayLike) {\n    return [];\n  }\n  const array = new Array(arrayLike.length);\n  for (let i = 0; i < arrayLike.length; i++) {\n    array[i] = arrayLike[i];\n  }\n  return array;\n}\n\n/**\n * Determines if value is actually an Object.\n * @param {*} value\n * @return {boolean}\n */\nexport function isObject(value) {\n  return toString(value) === '[object Object]';\n}\n\n/**\n * Determines if value is of number type and finite.\n * NaN and Infinity are not considered a finite number.\n * String numbers are not considered numbers.\n * @param {*} value\n * @return {boolean}\n */\nexport function isFiniteNumber(value) {\n  return (typeof value === 'number' && isFinite(value));\n}\n\n/**\n * Checks whether `s` is a valid value of `enumObj`.\n *\n * @param {!Object<T>} enumObj\n * @param {T} s\n * @return {boolean}\n * @template T\n */\nexport function isEnumValue(enumObj, s) {\n  for (const k in enumObj) {\n    if (enumObj[k] === s) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/**\n * Externs declare that access `defaultView` from `document` or\n * `ownerDocument` is of type `(Window|null)` but most of our parameter types\n * assume that it is never null. This is OK in practice as we ever only get\n * null on disconnected documents or old IE.\n * This helper function casts it into just a simple Window return type.\n *\n * @param {!Window|null} winOrNull\n * @return {!Window}\n */\nexport function toWin(winOrNull) {\n  return /** @type {!Window} */ (winOrNull);\n}\n\n","/**\n * Copyright 2017 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {tryDecodeUriComponent_} from './url-try-decode-uri-component';\n\nconst regex = /(?:^[#?]?|&)([^=&]+)(?:=([^&]*))?/g;\n\n/**\n * Parses the query string of an URL. This method returns a simple key/value\n * map. If there are duplicate keys the latest value is returned.\n *\n * DO NOT import the function from this file. Instead, import parseQueryString\n * from `src/url.js`.\n *\n * @param {string} queryString\n * @return {!JsonObject}\n */\nexport function parseQueryString_(queryString) {\n  const params = /** @type {!JsonObject} */ (Object.create(null));\n  if (!queryString) {\n    return params;\n  }\n\n  let match;\n  while ((match = regex.exec(queryString))) {\n    const name = tryDecodeUriComponent_(match[1], match[1]);\n    const value = match[2] ? tryDecodeUriComponent_(match[2], match[2]) : '';\n    params[name] = value;\n  }\n  return params;\n}\n","/**\n * Copyright 2017 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Tries to decode a URI component, falling back to opt_fallback (or an empty\n * string)\n *\n * DO NOT import the function from this file. Instead, import\n * tryDecodeUriComponent from `src/url.js`.\n *\n * @param {string} component\n * @param {string=} fallback\n * @return {string}\n */\nexport function tryDecodeUriComponent_(component, fallback = '') {\n  try {\n    return decodeURIComponent(component);\n  } catch (e) {\n    return fallback;\n  }\n}\n","/**\n * Copyright 2015 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {LruCache} from './utils/lru-cache';\nimport {dict} from './utils/object';\nimport {endsWith, startsWith} from './string';\nimport {getMode} from './mode';\nimport {isArray} from './types';\nimport {parseQueryString_} from './url-parse-query-string';\nimport {tryDecodeUriComponent_} from './url-try-decode-uri-component';\nimport {urls} from './config';\nimport {user} from './log';\n\n/**\n * @type {!JsonObject}\n */\nconst SERVING_TYPE_PREFIX = dict({\n  // No viewer\n  'c': true,\n  // In viewer\n  'v': true,\n  // Ad landing page\n  'a': true,\n  // Ad\n  'ad': true,\n});\n\n/**\n * Cached a-tag to avoid memory allocation during URL parsing.\n * @type {HTMLAnchorElement}\n */\nlet a;\n\n/**\n * We cached all parsed URLs. As of now there are no use cases\n * of AMP docs that would ever parse an actual large number of URLs,\n * but we often parse the same one over and over again.\n * @type {LruCache}\n */\nlet cache;\n\n/** @private @const Matches amp_js_* parameters in query string. */\nconst AMP_JS_PARAMS_REGEX = /[?&]amp_js[^&]*/;\n\n/** @private @const Matches amp_gsa parameters in query string. */\nconst AMP_GSA_PARAMS_REGEX = /[?&]amp_gsa[^&]*/;\n\n/** @private @const Matches amp_r parameters in query string. */\nconst AMP_R_PARAMS_REGEX = /[?&]amp_r[^&]*/;\n\n/** @private @const Matches usqp parameters from goog experiment in query string. */\nconst GOOGLE_EXPERIMENT_PARAMS_REGEX = /[?&]usqp[^&]*/;\n\nconst INVALID_PROTOCOLS = [\n  /*eslint no-script-url: 0*/ 'javascript:',\n  /*eslint no-script-url: 0*/ 'data:',\n  /*eslint no-script-url: 0*/ 'vbscript:',\n];\n\n/** @const {string} */\nexport const SOURCE_ORIGIN_PARAM = '__amp_source_origin';\n\n/**\n * Returns the correct origin for a given window.\n * @param {!Window} win\n * @return {string} origin\n */\nexport function getWinOrigin(win) {\n  return win.origin || parseUrlDeprecated(win.location.href).origin;\n}\n\n/**\n * Returns a Location-like object for the given URL. If it is relative,\n * the URL gets resolved.\n * Consider the returned object immutable. This is enforced during\n * testing by freezing the object.\n * @param {string} url\n * @param {boolean=} opt_nocache\n * @return {!Location}\n */\nexport function parseUrlDeprecated(url, opt_nocache) {\n  if (!a) {\n    a = /** @type {!HTMLAnchorElement} */ (self.document.createElement('a'));\n    cache = self.UrlCache || (self.UrlCache = new LruCache(100));\n  }\n\n  return parseUrlWithA(a, url, opt_nocache ? null : cache);\n}\n\n/**\n * Returns a Location-like object for the given URL. If it is relative,\n * the URL gets resolved.\n * Consider the returned object immutable. This is enforced during\n * testing by freezing the object.\n * @param {!HTMLAnchorElement} a\n * @param {string} url\n * @param {LruCache=} opt_cache\n * @return {!Location}\n * @restricted\n */\nexport function parseUrlWithA(a, url, opt_cache) {\n  if (opt_cache && opt_cache.has(url)) {\n    return opt_cache.get(url);\n  }\n\n  a.href = url;\n\n  // IE11 doesn't provide full URL components when parsing relative URLs.\n  // Assigning to itself again does the trick #3449.\n  if (!a.protocol) {\n    a.href = a.href;\n  }\n\n  const info = /** @type {!Location} */({\n    href: a.href,\n    protocol: a.protocol,\n    host: a.host,\n    hostname: a.hostname,\n    port: a.port == '0' ? '' : a.port,\n    pathname: a.pathname,\n    search: a.search,\n    hash: a.hash,\n    origin: null, // Set below.\n  });\n\n  // Some IE11 specific polyfills.\n  // 1) IE11 strips out the leading '/' in the pathname.\n  if (info.pathname[0] !== '/') {\n    info.pathname = '/' + info.pathname;\n  }\n\n  // 2) For URLs with implicit ports, IE11 parses to default ports while\n  // other browsers leave the port field empty.\n  if ((info.protocol == 'http:' && info.port == 80)\n      || (info.protocol == 'https:' && info.port == 443)) {\n    info.port = '';\n    info.host = info.hostname;\n  }\n\n  // For data URI a.origin is equal to the string 'null' which is not useful.\n  // We instead return the actual origin which is the full URL.\n  if (a.origin && a.origin != 'null') {\n    info.origin = a.origin;\n  } else if (info.protocol == 'data:' || !info.host) {\n    info.origin = info.href;\n  } else {\n    info.origin = info.protocol + '//' + info.host;\n  }\n\n  // Freeze during testing to avoid accidental mutation.\n  const frozen = (getMode().test && Object.freeze) ? Object.freeze(info) : info;\n\n  if (opt_cache) {\n    opt_cache.put(url, frozen);\n  }\n\n  return frozen;\n}\n\n/**\n * Appends the string just before the fragment part (or optionally\n * to the front of the query string) of the URL.\n * @param {string} url\n * @param {string} paramString\n * @param {boolean=} opt_addToFront\n * @return {string}\n */\nexport function appendEncodedParamStringToUrl(url, paramString,\n  opt_addToFront) {\n  if (!paramString) {\n    return url;\n  }\n  const mainAndFragment = url.split('#', 2);\n  const mainAndQuery = mainAndFragment[0].split('?', 2);\n\n  let newUrl = mainAndQuery[0] + (\n    mainAndQuery[1]\n      ? (opt_addToFront\n        ? `?${paramString}&${mainAndQuery[1]}`\n        : `?${mainAndQuery[1]}&${paramString}`)\n      : `?${paramString}`);\n  newUrl += mainAndFragment[1] ? `#${mainAndFragment[1]}` : '';\n  return newUrl;\n}\n/**\n * Appends a query string field and value to a url. `key` and `value`\n * will be ran through `encodeURIComponent` before appending.\n * @param {string} url\n * @param {string} key\n * @param {string} value\n * @param {boolean=} opt_addToFront\n * @return {string}\n */\nexport function addParamToUrl(url, key, value, opt_addToFront) {\n  const field = `${encodeURIComponent(key)}=${encodeURIComponent(value)}`;\n  return appendEncodedParamStringToUrl(url, field, opt_addToFront);\n}\n\n/**\n * Appends query string fields and values to a url. The `params` objects'\n * `key`s and `value`s will be transformed into query string keys/values.\n * @param {string} url\n * @param {!JsonObject<string, string|!Array<string>>} params\n * @return {string}\n */\nexport function addParamsToUrl(url, params) {\n  return appendEncodedParamStringToUrl(url, serializeQueryString(params));\n}\n\n/**\n * Serializes the passed parameter map into a query string with both keys\n * and values encoded.\n * @param {!JsonObject<string, string|!Array<string>>} params\n * @return {string}\n */\nexport function serializeQueryString(params) {\n  const s = [];\n  for (const k in params) {\n    const v = params[k];\n    if (v == null) {\n      continue;\n    } else if (isArray(v)) {\n      for (let i = 0; i < v.length; i++) {\n        const sv = /** @type {string} */ (v[i]);\n        s.push(`${encodeURIComponent(k)}=${encodeURIComponent(sv)}`);\n      }\n    } else {\n      const sv = /** @type {string} */ (v);\n      s.push(`${encodeURIComponent(k)}=${encodeURIComponent(sv)}`);\n    }\n  }\n  return s.join('&');\n}\n\n/**\n * Returns `true` if the URL is secure: either HTTPS or localhost (for testing).\n * @param {string|!Location} url\n * @return {boolean}\n */\nexport function isSecureUrlDeprecated(url) {\n  if (typeof url == 'string') {\n    url = parseUrlDeprecated(url);\n  }\n  return (url.protocol == 'https:' ||\n      url.hostname == 'localhost' ||\n      endsWith(url.hostname, '.localhost'));\n}\n\n/**\n * Asserts that a given url is HTTPS or protocol relative. It's a user-level\n * assert.\n *\n * Provides an exception for localhost.\n *\n * @param {?string|undefined} urlString\n * @param {!Element|string} elementContext Element where the url was found.\n * @param {string=} sourceName Used for error messages.\n * @return {string}\n */\nexport function assertHttpsUrl(\n  urlString, elementContext, sourceName = 'source') {\n  user().assert(urlString != null, '%s %s must be available',\n      elementContext, sourceName);\n  // (erwinm, #4560): type cast necessary until #4560 is fixed.\n  const theUrlString = /** @type {string} */ (urlString);\n  user().assert(isSecureUrlDeprecated(theUrlString) || /^(\\/\\/)/.test(theUrlString),\n      '%s %s must start with ' +\n      '\"https://\" or \"//\" or be relative and served from ' +\n      'either https or from localhost. Invalid value: %s',\n      elementContext, sourceName, theUrlString);\n  return theUrlString;\n}\n\n/**\n * Asserts that a given url is an absolute HTTP or HTTPS URL.\n * @param {string} urlString\n * @return {string}\n */\nexport function assertAbsoluteHttpOrHttpsUrl(urlString) {\n  user().assert(/^https?\\:/i.test(urlString),\n      'URL must start with \"http://\" or \"https://\". Invalid value: %s',\n      urlString);\n  return parseUrlDeprecated(urlString).href;\n}\n\n\n/**\n * Parses the query string of an URL. This method returns a simple key/value\n * map. If there are duplicate keys the latest value is returned.\n *\n * This function is implemented in a separate file to avoid a circular\n * dependency.\n *\n * @param {string} queryString\n * @return {!JsonObject}\n */\nexport function parseQueryString(queryString) {\n  return parseQueryString_(queryString);\n}\n\n/**\n * Returns the URL without fragment. If URL doesn't contain fragment, the same\n * string is returned.\n * @param {string} url\n * @return {string}\n */\nexport function removeFragment(url) {\n  const index = url.indexOf('#');\n  if (index == -1) {\n    return url;\n  }\n  return url.substring(0, index);\n}\n\n/**\n * Returns the fragment from the URL. If the URL doesn't contain fragment,\n * the empty string is returned.\n * @param {string} url\n * @return {string}\n */\nexport function getFragment(url) {\n  const index = url.indexOf('#');\n  if (index == -1) {\n    return '';\n  }\n  return url.substring(index);\n}\n\n/**\n * Returns whether the URL has the origin of a proxy.\n * @param {string|!Location} url URL of an AMP document.\n * @return {boolean}\n */\nexport function isProxyOrigin(url) {\n  if (typeof url == 'string') {\n    url = parseUrlDeprecated(url);\n  }\n  return urls.cdnProxyRegex.test(url.origin);\n}\n\n/**\n * For proxy-origin URLs, returns the serving type. Otherwise, returns null.\n * E.g., 'https://amp-com.cdn.ampproject.org/a/s/amp.com/amp_document.html'\n * returns 'a'.\n * @param {string|!Location} url URL of an AMP document.\n * @return {?string}\n */\nexport function getProxyServingType(url) {\n  if (typeof url == 'string') {\n    url = parseUrlDeprecated(url);\n  }\n  if (!isProxyOrigin(url)) {\n    return null;\n  }\n  const path = url.pathname.split('/', 2);\n  return path[1];\n}\n\n/**\n * Returns whether the URL origin is localhost.\n * @param {string|!Location} url URL of an AMP document.\n * @return {boolean}\n */\nexport function isLocalhostOrigin(url) {\n  if (typeof url == 'string') {\n    url = parseUrlDeprecated(url);\n  }\n  return urls.localhostRegex.test(url.origin);\n}\n\n/**\n * Returns whether the URL has valid protocol.\n * Deep link protocol is valid, but not javascript etc.\n * @param {string|!Location} url\n * @return {boolean}\n */\nexport function isProtocolValid(url) {\n  if (!url) {\n    return true;\n  }\n  if (typeof url == 'string') {\n    url = parseUrlDeprecated(url);\n  }\n  return !INVALID_PROTOCOLS.includes(url.protocol);\n}\n\n/**\n * Returns a URL without AMP JS parameters.\n * @param {string} url\n * @return {string}\n */\nexport function removeAmpJsParamsFromUrl(url) {\n  const parsed = parseUrlDeprecated(url);\n  const search = removeAmpJsParamsFromSearch(parsed.search);\n  return parsed.origin + parsed.pathname + search + parsed.hash;\n\n}\n\n/**\n * Returns a URL without a query string.\n * @param {string} url\n * @return {string}\n */\nexport function removeSearch(url) {\n  const index = url.indexOf('?');\n  if (index == -1) {\n    return url;\n  }\n  const fragment = getFragment(url);\n  return url.substring(0, index) + fragment;\n}\n\n/**\n * Removes parameters that start with amp js parameter pattern and returns the\n * new search string.\n * @param {string} urlSearch\n * @return {string}\n */\nfunction removeAmpJsParamsFromSearch(urlSearch) {\n  if (!urlSearch || urlSearch == '?') {\n    return '';\n  }\n  const search = urlSearch\n      .replace(AMP_JS_PARAMS_REGEX, '')\n      .replace(AMP_GSA_PARAMS_REGEX, '')\n      .replace(AMP_R_PARAMS_REGEX, '')\n      .replace(GOOGLE_EXPERIMENT_PARAMS_REGEX, '')\n      .replace(/^[?&]/, ''); // Removes first ? or &.\n  return search ? '?' + search : '';\n}\n\n/**\n * Returns the source URL of an AMP document for documents served\n * on a proxy origin or directly.\n * @param {string|!Location} url URL of an AMP document.\n * @return {string}\n */\nexport function getSourceUrl(url) {\n  if (typeof url == 'string') {\n    url = parseUrlDeprecated(url);\n  }\n\n  // Not a proxy URL - return the URL itself.\n  if (!isProxyOrigin(url)) {\n    return url.href;\n  }\n\n  // A proxy URL.\n  // Example path that is being matched here.\n  // https://cdn.ampproject.org/c/s/www.origin.com/foo/\n  // The /s/ is optional and signals a secure origin.\n  const path = url.pathname.split('/');\n  const prefix = path[1];\n  user().assert(SERVING_TYPE_PREFIX[prefix],\n      'Unknown path prefix in url %s', url.href);\n  const domainOrHttpsSignal = path[2];\n  const origin = domainOrHttpsSignal == 's'\n    ? 'https://' + decodeURIComponent(path[3])\n    : 'http://' + decodeURIComponent(domainOrHttpsSignal);\n  // Sanity test that what we found looks like a domain.\n  user().assert(origin.indexOf('.') > 0, 'Expected a . in origin %s', origin);\n  path.splice(1, domainOrHttpsSignal == 's' ? 3 : 2);\n  return origin + path.join('/') +\n      removeAmpJsParamsFromSearch(url.search) + (url.hash || '');\n}\n\n/**\n * Returns the source origin of an AMP document for documents served\n * on a proxy origin or directly.\n * @param {string|!Location} url URL of an AMP document.\n * @return {string} The source origin of the URL.\n */\nexport function getSourceOrigin(url) {\n  return parseUrlDeprecated(getSourceUrl(url)).origin;\n}\n\n/**\n * Returns absolute URL resolved based on the relative URL and the base.\n * @param {string} relativeUrlString\n * @param {string|!Location} baseUrl\n * @return {string}\n */\nexport function resolveRelativeUrl(relativeUrlString, baseUrl) {\n  if (typeof baseUrl == 'string') {\n    baseUrl = parseUrlDeprecated(baseUrl);\n  }\n  if (typeof URL == 'function') {\n    return new URL(relativeUrlString, baseUrl.href).toString();\n  }\n  return resolveRelativeUrlFallback_(relativeUrlString, baseUrl);\n}\n\n/**\n * Fallback for URL resolver when URL class is not available.\n * @param {string} relativeUrlString\n * @param {string|!Location} baseUrl\n * @return {string}\n * @private Visible for testing.\n */\nexport function resolveRelativeUrlFallback_(relativeUrlString, baseUrl) {\n  if (typeof baseUrl == 'string') {\n    baseUrl = parseUrlDeprecated(baseUrl);\n  }\n  relativeUrlString = relativeUrlString.replace(/\\\\/g, '/');\n  const relativeUrl = parseUrlDeprecated(relativeUrlString);\n\n  // Absolute URL.\n  if (startsWith(relativeUrlString.toLowerCase(), relativeUrl.protocol)) {\n    return relativeUrl.href;\n  }\n\n  // Protocol-relative URL.\n  if (startsWith(relativeUrlString, '//')) {\n    return baseUrl.protocol + relativeUrlString;\n  }\n\n  // Absolute path.\n  if (startsWith(relativeUrlString, '/')) {\n    return baseUrl.origin + relativeUrlString;\n  }\n\n  // Relative path.\n  return baseUrl.origin + baseUrl.pathname.replace(/\\/[^/]*$/, '/')\n      + relativeUrlString;\n}\n\n\n/**\n * Add \"__amp_source_origin\" query parameter to the URL.\n * @param {!Window} win\n * @param {string} url\n * @return {string}\n */\nexport function getCorsUrl(win, url) {\n  checkCorsUrl(url);\n  const sourceOrigin = getSourceOrigin(win.location.href);\n  return addParamToUrl(url, SOURCE_ORIGIN_PARAM, sourceOrigin);\n}\n\n\n/**\n * Checks if the url has __amp_source_origin and throws if it does.\n * @param {string} url\n */\nexport function checkCorsUrl(url) {\n  const parsedUrl = parseUrlDeprecated(url);\n  const query = parseQueryString(parsedUrl.search);\n  user().assert(!(SOURCE_ORIGIN_PARAM in query),\n      'Source origin is not allowed in %s', url);\n}\n\n/**\n * Tries to decode a URI component, falling back to opt_fallback (or an empty\n * string)\n *\n * @param {string} component\n * @param {string=} opt_fallback\n * @return {string}\n */\nexport function tryDecodeUriComponent(component, opt_fallback) {\n  return tryDecodeUriComponent_(component, opt_fallback);\n}\n","/**\n * Copyright 2018 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {dev} from '../log';\n\n/** @const {string} */\nconst TAG = 'lru-cache';\n\n/**\n * @template T\n */\nexport class LruCache {\n  /**\n   * @param {number} capacity\n   */\n  constructor(capacity) {\n    /** @private @const {number} */\n    this.capacity_ = capacity;\n\n    /** @private {number} */\n    this.size_ = 0;\n\n    /**\n     * An incrementing counter to define the last access.\n     * @private {number}\n     */\n    this.access_ = 0;\n\n    /** @private {!Object<(number|string), {payload: T, access: number}>} */\n    this.cache_ = Object.create(null);\n  }\n\n  /**\n   * Returns whether key is cached.\n   *\n   * @param {number|string} key\n   * @return {boolean}\n   */\n  has(key) {\n    return !!this.cache_[key];\n  }\n\n  /**\n   * @param {number|string} key\n   * @return {T} The cached payload.\n   */\n  get(key) {\n    const cacheable = this.cache_[key];\n    if (cacheable) {\n      cacheable.access = ++this.access_;\n      return cacheable.payload;\n    }\n    return undefined;\n  }\n\n  /**\n   * @param {number|string} key\n   * @param {T} payload The payload to cache.\n   */\n  put(key, payload) {\n    if (!this.has(key)) {\n      this.size_++;\n    }\n    this.cache_[key] = {payload, access: this.access_};\n    this.evict_();\n  }\n\n  /**\n   * Evicts the oldest cache entry, if we've exceeded capacity.\n   */\n  evict_() {\n    if (this.size_ <= this.capacity_) {\n      return;\n    }\n\n    dev().warn(TAG, 'Trimming LRU cache');\n    const cache = this.cache_;\n    let oldest = this.access_ + 1;\n    let oldestKey;\n    for (const key in cache) {\n      const {access} = cache[key];\n      if (access < oldest) {\n        oldest = access;\n        oldestKey = key;\n      }\n    }\n\n    if (oldestKey !== undefined) {\n      delete cache[oldestKey];\n      this.size_--;\n    }\n  }\n}\n","/**\n * Copyright 2015 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {isObject} from '../types';\n\n/* @const */\nconst hasOwn_ = Object.prototype.hasOwnProperty;\n\n/**\n * Returns a map-like object.\n * If opt_initial is provided, copies its own properties into the\n * newly created object.\n * @param {T=} opt_initial This should typically be an object literal.\n * @return {T}\n * @template T\n */\nexport function map(opt_initial) {\n  const obj = Object.create(null);\n  if (opt_initial) {\n    Object.assign(obj, opt_initial);\n  }\n  return obj;\n}\n\n/**\n * Return an empty JsonObject or makes the passed in object literal\n * an JsonObject.\n * The JsonObject type is just a simple object that is at-dict.\n * See\n * https://github.com/google/closure-compiler/wiki/@struct-and-@dict-Annotations\n * for what a dict is type-wise.\n * The linter enforces that the argument is, in fact, at-dict like.\n * @param {!Object=} opt_initial\n * @return {!JsonObject}\n */\nexport function dict(opt_initial) {\n  // We do not copy. The linter enforces that the passed in object is a literal\n  // and thus the caller cannot have a reference to it.\n  return /** @type {!JsonObject} */ (opt_initial || {});\n}\n\n/**\n * Checks if the given key is a property in the map.\n *\n * @param {T}  obj a map like property.\n * @param {string}  key\n * @return {boolean}\n * @template T\n */\nexport function hasOwn(obj, key) {\n  return hasOwn_.call(obj, key);\n}\n\n/**\n * Returns obj[key] iff key is obj's own property (is not inherited).\n * Otherwise, returns undefined.\n *\n * @param {Object} obj\n * @param {string} key\n * @return {*}\n */\nexport function ownProperty(obj, key) {\n  if (hasOwn(obj, key)) {\n    return obj[key];\n  } else {\n    return undefined;\n  }\n}\n\n/**\n * Deep merges source into target.\n *\n * @param {!Object} target\n * @param {!Object} source\n * @param {number} depth The maximum merge depth. If exceeded, Object.assign\n *                       will be used instead.\n * @return {!Object}\n * @throws {Error} If source contains a circular reference.\n * Note: Only nested objects are deep-merged, primitives and arrays are not.\n */\nexport function deepMerge(target, source, depth = 10) {\n  // Keep track of seen objects to detect recursive references.\n  const seen = [];\n\n  /** @type {!Array<{t: !Object, s: !Object, d: number}>} */\n  const queue = [];\n  queue.push({t: target, s: source, d: 0});\n\n  // BFS to ensure objects don't have recursive references at shallower depths.\n  while (queue.length > 0) {\n    const {t, s, d} = queue.shift();\n    if (seen.includes(s)) {\n      throw new Error('Source object has a circular reference.');\n    }\n    seen.push(s);\n    if (t === s) {\n      continue;\n    }\n    if (d > depth) {\n      Object.assign(t, s);\n      continue;\n    }\n    Object.keys(s).forEach(key => {\n      const newValue = s[key];\n      // Perform a deep merge IFF both target and source have the same key\n      // whose corresponding values are objects.\n      if (hasOwn(t, key)) {\n        const oldValue = t[key];\n        if (isObject(newValue) && isObject(oldValue)) {\n          queue.push({t: oldValue, s: newValue, d: d + 1});\n          return;\n        }\n      }\n      t[key] = newValue;\n    });\n  }\n  return target;\n}\n\n/**\n * @param {!Object} o An object to remove properties from\n * @param {!Array<string>} props A list of properties to remove from the Object\n * @return {!Object} An object with the given properties removed\n */\nexport function omit(o, props) {\n  return Object.keys(o).reduce((acc, key) => {\n    if (!props.includes(key)) {\n      acc[key] = o[key];\n    }\n    return acc;\n  }, {});\n}\n","/**\n * Copyright 2016 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Returns a Deferred struct, which holds a pending promise and its associated\n * resolve and reject functions.\n *\n * This is preferred instead of creating a Promise instance to extract the\n * resolve/reject functions yourself:\n *\n * ```\n * // Avoid doing\n * let resolve;\n * const promise = new Promise(res => {\n *   resolve = res;\n * });\n *\n * // Good\n * const deferred = new Deferred();\n * const { promise, resolve } = deferred;\n * ```\n *\n * @template T\n */\nexport class Deferred {\n  /**\n   * Creates an instance of Deferred.\n   */\n  constructor() {\n    let resolve, reject;\n\n    /**\n     * @const {!Promise<T>}\n     */\n    this.promise = new /*OK*/Promise((res, rej) => {\n      resolve = res;\n      reject = rej;\n    });\n\n    /**\n     * @const {function(T=)}\n     */\n    this.resolve = resolve;\n\n    /**\n     * @const {function(*=)}\n     */\n    this.reject = reject;\n  }\n}\n\n/**\n * Creates a promise resolved to the return value of fn.\n * If fn sync throws, it will cause the promise to reject.\n *\n * @param {function():T} fn\n * @return {!Promise<T>}\n * @template T\n */\nexport function tryResolve(fn) {\n  return new Promise(resolve => {\n    resolve(fn());\n  });\n}\n\n/**\n * Returns a promise which resolves if a threshold amount of the given promises\n * resolve, and rejects otherwise.\n * @param {!Array<!Promise>} promises The array of promises to test.\n * @param {number} count The number of promises that must resolve for the\n *     returned promise to resolve.\n * @return {!Promise} A promise that resolves if any of the given promises\n *     resolve, and which rejects otherwise.\n */\nexport function some(promises, count = 1) {\n  return new Promise((resolve, reject) => {\n    count = Math.max(count, 0);\n    const extra = promises.length - count;\n    if (extra < 0) {\n      reject(new Error('not enough promises to resolve'));\n    }\n    if (promises.length == 0) {\n      resolve([]);\n    }\n    const values = [];\n    const reasons = [];\n\n    const onFulfilled = value => {\n      if (values.length < count) {\n        values.push(value);\n      }\n      if (values.length == count) {\n        resolve(values);\n      }\n    };\n    const onRejected = reason => {\n      if (reasons.length <= extra) {\n        reasons.push(reason);\n      }\n      if (reasons.length > extra) {\n        reject(reasons);\n      }\n    };\n    for (let i = 0; i < promises.length; i++) {\n      Promise.resolve(promises[i]).then(onFulfilled, onRejected);\n    }\n  });\n}\n\n/**\n * Resolves with the result of the last promise added.\n * @implements {IThenable}\n */\nexport class LastAddedResolver {\n  /**\n   * @param {!Array<!Promise>=} opt_promises\n   */\n  constructor(opt_promises) {\n    let resolve_, reject_;\n    /** @private @const {!Promise} */\n    this.promise_ = new Promise((resolve, reject) => {\n      resolve_ = resolve;\n      reject_ = reject;\n    });\n\n    /** @private */\n    this.resolve_ = resolve_;\n\n    /** @private */\n    this.reject_ = reject_;\n\n    /** @private */\n    this.count_ = 0;\n\n    if (opt_promises) {\n      for (let i = 0; i < opt_promises.length; i++) {\n        this.add(opt_promises[i]);\n      }\n    }\n  }\n\n  /**\n   * Add a promise to possibly be resolved.\n   * @param {!Promise} promise\n   * @return {!Promise}\n   */\n  add(promise) {\n    const countAtAdd = ++this.count_;\n    Promise.resolve(promise).then(result => {\n      if (this.count_ === countAtAdd) {\n        this.resolve_(result);\n      }\n    }, error => {\n      // Don't follow behavior of Promise.all and Promise.race error so that\n      // this will only reject when most recently added promise fails.\n      if (this.count_ === countAtAdd) {\n        this.reject_(error);\n      }\n    });\n    return this.promise_;\n  }\n\n  /** @override */\n  then(opt_resolve, opt_reject) {\n    return this.promise_.then(opt_resolve, opt_reject);\n  }\n}\n","/*! https://mths.be/cssescape v1.5.1 by @mathias | MIT license */\n\n\n/**\n * This regex consists of 4 matching capture groups and one (non-matching) fallback:\n *\n * - (\\0), catch the null terminator character so it may be replaced by UTF\n *   Replacement Char\n * - ^(-)$, catch a solitary dash char, so that it may be backslash escaped.\n *   This is a separate capture group so that the legal-chars (group 4) doesn't\n *   capture it first, since that group doesn't need to escape its dash.\n * - ([\\x01-\\x1f\\x7f]|^-?[0-9]), catch a UTF control char, or any leading\n *   number (with an optional leading dash). The control or the number (but not\n *   the leading dash) must be hex-escaped,.\n * - ([\\x80-\\uffff0-9a-zA-Z_-]+), catch legal-chars, with the exception of a\n *   solitary dash, which will already have matched in group 1.\n * - [^], finally, a catch-all that allows us to backslash escape the char.\n *\n * Together, this matches everything necessary for CSS.escape.\n */\nvar regex = /(\\0)|^(-)$|([\\x01-\\x1f\\x7f]|^-?[0-9])|([\\x80-\\uffff0-9a-zA-Z_-]+)|[^]/g;\n\nfunction escaper(match, nil, dash, hexEscape, chars) {\n  // Chars is the legal-chars (group 4) capture\n  if (chars) {\n    return chars;\n  }\n  // Nil is the null terminator (group 1) capture\n  if (nil) {\n    return '\\uFFFD';\n  }\n  // Both UTF control chars, and leading numbers (with optional leading dash)\n  // (group 3) must be backslash escaped with a trailing space.  Funnily, the\n  // leading dash must not be escaped, but the number. :shrug:\n  if (hexEscape) {\n    return match.slice(0, -1) + '\\\\' + match.slice(-1).charCodeAt(0).toString(16) + ' '\n  }\n  // Finally, the solitary dash and the catch-all chars require backslash\n  // escaping.\n  return '\\\\' + match;\n}\n\n/**\n * https://drafts.csswg.org/cssom/#serialize-an-identifier\n * @param {string} value\n * @return {string}\n */\nexport function cssEscape(value) {\n  return String(value).replace(regex, escaper);\n}\n","/**\n * Copyright 2018 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/** Version: 0.1.22.23 */\n/**\n * Copyright 2018 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n/**\n * @param {!Document} doc\n * @return {string}\n */\nfunction getReadyState(doc) {\n  return /** @type {string} */ (doc['readyState']);\n}\n\n\n/**\n * Whether the document is ready.\n * @param {!Document} doc\n * @return {boolean}\n */\nfunction isDocumentReady(doc) {\n  const readyState = getReadyState(doc);\n  return readyState != 'loading' && readyState != 'uninitialized';\n}\n\n/**\n * Calls the callback when document is ready.\n * @param {!Document} doc\n * @param {function(!Document)} callback\n */\nfunction onDocumentReady(doc, callback) {\n  onDocumentState(doc, isDocumentReady, callback);\n}\n\n/**\n * Calls the callback when document's state satisfies the stateFn.\n * @param {!Document} doc\n * @param {function(!Document):boolean} stateFn\n * @param {function(!Document)} callback\n */\nfunction onDocumentState(doc, stateFn, callback) {\n  let ready = stateFn(doc);\n  if (ready) {\n    callback(doc);\n  } else {\n    const readyListener = () => {\n      if (stateFn(doc)) {\n        if (!ready) {\n          ready = true;\n          callback(doc);\n        }\n        doc.removeEventListener('readystatechange', readyListener);\n      }\n    };\n    doc.addEventListener('readystatechange', readyListener);\n  }\n}\n\n/**\n * Returns a promise that is resolved when document is ready.\n * @param {!Document} doc\n * @return {!Promise<!Document>}\n */\nfunction whenDocumentReady(doc) {\n  return new Promise(resolve => {\n    onDocumentReady(doc, resolve);\n  });\n}\n\n/**\n * Copyright 2018 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n/**\n * @interface\n */\nclass Doc {\n\n  /**\n   * @return {!Window}\n   */\n  getWin() {}\n\n  /**\n   * The `Document` node or analog.\n   * @return {!Node}\n   */\n  getRootNode() {}\n\n  /**\n   * The `Document.documentElement` element or analog.\n   * @return {!Element}\n   */\n  getRootElement() {}\n\n  /**\n   * The `Document.head` element or analog. Returns `null` if not available\n   * yet.\n   * @return {!Element}\n   */\n  getHead() {}\n\n  /**\n   * The `Document.body` element or analog. Returns `null` if not available\n   * yet.\n   * @return {?Element}\n   */\n  getBody() {}\n\n  /**\n   * Whether the document has been fully constructed.\n   * @return {boolean}\n   */\n  isReady() {}\n\n  /**\n   * Resolved when document has been fully constructed.\n   * @return {!Promise}\n   */\n  whenReady() {}\n}\n\n\n/** @implements {Doc} */\nclass GlobalDoc {\n\n  /**\n   * @param {!Window|!Document} winOrDoc\n   */\n  constructor(winOrDoc) {\n    const isWin = !!winOrDoc.document;\n    /** @private @const {!Window} */\n    this.win_ = isWin ?\n        /** @type {!Window} */ (winOrDoc) :\n        /** @type {!Window} */ (\n            (/** @type {!Document} */ (winOrDoc)).defaultView);\n    /** @private @const {!Document} */\n    this.doc_ = isWin ?\n        /** @type {!Window} */ (winOrDoc).document :\n        /** @type {!Document} */ (winOrDoc);\n  }\n\n  /** @override */\n  getWin() {\n    return this.win_;\n  }\n\n  /** @override */\n  getRootNode() {\n    return this.doc_;\n  }\n\n  /** @override */\n  getRootElement() {\n    return this.doc_.documentElement;\n  }\n\n  /** @override */\n  getHead() {\n    // `document.head` always has a chance to be parsed, at least partially.\n    return /** @type {!Element} */ (this.doc_.head);\n  }\n\n  /** @override */\n  getBody() {\n    return this.doc_.body;\n  }\n\n  /** @override */\n  isReady() {\n    return isDocumentReady(this.doc_);\n  }\n\n  /** @override */\n  whenReady() {\n    return whenDocumentReady(this.doc_);\n  }\n}\n\n\n/**\n * @param {!Document|!Window|!Doc} input\n * @return {!Doc}\n */\nfunction resolveDoc(input) {\n  // Is it a `Document`\n  if ((/** @type {!Document} */ (input)).nodeType === /* DOCUMENT */ 9) {\n    return new GlobalDoc(/** @type {!Document} */ (input));\n  }\n  // Is it a `Window`?\n  if ((/** @type {!Window} */ (input)).document) {\n    return new GlobalDoc(/** @type {!Window} */ (input));\n  }\n  return /** @type {!Doc} */ (input);\n}\n\n/**\n * Copyright 2018 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n/**\n */\nclass PageConfig {\n\n  /**\n   * @param {string} productOrPublicationId\n   * @param {boolean} locked\n   */\n  constructor(productOrPublicationId, locked) {\n    let publicationId, productId, label;\n    const div = productOrPublicationId.indexOf(':');\n    if (div != -1) {\n      // The argument is a product id.\n      productId = productOrPublicationId;\n      publicationId = productId.substring(0, div);\n      label = productId.substring(div + 1);\n    } else {\n      // The argument is a publication id.\n      publicationId = productOrPublicationId;\n      productId = null;\n      label = null;\n    }\n\n    /** @private @const {string} */\n    this.publicationId_ = publicationId;\n    /** @private @const {?string} */\n    this.productId_ = productId;\n    /** @private @const {?string} */\n    this.label_ = label;\n    /** @private @const {boolean} */\n    this.locked_ = locked;\n  }\n\n  /**\n   * @return {string}\n   */\n  getPublicationId() {\n    return this.publicationId_;\n  }\n\n  /**\n   * @return {?string}\n   */\n  getProductId() {\n    return this.productId_;\n  }\n\n  /**\n   * @return {?string}\n   */\n  getLabel() {\n    return this.label_;\n  }\n\n  /**\n   * @return {boolean}\n   */\n  isLocked() {\n    return this.locked_;\n  }\n}\n\n/**\n * Copyright 2018 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Copyright 2018 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Copyright 2018 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Copyright 2018 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Copyright 2018 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n/**\n * Whether the element have a next node in the document order.\n * This means either:\n *  a. The element itself has a nextSibling.\n *  b. Any of the element ancestors has a nextSibling.\n * @param {!Element} element\n * @param {?Node=} opt_stopNode\n * @return {boolean}\n */\nfunction hasNextNodeInDocumentOrder(element, opt_stopNode) {\n  let currentElement = element;\n  do {\n    if (currentElement.nextSibling) {\n      return true;\n    }\n  } while ((currentElement = currentElement.parentNode) &&\n            currentElement != opt_stopNode);\n  return false;\n}\n\n/**\n * Copyright 2018 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Determines if value is actually an Array.\n * @param {*} value\n * @return {boolean}\n */\nfunction isArray(value) {\n  return Array.isArray(value);\n}\n\n/**\n * Copyright 2018 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Simple wrapper around JSON.parse that casts the return value\n * to JsonObject.\n * Create a new wrapper if an array return value is desired.\n * @param {*} json JSON string to parse\n * @return {?JsonObject|undefined} May be extend to parse arrays.\n */\nfunction parseJson(json) {\n  return /** @type {?JsonObject} */(JSON.parse(/** @type {string} */ (json)));\n}\n\n/**\n * Parses the given `json` string without throwing an exception if not valid.\n * Returns `undefined` if parsing fails.\n * Returns the `Object` corresponding to the JSON string when parsing succeeds.\n * @param {*} json JSON string to parse\n * @param {function(!Error)=} opt_onFailed Optional function that will be called\n *     with the error if parsing fails.\n * @return {?JsonObject|undefined} May be extend to parse arrays.\n */\nfunction tryParseJson(json, opt_onFailed) {\n  try {\n    return parseJson(json);\n  } catch (e) {\n    if (opt_onFailed) {\n      opt_onFailed(e);\n    }\n    return undefined;\n  }\n}\n\n/**\n * Copyright 2018 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nconst ALREADY_SEEN = '__SWG-SEEN__';\n\n\n/**\n */\nclass PageConfigResolver {\n\n  /**\n   * @param {!Window|!Document|!Doc} winOrDoc\n   */\n  constructor(winOrDoc) {\n    /** @private @const {!Doc} */\n    this.doc_ = resolveDoc(winOrDoc);\n\n    /** @private {?function((!PageConfig|!Promise))} */\n    this.configResolver_ = null;\n\n    /** @private @const {!Promise<!PageConfig>} */\n    this.configPromise_ = new Promise(resolve => {\n      this.configResolver_ = resolve;\n    });\n\n    /** @private @const {!MetaParser} */\n    this.metaParser_ = new MetaParser(this.doc_);\n    /** @private @const {!JsonLdParser} */\n    this.ldParser_ = new JsonLdParser(this.doc_);\n    /** @private @const {!MicrodataParser} */\n    this.microdataParser_ = new MicrodataParser(this.doc_);\n  }\n\n  /**\n   * @return {!Promise<!PageConfig>}\n   */\n  resolveConfig() {\n    // Try resolve the config at different times.\n    Promise.resolve().then(this.check.bind(this));\n    this.doc_.whenReady().then(this.check.bind(this));\n    return this.configPromise_;\n  }\n\n  /**\n   * @return {?PageConfig}\n   */\n  check() {\n    // Already resolved.\n    if (!this.configResolver_) {\n      return null;\n    }\n    let config = this.metaParser_.check();\n    if (!config) {\n      config = this.ldParser_.check();\n    }\n    if (!config) {\n      config = this.microdataParser_.check();\n    }\n    if (config) {\n      // Product ID has been found: initialize the rest of the config.\n      this.configResolver_(config);\n      this.configResolver_ = null;\n    } else if (this.doc_.isReady()) {\n      this.configResolver_(Promise.reject(\n          new Error('No config could be discovered in the page')));\n      this.configResolver_ = null;\n    }\n    return config;\n  }\n}\n\n\nclass MetaParser {\n  /**\n   * @param {!Doc} doc\n   */\n  constructor(doc) {\n    /** @private @const {!Doc} */\n    this.doc_ = doc;\n  }\n\n  /**\n   * @return {?PageConfig}\n   */\n  check() {\n    if (!this.doc_.getBody()) {\n      // Wait until the whole `<head>` is parsed.\n      return null;\n    }\n\n    // Try to find product id.\n    const productId = getMetaTag(this.doc_.getRootNode(),\n        'subscriptions-product-id');\n    if (!productId) {\n      return null;\n    }\n\n    // Is locked?\n    const accessibleForFree = getMetaTag(this.doc_.getRootNode(),\n        'subscriptions-accessible-for-free');\n    const locked = (accessibleForFree &&\n        accessibleForFree.toLowerCase() == 'false') || false;\n\n    return new PageConfig(productId, locked);\n  }\n}\n\n\nclass JsonLdParser {\n  /**\n   * @param {!Doc} doc\n   */\n  constructor(doc) {\n    /** @private @const {!Doc} */\n    this.doc_ = doc;\n  }\n\n  /**\n   * @return {?PageConfig}\n   */\n  check() {\n    if (!this.doc_.getBody()) {\n      // Wait until the whole `<head>` is parsed.\n      return null;\n    }\n\n    const domReady = this.doc_.isReady();\n\n    // type: 'application/ld+json'\n    const elements = this.doc_.getRootNode().querySelectorAll(\n        'script[type=\"application/ld+json\"]');\n    for (let i = 0; i < elements.length; i++) {\n      const element = elements[i];\n      if (element[ALREADY_SEEN] ||\n          !element.textContent ||\n          !domReady && !hasNextNodeInDocumentOrder(element)) {\n        continue;\n      }\n      element[ALREADY_SEEN] = true;\n      if (element.textContent.indexOf('NewsArticle') == -1) {\n        continue;\n      }\n      const possibleConfig = this.tryExtractConfig_(element);\n      if (possibleConfig) {\n        return possibleConfig;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * @param {!Element} element\n   * @return {?PageConfig}\n   */\n  tryExtractConfig_(element) {\n    const json = tryParseJson(element.textContent);\n    if (!json) {\n      return null;\n    }\n\n    // Must be a NewsArticle.\n    if (!this.checkType_(json, 'NewsArticle')) {\n      return null;\n    }\n\n    // Must have a isPartOf[@type=Product].\n    let productId = null;\n    const partOfArray = this.valueArray_(json, 'isPartOf');\n    if (partOfArray) {\n      for (let i = 0; i < partOfArray.length; i++) {\n        productId = this.discoverProductId_(partOfArray[i]);\n        if (productId) {\n          break;\n        }\n      }\n    }\n    if (!productId) {\n      return null;\n    }\n\n    // Found product id, just check for the access flag.\n    const isAccessibleForFree = this.bool_(\n        this.singleValue_(json, 'isAccessibleForFree'),\n        /* default */ true);\n\n    return new PageConfig(productId, !isAccessibleForFree);\n  }\n\n  /**\n   * @param {*} value\n   * @param {boolean} def\n   * @return {boolean}\n   */\n  bool_(value, def) {\n    if (value == null || value === '') {\n      return def;\n    }\n    if (typeof value == 'boolean') {\n      return value;\n    }\n    if (typeof value == 'string') {\n      const lowercase = value.toLowerCase();\n      if (lowercase == 'false') {\n        return false;\n      }\n      if (lowercase == 'true') {\n        return true;\n      }\n    }\n    return def;\n  }\n\n  /**\n   * @param {!Object} json\n   * @return {?string}\n   */\n  discoverProductId_(json) {\n    // Must have type `Product`.\n    if (!this.checkType_(json, 'Product')) {\n      return null;\n    }\n    return /** @type {?string} */ (this.singleValue_(json, 'productID'));\n  }\n\n  /**\n   * @param {!Object} json\n   * @param {string} name\n   * @return {?Array}\n   */\n  valueArray_(json, name) {\n    const value = json[name];\n    if (value == null || value === '') {\n      return null;\n    }\n    return isArray(value) ? value : [value];\n  }\n\n  /**\n   * @param {!Object} json\n   * @param {string} name\n   * @return {*}\n   */\n  singleValue_(json, name) {\n    const valueArray = this.valueArray_(json, name);\n    const value = valueArray && valueArray[0];\n    return (value == null || value === '') ? null : value;\n  }\n\n  /**\n   * @param {!Object} json\n   * @param {string} expectedType\n   * @return {boolean}\n   */\n  checkType_(json, expectedType) {\n    const typeArray = this.valueArray_(json, '@type');\n    if (!typeArray) {\n      return false;\n    }\n    return (typeArray.includes(expectedType) ||\n        typeArray.includes('http://schema.org/' + expectedType));\n  }\n}\n\nclass MicrodataParser {\n  /**\n   * @param {!Doc} doc\n   */\n  constructor(doc) {\n    /** @private @const {!Doc} */\n    this.doc_ = doc;\n    /** @private {?boolean} */\n    this.access_ = null;\n    /** @private {?string} */\n    this.productId_ = null;\n  }\n\n  /**\n   * Returns false if access is restricted, otherwise true\n   * @param {!Element} root An element that is an item of type 'NewsArticle'\n   * @return {?boolean} locked access\n   * @private\n   */\n  discoverAccess_(root) {\n    const ALREADY_SEEN = 'alreadySeenForAccessInfo';\n    const nodeList = root\n        .querySelectorAll(\"[itemprop='isAccessibleForFree']\");\n    for (let i = 0; nodeList[i]; i++) {\n      const element = nodeList[i];\n      const content = element.getAttribute('content') || element.textContent;\n      if (!content) {\n        continue;\n      }\n      if (this.isValidElement_(element, root, ALREADY_SEEN)) {\n        let accessForFree = null;\n        if (content.toLowerCase() == 'true') {\n          accessForFree = true;\n        } else if (content.toLowerCase() == 'false') {\n          accessForFree = false;\n        }\n        return accessForFree;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Verifies if an element is valid based on the following\n   * - child of an item of type 'NewsArticle'\n   * - not a child of an item of any other type\n   * - not seen before, marked using the alreadySeen tag\n   * @param {?Element} current the element to be verified\n   * @param {!Element} root the parent to track up to\n   * @param {!string} alreadySeen used to tag already visited nodes\n   * @return {!boolean} valid node\n   * @private\n   */\n  isValidElement_(current, root, alreadySeen) {\n    for (let node = current;\n        node && !node[alreadySeen]; node = node.parentNode) {\n      node[alreadySeen] = true;\n      if (node.hasAttribute('itemscope')) {\n        /**{?string} */\n        const type = node.getAttribute('itemtype');\n        if (type.indexOf('http://schema.org/NewsArticle') >= 0) {\n          return true;\n        } else {\n          return false;\n        }\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Obtains the product ID that meets the requirements\n   * - child of an item of type 'NewsArticle'\n   * - Not a child of an item of type 'Section'\n   * - child of an item of type 'productID'\n   * @param {!Element} root An element that is an item of type 'NewsArticle'\n   * @return {?string} product ID, if found\n   * @private\n   */\n  discoverProductId_(root) {\n    const ALREADY_SEEN = 'alreadySeenForProductInfo';\n    const nodeList = root\n        .querySelectorAll('[itemprop=\"productID\"]');\n    for (let i = 0; nodeList[i]; i++) {\n      const element = nodeList[i];\n      const content = element.getAttribute('content') || element.textContent;\n      const item = element.closest('[itemtype][itemscope]');\n      const type = item.getAttribute('itemtype');\n      if (type.indexOf('http://schema.org/Product') <= -1) {\n        continue;\n      }\n      if (this.isValidElement_(item.parentElement, root, ALREADY_SEEN)) {\n        return content;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Returns PageConfig if available\n   * @return {?PageConfig} PageConfig found so far\n   */\n  getPageConfig_() {\n    let locked = null;\n    if (this.access_ != null) {\n      locked = !this.access_;\n    } else if (this.doc_.isReady()) {\n      // Default to unlocked\n      locked = false;\n    }\n    if (this.productId_ != null && locked != null) {\n      return new PageConfig(this.productId_, locked);\n    }\n    return null;\n  }\n\n  /**\n   * Extracts page config from Microdata in the DOM\n   * @return {?PageConfig} PageConfig found\n   */\n  tryExtractConfig_() {\n    let config = this.getPageConfig_();\n    if (config) {\n      return config;\n    }\n    const nodeList = this.doc_.getRootNode().querySelectorAll(\n        '[itemscope][itemtype*=\"http://schema.org/NewsArticle\"]');\n    for (let i = 0; nodeList[i] && config == null; i++) {\n      const element = nodeList[i];\n      if (this.access_ == null) {\n        this.access_ = this.discoverAccess_(element);\n      }\n      if (!this.productId_) {\n        this.productId_ = this.discoverProductId_(element);\n      }\n      config = this.getPageConfig_();\n    }\n    return config;\n  }\n\n  /**\n   * @return {?PageConfig}\n   */\n  check() {\n    if (!this.doc_.getBody()) {\n      // Wait until the whole `<head>` is parsed.\n      return null;\n    }\n    return this.tryExtractConfig_();\n  }\n}\n\n/**\n * Returns the value from content attribute of a meta tag with given name.\n *\n * If multiple tags are found, the first value is returned.\n *\n * @param {!Node} rootNode\n * @param {string} name The tag name to look for.\n * @return {?string} attribute value or empty string.\n * @private\n */\nfunction getMetaTag(rootNode, name) {\n  const el = rootNode.querySelector(`meta[name=\"${name}\"]`);\n  if (el) {\n    return el.getAttribute('content');\n  }\n  return null;\n}\n\n/**\n * Copyright 2018 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nexport {\n  Doc,\n  PageConfig,\n  PageConfigResolver,\n};\n","/**\n * Copyright 2018 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/** Version: 0.1.22.23 */\n/**\n * @license\n * Copyright 2017 The Web Activities Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/*eslint no-unused-vars: 0*/\n\n\n/**\n * @enum {string}\n */\nconst ActivityMode = {\n  IFRAME: 'iframe',\n  POPUP: 'popup',\n  REDIRECT: 'redirect',\n};\n\n\n/**\n * The result code used for `ActivityResult`.\n * @enum {string}\n */\nconst ActivityResultCode = {\n  OK: 'ok',\n  CANCELED: 'canceled',\n  FAILED: 'failed',\n};\n\n\n/**\n * The result of an activity. The activity implementation returns this object\n * for a successful result, a cancelation or a failure.\n * @struct\n */\nclass ActivityResult {\n  /**\n   * @param {!ActivityResultCode} code\n   * @param {*} data\n   * @param {!ActivityMode} mode\n   * @param {string} origin\n   * @param {boolean} originVerified\n   * @param {boolean} secureChannel\n   */\n  constructor(code, data, mode, origin, originVerified, secureChannel) {\n    /** @const {!ActivityResultCode} */\n    this.code = code;\n    /** @const {*} */\n    this.data = code == ActivityResultCode.OK ? data : null;\n    /** @const {!ActivityMode} */\n    this.mode = mode;\n    /** @const {string} */\n    this.origin = origin;\n    /** @const {boolean} */\n    this.originVerified = originVerified;\n    /** @const {boolean} */\n    this.secureChannel = secureChannel;\n    /** @const {boolean} */\n    this.ok = code == ActivityResultCode.OK;\n    /** @const {?Error} */\n    this.error = code == ActivityResultCode.FAILED ?\n        new Error(String(data) || '') :\n        null;\n  }\n}\n\n\n/**\n * The activity request that different types of hosts can be started with.\n * @typedef {{\n *   requestId: string,\n *   returnUrl: string,\n *   args: ?Object,\n *   origin: (string|undefined),\n *   originVerified: (boolean|undefined),\n * }}\n */\nlet ActivityRequest;\n\n\n/**\n * The activity \"open\" options used for popups and redirects.\n *\n * - returnUrl: override the return URL. By default, the current URL will be\n *   used.\n * - skipRequestInUrl: removes the activity request from the URL, in case\n *   redirect is used. By default, the activity request is appended to the\n *   activity URL. This option can be used if the activity request is passed\n *   to the activity by some alternative means.\n *\n * @typedef {{\n *   returnUrl: (string|undefined),\n *   skipRequestInUrl: (boolean|undefined),\n *   width: (number|undefined),\n *   height: (number|undefined),\n * }}\n */\nlet ActivityOpenOptions;\n\n\n/**\n * Activity client-side binding. The port provides limited ways to communicate\n * with the activity and receive signals and results from it. Not every type\n * of activity exposes a port.\n *\n * @interface\n */\nclass ActivityPort {\n\n  /**\n   * Returns the mode of the activity: iframe, popup or redirect.\n   * @return {!ActivityMode}\n   */\n  getMode() {}\n\n  /**\n   * Accepts the result when ready. The client should verify the activity's\n   * mode, origin, verification and secure channel flags before deciding\n   * whether or not to trust the result.\n   *\n   * Returns the promise that yields when the activity has been completed and\n   * either a result, a cancelation or a failure has been returned.\n   *\n   * @return {!Promise<!ActivityResult>}\n   */\n  acceptResult() {}\n}\n\n\n\n/** DOMException.ABORT_ERR name */\nconst ABORT_ERR_NAME = 'AbortError';\n\n/** DOMException.ABORT_ERR = 20 */\nconst ABORT_ERR_CODE = 20;\n\n/** @type {?HTMLAnchorElement} */\nlet aResolver;\n\n\n/**\n * @param {string} urlString\n * @return {!HTMLAnchorElement}\n */\nfunction parseUrl(urlString) {\n  if (!aResolver) {\n    aResolver = /** @type {!HTMLAnchorElement} */ (document.createElement('a'));\n  }\n  aResolver.href = urlString;\n  return /** @type {!HTMLAnchorElement} */ (aResolver);\n}\n\n\n/**\n * @param {!Location|!URL|!HTMLAnchorElement} loc\n * @return {string}\n */\nfunction getOrigin(loc) {\n  if (loc.origin) {\n    return loc.origin;\n  }\n  // Make sure that the origin is normalized. Specifically on IE, host sometimes\n  // includes the default port, which is not per standard.\n  const protocol = loc.protocol;\n  let host = loc.host;\n  if (protocol == 'https:' && host.indexOf(':443') == host.length - 4) {\n    host = host.replace(':443', '');\n  } else if (protocol == 'http:' && host.indexOf(':80') == host.length - 3) {\n    host = host.replace(':80', '');\n  }\n  return protocol + '//' + host;\n}\n\n\n/**\n * @param {string} urlString\n * @return {string}\n */\nfunction getOriginFromUrl(urlString) {\n  return getOrigin(parseUrl(urlString));\n}\n\n\n/**\n * @param {string} urlString\n * @return {string}\n */\nfunction removeFragment(urlString) {\n  const index = urlString.indexOf('#');\n  if (index == -1) {\n    return urlString;\n  }\n  return urlString.substring(0, index);\n}\n\n\n/**\n * Parses and builds Object of URL query string.\n * @param {string} query The URL query string.\n * @return {!Object<string, string>}\n */\nfunction parseQueryString(query) {\n  if (!query) {\n    return {};\n  }\n  return (/^[?#]/.test(query) ? query.slice(1) : query)\n      .split('&')\n      .reduce((params, param) => {\n        const item = param.split('=');\n        const key = decodeURIComponent(item[0] || '');\n        const value = decodeURIComponent(item[1] || '');\n        if (key) {\n          params[key] = value;\n        }\n        return params;\n      }, {});\n}\n\n\n/**\n * @param {string} queryString  A query string in the form of \"a=b&c=d\". Could\n *   be optionally prefixed with \"?\" or \"#\".\n * @param {string} param The param to get from the query string.\n * @return {?string}\n */\nfunction getQueryParam(queryString, param) {\n  return parseQueryString(queryString)[param];\n}\n\n\n/**\n * Add a query-like parameter to the fragment string.\n * @param {string} url\n * @param {string} param\n * @param {string} value\n * @return {string}\n */\nfunction addFragmentParam(url, param, value) {\n  return url +\n      (url.indexOf('#') == -1 ? '#' : '&') +\n      encodeURIComponent(param) + '=' + encodeURIComponent(value);\n}\n\n\n/**\n * @param {string} queryString  A query string in the form of \"a=b&c=d\". Could\n *   be optionally prefixed with \"?\" or \"#\".\n * @param {string} param The param to remove from the query string.\n * @return {?string}\n */\nfunction removeQueryParam(queryString, param) {\n  if (!queryString) {\n    return queryString;\n  }\n  const search = encodeURIComponent(param) + '=';\n  let index = -1;\n  do {\n    index = queryString.indexOf(search, index);\n    if (index != -1) {\n      const prev = index > 0 ? queryString.substring(index - 1, index) : '';\n      if (prev == '' || prev == '?' || prev == '#' || prev == '&') {\n        let end = queryString.indexOf('&', index + 1);\n        if (end == -1) {\n          end = queryString.length;\n        }\n        queryString =\n            queryString.substring(0, index) +\n            queryString.substring(end + 1);\n      } else {\n        index++;\n      }\n    }\n  } while (index != -1 && index < queryString.length);\n  return queryString;\n}\n\n\n/**\n * @param {!ActivityRequest} request\n * @return {string}\n */\nfunction serializeRequest(request) {\n  const map = {\n    'requestId': request.requestId,\n    'returnUrl': request.returnUrl,\n    'args': request.args,\n  };\n  if (request.origin !== undefined) {\n    map['origin'] = request.origin;\n  }\n  if (request.originVerified !== undefined) {\n    map['originVerified'] = request.originVerified;\n  }\n  return JSON.stringify(map);\n}\n\n\n/**\n * Creates or emulates a DOMException of AbortError type.\n * See https://heycam.github.io/webidl/#aborterror.\n * @param {!Window} win\n * @param {string=} opt_message\n * @return {!DOMException}\n */\nfunction createAbortError(win, opt_message) {\n  const message = 'AbortError' + (opt_message ? ': ' + opt_message : '');\n  let error = null;\n  if (typeof win['DOMException'] == 'function') {\n    // TODO(dvoytenko): remove typecast once externs are fixed.\n    const constr = /** @type {function(new:DOMException, string, string)} */ (\n        win['DOMException']);\n    try {\n      error = new constr(message, ABORT_ERR_NAME);\n    } catch (e) {\n      // Ignore. In particular, `new DOMException()` fails in Edge.\n    }\n  }\n  if (!error) {\n    // TODO(dvoytenko): remove typecast once externs are fixed.\n    const constr = /** @type {function(new:DOMException, string)} */ (\n        Error);\n    error = new constr(message);\n    error.name = ABORT_ERR_NAME;\n    error.code = ABORT_ERR_CODE;\n  }\n  return error;\n}\n\n\n/**\n * Resolves the activity result as a promise:\n *  - `OK` result is yielded as the promise's payload;\n *  - `CANCEL` result is rejected with the `AbortError`;\n *  - `FAILED` result is rejected with the embedded error.\n *\n * @param {!Window} win\n * @param {!ActivityResult} result\n * @param {function((!ActivityResult|!Promise))} resolver\n */\nfunction resolveResult(win, result, resolver) {\n  if (result.ok) {\n    resolver(result);\n  } else {\n    const error = result.error || createAbortError(win);\n    error.activityResult = result;\n    resolver(Promise.reject(error));\n  }\n}\n\n\n/**\n * @param {!Window} win\n * @return {boolean}\n */\nfunction isIeBrowser(win) {\n  // MSIE and Trident are typical user agents for IE browsers.\n  const nav = win.navigator;\n  return /Trident|MSIE|IEMobile/i.test(nav && nav.userAgent);\n}\n\n\n/**\n * @param {!Window} win\n * @return {boolean}\n */\nfunction isEdgeBrowser(win) {\n  const nav = win.navigator;\n  return /Edge/i.test(nav && nav.userAgent);\n}\n\n\n\nconst SENTINEL = '__ACTIVITIES__';\n\n\n/**\n * The messenger helper for activity's port and host.\n */\nclass Messenger {\n\n  /**\n   * @param {!Window} win\n   * @param {!Window|function():?Window} targetOrCallback\n   * @param {?string} targetOrigin\n   */\n  constructor(win, targetOrCallback, targetOrigin) {\n    /** @private @const {!Window} */\n    this.win_ = win;\n    /** @private @const {!Window|function():?Window} */\n    this.targetOrCallback_ = targetOrCallback;\n\n    /**\n     * May start as unknown (`null`) until received in the first message.\n     * @private {?string}\n     */\n    this.targetOrigin_ = targetOrigin;\n\n    /** @private {?Window} */\n    this.target_ = null;\n\n    /** @private {boolean} */\n    this.acceptsChannel_ = false;\n\n    /** @private {?MessagePort} */\n    this.port_ = null;\n\n    /** @private {?function(string, ?Object)} */\n    this.onCommand_ = null;\n\n    /** @private {?function(!Object)} */\n    this.onCustomMessage_ = null;\n\n    /**\n     * @private {?Object<string, !ChannelHolder>}\n     */\n    this.channels_ = null;\n\n    /** @private @const */\n    this.boundHandleEvent_ = this.handleEvent_.bind(this);\n  }\n\n  /**\n   * Connect the port to the host or vice versa.\n   * @param {function(string, ?Object)} onCommand\n   */\n  connect(onCommand) {\n    if (this.onCommand_) {\n      throw new Error('already connected');\n    }\n    this.onCommand_ = onCommand;\n    this.win_.addEventListener('message', this.boundHandleEvent_);\n  }\n\n  /**\n   * Disconnect messenger.\n   */\n  disconnect() {\n    if (this.onCommand_) {\n      this.onCommand_ = null;\n      if (this.port_) {\n        closePort(this.port_);\n        this.port_ = null;\n      }\n      this.win_.removeEventListener('message', this.boundHandleEvent_);\n      if (this.channels_) {\n        for (const k in this.channels_) {\n          const channelObj = this.channels_[k];\n          if (channelObj.port1) {\n            closePort(channelObj.port1);\n          }\n          if (channelObj.port2) {\n            closePort(channelObj.port2);\n          }\n        }\n        this.channels_ = null;\n      }\n    }\n  }\n\n  /**\n   * Returns whether the messenger has been connected already.\n   * @return {boolean}\n   */\n  isConnected() {\n    return this.targetOrigin_ != null;\n  }\n\n  /**\n   * Returns the messaging target. Only available when connection has been\n   * establihsed.\n   * @return {!Window}\n   */\n  getTarget() {\n    const target = this.getOptionalTarget_();\n    if (!target) {\n      throw new Error('not connected');\n    }\n    return target;\n  }\n\n  /**\n   * @return {?Window}\n   * @private\n   */\n  getOptionalTarget_() {\n    if (this.onCommand_ && !this.target_) {\n      if (typeof this.targetOrCallback_ == 'function') {\n        this.target_ = this.targetOrCallback_();\n      } else {\n        this.target_ = /** @type {!Window} */ (this.targetOrCallback_);\n      }\n    }\n    return this.target_;\n  }\n\n  /**\n   * Returns the messaging origin. Only available when connection has been\n   * establihsed.\n   * @return {string}\n   */\n  getTargetOrigin() {\n    if (this.targetOrigin_ == null) {\n      throw new Error('not connected');\n    }\n    return this.targetOrigin_;\n  }\n\n  /**\n   * The host sends this message to the client to indicate that it's ready to\n   * start communicating. The client is expected to respond back with the\n   * \"start\" command. See `sendStartCommand` method.\n   */\n  sendConnectCommand() {\n    // TODO(dvoytenko): MessageChannel is critically necessary for IE/Edge,\n    // since window messaging doesn't always work. It's also preferred as an API\n    // for other browsers: it's newer, cleaner and arguably more secure.\n    // Unfortunately, browsers currently do not propagate user gestures via\n    // MessageChannel, only via window messaging. This should be re-enabled\n    // once browsers fix user gesture propagation.\n    // See:\n    // Safari: https://bugs.webkit.org/show_bug.cgi?id=186593\n    // Chrome: https://bugs.chromium.org/p/chromium/issues/detail?id=851493\n    // Firefox: https://bugzilla.mozilla.org/show_bug.cgi?id=1469422\n    const acceptsChannel = isIeBrowser(this.win_) || isEdgeBrowser(this.win_);\n    this.sendCommand('connect', {'acceptsChannel': acceptsChannel});\n  }\n\n  /**\n   * The client sends this message to the host upon receiving the \"connect\"\n   * message to start the main communication channel. As a payload, the message\n   * will contain the provided start arguments.\n   * @param {?Object} args\n   */\n  sendStartCommand(args) {\n    let channel = null;\n    if (this.acceptsChannel_ && typeof this.win_.MessageChannel == 'function') {\n      channel = new this.win_.MessageChannel();\n    }\n    if (channel) {\n      this.sendCommand('start', args, [channel.port2]);\n      // It's critical to switch to port messaging only after \"start\" has been\n      // sent. Otherwise, it won't be delivered.\n      this.switchToChannel_(channel.port1);\n    } else {\n      this.sendCommand('start', args);\n    }\n  }\n\n  /**\n   * Sends the specified command from the port to the host or vice versa.\n   * @param {string} cmd\n   * @param {?Object=} opt_payload\n   * @param {?Array=} opt_transfer\n   */\n  sendCommand(cmd, opt_payload, opt_transfer) {\n    const data = {\n      'sentinel': SENTINEL,\n      'cmd': cmd,\n      'payload': opt_payload || null,\n    };\n    if (this.port_) {\n      this.port_.postMessage(data, opt_transfer || undefined);\n    } else {\n      const target = this.getTarget();\n      // Only \"connect\" command is allowed to use `targetOrigin == '*'`\n      const targetOrigin =\n          cmd == 'connect' ?\n          (this.targetOrigin_ != null ? this.targetOrigin_ : '*') :\n          this.getTargetOrigin();\n      target.postMessage(data, targetOrigin, opt_transfer || undefined);\n    }\n  }\n\n  /**\n   * Sends a message to the client.\n   * @param {!Object} payload\n   */\n  customMessage(payload) {\n    this.sendCommand('msg', payload);\n  }\n\n  /**\n   * Registers a callback to receive messages from the client.\n   * @param {function(!Object)} callback\n   */\n  onCustomMessage(callback) {\n    this.onCustomMessage_ = callback;\n  }\n\n  /**\n   * @param {string=} opt_name\n   * @return {!Promise<!MessagePort>}\n   */\n  startChannel(opt_name) {\n    const name = opt_name || '';\n    const channelObj = this.getChannelObj_(name);\n    if (!channelObj.port1) {\n      const channel = new this.win_.MessageChannel();\n      channelObj.port1 = channel.port1;\n      channelObj.port2 = channel.port2;\n      channelObj.resolver(channelObj.port1);\n    }\n    if (channelObj.port2) {\n      // Not yet sent.\n      this.sendCommand('cnset', {'name': name}, [channelObj.port2]);\n      channelObj.port2 = null;\n    }\n    return channelObj.promise;\n  }\n\n  /**\n   * @param {string=} opt_name\n   * @return {!Promise<!MessagePort>}\n   */\n  askChannel(opt_name) {\n    const name = opt_name || '';\n    const channelObj = this.getChannelObj_(name);\n    if (!channelObj.port1) {\n      this.sendCommand('cnget', {'name': name});\n    }\n    return channelObj.promise;\n  }\n\n  /**\n   * @param {string} name\n   * @param {!MessagePort} port\n   * @private\n   */\n  receiveChannel_(name, port) {\n    const channelObj = this.getChannelObj_(name);\n    channelObj.port1 = port;\n    channelObj.resolver(port);\n  }\n\n  /**\n   * @param {string} name\n   * @return {!ChannelHolder}\n   */\n  getChannelObj_(name) {\n    if (!this.channels_) {\n      this.channels_ = {};\n    }\n    let channelObj = this.channels_[name];\n    if (!channelObj) {\n      let resolver;\n      const promise = new Promise(resolve => {\n        resolver = resolve;\n      });\n      channelObj = {\n        port1: null,\n        port2: null,\n        resolver,\n        promise,\n      };\n      this.channels_[name] = channelObj;\n    }\n    return channelObj;\n  }\n\n  /**\n   * @param {!MessagePort} port\n   * @private\n   */\n  switchToChannel_(port) {\n    if (this.port_) {\n      closePort(this.port_);\n    }\n    this.port_ = port;\n    this.port_.onmessage = event => {\n      const data = event.data;\n      const cmd = data && data['cmd'];\n      const payload = data && data['payload'] || null;\n      if (cmd) {\n        this.handleCommand_(cmd, payload, event);\n      }\n    };\n    // Even though all messaging will switch to ports, the window-based message\n    // listener will be preserved just in case the host is refreshed and needs\n    // another connection.\n  }\n\n  /**\n   * @param {!MessageEvent} event\n   * @private\n   */\n  handleEvent_(event) {\n    const data = event.data;\n    if (!data || data['sentinel'] != SENTINEL) {\n      return;\n    }\n    const cmd = data['cmd'];\n    if (this.port_ && cmd != 'connect' && cmd != 'start') {\n      // Messaging channel has already taken over. However, the \"connect\" and\n      // \"start\" commands are allowed to proceed in case re-connection is\n      // requested.\n      return;\n    }\n    const origin = /** @type {string} */ (event.origin);\n    const payload = data['payload'] || null;\n    if (this.targetOrigin_ == null && cmd == 'start') {\n      this.targetOrigin_ = origin;\n    }\n    if (this.targetOrigin_ == null && event.source) {\n      if (this.getOptionalTarget_() == event.source) {\n        this.targetOrigin_ = origin;\n      }\n    }\n    // Notice that event.source may differ from the target because of\n    // friendly-iframe intermediaries.\n    if (origin != this.targetOrigin_) {\n      return;\n    }\n    this.handleCommand_(cmd, payload, event);\n  }\n\n  /**\n   * @param {string} cmd\n   * @param {?Object} payload\n   * @param {!MessageEvent} event\n   * @private\n   */\n  handleCommand_(cmd, payload, event) {\n    if (cmd == 'connect') {\n      if (this.port_) {\n        // In case the port has already been open - close it to reopen it\n        // again later.\n        closePort(this.port_);\n        this.port_ = null;\n      }\n      this.acceptsChannel_ = payload && payload['acceptsChannel'] || false;\n      this.onCommand_(cmd, payload);\n    } else if (cmd == 'start') {\n      const port = event.ports && event.ports[0];\n      if (port) {\n        this.switchToChannel_(port);\n      }\n      this.onCommand_(cmd, payload);\n    } else if (cmd == 'msg') {\n      if (this.onCustomMessage_ != null && payload != null) {\n        this.onCustomMessage_(payload);\n      }\n    } else if (cmd == 'cnget') {\n      const name = payload['name'];\n      this.startChannel(name);\n    } else if (cmd == 'cnset') {\n      const name = payload['name'];\n      const port = event.ports[0];\n      this.receiveChannel_(name, /** @type {!MessagePort} */ (port));\n    } else {\n      this.onCommand_(cmd, payload);\n    }\n  }\n}\n\n\n/**\n * @param {!MessagePort} port\n */\nfunction closePort(port) {\n  try {\n    port.close();\n  } catch (e) {\n    // Ignore.\n  }\n}\n\n\n\n\n/**\n * The `ActivityPort` implementation for the iframe case. Unlike other types\n * of activities, iframe-based activities are always connected and can react\n * to size requests.\n *\n * @implements {ActivityPort}\n */\nclass ActivityIframePort {\n\n  /**\n   * @param {!HTMLIFrameElement} iframe\n   * @param {string} url\n   * @param {?Object=} opt_args\n   */\n  constructor(iframe, url, opt_args) {\n    /** @private @const {!HTMLIFrameElement} */\n    this.iframe_ = iframe;\n    /** @private @const {string} */\n    this.url_ = url;\n    /** @private @const {?Object} */\n    this.args_ = opt_args || null;\n\n    /** @private @const {!Window} */\n    this.win_ = /** @type {!Window} */ (this.iframe_.ownerDocument.defaultView);\n\n    /** @private @const {string} */\n    this.targetOrigin_ = getOriginFromUrl(url);\n\n    /** @private {boolean} */\n    this.connected_ = false;\n\n    /** @private {?function()} */\n    this.connectedResolver_ = null;\n\n    /** @private @const {!Promise} */\n    this.connectedPromise_ = new Promise(resolve => {\n      this.connectedResolver_ = resolve;\n    });\n\n    /** @private {?function()} */\n    this.readyResolver_ = null;\n\n    /** @private @const {!Promise} */\n    this.readyPromise_ = new Promise(resolve => {\n      this.readyResolver_ = resolve;\n    });\n\n    /** @private {?function((!ActivityResult|!Promise))} */\n    this.resultResolver_ = null;\n\n    /** @private @const {!Promise<!ActivityResult>} */\n    this.resultPromise_ = new Promise(resolve => {\n      this.resultResolver_ = resolve;\n    });\n\n    /** @private {?function(number)} */\n    this.onResizeRequest_ = null;\n\n    /** @private {?number} */\n    this.requestedHeight_ = null;\n\n    /** @private @const {!Messenger} */\n    this.messenger_ = new Messenger(\n        this.win_,\n        () => this.iframe_.contentWindow,\n        this.targetOrigin_);\n  }\n\n  /** @override */\n  getMode() {\n    return ActivityMode.IFRAME;\n  }\n\n  /**\n   * Waits until the activity port is connected to the host.\n   * @return {!Promise}\n   */\n  connect() {\n    if (!this.win_.document.documentElement.contains(this.iframe_)) {\n      throw new Error('iframe must be in DOM');\n    }\n    this.messenger_.connect(this.handleCommand_.bind(this));\n    this.iframe_.src = this.url_;\n    return this.connectedPromise_;\n  }\n\n  /**\n   * Disconnect the activity binding and cleanup listeners.\n   */\n  disconnect() {\n    this.connected_ = false;\n    this.messenger_.disconnect();\n  }\n\n  /** @override */\n  acceptResult() {\n    return this.resultPromise_;\n  }\n\n  /**\n   * Sends a message to the host.\n   * @param {!Object} payload\n   */\n  message(payload) {\n    this.messenger_.customMessage(payload);\n  }\n\n  /**\n   * Registers a callback to receive messages from the host.\n   * @param {function(!Object)} callback\n   */\n  onMessage(callback) {\n    this.messenger_.onCustomMessage(callback);\n  }\n\n  /**\n   * Creates a new communication channel or returns an existing one.\n   * @param {string=} opt_name\n   * @return {!Promise<!MessagePort>}\n   */\n  messageChannel(opt_name) {\n    return this.messenger_.askChannel(opt_name);\n  }\n\n  /**\n   * Returns a promise that yields when the iframe is ready to be interacted\n   * with.\n   * @return {!Promise}\n   */\n  whenReady() {\n    return this.readyPromise_;\n  }\n\n  /**\n   * Register a callback to handle resize requests. Once successfully resized,\n   * ensure to call `resized()` method.\n   * @param {function(number)} callback\n   */\n  onResizeRequest(callback) {\n    this.onResizeRequest_ = callback;\n    Promise.resolve().then(() => {\n      if (this.requestedHeight_ != null) {\n        callback(this.requestedHeight_);\n      }\n    });\n  }\n\n  /**\n   * Signals back to the activity implementation that the client has updated\n   * the activity's size.\n   */\n  resized() {\n    if (!this.connected_) {\n      return;\n    }\n    const height = this.iframe_.offsetHeight;\n    this.messenger_.sendCommand('resized', {'height': height});\n  }\n\n  /**\n   * @param {string} cmd\n   * @param {?Object} payload\n   * @private\n   */\n  handleCommand_(cmd, payload) {\n    if (cmd == 'connect') {\n      // First ever message. Indicates that the receiver is listening.\n      this.connected_ = true;\n      this.messenger_.sendStartCommand(this.args_);\n      this.connectedResolver_();\n    } else if (cmd == 'result') {\n      // The last message. Indicates that the result has been received.\n      if (this.resultResolver_) {\n        const code = /** @type {!ActivityResultCode} */ (payload['code']);\n        const data =\n            code == ActivityResultCode.FAILED ?\n            new Error(payload['data'] || '') :\n            payload['data'];\n        const result = new ActivityResult(\n            code,\n            data,\n            ActivityMode.IFRAME,\n            this.messenger_.getTargetOrigin(),\n            /* originVerified */ true,\n            /* secureChannel */ true);\n        resolveResult(this.win_, result, this.resultResolver_);\n        this.resultResolver_ = null;\n        this.messenger_.sendCommand('close');\n        this.disconnect();\n      }\n    } else if (cmd == 'ready') {\n      if (this.readyResolver_) {\n        this.readyResolver_();\n        this.readyResolver_ = null;\n      }\n    } else if (cmd == 'resize') {\n      this.requestedHeight_ = /** @type {number} */ (payload['height']);\n      if (this.onResizeRequest_) {\n        this.onResizeRequest_(this.requestedHeight_);\n      }\n    }\n  }\n}\n\n\n\n\n/**\n * The `ActivityPort` implementation for the standalone window activity\n * client executed as a popup.\n *\n * @implements {ActivityPort}\n */\nclass ActivityWindowPort {\n\n  /**\n   * @param {!Window} win\n   * @param {string} requestId\n   * @param {string} url\n   * @param {string} target\n   * @param {?Object=} opt_args\n   * @param {?ActivityOpenOptions=} opt_options\n   */\n  constructor(win, requestId, url, target, opt_args, opt_options) {\n    const isValidTarget =\n        target &&\n        (target == '_blank' || target == '_top' || target[0] != '_');\n    if (!isValidTarget) {\n      throw new Error('The only allowed targets are \"_blank\", \"_top\"' +\n          ' and name targets');\n    }\n\n    /** @private @const {!Window} */\n    this.win_ = win;\n    /** @private @const {string} */\n    this.requestId_ = requestId;\n    /** @private @const {string} */\n    this.url_ = url;\n    /** @private @const {string} */\n    this.openTarget_ = target;\n    /** @private @const {?Object} */\n    this.args_ = opt_args || null;\n    /** @private @const {?ActivityOpenOptions} */\n    this.options_ = opt_options || null;\n\n    /** @private {?function((!ActivityResult|!Promise))} */\n    this.resultResolver_ = null;\n\n    /** @private @const {!Promise<!ActivityResult>} */\n    this.resultPromise_ = new Promise(resolve => {\n      this.resultResolver_ = resolve;\n    });\n\n    /** @private {?Window} */\n    this.targetWin_ = null;\n\n    /** @private {?number} */\n    this.heartbeatInterval_ = null;\n\n    /** @private {?Messenger} */\n    this.messenger_ = null;\n  }\n\n  /** @override */\n  getMode() {\n    return this.openTarget_ == '_top' ?\n        ActivityMode.REDIRECT :\n        ActivityMode.POPUP;\n  }\n\n  /**\n   * Opens the activity in a window, either as a popup or via redirect.\n   *\n   * Returns the promise that will yield when the window returns or closed.\n   * Notice, that this promise may never complete if \"redirect\" mode was used.\n   *\n   * @return {!Promise}\n   */\n  open() {\n    return this.openInternal_();\n  }\n\n  /**\n   * @return {?Window}\n   */\n  getTargetWin() {\n    return this.targetWin_;\n  }\n\n  /**\n   * Disconnect the activity binding and cleanup listeners.\n   */\n  disconnect() {\n    if (this.heartbeatInterval_) {\n      this.win_.clearInterval(this.heartbeatInterval_);\n      this.heartbeatInterval_ = null;\n    }\n    if (this.messenger_) {\n      this.messenger_.disconnect();\n      this.messenger_ = null;\n    }\n    if (this.targetWin_) {\n      // Try to close the popup window. The host will also try to do the same.\n      try {\n        this.targetWin_.close();\n      } catch (e) {\n        // Ignore.\n      }\n      this.targetWin_ = null;\n    }\n    this.resultResolver_ = null;\n  }\n\n  /** @override */\n  acceptResult() {\n    return this.resultPromise_;\n  }\n\n  /**\n   * This method wraps around window's open method. It first tries to execute\n   * `open` call with the provided target and if it fails, it retries the call\n   * with the `_top` target. This is necessary given that in some embedding\n   * scenarios, such as iOS' WKWebView, navigation to `_blank` and other targets\n   * is blocked by default.\n   * @return {!Promise}\n   * @private\n   */\n  openInternal_() {\n    const featuresStr = this.buildFeatures_();\n\n    // Protectively, the URL will contain the request payload, unless explicitly\n    // directed not to via `skipRequestInUrl` option.\n    let url = this.url_;\n    if (!(this.options_ && this.options_.skipRequestInUrl)) {\n      const returnUrl =\n          this.options_ && this.options_.returnUrl ||\n          removeFragment(this.win_.location.href);\n      const requestString = serializeRequest({\n        requestId: this.requestId_,\n        returnUrl,\n        args: this.args_,\n      });\n      url = addFragmentParam(url, '__WA__', requestString);\n    }\n\n    // Open the window.\n    let targetWin;\n    let openTarget = this.openTarget_;\n    // IE does not support CORS popups - the popup has to fallback to redirect\n    // mode.\n    if (openTarget != '_top') {\n      if (isIeBrowser(this.win_)) {\n        openTarget = '_top';\n      }\n    }\n    // Try first with the specified target. If we're inside the WKWebView or\n    // a similar environments, this method is expected to fail by default for\n    // all targets except `_top`.\n    try {\n      targetWin = this.win_.open(url, openTarget, featuresStr);\n    } catch (e) {\n      // Ignore.\n    }\n    // Then try with `_top` target.\n    if (!targetWin && openTarget != '_top') {\n      openTarget = '_top';\n      try {\n        targetWin = this.win_.open(url, openTarget);\n      } catch (e) {\n        // Ignore.\n      }\n    }\n\n    // Setup the target window.\n    if (targetWin) {\n      this.targetWin_ = targetWin;\n      if (openTarget != '_top') {\n        this.setupPopup_();\n      }\n    } else {\n      this.disconnectWithError_(new Error('failed to open window'));\n    }\n\n    // Return result promise, even though it may never complete.\n    return this.resultPromise_.catch(() => {\n      // Ignore. Call to the `acceptResult()` should fail if needed.\n    });\n  }\n\n  /**\n   * @return {string}\n   * @private\n   */\n  buildFeatures_() {\n    // The max width and heights are calculated as following:\n    // MaxSize = AvailSize - ControlsSize\n    // ControlsSize = OuterSize - InnerSize\n    const screen = this.win_.screen;\n    const availWidth = screen.availWidth || screen.width;\n    const availHeight = screen.availHeight || screen.height;\n    const isTop = this.isTopWindow_();\n    const isEdge = isEdgeBrowser(this.win_);\n    // Limit controls to 100px width and height. Notice that it's only\n    // possible to calculate controls size in the top window, not in iframes.\n    // Notice that the Edge behavior is somewhat unique. If we can't find the\n    // right width/height, it will launch in the full-screen. Other browsers\n    // deal with such cases more gracefully.\n    const controlsWidth =\n        isTop && this.win_.outerWidth > this.win_.innerWidth ?\n        Math.min(100, this.win_.outerWidth - this.win_.innerWidth) :\n        (isEdge ? 100 : 0);\n    const controlsHeight =\n        isTop && this.win_.outerHeight > this.win_.innerHeight ?\n        Math.min(100, this.win_.outerHeight - this.win_.innerHeight) :\n        (isEdge ? 100 : 0);\n    // With all the adjustments, at least 50% of the available width/height\n    // should be made available to a popup.\n    const maxWidth = Math.max(availWidth - controlsWidth, availWidth * 0.5);\n    const maxHeight = Math.max(availHeight - controlsHeight, availHeight * 0.5);\n    let w = Math.floor(Math.min(600, maxWidth * 0.9));\n    let h = Math.floor(Math.min(600, maxHeight * 0.9));\n    if (this.options_) {\n      if (this.options_.width) {\n        w = Math.min(this.options_.width, maxWidth);\n      }\n      if (this.options_.height) {\n        h = Math.min(this.options_.height, maxHeight);\n      }\n    }\n    const x = Math.floor((screen.width - w) / 2);\n    const y = Math.floor((screen.height - h) / 2);\n    const features = {\n      'height': h,\n      'width': w,\n      'resizable': 'yes',\n      'scrollbars': 'yes',\n    };\n    // Do not set left/top in Edge: it fails.\n    if (!isEdge) {\n      features['left'] = x;\n      features['top'] = y;\n    }\n    let featuresStr = '';\n    for (const f in features) {\n      if (featuresStr) {\n        featuresStr += ',';\n      }\n      featuresStr += `${f}=${features[f]}`;\n    }\n    return featuresStr;\n  }\n\n  /**\n   * This method only exists to make iframe/top emulation possible in tests.\n   * Otherwise `window.top` cannot be overridden.\n   * @return {boolean}\n   * @private\n   */\n  isTopWindow_() {\n    return this.win_ == this.win_.top;\n  }\n\n  /** @private */\n  setupPopup_() {\n    // Keep alive to catch the window closing, which would indicate\n    // \"cancel\" signal.\n    this.heartbeatInterval_ = this.win_.setInterval(() => {\n      this.check_(/* delayCancel */ true);\n    }, 500);\n\n    // Start up messaging. The messaging is explicitly allowed to proceed\n    // without origin check b/c all arguments have already been passed in\n    // the URL and special handling is enforced when result is delivered.\n    this.messenger_ = new Messenger(\n        this.win_,\n        /** @type {!Window} */ (this.targetWin_),\n        /* targetOrigin */ null);\n    this.messenger_.connect(this.handleCommand_.bind(this));\n  }\n\n  /**\n   * @param {boolean=} opt_delayCancel\n   * @private\n   */\n  check_(opt_delayCancel) {\n    if (!this.targetWin_ || this.targetWin_.closed) {\n      if (this.heartbeatInterval_) {\n        this.win_.clearInterval(this.heartbeatInterval_);\n        this.heartbeatInterval_ = null;\n      }\n      // Give a chance for the result to arrive, but otherwise consider the\n      // responce to be empty.\n      this.win_.setTimeout(() => {\n        try {\n          this.result_(ActivityResultCode.CANCELED, /* data */ null);\n        } catch (e) {\n          this.disconnectWithError_(e);\n        }\n      }, opt_delayCancel ? 3000 : 0);\n    }\n  }\n\n  /**\n   * @param {!Error} reason\n   * @private\n   */\n  disconnectWithError_(reason) {\n    if (this.resultResolver_) {\n      this.resultResolver_(Promise.reject(reason));\n    }\n    this.disconnect();\n  }\n\n  /**\n   * @param {!ActivityResultCode} code\n   * @param {*} data\n   * @private\n   */\n  result_(code, data) {\n    if (this.resultResolver_) {\n      const isConnected = this.messenger_.isConnected();\n      const result = new ActivityResult(\n          code,\n          data,\n          ActivityMode.POPUP,\n          isConnected ?\n              this.messenger_.getTargetOrigin() :\n              getOriginFromUrl(this.url_),\n          /* originVerified */ isConnected,\n          /* secureChannel */ isConnected);\n      resolveResult(this.win_, result, this.resultResolver_);\n      this.resultResolver_ = null;\n    }\n    if (this.messenger_) {\n      this.messenger_.sendCommand('close');\n    }\n    this.disconnect();\n  }\n\n  /**\n   * @param {string} cmd\n   * @param {?Object} payload\n   * @private\n   */\n  handleCommand_(cmd, payload) {\n    if (cmd == 'connect') {\n      // First ever message. Indicates that the receiver is listening.\n      this.messenger_.sendStartCommand(this.args_);\n    } else if (cmd == 'result') {\n      // The last message. Indicates that the result has been received.\n      const code = /** @type {!ActivityResultCode} */ (payload['code']);\n      const data =\n          code == ActivityResultCode.FAILED ?\n          new Error(payload['data'] || '') :\n          payload['data'];\n      this.result_(code, data);\n    } else if (cmd == 'check') {\n      this.win_.setTimeout(() => this.check_(), 200);\n    }\n  }\n}\n\n\n/**\n * @param {!Window} win\n * @param {string} fragment\n * @param {string} requestId\n * @return {?ActivityPort}\n */\nfunction discoverRedirectPort(win, fragment, requestId) {\n  // Try to find the result in the fragment.\n  const paramName = '__WA_RES__';\n  const fragmentParam = getQueryParam(fragment, paramName);\n  if (!fragmentParam) {\n    return null;\n  }\n  const response = /** @type {?Object} */ (JSON.parse(\n      decodeURIComponent(fragmentParam)));\n  if (!response || response['requestId'] != requestId) {\n    return null;\n  }\n\n  // Remove the found param from the fragment.\n  const cleanFragment = removeQueryParam(win.location.hash, paramName) || '';\n  if (cleanFragment != win.location.hash) {\n    if (win.history && win.history.replaceState) {\n      try {\n        win.history.replaceState(win.history.state, '', cleanFragment);\n      } catch (e) {\n        // Ignore.\n      }\n    }\n  }\n\n  const code = response['code'];\n  const data = response['data'];\n  const origin = response['origin'];\n  const referrerOrigin = win.document.referrer &&\n      getOriginFromUrl(win.document.referrer);\n  const originVerified = origin == referrerOrigin;\n  return new ActivityWindowRedirectPort(\n      win,\n      code,\n      data,\n      origin,\n      originVerified);\n}\n\n\n/**\n * The `ActivityPort` implementation for the standalone window activity\n * client executed as a popup.\n *\n * @implements {ActivityPort}\n */\nclass ActivityWindowRedirectPort {\n\n  /**\n   * @param {!Window} win\n   * @param {!ActivityResultCode} code\n   * @param {*} data\n   * @param {string} targetOrigin\n   * @param {boolean} targetOriginVerified\n   */\n  constructor(win, code, data, targetOrigin, targetOriginVerified) {\n    /** @private @const {!Window} */\n    this.win_ = win;\n    /** @private @const {!ActivityResultCode} */\n    this.code_ = code;\n    /** @private @const {*} */\n    this.data_ = data;\n    /** @private {string} */\n    this.targetOrigin_ = targetOrigin;\n    /** @private {boolean} */\n    this.targetOriginVerified_ = targetOriginVerified;\n  }\n\n  /** @override */\n  getMode() {\n    return ActivityMode.REDIRECT;\n  }\n\n  /** @override */\n  acceptResult() {\n    const result = new ActivityResult(\n        this.code_,\n        this.data_,\n        ActivityMode.REDIRECT,\n        this.targetOrigin_,\n        this.targetOriginVerified_,\n        /* secureChannel */ false);\n    return new Promise(resolve => {\n      resolveResult(this.win_, result, resolve);\n    });\n  }\n}\n\n\n\n\n/**\n * The page-level activities manager ports. This class is intended to be used\n * as a singleton. It can start activities of all modes: iframe, popup, and\n * redirect.\n */\nclass ActivityPorts {\n\n  /**\n   * @param {!Window} win\n   */\n  constructor(win) {\n    /** @const {string} */\n    this.version = '1.13';\n\n    /** @private @const {!Window} */\n    this.win_ = win;\n\n    /** @private @const {string} */\n    this.fragment_ = win.location.hash;\n\n    /**\n     * @private @const {!Object<string, !Array<function(!ActivityPort)>>}\n     */\n    this.requestHandlers_ = {};\n\n    /**\n     * The result buffer is indexed by `requestId`.\n     * @private @const {!Object<string, !ActivityPort>}\n     */\n    this.resultBuffer_ = {};\n  }\n\n  /**\n   * Start an activity within the specified iframe.\n   * @param {!HTMLIFrameElement} iframe\n   * @param {string} url\n   * @param {?Object=} opt_args\n   * @return {!Promise<!ActivityIframePort>}\n   */\n  openIframe(iframe, url, opt_args) {\n    const port = new ActivityIframePort(iframe, url, opt_args);\n    return port.connect().then(() => port);\n  }\n\n  /**\n   * Start an activity in a separate window. The result will be delivered\n   * to the `onResult` callback.\n   *\n   * The activity can be opened in two modes: \"popup\" and \"redirect\". This\n   * depends on the `target` value, but also on the browser/environment.\n   *\n   * The allowed `target` values are `_blank`, `_top` and name targets. The\n   * `_self`, `_parent` and similar targets are not allowed.\n   *\n   * The `_top` target indicates that the activity should be opened as a\n   * \"redirect\", while other targets indicate that the activity should be\n   * opened as a popup. The activity client will try to honor the requested\n   * target. However, it's not always possible. Some environments do not\n   * allow popups and they either force redirect or fail the window open\n   * request. In this case, the activity will try to fallback to the \"redirect\"\n   * mode.\n   *\n   * @param {string} requestId\n   * @param {string} url\n   * @param {string} target\n   * @param {?Object=} opt_args\n   * @param {?ActivityOpenOptions=} opt_options\n   * @return {{targetWin: ?Window}}\n   */\n  open(requestId, url, target, opt_args, opt_options) {\n    const port = new ActivityWindowPort(\n        this.win_, requestId, url, target, opt_args, opt_options);\n    port.open().then(() => {\n      // Await result if possible. Notice that when falling back to \"redirect\",\n      // the result will never arrive through this port.\n      this.consumeResultAll_(requestId, port);\n    });\n    return {targetWin: port.getTargetWin()};\n  }\n\n  /**\n   * Registers the callback for the result of the activity opened with the\n   * specified `requestId` (see the `open()` method). The callback is a\n   * function that takes a single `ActivityPort` argument. The client\n   * can use this object to verify the port using it's origin, verified and\n   * secure channel flags. Then the client can call\n   * `ActivityPort.acceptResult()` method to accept the result.\n   *\n   * The activity result is handled via a separate callback because of a\n   * possible redirect. So use of direct callbacks and/or promises is not\n   * possible in that case.\n   *\n   * A typical implementation would look like:\n   * ```\n   * ports.onResult('request1', function(port) {\n   *   port.acceptResult().then(function(result) {\n   *     // Only verified origins are allowed.\n   *     if (result.origin == expectedOrigin &&\n   *         result.originVerified &&\n   *         result.secureChannel) {\n   *       handleResultForRequest1(result);\n   *     }\n   *   });\n   * })\n   *\n   * ports.open('request1', request1Url, '_blank');\n   * ```\n   *\n   * @param {string} requestId\n   * @param {function(!ActivityPort)} callback\n   */\n  onResult(requestId, callback) {\n    let handlers = this.requestHandlers_[requestId];\n    if (!handlers) {\n      handlers = [];\n      this.requestHandlers_[requestId] = handlers;\n    }\n    handlers.push(callback);\n\n    // Consume available result.\n    const availableResult = this.discoverResult_(requestId);\n    if (availableResult) {\n      this.consumeResult_(availableResult, callback);\n    }\n  }\n\n  /**\n   * @param {string} requestId\n   * @return {?ActivityPort}\n   * @private\n   */\n  discoverResult_(requestId) {\n    let port = this.resultBuffer_[requestId];\n    if (!port && this.fragment_) {\n      port = discoverRedirectPort(\n          this.win_, this.fragment_, requestId);\n      if (port) {\n        this.resultBuffer_[requestId] = port;\n      }\n    }\n    return port;\n  }\n\n  /**\n   * @param {!ActivityPort} port\n   * @param {function(!ActivityPort)} callback\n   * @private\n   */\n  consumeResult_(port, callback) {\n    Promise.resolve().then(() => {\n      callback(port);\n    });\n  }\n\n  /**\n   * @param {string} requestId\n   * @param {!ActivityPort} port\n   * @private\n   */\n  consumeResultAll_(requestId, port) {\n    // Find and execute handlers.\n    const handlers = this.requestHandlers_[requestId];\n    if (handlers) {\n      handlers.forEach(handler => {\n        this.consumeResult_(port, handler);\n      });\n    }\n    // Buffer the result for callbacks that may arrive in the future.\n    this.resultBuffer_[requestId] = port;\n  }\n}\n\n\n\nvar activityPorts = {\n  ActivityPorts,\n  ActivityIframePort,\n  ActivityMode,\n  ActivityOpenOptions,\n  ActivityPort,\n  ActivityRequest,\n  ActivityResult,\n  ActivityResultCode,\n  ActivityWindowPort,\n};\nvar activityPorts_1 = activityPorts.ActivityPorts;\n\n/**\n * Copyright 2018 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Throws an error if the first argument isn't trueish.\n *\n * Supports argument substitution into the message via %s placeholders.\n *\n * Throws an error object that has two extra properties:\n * - associatedElement: This is the first element provided in the var args.\n *   It can be used for improved display of error messages.\n * - messageArray: The elements of the substituted message as non-stringified\n *   elements in an array. When e.g. passed to console.error this yields\n *   native displays of things like HTML elements.\n *\n * @param {T} shouldBeTrueish The value to assert. The assert fails if it does\n *     not evaluate to true.\n * @param {string=} opt_message The assertion message\n * @param {...*} var_args Arguments substituted into %s in the message.\n * @return {T} The value of shouldBeTrueish.\n * @template T\n */\nfunction assert(shouldBeTrueish, opt_message, var_args) {\n  let firstElement;\n  if (!shouldBeTrueish) {\n    const message = opt_message || 'Assertion failed';\n    const splitMessage = message.split('%s');\n    const first = splitMessage.shift();\n    let formatted = first;\n    const messageArray = [];\n    pushIfNonEmpty(messageArray, first);\n    for (let i = 2; i < arguments.length; i++) {\n      const val = arguments[i];\n      if (val && val.tagName) {\n        firstElement = val;\n      }\n      const nextConstant = splitMessage.shift();\n      messageArray.push(val);\n      pushIfNonEmpty(messageArray, nextConstant.trim());\n      formatted += toString(val) + nextConstant;\n    }\n    const e = new Error(formatted);\n    e.fromAssert = true;\n    e.associatedElement = firstElement;\n    e.messageArray = messageArray;\n    throw e;\n  }\n  return shouldBeTrueish;\n}\n\n/**\n * @param {!Array} array\n * @param {*} val\n */\nfunction pushIfNonEmpty(array, val) {\n  if (val != '') {\n    array.push(val);\n  }\n}\n\nfunction toString(val) {\n// Do check equivalent to `val instanceof Element` without cross-window bug\n  if (val && val.nodeType == 1) {\n    return val.tagName.toLowerCase() + (val.id ? '#' + val.id : '');\n  }\n  return /** @type {string} */ (val);\n}\n\n/**\n * Copyright 2018 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n/**\n * Returns a map-like object.\n * If opt_initial is provided, copies its own properties into the\n * newly created object.\n * @param {Object=} opt_initial This should typically be an object literal.\n * @return {!Object}\n * @template T\n */\nfunction map(opt_initial) {\n  const obj = Object.create(null);\n  if (opt_initial) {\n    Object.assign(obj, opt_initial);\n  }\n  return obj;\n}\n\n/**\n * Copyright 2018 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Polyfill for String.prototype.startsWith.\n * @param {string} string\n * @param {string} prefix\n * @return {boolean}\n */\nfunction startsWith(string, prefix) {\n  if (prefix.length > string.length) {\n    return false;\n  }\n  return string.lastIndexOf(prefix, 0) == 0;\n}\n\n/**\n * Copyright 2018 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** @type {Object<string, string>} */\nlet propertyNameCache;\n\n/** @const {!Array<string>} */\nconst vendorPrefixes = ['Webkit', 'webkit', 'Moz', 'moz', 'ms', 'O', 'o'];\n\n/**\n * Default styles to be set for top level friendly iframe.\n * Some attributes are not included such as height, left, margin-left; since\n * these attributes are updated by @media queries and having these values\n * defined here as !important does not work on IE/edge browsers.\n * @const {!Object<string, string|number>}\n */\nconst defaultStyles = {\n  'align-content': 'normal',\n  'animation': 'none',\n  'align-items': 'normal',\n  'align-self': 'auto',\n  'alignment-baseline': 'auto',\n  'backface-visibility': 'hidden',\n  'background-clip': 'border-box',\n  'background-image': 'none',\n  'baseline-shift': '0',\n  'block-size': 'auto',\n  'border': 'none',\n  'border-collapse': 'separate',\n  'bottom': '0',\n  'box-sizing': 'border-box',\n  'break-after': 'auto',\n  'break-before': 'auto',\n  'break-inside': 'auto',\n  'buffered-rendering': 'auto',\n  'caption-side': 'top',\n  'caret-color': 'rgb(51, 51, 51)',\n  'clear': 'none',\n  'color': 'rgb(51, 51, 51)',\n  'color-rendering': 'auto',\n  'column-count': 'auto',\n  'column-fill': 'balance',\n  'column-gap': 'normal',\n  'column-rule-color': 'rgb(51, 51, 51)',\n  'column-rule-style': 'none',\n  'column-rule-width': '0',\n  'column-span': 'none',\n  'column-width': 'auto',\n  'contain': 'none',\n  'counter-increment': 'none',\n  'counter-reset': 'none',\n  'cursor': 'auto',\n  'direction': 'inherit',\n  'display': 'block',\n  'empty-cells': 'show',\n  'filter': 'none',\n  'flex': 'none',  // flex-grow, flex-shrink, and flex-basis.\n  'flex-flow': 'row nowrap',  // flex-direction, flex-wrap.\n  'float': 'none',\n  'flood-color': 'rgb(0, 0, 0)',\n  'flood-opacity': '1',\n  'font': 'none',\n  'font-size': 'medium',\n  'font-family': '',\n  'height': 'auto',\n  'hyphens': 'manual',\n  'image-rendering': 'auto',\n  'inline-size': '',  // Setting to 'auto' will not allow override.\n  'isolation': 'auto',\n  'justify-content': 'normal',\n  'justify-items': 'normal',\n  'justify-self': 'auto',\n  'letter-spacing': 'normal',\n  'lighting-color': 'rgb(255, 255, 255)',\n  'line-break': 'auto',\n  'line-height': 'normal',\n  'mask': 'none',\n  'max-block-size': 'none',\n  'max-height': 'none',\n  'max-inline-size': 'none',\n  'max-width': 'none',\n  'min-block-size': 'none',\n  'min-height': '0',\n  'min-inline-size': '0',\n  'min-width': '0',\n  'mix-blend-mode': 'normal',\n  'object-fit': 'fill',  // Important for Safari browser.\n  'offset-distance': 'none',  // Chrome only (Experimental).\n  'offset-path': 'none',  // Chrome only (Experimental).\n  'offset-rotate': 'auto 0deg',  // Chrome only (Experimental).\n  'opacity': '1',\n  'order': '0',\n  'orphans': '2',\n  'outline': 'none',\n  'overflow-anchor': 'auto',\n  'overflow-wrap': 'normal',\n  'overflow': 'visible',\n  'padding': '0',\n  'page': '',\n  'perspective': 'none',\n  'pointer-events': 'auto',\n  'position': 'static',\n  'quotes': '',\n  'resize': 'none',\n  'right': '0',\n  'scroll-behavior': 'auto',\n  'tab-size': '8',  // Only Chrome, Safari (Experimental).\n  'table-layout': 'auto',\n  'text-align': 'start',\n  'text-align-last': 'auto',\n  'text-anchor': 'start',\n  'text-combine-upright': 'none',\n  'text-decoration': 'none',\n  'text-indent': '0',\n  'text-orientation': 'mixed',\n  'text-overflow': 'clip',\n  'text-rendering': 'auto',\n  'text-shadow': 'none',\n  'text-size-adjust': 'auto',\n  'text-transform': 'none',\n  'text-underline-position': 'auto',\n  'top': 'auto',\n  'touch-action': 'auto',\n  'transform': 'none',\n  'transition': 'none 0s ease 0s',\n  'unicode-bidi': 'normal',\n  'user-select': 'auto',\n  'vector-effect': 'none',\n  'vertical-align': 'baseline',\n  'visibility': 'visible',\n  'white-space': 'normal',\n  'widows': '2',\n  'word-break': 'normal',\n  'word-spacing': '0',\n  'word-wrap': 'normal',\n  'writing-mode': 'horizontal-tb',\n  'zoom': '1',\n  'z-index': 'auto',\n};\n\n/**\n * @export\n * @param {string} camelCase camel cased string\n * @return {string} title cased string\n */\nfunction camelCaseToTitleCase(camelCase) {\n  return camelCase.charAt(0).toUpperCase() + camelCase.slice(1);\n}\n\n/**\n * Checks the style if a prefixed version of a property exists and returns\n * it or returns an empty string.\n * @private\n * @param {!Object} style\n * @param {string} titleCase the title case version of a css property name\n * @return {string} the prefixed property name or null.\n */\nfunction getVendorJsPropertyName_(style, titleCase) {\n  for (let i = 0; i < vendorPrefixes.length; i++) {\n    const propertyName = vendorPrefixes[i] + titleCase;\n    if (style[propertyName] !== undefined) {\n      return propertyName;\n    }\n  }\n  return '';\n}\n\n\n/**\n * Returns the possibly prefixed JavaScript property name of a style property\n * (ex. WebkitTransitionDuration) given a camelCase'd version of the property\n * (ex. transitionDuration).\n * @export\n * @param {!Object} style\n * @param {string} camelCase the camel cased version of a css property name\n * @param {boolean=} opt_bypassCache bypass the memoized cache of property\n *   mapping\n * @return {string}\n */\nfunction getVendorJsPropertyName(style, camelCase, opt_bypassCache) {\n  if (startsWith(camelCase, '--')) {\n    // CSS vars are returned as is.\n    return camelCase;\n  }\n  if (!propertyNameCache) {\n    propertyNameCache = map();\n  }\n  let propertyName = propertyNameCache[camelCase];\n  if (!propertyName || opt_bypassCache) {\n    propertyName = camelCase;\n    if (style[camelCase] === undefined) {\n      const titleCase = camelCaseToTitleCase(camelCase);\n      const prefixedPropertyName = getVendorJsPropertyName_(style, titleCase);\n\n      if (style[prefixedPropertyName] !== undefined) {\n        propertyName = prefixedPropertyName;\n      }\n    }\n    if (!opt_bypassCache) {\n      propertyNameCache[camelCase] = propertyName;\n    }\n  }\n  return propertyName;\n}\n\n\n/**\n * Sets the CSS styles of the specified element with !important. The styles\n * are specified as a map from CSS property names to their values.\n * @param {!Element} element\n * @param {!Object<string, string|number>} styles\n */\nfunction setImportantStyles(element, styles) {\n  for (const k in styles) {\n    element.style.setProperty(\n        getVendorJsPropertyName(styles, k), styles[k].toString(), 'important');\n  }\n}\n\n\n/**\n * Sets the CSS style of the specified element with optional units, e.g. \"px\".\n * @param {Element} element\n * @param {string} property\n * @param {?string|number|boolean} value\n * @param {string=} opt_units\n * @param {boolean=} opt_bypassCache\n */\nfunction setStyle(element, property, value, opt_units, opt_bypassCache) {\n  const propertyName = getVendorJsPropertyName(element.style, property,\n      opt_bypassCache);\n  if (propertyName) {\n    element.style[propertyName] =\n        /** @type {string} */ (opt_units ? value + opt_units : value);\n  }\n}\n\n\n/**\n * Sets the CSS styles of the specified element. The styles\n * a specified as a map from CSS property names to their values.\n * @param {!Element} element\n * @param {!Object<string, ?string|number|boolean>} styles\n */\nfunction setStyles(element, styles) {\n  for (const k in styles) {\n    setStyle(element, k, styles[k]);\n  }\n}\n\n\n/**\n * Resets styles that were set dynamically (i.e. inline)\n * @param {!Element} element\n * @param {!Array<string>} properties\n */\nfunction resetStyles(element, properties) {\n  const styleObj = {};\n  properties.forEach(prop => {\n    styleObj[prop] = null;\n  });\n  setStyles(element, styleObj);\n}\n\n\n/**\n * Resets all the styles of an element to a given value. Defaults to null.\n * The valid values are 'inherit', 'initial', 'unset' or null.\n * @param {!Element} element\n */\nfunction resetAllStyles(element) {\n  setImportantStyles(element, defaultStyles);\n}\n\n/**\n * Copyright 2018 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** @const {string} */\nconst styleType = 'text/css';\n\n\n/**\n * Add attributes to an element.\n * @param {!Element} element\n * @param {!Object<string, string|number|boolean|!Object<string, string|number|boolean>>} attributes\n * @return {!Element} updated element.\n */\nfunction addAttributesToElement(element, attributes) {\n  for (const attr in attributes) {\n    if (attr == 'style') {\n      setStyles(element,\n           /** @type !Object<string, string|boolean|number> */\n           (attributes[attr]));\n    } else {\n      element.setAttribute(attr,\n          /** @type {string|boolean|number} */ (attributes[attr]));\n    }\n\n  }\n  return element;\n}\n\n\n/**\n * Create a new element on document with specified tagName and attributes.\n * @param {!Document} doc\n * @param {string} tagName\n * @param {!Object<string, string>} attributes\n * @param {?(string|!Node|!ArrayLike<!Node>|!Array<!Node>)=} opt_content\n * @return {!Element} created element.\n */\nfunction createElement(doc, tagName, attributes, opt_content) {\n  const element = doc.createElement(tagName);\n  addAttributesToElement(element, attributes);\n  if (opt_content != null) {\n    if (typeof opt_content == 'string') {\n      element.textContent = opt_content;\n    } else if (opt_content.nodeType) {\n      element.appendChild(opt_content);\n    } else if ('length' in opt_content) {\n      for (let i = 0; i < opt_content.length; i++) {\n        element.appendChild(opt_content[i]);\n      }\n    } else {\n      assert(false, 'Unsupported content: %s', opt_content);\n    }\n  }\n  return element;\n}\n\n\n/**\n * Removes all children from the parent element.\n * @param {!Element} parent\n */\nfunction removeChildren(parent) {\n  parent.textContent = '';\n}\n\n\n/**\n * Injects the provided styles in the HEAD section of the document.\n * @param {!Document} doc The document object.\n * @param {string} styleText The style string.\n * @return {!Element}\n */\nfunction injectStyleSheet(doc, styleText) {\n  const styleElement = createElement(doc, 'style', {\n    'type': styleType,\n  });\n  styleElement.textContent = styleText;\n  doc.head.appendChild(styleElement);\n  return styleElement;\n}\n\n/**\n * Copyright 2018 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n/**\n * @param {!Object<string, string>} map\n * @param {?string|?Element} langOrElement\n * @return {?string}\n */\nfunction msg(map, langOrElement) {\n  const lang =\n      !langOrElement ? '' :\n      typeof langOrElement == 'string' ? langOrElement :\n      langOrElement.lang ||\n      langOrElement.ownerDocument &&\n          langOrElement.ownerDocument.documentElement.lang;\n  let search = (lang && lang.toLowerCase() || 'en').replace(/_/g, '-');\n  while (search) {\n    if (search in map) {\n      return map[search];\n    }\n    const dash = search.lastIndexOf('-');\n    search = dash != -1 ? search.substring(0, dash) : '';\n  }\n  // \"en\" is always default.\n  return map['en'];\n}\n\n/**\n * Copyright 2018 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** @type {!Object<string, string>} */\nconst TITLE_LANG_MAP = {\n  'en': 'Subscribe with Google',\n  'ar': 'الاشتراك عبر Google',\n  'de': 'Abonnieren mit Google',\n  'es': 'Suscríbete con Google',\n  'es-latam': 'Suscribirse con Google',\n  'es-latn': 'Suscribirse con Google',\n  'fr': 'S\\'abonner avec Google',\n  'hi': 'Google की सदस्यता लें',\n  'id': 'Berlangganan dengan Google',\n  'it': 'Abbonati con Google',\n  'jp': 'Google で購読',\n  'ko': 'Google 을(를) 통해 구독',\n  'ms': 'Langgan dengan Google',\n  'nl': 'Abonneren met Google',\n  'no': 'Abonner med Google',\n  'pl': 'Subskrybuj z Google',\n  'pt': 'Subscrever com o Google',\n  'pt-br': 'Faça sua assinatura com Google',\n  'ru': 'Подпишитесь через Google',\n  'se': 'Prenumerera med Google',\n  'th': 'สมัครรับข้อมูลด้วย Google',\n  'tr': 'Google ile abone olun',\n  'uk': 'Підписатися через Google',\n  'zh-tw': '透過 Google 訂閱',\n};\n\n\n/**\n * The button stylesheet can be found in the `/assets/swg-button.css`.\n * It's produced by the `assets:swg-button` gulp task and deployed to\n * `https://news.google.com/swg/js/v1/swg-button.css`.\n */\nclass ButtonApi {\n\n  /**\n   * @param {!../model/doc.Doc} doc\n   */\n  constructor(doc) {\n    /** @private @const {!../model/doc.Doc} */\n    this.doc_ = doc;\n  }\n\n  /**\n   */\n  init() {\n    const head = this.doc_.getHead();\n    if (!head) {\n      return;\n    }\n\n    const url = 'https://news.google.com/swg/js/v1/swg-button.css';\n    const existing = head.querySelector(`link[href=\"${url}\"]`);\n    if (existing) {\n      return;\n    }\n\n    // <link rel=\"stylesheet\" href=\"...\" type=\"text/css\">\n    head.appendChild(createElement(this.doc_.getWin().document, 'link', {\n      'rel': 'stylesheet',\n      'type': 'text/css',\n      'href': url,\n    }));\n  }\n\n  /**\n   * @param {!Object|function()} optionsOrCallback\n   * @param {function()=} opt_callback\n   * @return {!Element}\n   */\n  create(optionsOrCallback, opt_callback) {\n    const button = createElement(this.doc_.getWin().document, 'button', {});\n    return this.attach(button, optionsOrCallback, opt_callback);\n  }\n\n  /**\n   * @param {!Element} button\n   * @param {!Object|function()} optionsOrCallback\n   * @param {function()=} opt_callback\n   * @return {!Element}\n   */\n  attach(button, optionsOrCallback, opt_callback) {\n    const options =\n        typeof optionsOrCallback != 'function' ?\n        optionsOrCallback : null;\n    const callback = /** @type {function()} */ (\n        (typeof optionsOrCallback == 'function' ? optionsOrCallback : null) ||\n            opt_callback);\n    let theme = options && options['theme'];\n    if (theme !== 'light' && theme !== 'dark') {\n      theme = 'light';\n    }\n    button.classList.add(`swg-button-${theme}`);\n    button.setAttribute('role', 'button');\n    if (options && options['lang']) {\n      button.setAttribute('lang', options['lang']);\n    }\n    button.setAttribute('title', msg(TITLE_LANG_MAP, button) || '');\n    button.addEventListener('click', callback);\n    return button;\n  }\n}\n\nconst CSS = \".swg-dialog,.swg-toast{box-sizing:border-box;background-color:#fff!important}.swg-toast{position:fixed!important;bottom:0!important;max-height:46px!important;z-index:2147483647!important;border:none!important}@media (max-height:640px), (max-width:640px){.swg-dialog,.swg-toast{width:480px!important;left:-240px!important;margin-left:50vw!important;border-top-left-radius:8px!important;border-top-right-radius:8px!important;box-shadow:0 1px 1px rgba(60,64,67,.3),0 1px 4px 1px rgba(60,64,67,.15)!important}}@media (min-width:640px) and (min-height:640px){.swg-dialog{width:630px!important;left:-315px!important;margin-left:50vw!important;background-color:transparent!important;border:none!important}.swg-toast{left:0!important}}@media (max-width:480px){.swg-dialog,.swg-toast{width:100%!important;left:0!important;right:0!important;margin-left:0!important;border-top-left-radius:8px!important;border-top-right-radius:8px!important;box-shadow:0 1px 1px rgba(60,64,67,.3),0 1px 4px 1px rgba(60,64,67,.15)!important}}\\n/*# sourceURL=/./src/components/dialog.css*/\";\n\n/**\n * Copyright 2018 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n/** @enum {number} */\nconst CallbackId = {\n  ENTITLEMENTS: 1,\n  SUBSCRIBE_REQUEST: 2,\n  SUBSCRIBE_RESPONSE: 3,\n  LOGIN_REQUEST: 4,\n  LINK_PROGRESS: 5,\n  LINK_COMPLETE: 6,\n  FLOW_STARTED: 7,\n  FLOW_CANCELED: 8,\n};\n\n\n/**\n */\nclass Callbacks {\n\n  /**\n   */\n  constructor() {\n    /** @private @const {!Object<CallbackId, function(*)>} */\n    this.callbacks_ = {};\n    /** @private @const {!Object<CallbackId, *>} */\n    this.resultBuffer_ = {};\n  }\n\n  /**\n   * @param {function(!Promise<!../api/entitlements.Entitlements>)} callback\n   */\n  setOnEntitlementsResponse(callback) {\n    this.setCallback_(CallbackId.ENTITLEMENTS, callback);\n  }\n\n  /**\n   * @param {!Promise<!../api/entitlements.Entitlements>} promise\n   */\n  triggerEntitlementsResponse(promise) {\n    return this.trigger_(\n        CallbackId.ENTITLEMENTS,\n        promise.then(res => res.clone()));\n  }\n\n  /**\n   * @return {boolean}\n   */\n  hasEntitlementsResponsePending() {\n    return !!this.resultBuffer_[CallbackId.ENTITLEMENTS];\n  }\n\n  /**\n   * @param {function(!../api/subscriptions.LoginRequest)} callback\n   */\n  setOnLoginRequest(callback) {\n    this.setCallback_(CallbackId.LOGIN_REQUEST, callback);\n  }\n\n  /**\n   * @param {!../api/subscriptions.LoginRequest} request\n   * @return {boolean} Whether the callback has been found.\n   */\n  triggerLoginRequest(request) {\n    return this.trigger_(CallbackId.LOGIN_REQUEST, request);\n  }\n\n  /**\n   * @param {function()} callback\n   */\n  setOnLinkProgress(callback) {\n    this.setCallback_(CallbackId.LINK_PROGRESS, callback);\n  }\n\n  /**\n   * @return {boolean} Whether the callback has been found.\n   */\n  triggerLinkProgress() {\n    return this.trigger_(CallbackId.LINK_PROGRESS, true);\n  }\n\n  /**\n   */\n  resetLinkProgress() {\n    this.resetCallback_(CallbackId.LINK_PROGRESS);\n  }\n\n  /**\n   * @param {function()} callback\n   */\n  setOnLinkComplete(callback) {\n    this.setCallback_(CallbackId.LINK_COMPLETE, callback);\n  }\n\n  /**\n   * @return {boolean} Whether the callback has been found.\n   */\n  triggerLinkComplete() {\n    return this.trigger_(CallbackId.LINK_COMPLETE, true);\n  }\n\n  /**\n   * @return {boolean}\n   */\n  hasLinkCompletePending() {\n    return !!this.resultBuffer_[CallbackId.LINK_COMPLETE];\n  }\n\n  /**\n   * @param {function()} callback\n   */\n  setOnSubscribeRequest(callback) {\n    this.setCallback_(CallbackId.SUBSCRIBE_REQUEST, callback);\n  }\n\n  /**\n   * @return {boolean} Whether the callback has been found.\n   */\n  triggerSubscribeRequest() {\n    return this.trigger_(CallbackId.SUBSCRIBE_REQUEST, true);\n  }\n\n  /**\n   * @return {boolean}\n   */\n  hasSubscribeRequestCallback() {\n    return !!this.callbacks_[CallbackId.SUBSCRIBE_REQUEST];\n  }\n\n  /**\n   * @param {function(!Promise<!../api/subscribe-response.SubscribeResponse>)} callback\n   */\n  setOnSubscribeResponse(callback) {\n    this.setCallback_(CallbackId.SUBSCRIBE_RESPONSE, callback);\n  }\n\n  /**\n   * @param {!Promise<!../api/subscribe-response.SubscribeResponse>} responsePromise\n   * @return {boolean} Whether the callback has been found.\n   */\n  triggerSubscribeResponse(responsePromise) {\n    return this.trigger_(\n        CallbackId.SUBSCRIBE_RESPONSE,\n        responsePromise.then(res => res.clone()));\n  }\n\n  /**\n   * @return {boolean}\n   */\n  hasSubscribeResponsePending() {\n    return !!this.resultBuffer_[CallbackId.SUBSCRIBE_RESPONSE];\n  }\n\n  /**\n   * @param {function({flow: string, data: !Object})} callback\n   */\n  setOnFlowStarted(callback) {\n    this.setCallback_(CallbackId.FLOW_STARTED, callback);\n  }\n\n  /**\n   * @param {string} flow\n   * @param {!Object=} opt_data\n   * @return {boolean} Whether the callback has been found.\n   */\n  triggerFlowStarted(flow, opt_data) {\n    return this.trigger_(CallbackId.FLOW_STARTED, {\n      flow,\n      data: opt_data || {},\n    });\n  }\n\n  /**\n   * @param {function({flow: string, data: !Object})} callback\n   */\n  setOnFlowCanceled(callback) {\n    this.setCallback_(CallbackId.FLOW_CANCELED, callback);\n  }\n\n  /**\n   * @param {string} flow\n   * @param {!Object=} opt_data\n   * @return {boolean} Whether the callback has been found.\n   */\n  triggerFlowCanceled(flow, opt_data) {\n    return this.trigger_(CallbackId.FLOW_CANCELED, {\n      flow,\n      data: opt_data || {},\n    });\n  }\n\n  /**\n   * @param {!CallbackId} id\n   * @param {function(?)} callback\n   * @private\n   */\n  setCallback_(id, callback) {\n    this.callbacks_[id] = callback;\n    // If result already exist, execute the callback right away.\n    if (id in this.resultBuffer_) {\n      this.executeCallback_(id, callback, this.resultBuffer_[id]);\n    }\n  }\n\n  /**\n   * @param {!CallbackId} id\n   * @param {*} data\n   * @return {boolean}\n   * @private\n   */\n  trigger_(id, data) {\n    this.resultBuffer_[id] = data;\n    const callback = this.callbacks_[id];\n    if (callback) {\n      this.executeCallback_(id, callback, data);\n    }\n    return !!callback;\n  }\n\n  /**\n   * @param {!CallbackId} id\n   * @private\n   */\n  resetCallback_(id) {\n    if (id in this.resultBuffer_) {\n      delete this.resultBuffer_[id];\n    }\n  }\n\n  /**\n   * @param {!CallbackId} id\n   * @param {function(*)} callback\n   * @param {*} data\n   * @private\n   */\n  executeCallback_(id, callback, data) {\n    // Always execute callbacks in a microtask.\n    Promise.resolve().then(() => {\n      callback(data);\n      this.resetCallback_(id);\n    });\n  }\n}\n\n/**\n * Copyright 2018 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n/**\n * abstract View Class. Used to render the content within the Dialog. The\n * extended class has actual content.\n * @abstract\n */\nclass View {\n\n  /**\n   * Empty constructor.\n   */\n  constructor() {}\n\n  /**\n   * Gets the iframe element.\n   * @return {!Element}\n   * @abstract\n   */\n  getElement() {}\n\n  /**\n   * @param {!./dialog.Dialog} unusedDialog\n   * @return {!Promise}\n   * @abstract\n   */\n  init(unusedDialog) {}\n\n  /**\n   * Resizes the content.\n   */\n  resized() {\n    // Do nothing by default. Override if needed.\n  }\n\n  /**\n   * Accept the result.\n   * @return {!Promise}\n   * @abstract\n   */\n  whenComplete() {}\n\n  /**\n   * @return {boolean}\n   * @abstract\n   */\n  shouldFadeBody() {}\n}\n\n/**\n * Copyright 2018 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n/**\n * @param {*} error\n * @return {boolean}\n */\nfunction isCancelError(error) {\n  if (!error || typeof error != 'object') {\n    return false;\n  }\n  return (error['name'] === 'AbortError');\n}\n\n/**\n * Copyright 2018 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** @const {!Object<string, string>} */\nconst iframeAttributes = {\n  'frameborder': '0',\n  'scrolling': 'no',\n};\n\n\n/**\n * Class to build and render Activity iframe view.\n */\nclass ActivityIframeView extends View {\n\n  /**\n   * @param {!Window} win\n   * @param {!web-activities/activity-ports.ActivityPorts} activityPorts\n   * @param {string} src\n   * @param {!Object<string, ?>=} args\n   * @param {boolean=} shouldFadeBody\n   */\n  constructor(\n      win,\n      activityPorts,\n      src,\n      args,\n      shouldFadeBody = false) {\n    super();\n\n    /** @private @const {!Window} */\n    this.win_ = win;\n\n    /** @private @const {!Document} */\n    this.doc_ = this.win_.document;\n\n    /** @private @const {!HTMLIFrameElement} */\n    this.iframe_ =\n        /** @type {!HTMLIFrameElement} */ (\n            createElement(this.doc_, 'iframe', iframeAttributes));\n\n    /** @private @const {!web-activities/activity-ports.ActivityPorts} */\n    this.activityPorts_ = activityPorts;\n\n    /** @private @const {string} */\n    this.src_ = src;\n\n    /** @private @const {!Object<string, ?>} */\n    this.args_ = args || {};\n\n    /** @private @const {boolean} */\n    this.shouldFadeBody_ = shouldFadeBody;\n\n    /** @private {?web-activities/activity-ports.ActivityIframePort} */\n    this.port_ = null;\n\n    /**\n     * @private\n     * {?function<!web-activities/activity-ports.ActivityIframePort|!Promise>}\n     */\n    this.portResolver_ = null;\n\n    /**\n     * @private @const\n     * {!Promise<!web-activities/activity-ports.ActivityIframePort>}\n     */\n    this.portPromise_ = new Promise(resolve => {\n      this.portResolver_ = resolve;\n    });\n  }\n\n  /** @override */\n  getElement() {\n    return this.iframe_;\n  }\n\n  /** @override */\n  init(dialog) {\n    return this.activityPorts_.openIframe(this.iframe_, this.src_, this.args_)\n        .then(port => this.onOpenIframeResponse_(port, dialog));\n  }\n\n  /**\n   * Returns if document should fade for this view.\n   * @return {boolean}\n   */\n  shouldFadeBody() {\n    return this.shouldFadeBody_;\n  }\n\n  /**\n   * @param {!web-activities/activity-ports.ActivityIframePort} port\n   * @param {!../components/dialog.Dialog} dialog\n   * @return {!Promise}\n   */\n  onOpenIframeResponse_(port, dialog) {\n    this.port_ = port;\n    this.portResolver_(port);\n\n    this.port_.onResizeRequest(height => {\n      dialog.resizeView(this, height);\n    });\n\n    return this.port_.whenReady();\n  }\n\n  /**\n   * @return {!Promise<!web-activities/activity-ports.ActivityIframePort>}\n   */\n  port() {\n    return this.portPromise_;\n  }\n\n  /**\n   * @param {!Object} data\n   */\n  message(data) {\n    this.port().then(port => {\n      port.message(data);\n    });\n  }\n\n  /**\n   * Handles the message received by the port.\n   * @param {function(!Object<string, string|boolean>)} callback\n   */\n  onMessage(callback) {\n    this.port().then(port => {\n      port.onMessage(callback);\n    });\n  }\n\n  /**\n   * Accepts results from the caller.\n   * @return {!Promise<!web-activities/activity-ports.ActivityResult>}\n   */\n  acceptResult() {\n    return this.port().then(port => port.acceptResult());\n  }\n\n  /**\n   * Completes the flow.\n   * @return {!Promise}\n   */\n  whenComplete() {\n    return this.acceptResult();\n  }\n\n  /**\n   * @param {function()} callback\n   */\n  onCancel(callback) {\n    this.acceptResult().catch(reason => {\n      if (isCancelError(reason)) {\n        callback();\n      }\n      throw reason;\n    });\n  }\n\n  /** @override */\n  resized() {\n    if (this.port_) {\n      this.port_.resized();\n    }\n  }\n}\n\n/**\n * Copyright 2018 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n/**\n * The holder of the entitlements for a service.\n */\nclass Entitlements {\n\n  /**\n   * @param {string} service\n   * @param {string} raw\n   * @param {!Array<!Entitlement>} entitlements\n   * @param {?string} currentProduct\n   * @param {function(!Entitlements)} ackHandler\n   */\n  constructor(service, raw, entitlements, currentProduct, ackHandler) {\n    /** @const {string} */\n    this.service = service;\n    /** @const {string} */\n    this.raw = raw;\n    /** @const {!Array<!Entitlement>} */\n    this.entitlements = entitlements;\n\n    /** @private @const {?string} */\n    this.product_ = currentProduct;\n    /** @private @const {function(!Entitlements)} */\n    this.ackHandler_ = ackHandler;\n  }\n\n  /**\n   * @return {!Entitlements}\n   */\n  clone() {\n    return new Entitlements(\n        this.service,\n        this.raw,\n        this.entitlements.map(ent => ent.clone()),\n        this.product_,\n        this.ackHandler_);\n  }\n\n  /**\n   * @return {!Object}\n   */\n  json() {\n    return {\n      'service': this.service,\n      'entitlements': this.entitlements.map(item => item.json()),\n    };\n  }\n\n  /**\n   * @param {string=} opt_source\n   * @return {boolean}\n   */\n  enablesThis(opt_source) {\n    return this.enables(this.product_, opt_source);\n  }\n\n  /**\n   * @param {string=} opt_source\n   * @return {boolean}\n   */\n  enablesAny(opt_source) {\n    for (let i = 0; i < this.entitlements.length; i++) {\n      if (this.entitlements[i].products.length > 0 &&\n          (!opt_source || opt_source == this.entitlements[i].source)) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Whether these entitlements enable the specified product, optionally also\n   * restricting the source.\n   * @param {?string} product\n   * @param {string=} opt_source\n   * @return {boolean}\n   */\n  enables(product, opt_source) {\n    if (!product) {\n      return false;\n    }\n    return !!this.getEntitlementFor(product, opt_source);\n  }\n\n  /**\n   * Returns the first matching entitlement for the current product,\n   * optionally also matching the specified source.\n   * @param {string=} opt_source\n   * @return {?Entitlement}\n   */\n  getEntitlementForThis(opt_source) {\n    return this.getEntitlementFor(this.product_, opt_source);\n  }\n\n  /**\n   * Returns the first matching entitlement for the specified product,\n   * optionally also matching the specified source.\n   * @param {?string} product\n   * @param {string=} opt_source\n   * @return {?Entitlement}\n   */\n  getEntitlementFor(product, opt_source) {\n    if (product && this.entitlements.length > 0) {\n      for (let i = 0; i < this.entitlements.length; i++) {\n        if (this.entitlements[i].enables(product) &&\n            (!opt_source || opt_source == this.entitlements[i].source)) {\n          return this.entitlements[i];\n        }\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Returns the first matching entitlement for the specified source w/o\n   * matching any specific products.\n   * @param {string} source\n   * @return {?Entitlement}\n   */\n  getEntitlementForSource(source) {\n    if (this.entitlements.length > 0) {\n      for (let i = 0; i < this.entitlements.length; i++) {\n        if (this.entitlements[i].subscriptionToken &&\n            (source == this.entitlements[i].source)) {\n          return this.entitlements[i];\n        }\n      }\n    }\n    return null;\n  }\n\n  /**\n   * A 3p site should call this method to acknowledge that it \"saw\" and\n   * \"understood\" entitlements.\n   */\n  ack() {\n    this.ackHandler_(this);\n  }\n}\n\n\n/**\n * The single entitlement object.\n */\nclass Entitlement {\n\n  /**\n   * @param {string} source\n   * @param {!Array<string>} products\n   * @param {string} subscriptionToken\n   */\n  constructor(source, products, subscriptionToken) {\n    /** @const {string} */\n    this.source = source;\n    /** @const {!Array<string>} */\n    this.products = products;\n    /** @const {string} */\n    this.subscriptionToken = subscriptionToken;\n  }\n\n  /**\n   * @return {!Entitlement}\n   */\n  clone() {\n    return new Entitlement(\n        this.source,\n        this.products.slice(0),\n        this.subscriptionToken);\n  }\n\n  /**\n   * @return {!Object}\n   */\n  json() {\n    return {\n      'source': this.source,\n      'products': this.products,\n      'subscriptionToken': this.subscriptionToken,\n    };\n  }\n\n  /**\n   * @param {?string} product\n   * @return {boolean}\n   */\n  enables(product) {\n    if (!product) {\n      return false;\n    }\n    return this.products.includes(product);\n  }\n\n  /**\n   * @param {?Object} json\n   * @return {!Entitlement}\n   */\n  static parseFromJson(json) {\n    if (!json) {\n      json = {};\n    }\n    const source = json['source'] || '';\n    const products = json['products'] || [];\n    const subscriptionToken = json['subscriptionToken'];\n    return new Entitlement(source, products, subscriptionToken);\n  }\n\n  /**\n   * The JSON is expected in one of the forms:\n   * - Single entitlement: `{products: [], ...}`.\n   * - A list of entitlements: `[{products: [], ...}, {...}]`.\n   * @param {!Object|!Array<!Object>} json\n   * @return {!Array<!Entitlement>}\n   */\n  static parseListFromJson(json) {\n    const jsonList = Array.isArray(json) ?\n        /** @type {!Array<Object>} */ (json) : [json];\n    return jsonList.map(json => Entitlement.parseFromJson(json));\n  }\n}\n\n/**\n * Copyright 2018 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n/**\n */\nclass UserData {\n\n  /**\n   * @param {string} idToken\n   * @param {!Object} data\n   */\n  constructor(idToken, data) {\n    /** @const {string} */\n    this.idToken = idToken;\n    /** @const {!Object} */\n    this.data = data;\n\n    /** @const {string} */\n    this.id = data['sub'];\n    /** @const {string} */\n    this.email = data['email'];\n    /** @const {boolean} */\n    this.emailVerified = data['email_verified'];\n    /** @const {string} */\n    this.name = data['name'];\n    /** @const {string} */\n    this.givenName = data['given_name'];\n    /** @const {string} */\n    this.familyName = data['family_name'];\n    /** @const {string} */\n    this.pictureUrl = data['picture'];\n  }\n\n  /**\n   * @return {!UserData}\n   */\n  clone() {\n    return new UserData(this.idToken, this.data);\n  }\n\n  /**\n   * @return {!Object}\n   */\n  json() {\n    return {\n      'id': this.id,\n      'email': this.email,\n      'emailVerified': this.emailVerified,\n      'name': this.name,\n      'givenName': this.givenName,\n      'familyName': this.familyName,\n      'pictureUrl': this.pictureUrl,\n    };\n  }\n}\n\n/**\n * Copyright 2018 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n/**\n */\nclass SubscribeResponse {\n\n  /**\n   * @param {string} raw\n   * @param {!PurchaseData} purchaseData\n   * @param {?UserData} userData\n   * @param {function():!Promise} completeHandler\n   */\n  constructor(raw, purchaseData, userData, completeHandler) {\n    /** @const {string} */\n    this.raw = raw;\n    /** @const {!PurchaseData} */\n    this.purchaseData = purchaseData;\n    /** @const {?UserData} */\n    this.userData = userData;\n    /** @private @const {function():!Promise} */\n    this.completeHandler_ = completeHandler;\n  }\n\n  /**\n   * @return {!SubscribeResponse}\n   */\n  clone() {\n    return new SubscribeResponse(\n        this.raw,\n        this.purchaseData,\n        this.userData,\n        this.completeHandler_);\n  }\n\n  /**\n   * @return {!Object}\n   */\n  json() {\n    return {\n      'purchaseData': this.purchaseData.json(),\n      'userData': this.userData ? this.userData.json() : null,\n    };\n  }\n\n  /**\n   * Allows the receiving site to complete/acknowledge that it registered\n   * the subscription purchase. The typical action would be to create an\n   * account (or match an existing one) and associated the purchase with\n   * that account.\n   *\n   * SwG will display progress indicator until this method is called and\n   * upon receiving this call will show the confirmation to the user.\n   * The promise returned by this method will yield once the user closes\n   * the confirmation.\n   *\n   * @return {!Promise}\n   */\n  complete() {\n    return this.completeHandler_();\n  }\n}\n\n\n/**\n */\nclass PurchaseData {\n\n  /**\n   * @param {string} raw\n   * @param {string} signature\n   */\n  constructor(raw, signature) {\n    /** @const {string} */\n    this.raw = raw;\n    /** @const {string} */\n    this.signature = signature;\n  }\n\n  /**\n   * @return {!PurchaseData}\n   */\n  clone() {\n    return new PurchaseData(this.raw, this.signature);\n  }\n\n  /**\n   * @return {!Object}\n   */\n  json() {\n    return {\n      'data': this.raw,\n      'signature': this.signature,\n    };\n  }\n}\n\n/**\n * Copyright 2018 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n/**\n */\nclass DeferredAccountCreationResponse {\n\n  /**\n   * @param {!Entitlements} entitlements\n   * @param {!UserData} userData\n   * @param {!PurchaseData} purchaseData\n   * @param {function():!Promise} completeHandler\n   */\n  constructor(entitlements, userData, purchaseData, completeHandler) {\n    /** @const {!Entitlements} */\n    this.entitlements = entitlements;\n    /** @const {!UserData} */\n    this.userData = userData;\n    /** @const {!PurchaseData} */\n    this.purchaseData = purchaseData;\n    /** @private @const {function():!Promise} */\n    this.completeHandler_ = completeHandler;\n  }\n\n  /**\n   * @return {!DeferredAccountCreationResponse}\n   */\n  clone() {\n    return new DeferredAccountCreationResponse(\n        this.entitlements,\n        this.userData,\n        this.purchaseData,\n        this.completeHandler_);\n  }\n\n  /**\n   * @return {!Object}\n   */\n  json() {\n    return {\n      'entitlements': this.entitlements.json(),\n      'userData': this.userData.json(),\n      'purchaseData': this.purchaseData.json(),\n    };\n  }\n\n  /**\n   * Allows the receiving site to complete/acknowledge that it registered\n   * the subscription info. The typical action would be to create an\n   * account (or match an existing one) and associated the subscription with\n   * that account.\n   *\n   * SwG will display progress indicator until this method is called and\n   * upon receiving this call will show the confirmation to the user.\n   * The promise returned by this method will yield once the user closes\n   * the confirmation.\n   *\n   * @return {!Promise}\n   */\n  complete() {\n    return this.completeHandler_();\n  }\n}\n\n/**\n * Copyright 2018 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Character mapping from base64url to base64.\n * @const {!Object<string, string>}\n */\nconst base64UrlDecodeSubs = {'-': '+', '_': '/', '.': '='};\n\n\n/**\n * Converts a string which holds 8-bit code points, such as the result of atob,\n * into a Uint8Array with the corresponding bytes.\n * If you have a string of characters, you probably want to be using utf8Encode.\n * @param {string} str\n * @return {!Uint8Array}\n */\nfunction stringToBytes(str) {\n  const bytes = new Uint8Array(str.length);\n  for (let i = 0; i < str.length; i++) {\n    const charCode = str.charCodeAt(i);\n    assert(charCode <= 255, 'Characters must be in range [0,255]');\n    bytes[i] = charCode;\n  }\n  return bytes;\n}\n\n\n/**\n * Converts a 8-bit bytes array into a string\n * @param {!Uint8Array} bytes\n * @return {string}\n */\nfunction bytesToString(bytes) {\n  // Intentionally avoids String.fromCharCode.apply so we don't suffer a\n  // stack overflow. #10495, https://jsperf.com/bytesToString-2\n  const array = new Array(bytes.length);\n  for (let i = 0; i < bytes.length; i++) {\n    array[i] = String.fromCharCode(bytes[i]);\n  }\n  return array.join('');\n}\n\n\n/**\n * Interpret a byte array as a UTF-8 string.\n * @param {!BufferSource} bytes\n * @return {string}\n */\nfunction utf8DecodeSync(bytes) {\n  if (typeof TextDecoder !== 'undefined') {\n    return new TextDecoder('utf-8').decode(bytes);\n  }\n  const asciiString = bytesToString(new Uint8Array(bytes.buffer || bytes));\n  return decodeURIComponent(escape(asciiString));\n}\n\n\n/**\n * Turn a string into UTF-8 bytes.\n * @param {string} string\n * @return {!Uint8Array}\n */\nfunction utf8EncodeSync(string) {\n  if (typeof TextEncoder !== 'undefined') {\n    return new TextEncoder('utf-8').encode(string);\n  }\n  return stringToBytes(unescape(encodeURIComponent(string)));\n}\n\n\n/**\n * Converts a string which is in base64url encoding into a Uint8Array\n * containing the decoded value.\n * @param {string} str\n * @return {!Uint8Array}\n */\nfunction base64UrlDecodeToBytes(str) {\n  const encoded = atob(str.replace(/[-_.]/g, ch => base64UrlDecodeSubs[ch]));\n  return stringToBytes(encoded);\n}\n\n/**\n * Copyright 2018 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Copyright 2018 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Simple wrapper around JSON.parse that casts the return value\n * to JsonObject.\n * Create a new wrapper if an array return value is desired.\n * @param {*} json JSON string to parse\n * @return {?JsonObject|undefined} May be extend to parse arrays.\n */\nfunction parseJson(json) {\n  return /** @type {?JsonObject} */(JSON.parse(/** @type {string} */ (json)));\n}\n\n/**\n * Parses the given `json` string without throwing an exception if not valid.\n * Returns `undefined` if parsing fails.\n * Returns the `Object` corresponding to the JSON string when parsing succeeds.\n * @param {*} json JSON string to parse\n * @param {function(!Error)=} opt_onFailed Optional function that will be called\n *     with the error if parsing fails.\n * @return {?JsonObject|undefined} May be extend to parse arrays.\n */\nfunction tryParseJson(json, opt_onFailed) {\n  try {\n    return parseJson(json);\n  } catch (e) {\n    if (opt_onFailed) {\n      opt_onFailed(e);\n    }\n    return undefined;\n  }\n}\n\n/**\n * Copyright 2018 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n/**\n * Provides helper methods to decode and verify JWT tokens.\n */\nclass JwtHelper {\n  constructor() {\n  }\n\n  /**\n   * Decodes JWT token and returns its payload.\n   * @param {string} encodedToken\n   * @return {?JsonObject|undefined}\n   */\n  decode(encodedToken) {\n    return this.decodeInternal_(encodedToken).payload;\n  }\n\n  /**\n   * @param {string} encodedToken\n   * @return {!JwtTokenInternalDef}\n   * @private\n   */\n  decodeInternal_(encodedToken) {\n    // See https://jwt.io/introduction/\n    /**\n     * Throws error about invalid token.\n     */\n    function invalidToken() {\n      throw new Error(`Invalid token: \"${encodedToken}\"`);\n    }\n\n    // Encoded token has three parts: header.payload.sig\n    // Note! The padding is not allowed by JWT spec:\n    // http://self-issued.info/docs/draft-goland-json-web-token-00.html#rfc.section.5\n    const parts = encodedToken.split('.');\n    if (parts.length != 3) {\n      invalidToken();\n    }\n    const headerUtf8Bytes = base64UrlDecodeToBytes(parts[0]);\n    const payloadUtf8Bytes = base64UrlDecodeToBytes(parts[1]);\n    return {\n      header: tryParseJson(utf8DecodeSync(headerUtf8Bytes), invalidToken),\n      payload: tryParseJson(utf8DecodeSync(payloadUtf8Bytes), invalidToken),\n      verifiable: `${parts[0]}.${parts[1]}`,\n      sig: parts[2],\n    };\n  }\n}\n\n/**\n * Copyright 2018 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Copyright 2018 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n/** @enum {string} */\nconst SubscriptionFlows = {\n  SHOW_OFFERS: 'showOffers',\n  SHOW_SUBSCRIBE_OPTION: 'showSubscribeOption',\n  SHOW_ABBRV_OFFER: 'showAbbrvOffer',\n  SUBSCRIBE: 'subscribe',\n  COMPLETE_DEFERRED_ACCOUNT_CREATION: 'completeDeferredAccountCreation',\n  LINK_ACCOUNT: 'linkAccount',\n  SHOW_LOGIN_PROMPT: 'showLoginPrompt',\n  SHOW_LOGIN_NOTIFICATION: 'showLoginNotification',\n};\n\n\n/**\n * @enum {string}\n */\nconst WindowOpenMode = {\n  AUTO: 'auto',\n  REDIRECT: 'redirect',\n};\n\n\n/**\n * @return {!Config}\n */\nfunction defaultConfig() {\n  return {\n    windowOpenMode: WindowOpenMode.AUTO,\n  };\n}\n\n/**\n * Copyright 2018 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n/**\n * Cached a-tag to avoid memory allocation during URL parsing.\n * @type {HTMLAnchorElement}\n */\nlet a;\n\n\n/**\n * We cached all parsed URLs. As of now there are no use cases\n * of AMP docs that would ever parse an actual large number of URLs,\n * but we often parse the same one over and over again.\n * @type {Object<string, !LocationDef>}\n */\nlet cache;\n\n/**\n * Returns a Location-like object for the given URL. If it is relative,\n * the URL gets resolved.\n * Consider the returned object immutable. This is enforced during\n * testing by freezing the object.\n * @param {string} url\n * @param {boolean=} opt_nocache\n * @return {!LocationDef}\n */\nfunction parseUrl$1(url, opt_nocache) {\n  if (!a) {\n    a = /** @type {!HTMLAnchorElement} */ (self.document.createElement('a'));\n    cache = self.UrlCache || (self.UrlCache = Object.create(null));\n  }\n\n  const fromCache = cache[url];\n  if (fromCache) {\n    return fromCache;\n  }\n\n  const info = parseUrlWithA(a, url);\n\n  return cache[url] = info;\n}\n\n/**\n * Returns a Location-like object for the given URL. If it is relative,\n * the URL gets resolved.\n * @param {!HTMLAnchorElement} a\n * @param {string} url\n * @return {!LocationDef}\n */\nfunction parseUrlWithA(a, url) {\n  a.href = url;\n\n  // IE11 doesn't provide full URL components when parsing relative URLs.\n  // Assigning to itself again does the trick.\n  if (!a.protocol) {\n    a.href = a.href;\n  }\n\n  /** @type {!LocationDef} */\n  const info = {\n    href: a.href,\n    protocol: a.protocol,\n    host: a.host,\n    hostname: a.hostname,\n    port: a.port == '0' ? '' : a.port,\n    pathname: a.pathname,\n    search: a.search,\n    hash: a.hash,\n    origin: '', // Set below.\n  };\n\n  // Some IE11 specific polyfills.\n  // 1) IE11 strips out the leading '/' in the pathname.\n  if (info.pathname[0] !== '/') {\n    info.pathname = '/' + info.pathname;\n  }\n\n  // 2) For URLs with implicit ports, IE11 parses to default ports while\n  // other browsers leave the port field empty.\n  if ((info.protocol == 'http:' && info.port == 80) ||\n      (info.protocol == 'https:' && info.port == 443)) {\n    info.port = '';\n    info.host = info.hostname;\n  }\n\n  // For data URI a.origin is equal to the string 'null' which is not useful.\n  // We instead return the actual origin which is the full URL.\n  if (a.origin && a.origin != 'null') {\n    info.origin = a.origin;\n  } else if (info.protocol == 'data:' || !info.host) {\n    info.origin = info.href;\n  } else {\n    info.origin = info.protocol + '//' + info.host;\n  }\n  return info;\n}\n\n\n/**\n * Adds a parameter to a query string.\n * @param {string} url\n * @param {string} param\n * @param {string} value\n * @return {string}\n */\nfunction addQueryParam(url, param, value) {\n  const queryIndex = url.indexOf('?');\n  const fragmentIndex = url.indexOf('#');\n  let fragment = '';\n  if (fragmentIndex != -1) {\n    fragment = url.substring(fragmentIndex);\n    url = url.substring(0, fragmentIndex);\n  }\n  if (queryIndex == -1) {\n    url += '?';\n  } else if (queryIndex < url.length - 1) {\n    url += '&';\n  }\n  url += encodeURIComponent(param) + '=' + encodeURIComponent(value);\n  return url + fragment;\n}\n\n/**\n * Copyright 2018 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n/** @private @const {!Array<string>} */\nconst allowedMethods_ = ['GET', 'POST'];\n\n/** @private @enum {number} Allowed fetch responses. */\nconst allowedFetchTypes_ = {\n  document: 1,\n  text: 2,\n};\n\n\n/**\n * A class that polyfills Fetch API.\n */\nclass Xhr {\n\n  /**\n   * @param {!Window} win\n   */\n  constructor(win) {\n    /** @const {!Window} */\n    this.win = win;\n  }\n\n  /**\n   * We want to call `fetch_` unbound from any context since it could\n   * be either the native fetch or our polyfill.\n   *\n   * @param {string} input\n   * @param {!FetchInitDef} init\n   * @return {!Promise<!FetchResponse>|!Promise<!Response>}\n   * @private\n   */\n  fetch_(input, init) {\n    // TODO(avimehta): Should the requests go through when page is not visible?\n    assert(typeof input == 'string', 'Only URL supported: %s', input);\n    // In particular, Firefox does not tolerate `null` values for\n    // `credentials`.\n    const creds = init.credentials;\n    assert(\n        creds === undefined || creds == 'include' || creds == 'omit',\n        'Only credentials=include|omit support: %s', creds);\n    // Fallback to xhr polyfill since `fetch` api does not support\n    // responseType = 'document'. We do this so we don't have to do any parsing\n    // and document construction on the UI thread which would be expensive.\n    if (init.responseType == 'document') {\n      return fetchPolyfill(input, init);\n    }\n    return (this.win.fetch || fetchPolyfill).apply(null, arguments);\n  }\n\n  /**\n   * @param {string} input URL\n   * @param {?FetchInitDef} opt_init Fetch options object.\n   * @return {!Promise<!FetchResponse>}\n   */\n  fetch(input, opt_init) {\n    // TODO (avimehta): Figure out if CORS needs be handled the way AMP does it.\n    const init = setupInit(opt_init);\n    return this.fetch_(input, init).then(response => response, reason => {\n      const targetOrigin = parseUrl$1(input).origin;\n      throw new Error('XHR Failed fetching' +\n          ` (${targetOrigin}/...):`, reason && reason.message);\n    }).then(response => assertSuccess(response));\n  }\n}\n\n/**\n * Normalized method name by uppercasing.\n * @param {string|undefined} method\n * @return {string}\n * @private\n */\nfunction normalizeMethod_(method) {\n  if (method === undefined) {\n    return 'GET';\n  }\n  method = method.toUpperCase();\n\n  assert(\n      allowedMethods_.includes(method),\n      'Only one of %s is currently allowed. Got %s',\n      allowedMethods_.join(', '),\n      method\n  );\n\n  return method;\n}\n\n/**\n * Sets up and normalizes the FetchInitDef\n *\n * @param {?FetchInitDef=} opt_init Fetch options object.\n * @param {string=} opt_accept The HTTP Accept header value.\n * @return {!FetchInitDef}\n */\nfunction setupInit(opt_init, opt_accept) {\n  const init = opt_init || /** @type {FetchInitDef} */ ({});\n  init.method = normalizeMethod_(init.method);\n  init.headers = init.headers || {};\n  if (opt_accept) {\n    init.headers['Accept'] = opt_accept;\n  }\n  return init;\n}\n\n\n/**\n * A minimal polyfill of Fetch API. It only polyfills what we currently use.\n *\n * See https://developer.mozilla.org/en-US/docs/Web/API/GlobalFetch/fetch\n *\n * Notice that the \"fetch\" method itself is not exported as that would require\n * us to immediately support a much wide API.\n *\n * @param {string} input\n * @param {!FetchInitDef} init\n * @return {!Promise<!FetchResponse>}\n * @private Visible for testing\n */\nfunction fetchPolyfill(input, init) {\n  return new Promise(function(resolve, reject) {\n    const xhr = createXhrRequest(init.method || 'GET', input);\n\n    if (init.credentials == 'include') {\n      xhr.withCredentials = true;\n    }\n\n    if (init.responseType in allowedFetchTypes_) {\n      xhr.responseType = init.responseType;\n    }\n\n    if (init.headers) {\n      Object.keys(init.headers).forEach(function(header) {\n        xhr.setRequestHeader(header, init.headers[header]);\n      });\n    }\n\n    xhr.onreadystatechange = () => {\n      if (xhr.readyState < /* STATUS_RECEIVED */ 2) {\n        return;\n      }\n      if (xhr.status < 100 || xhr.status > 599) {\n        xhr.onreadystatechange = null;\n        reject(new Error(`Unknown HTTP status ${xhr.status}`));\n        return;\n      }\n\n      // TODO(dvoytenko): This is currently simplified: we will wait for the\n      // whole document loading to complete. This is fine for the use cases\n      // we have now, but may need to be reimplemented later.\n      if (xhr.readyState == /* COMPLETE */ 4) {\n        resolve(new FetchResponse(xhr));\n      }\n    };\n    xhr.onerror = () => {\n      reject(new Error('Network failure'));\n    };\n    xhr.onabort = () => {\n      reject(new Error('Request aborted'));\n    };\n\n    if (init.method == 'POST') {\n      xhr.send(init.body);\n    } else {\n      xhr.send();\n    }\n  });\n}\n\n/**\n * @param {string} method\n * @param {string} url\n * @return {!XMLHttpRequest}\n * @private\n */\nfunction createXhrRequest(method, url) {\n  const xhr = new XMLHttpRequest();\n  // TODO(avimehta): IE 8/9 don't support XHR (with CORS). Use XDR instead\n  // if we plan to support those browsers.\n  if ('withCredentials' in xhr) {\n    xhr.open(method, url, true);\n  } else {\n    throw new Error('CORS is not supported');\n  }\n  return xhr;\n}\n\n/**\n * If 415 or in the 5xx range.\n * @param {number} status\n */\nfunction isRetriable(status) {\n  return status == 415 || (status >= 500 && status < 600);\n}\n\n\n/**\n * Returns the response if successful or otherwise throws an error.\n * @param {!FetchResponse} response\n * @return {!Promise<!FetchResponse>}\n * @private Visible for testing\n */\nfunction assertSuccess(response) {\n  return new Promise(resolve => {\n    if (response.ok) {\n      return resolve(response);\n    }\n\n    const {status} = response;\n    const err = new Error(`HTTP error ${status}`);\n    err.retriable = isRetriable(status);\n    // TODO(@jridgewell, #9448): Callers who need the response should\n    // skip processing.\n    err.response = response;\n    throw err;\n  });\n}\n\n\n/**\n * Response object in the Fetch API.\n *\n * See https://developer.mozilla.org/en-US/docs/Web/API/GlobalFetch/fetch\n */\nclass FetchResponse {\n  /**\n   * @param {!XMLHttpRequest} xhr\n   */\n  constructor(xhr) {\n    /** @private @const {!XMLHttpRequest} */\n    this.xhr_ = xhr;\n\n    /** @const {number} */\n    this.status = this.xhr_.status;\n\n    /** @const {boolean} */\n    this.ok = this.status >= 200 && this.status < 300;\n\n    /** @const {!FetchResponseHeaders} */\n    this.headers = new FetchResponseHeaders(xhr);\n\n    /** @type {boolean} */\n    this.bodyUsed = false;\n\n    /** @type {?ReadableStream} */\n    this.body = null;\n  }\n\n  /**\n   * Create a copy of the response and return it.\n   * @return {!FetchResponse}\n   */\n  clone() {\n    assert(!this.bodyUsed, 'Body already used');\n    return new FetchResponse(this.xhr_);\n  }\n\n  /**\n   * Drains the response and returns the text.\n   * @return {!Promise<string>}\n   * @private\n   */\n  drainText_() {\n    assert(!this.bodyUsed, 'Body already used');\n    this.bodyUsed = true;\n    return Promise.resolve(this.xhr_.responseText);\n  }\n\n  /**\n   * Drains the response and returns a promise that resolves with the response\n   * text.\n   * @return {!Promise<string>}\n   */\n  text() {\n    return this.drainText_();\n  }\n\n  /**\n   * Drains the response and returns the JSON object.\n   * @return {!Promise<!JsonObject>}\n   */\n  json() {\n    return /** @type {!Promise<!JsonObject>} */ (\n        this.drainText_().then(parseJson));\n  }\n\n  /**\n   * Reads the xhr responseXML.\n   * @return {!Promise<!Document>}\n   * @private\n   */\n  document_() {\n    assert(!this.bodyUsed, 'Body already used');\n    this.bodyUsed = true;\n    assert(this.xhr_.responseXML,\n        'responseXML should exist. Make sure to return ' +\n        'Content-Type: text/html header.');\n    return /** @type {!Promise<!Document>} */ (\n        Promise.resolve(assert(this.xhr_.responseXML)));\n  }\n\n  /**\n   * Drains the response and returns a promise that resolves with the response\n   * ArrayBuffer.\n   * @return {!Promise<!ArrayBuffer>}\n   */\n  arrayBuffer() {\n    return /** @type {!Promise<!ArrayBuffer>} */ (\n        this.drainText_().then(utf8EncodeSync));\n  }\n}\n\n\n/**\n * Provides access to the response headers as defined in the Fetch API.\n * @private Visible for testing.\n */\nclass FetchResponseHeaders {\n  /**\n   * @param {!XMLHttpRequest} xhr\n   */\n  constructor(xhr) {\n    /** @private @const {!XMLHttpRequest} */\n    this.xhr_ = xhr;\n  }\n\n  /**\n   * @param {string} name\n   * @return {string}\n   */\n  get(name) {\n    return this.xhr_.getResponseHeader(name);\n  }\n\n  /**\n   * @param {string} name\n   * @return {boolean}\n   */\n  has(name) {\n    return this.xhr_.getResponseHeader(name) != null;\n  }\n}\n\n/**\n * Copyright 2018 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Have to put these in the map to avoid compiler optimization. Due to\n * optimization issues, this map only allows property-style keys. E.g. \"hr1\",\n * as opposed to \"1hr\".\n * @type {!Object<string, number>}\n * @package Visible for testing only.\n */\nconst CACHE_KEYS = {\n  'nocache': 1,\n  'hr1': 3600000,  // 1hr = 1000 * 60 * 60\n  'hr12': 43200000,  // 12hr = 1000 * 60 * 60 * 12\n};\n\n\n/**\n * @return {string}\n */\nfunction feOrigin() {\n  return parseUrl$1('https://news.google.com').origin;\n}\n\n\n/**\n * @param {string} url Relative URL, e.g. \"/service1\".\n * @return {string} The complete URL.\n */\nfunction serviceUrl(url) {\n  return 'https://news.google.com/swg/_/api/v1' + url;\n}\n\n\n/**\n * @param {string} url Relative URL, e.g. \"/offersiframe\".\n * @param {string=} prefix\n * @return {string} The complete URL.\n */\nfunction feUrl(url, prefix = '') {\n  return feCached('https://news.google.com' + prefix + '/swg/_/ui/v1' + url);\n}\n\n\n/**\n * @param {string} url FE URL.\n * @return {string} The complete URL including cache params.\n */\nfunction feCached(url) {\n  return addQueryParam(url, '_', cacheParam('hr1'));\n}\n\n\n/**\n * @param {!Object<string, ?>} args\n * @return {!Object<string, ?>}\n */\nfunction feArgs(args) {\n  return Object.assign(args, {\n    '_client': 'SwG 0.1.22.23',\n  });\n}\n\n\n/**\n * @param {string} cacheKey\n * @return {string}\n * @package Visible for testing only.\n */\nfunction cacheParam(cacheKey) {\n  let period = CACHE_KEYS[cacheKey];\n  if (period == null) {\n    period = 1;\n  }\n  if (period === 0) {\n    return '_';\n  }\n  const now = Date.now();\n  return String(period <= 1 ? now : Math.floor(now / period));\n}\n\n/**\n * Copyright 2018 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nconst PAY_REQUEST_ID = 'swg-pay';\n\n/**\n * @const {!Object<string, string>}\n * @package Visible for testing only.\n */\nconst PAY_ORIGIN = {\n  'PRODUCTION': 'https://pay.google.com',\n  'SANDBOX': 'https://pay.sandbox.google.com',\n};\n\n\n/** @return {string} */\nfunction payOrigin() {\n  return PAY_ORIGIN['PRODUCTION'];\n}\n\n/** @return {string} */\nfunction payUrl() {\n  return feCached(PAY_ORIGIN['PRODUCTION'] + '/gp/p/ui/pay');\n}\n\n/** @return {string} */\nfunction payDecryptUrl() {\n  return PAY_ORIGIN['PRODUCTION'] + '/gp/p/apis/buyflow/process';\n}\n\n\n/**\n * The flow to initiate payment process.\n */\nclass PayStartFlow {\n\n  /**\n   * @param {!../utils/preconnect.Preconnect} pre\n   */\n  static preconnect(pre) {\n    pre.prefetch(payUrl());\n    pre.prefetch(\n        'https://payments.google.com/payments/v4/js/integrator.js?ss=md');\n    pre.prefetch('https://clients2.google.com/gr/gr_full_2.0.6.js');\n    pre.preconnect('https://www.gstatic.com/');\n    pre.preconnect('https://fonts.googleapis.com/');\n    pre.preconnect('https://www.google.com/');\n  }\n\n  /**\n   * @param {!./deps.DepsDef} deps\n   * @param {string} sku\n   */\n  constructor(deps, sku) {\n    /** @private @const {!./deps.DepsDef} */\n    this.deps_ = deps;\n\n    /** @private @const {!web-activities/activity-ports.ActivityPorts} */\n    this.activityPorts_ = deps.activities();\n\n    /** @private @const {!../model/page-config.PageConfig} */\n    this.pageConfig_ = deps.pageConfig();\n\n    /** @private @const {!../components/dialog-manager.DialogManager} */\n    this.dialogManager_ = deps.dialogManager();\n\n    /** @private @const {string} */\n    this.sku_ = sku;\n  }\n\n  /**\n   * Starts the payments flow.\n   * @return {!Promise}\n   */\n  start() {\n    // Start/cancel events.\n    this.deps_.callbacks().triggerFlowStarted(SubscriptionFlows.SUBSCRIBE, {\n      'sku': this.sku_,\n    });\n\n    // TODO(dvoytenko): switch to gpay async client.\n    const forceRedirect =\n        this.deps_.config().windowOpenMode == WindowOpenMode.REDIRECT;\n    const opener = this.activityPorts_.open(\n        PAY_REQUEST_ID,\n        payUrl(),\n        forceRedirect ? '_top' : '_blank',\n        feArgs({\n          'apiVersion': 1,\n          'allowedPaymentMethods': ['CARD'],\n          'environment': 'PRODUCTION',\n          'playEnvironment': 'PROD',\n          'swg': {\n            'publicationId': this.pageConfig_.getPublicationId(),\n            'skuId': this.sku_,\n          },\n        }), {});\n    this.dialogManager_.popupOpened(opener && opener.targetWin);\n    return Promise.resolve();\n  }\n}\n\n\n/**\n * The flow for successful payments completion.\n */\nclass PayCompleteFlow {\n\n  /**\n   * @param {!./deps.DepsDef} deps\n   */\n  static configurePending(deps) {\n    deps.activities().onResult(PAY_REQUEST_ID, port => {\n      deps.dialogManager().popupClosed();\n      deps.entitlementsManager().blockNextNotification();\n      const flow = new PayCompleteFlow(deps);\n      const promise = validatePayResponse(\n          deps.win(), port, flow.complete.bind(flow));\n      deps.callbacks().triggerSubscribeResponse(promise);\n      return promise.then(response => {\n        flow.start(response);\n      }, reason => {\n        if (isCancelError(reason)) {\n          deps.callbacks().triggerFlowCanceled(SubscriptionFlows.SUBSCRIBE);\n        }\n        throw reason;\n      });\n    });\n  }\n\n  /**\n   * @param {!./deps.DepsDef} deps\n   */\n  constructor(deps) {\n    /** @private @const {!Window} */\n    this.win_ = deps.win();\n\n    /** @private @const {!./deps.DepsDef} */\n    this.deps_ = deps;\n\n    /** @private @const {!web-activities/activity-ports.ActivityPorts} */\n    this.activityPorts_ = deps.activities();\n\n    /** @private @const {!../components/dialog-manager.DialogManager} */\n    this.dialogManager_ = deps.dialogManager();\n\n    /** @private {?ActivityIframeView} */\n    this.activityIframeView_ = null;\n\n    /** @private {?SubscribeResponse} */\n    this.response_ = null;\n\n    /** @private {?Promise} */\n    this.readyPromise_ = null;\n  }\n\n  /**\n   * Starts the payments completion flow.\n   * @param {!SubscribeResponse} response\n   * @return {!Promise}\n   */\n  start(response) {\n    this.deps_.entitlementsManager().reset(true);\n    this.response_ = response;\n    this.activityIframeView_ = new ActivityIframeView(\n        this.win_,\n        this.activityPorts_,\n        feUrl('/payconfirmiframe'),\n        feArgs({\n          'publicationId': this.deps_.pageConfig().getPublicationId(),\n          'loginHint': response.userData && response.userData.email,\n        }),\n        /* shouldFadeBody */ true);\n    this.activityIframeView_.onMessage(data => {\n      if (data['entitlements']) {\n        this.deps_.entitlementsManager().pushNextEntitlements(\n            /** @type {string} */ (data['entitlements']));\n        return;\n      }\n    });\n    this.activityIframeView_.acceptResult().then(() => {\n      // The flow is complete.\n      this.dialogManager_.completeView(this.activityIframeView_);\n    });\n    this.readyPromise_ = this.dialogManager_.openView(this.activityIframeView_);\n    return this.readyPromise_;\n  }\n\n  /**\n   * @return {!Promise}\n   */\n  complete() {\n    this.deps_.entitlementsManager().unblockNextNotification();\n    this.readyPromise_.then(() => {\n      this.activityIframeView_.message({'complete': true});\n    });\n    return this.activityIframeView_.acceptResult().catch(() => {\n      // Ignore errors.\n    }).then(() => {\n      this.deps_.entitlementsManager().setToastShown(true);\n    });\n  }\n}\n\n\n/**\n * @param {!Window} win\n * @param {!web-activities/activity-ports.ActivityPort} port\n * @param {function():!Promise} completeHandler\n * @return {!Promise<!SubscribeResponse>}\n * @package Visible for testing only.\n */\nfunction validatePayResponse(win, port, completeHandler) {\n  // Do not require security immediately: it will be checked below.\n  return port.acceptResult().then(result => {\n    if (result.origin != payOrigin()) {\n      throw new Error('channel mismatch');\n    }\n    const data = /** @type {!Object} */ (result.data);\n    if (data['redirectEncryptedCallbackData']) {\n      // Data is supplied as an encrypted blob.\n      const xhr = new Xhr(win);\n      const url = payDecryptUrl();\n      const init = /** @type {!../utils/xhr.FetchInitDef} */ ({\n        method: 'post',\n        headers: {'Accept': 'text/plain, application/json'},\n        credentials: 'include',\n        body: data['redirectEncryptedCallbackData'],\n        mode: 'cors',\n      });\n      return xhr.fetch(url, init).then(response => response.json());\n    }\n    // Data is supplied directly: must be a verified and secure channel.\n    if (result.originVerified && result.secureChannel) {\n      return data;\n    }\n    throw new Error('channel mismatch');\n  }).then(data => parseSubscriptionResponse(data, completeHandler));\n}\n\n\n/**\n * @param {*} data\n * @param {function():!Promise} completeHandler\n * @return {!SubscribeResponse}\n */\nfunction parseSubscriptionResponse(data, completeHandler) {\n  let swgData = null;\n  let raw = null;\n  if (data) {\n    if (typeof data == 'string') {\n      raw = /** @type {string} */ (data);\n    } else {\n      // Assume it's a json object in the format:\n      // `{integratorClientCallbackData: \"...\"}` or `{swgCallbackData: \"...\"}`.\n      const json = /** @type {!Object} */ (data);\n      if ('swgCallbackData' in json) {\n        swgData = /** @type {!Object} */ (json['swgCallbackData']);\n      } else if ('integratorClientCallbackData' in json) {\n        raw = json['integratorClientCallbackData'];\n      }\n    }\n  }\n  if (raw && !swgData) {\n    raw = atob(raw);\n    if (raw) {\n      const parsed = parseJson(raw);\n      swgData = parsed['swgCallbackData'];\n    }\n  }\n  if (!swgData) {\n    throw new Error('unexpected payment response');\n  }\n  raw = JSON.stringify(/** @type {!JsonObject} */ (swgData));\n  return new SubscribeResponse(\n      raw,\n      parsePurchaseData(swgData),\n      parseUserData(swgData),\n      completeHandler);\n}\n\n\n/**\n * @param {!Object} swgData\n * @return {!PurchaseData}\n */\nfunction parsePurchaseData(swgData) {\n  const raw = swgData['purchaseData'];\n  const signature = swgData['purchaseDataSignature'];\n  return new PurchaseData(raw, signature);\n}\n\n\n/**\n * @param {!Object} swgData\n * @return {?UserData}\n * @package Visible for testing.\n */\nfunction parseUserData(swgData) {\n  const idToken = swgData['idToken'];\n  if (!idToken) {\n    return null;\n  }\n  const jwt = /** @type {!Object} */ (new JwtHelper().decode(idToken));\n  return new UserData(idToken, jwt);\n}\n\n/**\n * Copyright 2018 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n/**\n * The flow to initiate deferred account process.\n * See `Subscriptions.completeDeferredAccountCreation` API.\n */\nclass DeferredAccountFlow {\n\n  /**\n   * @param {!./deps.DepsDef} deps\n   * @param {?../api/deferred-account-creation.DeferredAccountCreationRequest} options\n   */\n  constructor(deps, options) {\n    /** @private @const {!./deps.DepsDef} */\n    this.deps_ = deps;\n\n    /** @private @const {!Window} */\n    this.win_ = deps.win();\n\n    /** @private @const {!web-activities/activity-ports.ActivityPorts} */\n    this.activityPorts_ = deps.activities();\n\n    /** @private @const {!../components/dialog-manager.DialogManager} */\n    this.dialogManager_ = deps.dialogManager();\n\n    /** @private {?ActivityIframeView} */\n    this.activityIframeView_ = null;\n\n    /** @private {?Promise} */\n    this.openPromise_ = null;\n\n    /** @type {!../api/deferred-account-creation.DeferredAccountCreationRequest} */\n    const defaultOptions = {\n      entitlements: null,\n      consent: true,\n    };\n    /** @private @const {!../api/deferred-account-creation.DeferredAccountCreationRequest} */\n    this.options_ = Object.assign(defaultOptions, options || {});\n  }\n\n  /**\n   * Starts the deferred account flow.\n   * @return {!Promise<!DeferredAccountCreationResponse>}\n   */\n  start() {\n    const entitlements = this.options_.entitlements;\n\n    // For now, entitlements are required to be present and have the Google\n    // token. This is strictly not required for the implementation. But it's\n    // preferrable API-wise at this time.\n    if (!entitlements || !entitlements.getEntitlementForSource('google')) {\n      throw new Error('No entitlements with \"google\" source');\n    }\n\n    // Start/cancel events.\n    this.deps_.callbacks().triggerFlowStarted(\n        SubscriptionFlows.COMPLETE_DEFERRED_ACCOUNT_CREATION);\n\n    this.activityIframeView_ = new ActivityIframeView(\n        this.win_,\n        this.activityPorts_,\n        feUrl('/recoveriframe'),\n        feArgs({\n          'publicationId': this.deps_.pageConfig().getPublicationId(),\n          'productId': this.deps_.pageConfig().getProductId(),\n          'entitlements': entitlements && entitlements.raw || null,\n          'consent': this.options_.consent,\n        }),\n        /* shouldFadeBody */ true);\n\n    this.openPromise_ = this.dialogManager_.openView(this.activityIframeView_);\n    return this.activityIframeView_.acceptResult().then(result => {\n      // The consent part is complete.\n      return this.handleConsentResponse_(/** @type {!Object} */ (result.data));\n    }, reason => {\n      if (isCancelError(reason)) {\n        this.deps_.callbacks().triggerFlowCanceled(\n            SubscriptionFlows.COMPLETE_DEFERRED_ACCOUNT_CREATION);\n      } else {\n        this.dialogManager_.completeView(this.activityIframeView_);\n      }\n      throw reason;\n    });\n  }\n\n  /**\n   * @param {!Object} data\n   * @return {!DeferredAccountCreationResponse}\n   * @private\n   */\n  handleConsentResponse_(data) {\n    this.deps_.entitlementsManager().blockNextNotification();\n\n    // Parse the response.\n    const entitlementsJwt = data['entitlements'];\n    const idToken = data['idToken'];\n    const entitlements = this.deps_.entitlementsManager()\n        .parseEntitlements({'signedEntitlements': entitlementsJwt});\n    const userData = new UserData(\n        idToken,\n        /** @type {!Object} */ (new JwtHelper().decode(idToken)));\n    const purchaseData = new PurchaseData(\n        data['purchaseData'],\n        data['purchaseDataSignature']);\n\n    // For now, we'll use the `PayCompleteFlow` as a \"creating account\" flow.\n    // But this can be eventually implemented by the same iframe.\n    const creatingFlow = new PayCompleteFlow(this.deps_);\n    const completeHandler = creatingFlow.complete.bind(creatingFlow);\n\n    const response = new DeferredAccountCreationResponse(\n        entitlements,\n        userData,\n        purchaseData,\n        completeHandler);\n\n    // Start the \"sync\" flow.\n    creatingFlow.start(new SubscribeResponse(\n        '',  // raw field doesn't matter in this case\n        purchaseData,\n        userData,\n        () => Promise.resolve()  // completeHandler doesn't matter in this case\n    ));\n    return response;\n  }\n}\n\n/**\n * Copyright 2018 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nconst CSS$1 = \"body{padding:0;margin:0}swg-container,swg-loading,swg-loading-animate,swg-loading-image{display:block}swg-loading-container{width:100%!important;display:-webkit-box!important;display:-ms-flexbox!important;display:flex!important;-webkit-box-align:center!important;-ms-flex-align:center!important;align-items:center!important;-webkit-box-pack:center!important;-ms-flex-pack:center!important;justify-content:center!important;min-height:148px!important;height:100%!important;bottom:0!important;margin-top:5px!important;z-index:2147483647!important}@media (min-height:630px), (min-width:630px){swg-loading-container{width:560px!important;margin-left:35px!important;border-top-left-radius:8px!important;border-top-right-radius:8px!important;background-color:#fff!important;box-shadow:0 1px 1px rgba(60,64,67,.3),0 1px 4px 1px rgba(60,64,67,.15)!important}}swg-loading{z-index:2147483647!important;width:36px;height:36px;overflow:hidden;-webkit-animation:mspin-rotate 1568.63ms infinite linear;animation:mspin-rotate 1568.63ms infinite linear}swg-loading-animate{-webkit-animation:mspin-revrot 5332ms infinite steps(4);animation:mspin-revrot 5332ms infinite steps(4)}swg-loading-image{background-image:url('data:image/svg+xml;charset=utf-8;base64,');background-size:100%;width:11664px;height:36px;-webkit-animation:swg-loading-film 5332ms infinite steps(324);animation:swg-loading-film 5332ms infinite steps(324)}@-webkit-keyframes swg-loading-film{0%{-webkit-transform:translateX(0);transform:translateX(0)}to{-webkit-transform:translateX(-11664px);transform:translateX(-11664px)}}@keyframes swg-loading-film{0%{-webkit-transform:translateX(0);transform:translateX(0)}to{-webkit-transform:translateX(-11664px);transform:translateX(-11664px)}}@-webkit-keyframes mspin-rotate{0%{-webkit-transform:rotate(0deg);transform:rotate(0deg)}to{-webkit-transform:rotate(360deg);transform:rotate(360deg)}}@keyframes mspin-rotate{0%{-webkit-transform:rotate(0deg);transform:rotate(0deg)}to{-webkit-transform:rotate(360deg);transform:rotate(360deg)}}@-webkit-keyframes mspin-revrot{0%{-webkit-transform:rotate(0deg);transform:rotate(0deg)}to{-webkit-transform:rotate(-360deg);transform:rotate(-360deg)}}@keyframes mspin-revrot{0%{-webkit-transform:rotate(0deg);transform:rotate(0deg)}to{-webkit-transform:rotate(-360deg);transform:rotate(-360deg)}}\\n/*# sourceURL=/./src/ui/ui.css*/\";\n\n/**\n * Copyright 2018 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Returns a promise which is resolved after the given duration of animation\n * @param {!Element} el - Element to be observed.\n * @param {!Object<string, string|number>} props - properties to be animated.\n * @param {number} durationMillis - duration of animation.\n * @param {string} curve - transition function for the animation.\n * @return {!Promise} Promise which resolves once the animation is done playing.\n */\nfunction transition(el, props, durationMillis, curve) {\n  const win = el.ownerDocument.defaultView;\n  const previousTransitionValue = el.style.transition || '';\n  return new Promise(resolve => {\n    win.setTimeout(() => {\n      win.setTimeout(resolve, durationMillis);\n      const tr = `${durationMillis}ms ${curve}`;\n      setImportantStyles(el, Object.assign({\n        'transition': `transform ${tr}, opacity ${tr}`,\n      }, props));\n    });\n  }).then(() => {\n    setImportantStyles(el, {\n      'transition': previousTransitionValue,\n    });\n  });\n}\n\n/**\n * Copyright 2018 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nclass Graypane {\n\n  /**\n   * @param {!../model/doc.Doc} doc\n   * @param {number} zIndex\n   */\n  constructor(doc, zIndex) {\n    /** @private @const {!../model/doc.Doc} */\n    this.doc_ = doc;\n\n    /** @private @const {!Element} */\n    this.fadeBackground_ = this.doc_.getWin().document.createElement(\n        'swg-popup-background');\n    setImportantStyles(this.fadeBackground_, {\n      'z-index': zIndex,\n      'display': 'none',\n      'position': 'fixed',\n      'top': 0,\n      'right': 0,\n      'bottom': 0,\n      'left': 0,\n      'background-color': 'rgba(32, 33, 36, .6)',\n    });\n  }\n\n  /**\n   * @return {!Element}\n   */\n  getElement() {\n    return this.fadeBackground_;\n  }\n\n  /**\n   * @return {boolean}\n   */\n  isAttached() {\n    return !!this.fadeBackground_.parentNode;\n  }\n\n  /**\n   * Attaches the graypane to the document.\n   */\n  attach() {\n    this.doc_.getBody().appendChild(this.fadeBackground_);\n  }\n\n  /**\n   * Detaches the graypane to the document.\n   */\n  destroy() {\n    this.doc_.getBody().removeChild(this.fadeBackground_);\n  }\n\n  /**\n   * Shows the graypane.\n   * @param {boolean=} animated\n   * @return {!Promise|undefined}\n   */\n  show(animated = true) {\n    setImportantStyles(this.fadeBackground_, {\n      'display': 'block',\n      'opacity': animated ? 0 : 1,\n    });\n    if (animated) {\n      return transition(this.fadeBackground_, {\n        'opacity': 1,\n      }, 300, 'ease-out');\n    }\n  }\n\n  /**\n   * Hides the graypane.\n   * @param {boolean=} animated\n   * @return {!Promise|undefined}\n   */\n  hide(animated = true) {\n    if (animated) {\n      return transition(this.fadeBackground_, {\n        'opacity': 0,\n      }, 300, 'ease-out').then(() => {\n        setImportantStyles(this.fadeBackground_, {'display': 'none'});\n      });\n    }\n    setImportantStyles(this.fadeBackground_, {'display': 'none'});\n  }\n}\n\n/**\n * Copyright 2018 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n/**\n * Loading indicator class. Builds the loading indicator view to be injected in\n * parent element <iframe class=\"swg-dialog\"> element. Provides methods to\n * show/hide loading indicator.\n */\nclass LoadingView {\n\n  /**\n   * @param {!Document} doc\n   */\n  constructor(doc) {\n\n    /** @private @const {!Document} */\n    this.doc_ = doc;\n\n    /** @private @const {!Element} */\n    this.loadingContainer_ =\n        createElement(this.doc_, 'swg-loading-container', {});\n\n    /** @private @const {!Element} */\n    this.loading_ = createElement(this.doc_, 'swg-loading', {});\n    this.loadingContainer_.appendChild(this.loading_);\n\n    this.loadingContainer_.style.setProperty('display', 'none', 'important');\n\n    // Build the animated loading indicator.\n    this.buildLoadingIndicator_();\n  }\n\n  /**\n   * Gets the populated loading container.\n   * @return {!Element}\n   */\n  getElement() {\n    return this.loadingContainer_;\n  }\n\n  /**\n   * Shows the loading indicator within the container element.\n   */\n  show() {\n    this.loadingContainer_.style.removeProperty('display');\n  }\n\n  /**\n   * Hides the loading indicator within the container element.\n   */\n  hide() {\n    this.loadingContainer_.style.setProperty('display', 'none', 'important');\n  }\n\n  /**\n   * Populates the loading indivicator. The populated element\n   * can be added in any view, when required.\n   * @private\n   */\n  buildLoadingIndicator_() {\n    const loadingContainer = this.loading_;\n\n    const loadingIndicatorTopContainer =\n        createElement(this.doc_, 'swg-loading-animate', {});\n    loadingContainer.appendChild(loadingIndicatorTopContainer);\n\n    const loadingIndicatorChildContainer =\n        createElement(this.doc_, 'swg-loading-image', {});\n    loadingIndicatorTopContainer.appendChild(loadingIndicatorChildContainer);\n  }\n}\n\n/**\n * Copyright 2018 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** @const {!Object<string|number>} */\nconst friendlyIframeAttributes = {\n  'frameborder': 0,\n  'scrolling': 'no',\n  'src': 'about:blank',\n};\n\n/**\n * The class for building friendly iframe.\n */\nclass FriendlyIframe {\n\n  /**\n   * @param {!Document} doc\n   * @param {!Object<string, string|number>=} attrs\n   */\n  constructor(doc, attrs = {}) {\n\n    const mergedAttrs = Object.assign({}, friendlyIframeAttributes, attrs);\n\n    /** @private @const {!HTMLIFrameElement} */\n    this.iframe_ =\n        /** @type {!HTMLIFrameElement} */ (\n            createElement(doc, 'iframe', mergedAttrs));\n\n    // Ensure that the new iframe does not inherit any CSS styles.\n    resetAllStyles(this.iframe_);\n\n    /** @private @const {!Promise} */\n    this.ready_ = new Promise(resolve => {\n      this.iframe_.onload = resolve;\n    });\n  }\n\n  /**\n   * When promise is resolved.\n   * @return {!Promise}\n   */\n  whenReady() {\n    return this.ready_;\n  }\n\n  /**\n   * Gets the iframe element.\n   * @return {!HTMLIFrameElement}\n   */\n  getElement() {\n    return this.iframe_;\n  }\n\n  /**\n   * Gets the document object of the iframe element.\n   * @return {!Document}\n   */\n  getDocument() {\n    const doc = this.getElement().contentDocument ||\n        (this.getElement().contentWindow &&\n        this.getElement().contentWindow.document);\n\n    if (!doc) {\n      throw new Error('not loaded');\n    }\n    return doc;\n  }\n\n  /**\n   * Gets the body of the iframe.\n   * @return {!Element}\n   */\n  getBody() {\n    return /** @type {!Element} */ (this.getDocument().body);\n  }\n\n  /**\n   * Whether the iframe is connected.\n   * @return {boolean}\n   */\n  isConnected() {\n    if (!this.getElement().ownerDocument) {\n      return false;\n    }\n    return this.getElement().ownerDocument.contains(this.iframe_);\n  }\n}\n\n/**\n * Copyright 2018 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nconst Z_INDEX = 2147483647;\n\n/**\n * Default iframe important styles.\n * Note: The iframe responsiveness media query style is injected in the\n * publisher's page since style attribute can not include media query.\n * @const {!Object<string, string|number>}\n */\nconst rootElementImportantStyles = {\n  'min-height': '50px',\n  'border': 'none',\n  'display': 'block',\n  'position': 'fixed',\n  'z-index': Z_INDEX,\n  'box-sizing': 'border-box',\n};\n\n/**\n * Reset view styles.\n * @const {!Object<string, string|number>}\n */\nconst resetViewStyles = {\n  'position': 'absolute',\n  'top': '0',\n  'left': '0',\n  'right': '0',\n  'bottom': '0',\n  'opacity': 0,\n  /* These lines are a work around to this issue in iOS:     */\n  /* https://bugs.webkit.org/show_bug.cgi?id=155198          */\n  'height': 0,\n  'max-height': '100%',\n  'max-width': '100%',\n  'min-height': '100%',\n  'min-width': '100%',\n  'width': 0,\n};\n\n/**\n * Position of the dialog.\n * @const @enum {string}\n */\nconst PositionAt = {\n  BOTTOM: 'BOTTOM',\n  TOP: 'TOP',\n  FLOAT: 'FLOAT',\n  FULL: 'FULL',\n};\n\n\n/**\n * The class for the top level dialog.\n * @final\n */\nclass Dialog {\n\n  /**\n   * Create a dialog for the provided doc.\n   * @param {!../model/doc.Doc} doc\n   * @param {!Object<string, string|number>=} importantStyles\n   * @param {!Object<string, string|number>=} styles\n   */\n  constructor(doc, importantStyles = {}, styles = {}) {\n    /** @private @const {!../model/doc.Doc} */\n    this.doc_ = doc;\n\n    /** @private @const {!FriendlyIframe} */\n    this.iframe_ = new FriendlyIframe(\n        doc.getWin().document, {'class': 'swg-dialog'});\n\n    /** @private @const {!Graypane} */\n    this.graypane_ = new Graypane(doc, Z_INDEX - 1);\n\n    const modifiedImportantStyles =\n        Object.assign({}, rootElementImportantStyles, importantStyles);\n    setImportantStyles(\n        this.iframe_.getElement(), modifiedImportantStyles);\n\n    setStyles(this.iframe_.getElement(), styles);\n\n    /** @private {LoadingView} */\n    this.loadingView_ = null;\n\n    /** @private {?Element} */\n    this.container_ = null;  // Depends on constructed document inside iframe.\n\n    /** @private {?./view.View} */\n    this.view_ = null;\n\n    /** @private {?Promise} */\n    this.animating_ = null;\n\n    /** @private {boolean} */\n    this.hidden_ = false;\n  }\n\n  /**\n   * Opens the dialog and builds the iframe container.\n   * @param {boolean=} hidden\n   * @return {!Promise<!Dialog>}\n   */\n  open(hidden = false) {\n    const iframe = this.iframe_;\n    if (iframe.isConnected()) {\n      throw new Error('already opened');\n    }\n\n    // Attach.\n    this.doc_.getBody().appendChild(iframe.getElement());  // Fires onload.\n    this.graypane_.attach();\n\n    if (hidden) {\n      setImportantStyles(iframe.getElement(), {\n        'visibility': 'hidden',\n        'opacity': 0,\n      });\n      this.hidden_ = hidden;\n    } else {\n      this.show_();\n    }\n\n    return iframe.whenReady().then(() => {\n      this.buildIframe_();\n      return this;\n    });\n  }\n\n  /**\n   * Build the iframe with the styling after iframe is loaded.\n   * @private\n   */\n  buildIframe_() {\n    const iframe = this.iframe_;\n    const iframeBody = iframe.getBody();\n    const iframeDoc = /** @type {!HTMLDocument} */ (this.iframe_.getDocument());\n\n    // Inject Google fonts in <HEAD> section of the iframe.\n    injectStyleSheet(iframeDoc, CSS$1);\n\n    // Add Loading indicator.\n    this.loadingView_ = new LoadingView(iframeDoc);\n    iframeBody.appendChild(this.loadingView_.getElement());\n\n    // Container for all dynamic content, including 3P iframe.\n    this.container_ = createElement(iframeDoc, 'swg-container', {});\n    iframeBody.appendChild(this.container_);\n    this.setPosition_();\n  }\n\n  /**\n   * Closes the dialog.\n   * @param {boolean=} animated\n   * @return {!Promise}\n   */\n  close(animated = true) {\n    let animating;\n    if (animated) {\n      animating = this.animate_(() => {\n        this.graypane_.hide(/* animate */ true);\n        return transition(this.getElement(), {\n          'transform': 'translateY(100%)',\n        }, 300, 'ease-out');\n      });\n    } else {\n      animating = Promise.resolve();\n    }\n    return animating.then(() => {\n      this.doc_.getBody().removeChild(this.iframe_.getElement());\n      this.removePaddingToHtml_();\n      this.graypane_.destroy();\n    });\n  }\n\n  /**\n   * Gets the container within the dialog.\n   * @return {!Element}\n   */\n  getContainer() {\n    if (!this.container_) {\n      throw new Error('not opened yet');\n    }\n    return this.container_;\n  }\n\n  /**\n   * Gets the attached iframe instance.\n   * @return {!FriendlyIframe}\n   */\n  getIframe() {\n    return this.iframe_;\n  }\n\n  /**\n   * Gets the Iframe element.\n   * @return {!HTMLIFrameElement}\n   */\n  getElement() {\n    return this.iframe_.getElement();\n  }\n\n  /**\n   * Whether to display loading indicator.\n   * @param {boolean} isLoading\n   */\n  setLoading(isLoading) {\n    if (isLoading) {\n      this.loadingView_.show();\n    } else {\n      this.loadingView_.hide();\n    }\n  }\n\n  /** @return {?./view.View} */\n  getCurrentView() {\n    return this.view_;\n  }\n\n  /**\n   * Opens the given view and removes existing view from the DOM if any.\n   * @param {!./view.View} view\n   * @return {!Promise}\n   */\n  openView(view) {\n    if (this.view_) {\n      // TODO(dparikh): Maybe I need to keep it until the new one is ready.\n      removeChildren(this.getContainer());\n    }\n    this.view_ = view;\n\n    setImportantStyles(view.getElement(), resetViewStyles);\n    this.setLoading(true);\n    this.getContainer().appendChild(view.getElement());\n\n    // If the current view should fade the parent document.\n    if (view.shouldFadeBody() && !this.hidden_) {\n      this.graypane_.show(/* animate */ true);\n    }\n\n    return view.init(this).then(() => {\n      setImportantStyles(view.getElement(), {\n        'opacity': 1,\n      });\n      if (this.hidden_) {\n        if (view.shouldFadeBody()) {\n          this.graypane_.show(/* animated */ true);\n        }\n        this.show_();\n      }\n      this.setLoading(false);\n    });\n  }\n\n  /**\n   * Show the iframe\n   * @private\n   */\n  show_() {\n    this.animate_(() => {\n      setImportantStyles(this.getElement(), {\n        'transform': 'translateY(100%)',\n        'opactiy': 1,\n        'visibility': 'visible',\n      });\n      return transition(this.getElement(), {\n        'transform': 'translateY(0)',\n        'opacity': 1,\n        'visibility': 'visible',\n      }, 300, 'ease-out');\n    });\n    this.hidden_ = false;\n  }\n\n  /**\n   * Resizes the dialog container.\n   * @param {!./view.View} view\n   * @param {number} height\n   * @param {boolean=} animated\n   * @return {?Promise}\n   */\n  resizeView(view, height, animated = true) {\n    if (this.view_ != view) {\n      return null;\n    }\n    const newHeight = this.getMaxAllowedHeight_(height);\n\n    let animating;\n    if (animated) {\n      const oldHeight = this.getElement().offsetHeight;\n      if (newHeight >= oldHeight) {\n        // Expand.\n        animating = this.animate_(() => {\n          setImportantStyles(this.getElement(), {\n            'height': `${newHeight}px`,\n            'transform': `translateY(${newHeight - oldHeight}px)`,\n          });\n          return transition(this.getElement(), {\n            'transform': 'translateY(0)',\n          }, 300, 'ease-out');\n        });\n      } else {\n        // Collapse.\n        animating = this.animate_(() => {\n          return transition(this.getElement(), {\n            'transform': `translateY(${oldHeight - newHeight}px)`,\n          }, 300, 'ease-out').then(() => {\n            setImportantStyles(this.getElement(), {\n              'height': `${newHeight}px`,\n              'transform': 'translateY(0)',\n            });\n          });\n        });\n      }\n    } else {\n      setImportantStyles(this.getElement(), {\n        'height': `${newHeight}px`,\n      });\n      animating = Promise.resolve();\n    }\n    return animating.then(() => {\n      this.updatePaddingToHtml_(height);\n      view.resized();\n    });\n  }\n\n  /**\n   * @param {function():!Promise} callback\n   * @return {!Promise}\n   * @private\n   */\n  animate_(callback) {\n    const wait = this.animating_ || Promise.resolve();\n    return this.animating_ = wait.then(() => {\n      return callback();\n    }, () => {\n      // Ignore errors to make sure animations don't get stuck.\n    }).then(() => {\n      this.animating_ = null;\n    });\n  }\n\n  /**\n   * Returns maximum allowed height for current viewport.\n   * @param {number} height\n   * @return {number}\n   * @private\n   */\n  getMaxAllowedHeight_(height) {\n    return Math.min(height, this.doc_.getWin()./*OK*/innerHeight * 0.9);\n  }\n\n  /**\n   * Gets the element's height.\n   * @return {number}\n   * @private\n   */\n  getHeight_() {\n    return this.getElement().offsetHeight;\n  }\n\n  /**\n   * Sets the position of the dialog. Currently 'BOTTOM' is set by default.\n   */\n  setPosition_() {\n    setImportantStyles(this.getElement(), this.getPositionStyle_());\n  }\n\n  /**\n   * Add the padding to the containing page so as to not hide the content\n   * behind the popup, if rendered at the bottom.\n   * @param {number} newHeight\n   * @private\n   */\n  updatePaddingToHtml_(newHeight) {\n    if (this.inferPosition_() == PositionAt.BOTTOM) {\n      const bottomPadding = newHeight + 20;  // Add some extra padding.\n      const htmlElement = this.doc_.getRootElement();\n      setImportantStyles(htmlElement, {\n        'padding-bottom': `${bottomPadding}px`,\n      });\n    }\n  }\n\n  /**\n   * Removes previouly added bottom padding from the document.\n   * @private\n   */\n  removePaddingToHtml_() {\n    this.doc_.getRootElement().style.removeProperty('padding-bottom');\n  }\n\n\n  /**\n   * Calculates the position of the dialog. Currently dialog is positioned at\n   * the bottom only. This could change in future to adjust the dialog position\n   * based on the screen size.\n   * @return {string}\n   * @private\n   */\n  inferPosition_() {\n    return PositionAt.BOTTOM;\n  }\n\n  /**\n   * Returns the styles required to postion the dialog.\n   * @return {!Object<string, string|number>}\n   * @private\n   */\n  getPositionStyle_() {\n    const dialogPosition = this.inferPosition_();\n    switch (dialogPosition) {\n      case PositionAt.BOTTOM:\n        return {'bottom': 0};\n      case PositionAt.TOP:\n        return {'top': 0};\n      case PositionAt.FLOAT:\n        return {\n          'position': 'fixed',\n          'top': '50%',\n          'left': '50%',\n          'transform': 'translate(-50%, -50%)',\n        };\n      case PositionAt.FULL:\n        return {\n          'position': 'fixed',\n          'height': '100%',\n          'top': 0,\n          'bottom': 0,\n        };\n      default:\n        return {'bottom': 0};\n    }\n  }\n}\n\n/**\n * Copyright 2018 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nconst POPUP_Z_INDEX = 2147483647;\n\n\n/**\n * The class for the top level dialog.\n * @final\n */\nclass DialogManager {\n\n  /**\n   * @param {!../model/doc.Doc} doc\n   */\n  constructor(doc) {\n    /** @private @const {!../model/doc.Doc} */\n    this.doc_ = doc;\n\n    /** @private {?Dialog} */\n    this.dialog_ = null;\n\n    /** @private {?Promise<!Dialog>} */\n    this.openPromise_ = null;\n\n    /** @private @const {!Graypane} */\n    this.popupGraypane_ = new Graypane(doc, POPUP_Z_INDEX);\n\n    /** @private {?Window} */\n    this.popupWin_ = null;\n\n    this.popupGraypane_.getElement().addEventListener('click', () => {\n      if (this.popupWin_) {\n        try {\n          this.popupWin_.focus();\n        } catch (e) {\n          // Ignore error.\n        }\n      }\n    });\n  }\n\n  /**\n   * @param {boolean=} hidden\n   * @return {!Promise<!Dialog>}\n   */\n  openDialog(hidden = false) {\n    if (!this.openPromise_) {\n      this.dialog_ = new Dialog(this.doc_);\n      this.openPromise_ = this.dialog_.open(hidden);\n    }\n    return this.openPromise_;\n  }\n\n  /**\n   * @param {!./view.View} view\n   * @param {boolean=} hidden\n   * @return {!Promise}\n   */\n  openView(view, hidden = false) {\n    view.whenComplete().catch(reason => {\n      if (isCancelError(reason)) {\n        this.completeView(view);\n      }\n      throw (reason);\n    });\n    return this.openDialog(hidden).then(dialog => {\n      return dialog.openView(view);\n    });\n  }\n\n  /**\n   * @param {?./view.View} view\n   */\n  completeView(view) {\n    // Give a small amount of time for another view to take over the dialog.\n    setTimeout(() => {\n      if (this.dialog_ && this.dialog_.getCurrentView() == view) {\n        this.close_();\n      }\n    }, 100);\n  }\n\n  /**\n   */\n  completeAll() {\n    if (this.dialog_) {\n      this.close_();\n    }\n    if (this.popupGraypane_.isAttached()) {\n      this.popupGraypane_.destroy();\n    }\n  }\n\n  /** @private */\n  close_() {\n    this.dialog_.close();\n    this.dialog_ = null;\n    this.openPromise_ = null;\n  }\n\n  /**\n   * @param {?Window|undefined} targetWin\n   */\n  popupOpened(targetWin) {\n    this.popupWin_ = targetWin || null;\n    if (!this.popupGraypane_.isAttached()) {\n      this.popupGraypane_.attach();\n    }\n    this.popupGraypane_.show();\n  }\n\n  /**\n   */\n  popupClosed() {\n    this.popupWin_ = null;\n    try {\n      this.popupGraypane_.hide();\n    } catch (e) {\n      // Ignore.\n    }\n  }\n}\n\n/**\n * Copyright 2018 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n/**\n * @param {!Document} doc\n * @return {string}\n */\nfunction getReadyState(doc) {\n  return /** @type {string} */ (doc['readyState']);\n}\n\n\n/**\n * Whether the document is ready.\n * @param {!Document} doc\n * @return {boolean}\n */\nfunction isDocumentReady(doc) {\n  const readyState = getReadyState(doc);\n  return readyState != 'loading' && readyState != 'uninitialized';\n}\n\n/**\n * Calls the callback when document is ready.\n * @param {!Document} doc\n * @param {function(!Document)} callback\n */\nfunction onDocumentReady(doc, callback) {\n  onDocumentState(doc, isDocumentReady, callback);\n}\n\n/**\n * Calls the callback when document's state satisfies the stateFn.\n * @param {!Document} doc\n * @param {function(!Document):boolean} stateFn\n * @param {function(!Document)} callback\n */\nfunction onDocumentState(doc, stateFn, callback) {\n  let ready = stateFn(doc);\n  if (ready) {\n    callback(doc);\n  } else {\n    const readyListener = () => {\n      if (stateFn(doc)) {\n        if (!ready) {\n          ready = true;\n          callback(doc);\n        }\n        doc.removeEventListener('readystatechange', readyListener);\n      }\n    };\n    doc.addEventListener('readystatechange', readyListener);\n  }\n}\n\n/**\n * Returns a promise that is resolved when document is ready.\n * @param {!Document} doc\n * @return {!Promise<!Document>}\n */\nfunction whenDocumentReady(doc) {\n  return new Promise(resolve => {\n    onDocumentReady(doc, resolve);\n  });\n}\n\n/**\n * Copyright 2018 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n/** @implements {Doc} */\nclass GlobalDoc {\n\n  /**\n   * @param {!Window|!Document} winOrDoc\n   */\n  constructor(winOrDoc) {\n    const isWin = !!winOrDoc.document;\n    /** @private @const {!Window} */\n    this.win_ = isWin ?\n        /** @type {!Window} */ (winOrDoc) :\n        /** @type {!Window} */ (\n            (/** @type {!Document} */ (winOrDoc)).defaultView);\n    /** @private @const {!Document} */\n    this.doc_ = isWin ?\n        /** @type {!Window} */ (winOrDoc).document :\n        /** @type {!Document} */ (winOrDoc);\n  }\n\n  /** @override */\n  getWin() {\n    return this.win_;\n  }\n\n  /** @override */\n  getRootNode() {\n    return this.doc_;\n  }\n\n  /** @override */\n  getRootElement() {\n    return this.doc_.documentElement;\n  }\n\n  /** @override */\n  getHead() {\n    // `document.head` always has a chance to be parsed, at least partially.\n    return /** @type {!Element} */ (this.doc_.head);\n  }\n\n  /** @override */\n  getBody() {\n    return this.doc_.body;\n  }\n\n  /** @override */\n  isReady() {\n    return isDocumentReady(this.doc_);\n  }\n\n  /** @override */\n  whenReady() {\n    return whenDocumentReady(this.doc_);\n  }\n}\n\n\n/**\n * @param {!Document|!Window|!Doc} input\n * @return {!Doc}\n */\nfunction resolveDoc(input) {\n  // Is it a `Document`\n  if ((/** @type {!Document} */ (input)).nodeType === /* DOCUMENT */ 9) {\n    return new GlobalDoc(/** @type {!Document} */ (input));\n  }\n  // Is it a `Window`?\n  if ((/** @type {!Window} */ (input)).document) {\n    return new GlobalDoc(/** @type {!Window} */ (input));\n  }\n  return /** @type {!Doc} */ (input);\n}\n\n/**\n * Copyright 2018 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** @const {!Object<string, string|number>} */\nconst toastImportantStyles = {\n  'height': 0,\n};\n\n/** @const {!Object<string, string>} */\nconst iframeAttributes$1 = {\n  'frameborder': '0',\n  'scrolling': 'no',\n  'class': 'swg-toast',\n};\n\n/**\n * The class Notification toast.\n */\nclass Toast {\n\n  /**\n   * @param {!../runtime/deps.DepsDef} deps\n   * @param {string} src\n   * @param {!Object<string, ?>} args\n   */\n  constructor(deps, src, args) {\n\n    /** @private @const {!../model/doc.Doc} */\n    this.doc_ = deps.doc();\n\n    /** @private @const {!web-activities/activity-ports.ActivityPorts} */\n    this.activityPorts_ = deps.activities();\n\n    /** @private @const {string} */\n    this.src_ = src;\n\n    /** @private @const {!Object<string, ?>} */\n    this.args_ = args;\n\n    /** @private {?Promise} */\n    this.animating_ = null;\n\n    /** @private @const {!HTMLIFrameElement} */\n    this.iframe_ =\n        /** @type {!HTMLIFrameElement} */ (\n            createElement(\n                this.doc_.getWin().document,\n                'iframe',\n                iframeAttributes$1));\n\n    setImportantStyles(this.iframe_, toastImportantStyles);\n\n    /** @private @const {!Promise} */\n    this.ready_ = new Promise(resolve => {\n      this.iframe_.onload = resolve;\n    });\n  }\n\n  /**\n   * Returns the iframe element.\n   * @return {!HTMLIFrameElement}\n   */\n  getElement() {\n    return this.iframe_;\n  }\n\n  /**\n   * Opens the notification toast.\n   * @return {!Promise}\n   */\n  open() {\n    this.doc_.getBody().appendChild(this.iframe_);  // Fires onload.\n    return this.buildToast_();\n  }\n\n  /**\n   * Builds the content of the iframe. On load, animates the toast.\n   */\n  buildToast_() {\n    const toastDurationSeconds = 7;\n    return this.activityPorts_.openIframe(\n        this.iframe_, this.src_, this.args_).then(port => {\n          return port.whenReady();\n        }).then(() => {\n          resetStyles(this.iframe_, ['height']);\n\n          this.animate_(() => {\n            setImportantStyles(this.iframe_, {\n              'transform': 'translateY(100%)',\n              'opactiy': 1,\n              'visibility': 'visible',\n            });\n            return transition(this.iframe_, {\n              'transform': 'translateY(0)',\n              'opacity': 1,\n              'visibility': 'visible',\n            }, 400, 'ease-out');\n          });\n\n          // Close the Toast after the specified duration.\n          this.doc_.getWin().setTimeout(() => {\n            this.close();\n          }, (toastDurationSeconds + 1) * 1000);\n        });\n  }\n\n  /**\n   * @param {function():!Promise} callback\n   * @return {!Promise}\n   * @private\n   */\n  animate_(callback) {\n    const wait = this.animating_ || Promise.resolve();\n    return this.animating_ = wait.then(() => {\n      return callback();\n    }, () => {\n      // Ignore errors to make sure animations don't get stuck.\n    }).then(() => {\n      this.animating_ = null;\n    });\n  }\n\n  /**\n   * Closes the toast.\n   * @return {!Promise}\n   */\n  close() {\n    return this.animate_(() => {\n      // Remove the toast from the DOM after animation is complete.\n      this.doc_.getWin().setTimeout(() => {\n        this.doc_.getBody().removeChild(this.iframe_);\n        return Promise.resolve();\n      }, 500);\n\n      return transition(this.iframe_, {\n        'transform': 'translateY(100%)',\n        'opacity': 1,\n        'visibility': 'visible',\n      }, 400, 'ease-out');\n    });\n  }\n}\n\n/**\n * Copyright 2018 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nconst SERVICE_ID = 'subscribe.google.com';\nconst TOAST_STORAGE_KEY = 'toast';\nconst ENTS_STORAGE_KEY = 'ents';\n\n\n/**\n */\nclass EntitlementsManager {\n\n  /**\n   * @param {!Window} win\n   * @param {!../model/page-config.PageConfig} config\n   * @param {!./fetcher.Fetcher} fetcher\n   * @param {!./deps.DepsDef} deps\n   */\n  constructor(win, config, fetcher, deps) {\n    /** @private @const {!Window} */\n    this.win_ = win;\n\n    /** @private @const {!../model/page-config.PageConfig} */\n    this.config_ = config;\n\n    /** @private @const {string} */\n    this.publicationId_ = this.config_.getPublicationId();\n\n    /** @private @const {!./fetcher.Fetcher} */\n    this.fetcher_ = fetcher;\n\n    /** @private @const {!./deps.DepsDef} */\n    this.deps_ = deps;\n\n    /** @private @const {!JwtHelper} */\n    this.jwtHelper_ = new JwtHelper();\n\n    /** @private {?Promise<!Entitlements>} */\n    this.responsePromise_ = null;\n\n    /** @private {number} */\n    this.positiveRetries_ = 0;\n\n    /** @private {boolean} */\n    this.blockNextNotification_ = false;\n\n    /** @private @const {!./storage.Storage} */\n    this.storage_ = deps.storage();\n  }\n\n  /**\n   * @param {boolean=} opt_expectPositive\n   */\n  reset(opt_expectPositive) {\n    this.responsePromise_ = null;\n    this.positiveRetries_ = Math.max(\n        this.positiveRetries_, opt_expectPositive ? 3 : 0);\n    if (opt_expectPositive) {\n      this.storage_.remove(ENTS_STORAGE_KEY);\n    }\n  }\n\n  /**\n   * @return {!Promise<!Entitlements>}\n   */\n  getEntitlements() {\n    if (!this.responsePromise_) {\n      this.responsePromise_ = this.getEntitlementsFlow_();\n    }\n    return this.responsePromise_;\n  }\n\n  /**\n   * @param {string} raw\n   * @return {boolean}\n   */\n  pushNextEntitlements(raw) {\n    const entitlements = this.getValidJwtEntitlements_(\n        raw, /* requireNonExpired */ true);\n    if (entitlements && entitlements.enablesThis()) {\n      this.storage_.set(ENTS_STORAGE_KEY, raw);\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * @return {!Promise<!Entitlements>}\n   * @private\n   */\n  getEntitlementsFlow_() {\n    return this.fetchEntitlementsWithCaching_().then(entitlements => {\n      this.onEntitlementsFetched_(entitlements);\n      return entitlements;\n    });\n  }\n\n  /**\n   * @return {!Promise<!Entitlements>}\n   * @private\n   */\n  fetchEntitlementsWithCaching_() {\n    return this.storage_.get(ENTS_STORAGE_KEY).then(raw => {\n      // Try cache first.\n      if (raw) {\n        const cached = this.getValidJwtEntitlements_(\n            raw, /* requireNonExpired */ true);\n        if (cached && cached.enablesThis()) {\n          // Already have a positive response.\n          this.positiveRetries_ = 0;\n          return cached;\n        }\n      }\n      // If cache didn't match, perform fetch.\n      return this.fetchEntitlements_().then(ents => {\n        // If entitlements match the product, store them in cache.\n        if (ents && ents.enablesThis() && ents.raw) {\n          this.storage_.set(ENTS_STORAGE_KEY, ents.raw);\n        }\n        return ents;\n      });\n    });\n  }\n\n  /**\n   * @return {!Promise<!Entitlements>}\n   * @private\n   */\n  fetchEntitlements_() {\n    // TODO(dvoytenko): Replace retries with consistent fetch.\n    let positiveRetries = this.positiveRetries_;\n    this.positiveRetries_ = 0;\n    const attempt = () => {\n      positiveRetries--;\n      return this.fetch_().then(entitlements => {\n        if (entitlements.enablesThis() || positiveRetries <= 0) {\n          return entitlements;\n        }\n        return new Promise(resolve => {\n          this.win_.setTimeout(() => {\n            resolve(attempt());\n          }, 550);\n        });\n      });\n    };\n    return attempt();\n  }\n\n  /**\n   * @param {boolean} value\n   */\n  setToastShown(value) {\n    this.storage_.set(TOAST_STORAGE_KEY, value ? '1' : '0');\n  }\n\n  /**\n   */\n  blockNextNotification() {\n    this.blockNextNotification_ = true;\n  }\n\n  /**\n   */\n  unblockNextNotification() {\n    this.blockNextNotification_ = false;\n  }\n\n  /**\n   * The JSON must either contain a \"signedEntitlements\" with JWT, or\n   * \"entitlements\" field with plain JSON object.\n   * @param {!Object} json\n   * @return {!Entitlements}\n   */\n  parseEntitlements(json) {\n    const signedData = json['signedEntitlements'];\n    if (signedData) {\n      const entitlements = this.getValidJwtEntitlements_(\n          signedData, /* requireNonExpired */ false);\n      if (entitlements) {\n        return entitlements;\n      }\n    } else {\n      const plainEntitlements = json['entitlements'];\n      if (plainEntitlements) {\n        return this.createEntitlements_('', plainEntitlements);\n      }\n    }\n    // Empty response.\n    return this.createEntitlements_('', []);\n  }\n\n  /**\n   * @param {string} raw\n   * @param {boolean} requireNonExpired\n   * @return {?Entitlements}\n   * @private\n   */\n  getValidJwtEntitlements_(raw, requireNonExpired) {\n    try {\n      const jwt = this.jwtHelper_.decode(raw);\n      if (requireNonExpired) {\n        const now = Date.now();\n        const exp = jwt['exp'];\n        if (parseFloat(exp) * 1000 < now) {\n          return null;\n        }\n      }\n      const entitlementsClaim = jwt['entitlements'];\n      return entitlementsClaim &&\n          this.createEntitlements_(raw, entitlementsClaim) || null;\n    } catch (e) {\n      // Ignore the error.\n      this.win_.setTimeout(() => {throw e;});\n    }\n    return null;\n  }\n\n  /**\n   * @param {string} raw\n   * @param {!Object|!Array<!Object>} json\n   * @return {!Entitlements}\n   * @private\n   */\n  createEntitlements_(raw, json) {\n    return new Entitlements(\n        SERVICE_ID,\n        raw,\n        Entitlement.parseListFromJson(json),\n        this.config_.getProductId(),\n        this.ack_.bind(this));\n  }\n\n  /**\n   * @param {!Entitlements} entitlements\n   * @private\n   */\n  onEntitlementsFetched_(entitlements) {\n    // Skip any notifications and toast if other flows are ongoing.\n    // TODO(dvoytenko): what's the right action when pay flow was canceled?\n    const blockNotification = this.blockNextNotification_;\n    this.blockNextNotification_ = false;\n    if (blockNotification) {\n      return;\n    }\n\n    // Notify on the received entitlements.\n    this.deps_.callbacks().triggerEntitlementsResponse(\n        Promise.resolve(entitlements));\n\n    // Show a toast if needed.\n    this.maybeShowToast_(entitlements);\n  }\n\n  /**\n   * @param {!Entitlements} entitlements\n   * @return {!Promise}\n   * @private\n   */\n  maybeShowToast_(entitlements) {\n    const entitlement = entitlements.getEntitlementForThis();\n    if (!entitlement) {\n      return Promise.resolve();\n    }\n    // Check if storage bit is set. It's only set by the `Entitlements.ack`\n    // method.\n    return this.storage_.get(TOAST_STORAGE_KEY).then(value => {\n      if (value == '1') {\n        // Already shown;\n        return;\n      }\n      if (entitlement) {\n        this.showToast_(entitlement);\n      }\n    });\n  }\n\n  /**\n   * @param {!Entitlement} entitlement\n   * @private\n   */\n  showToast_(entitlement) {\n    const source = entitlement.source || 'google';\n    return new Toast(this.deps_, feUrl('/toastiframe'), feArgs({\n      'publicationId': this.publicationId_,\n      'source': source,\n    })).open();\n  }\n\n  /**\n   * @param {!Entitlements} entitlements\n   * @private\n   */\n  ack_(entitlements) {\n    if (entitlements.getEntitlementForThis()) {\n      this.setToastShown(true);\n    }\n  }\n\n  /**\n   * @return {!Promise<!Entitlements>}\n   * @private\n   */\n  fetch_() {\n    const url = serviceUrl(\n        '/publication/' +\n        encodeURIComponent(this.publicationId_) +\n        '/entitlements');\n    return this.fetcher_.fetchCredentialedJson(url)\n        .then(json => this.parseEntitlements(json));\n  }\n}\n\n/**\n * Copyright 2018 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n/**\n * @interface\n */\nclass Fetcher {\n\n  /**\n   * @param {string} unusedUrl\n   * @return {!Promise<!Object>}\n   */\n  fetchCredentialedJson(unusedUrl) {}\n}\n\n\n/**\n * @implements {Fetcher}\n */\nclass XhrFetcher {\n\n  /**\n   * @param {!Window} win\n   */\n  constructor(win) {\n    /** @const {!Xhr} */\n    this.xhr_ = new Xhr(win);\n  }\n\n  /** @override */\n  fetchCredentialedJson(url) {\n    const init = /** @type {!../utils/xhr.FetchInitDef} */ ({\n      method: 'GET',\n      headers: {'Accept': 'text/plain, application/json'},\n      credentials: 'include',\n    });\n    return this.xhr_.fetch(url, init).then(response => response.json());\n  }\n}\n\n/**\n * Copyright 2018 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n/**\n * @param {!web-activities/activity-ports.ActivityPort} port\n * @param {string} requireOrigin\n * @param {boolean} requireOriginVerified\n * @param {boolean} requireSecureChannel\n * @return {!Promise<!Object>}\n */\nfunction acceptPortResultData(\n    port,\n    requireOrigin,\n    requireOriginVerified,\n    requireSecureChannel) {\n  return port.acceptResult().then(result => {\n    if (result.origin != requireOrigin ||\n        requireOriginVerified && !result.originVerified ||\n        requireSecureChannel && !result.secureChannel) {\n      throw new Error('channel mismatch');\n    }\n    return result.data;\n  });\n}\n\n/**\n * Copyright 2018 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nconst LINK_REQUEST_ID = 'swg-link';\n\n\n/**\n * The flow to initiate linkback flow.\n */\nclass LinkbackFlow {\n\n  /**\n   * @param {!./deps.DepsDef} deps\n   */\n  constructor(deps) {\n    /** @private @const {!./deps.DepsDef} */\n    this.deps_ = deps;\n\n    /** @private @const {!web-activities/activity-ports.ActivityPorts} */\n    this.activityPorts_ = deps.activities();\n\n    /** @private @const {!../model/page-config.PageConfig} */\n    this.pageConfig_ = deps.pageConfig();\n\n    /** @private @const {!../components/dialog-manager.DialogManager} */\n    this.dialogManager_ = deps.dialogManager();\n  }\n\n  /**\n   * Starts the Link account flow.\n   * @return {!Promise}\n   */\n  start() {\n    this.deps_.callbacks().triggerFlowStarted(SubscriptionFlows.LINK_ACCOUNT);\n    const forceRedirect =\n        this.deps_.config().windowOpenMode == WindowOpenMode.REDIRECT;\n    const opener = this.activityPorts_.open(\n        LINK_REQUEST_ID,\n        feUrl('/linkbackstart'),\n        forceRedirect ? '_top' : '_blank',\n        feArgs({\n          'publicationId': this.pageConfig_.getPublicationId(),\n        }), {});\n    this.dialogManager_.popupOpened(opener && opener.targetWin);\n    return Promise.resolve();\n  }\n}\n\n\n/**\n * The class for Link accounts flow.\n */\nclass LinkCompleteFlow {\n\n  /**\n   * @param {!./deps.DepsDef} deps\n   */\n  static configurePending(deps) {\n    /**\n     * Handler function.\n     * @param {!web-activities/activity-ports.ActivityPort} port\n     */\n    function handler(port) {\n      deps.entitlementsManager().blockNextNotification();\n      deps.callbacks().triggerLinkProgress();\n      deps.dialogManager().popupClosed();\n      const promise = acceptPortResultData(\n          port,\n          feOrigin(),\n          /* requireOriginVerified */ false,\n          /* requireSecureChannel */ false);\n      return promise.then(response => {\n        const flow = new LinkCompleteFlow(deps, response);\n        flow.start();\n      }, reason => {\n        if (isCancelError(reason)) {\n          deps.callbacks().triggerFlowCanceled(SubscriptionFlows.LINK_ACCOUNT);\n        }\n      });\n    }    deps.activities().onResult(LINK_REQUEST_ID, handler);\n  }\n\n  /**\n   * @param {!./deps.DepsDef} deps\n   * @param {?Object} response\n   */\n  constructor(deps, response) {\n    /** @private @const {!Window} */\n    this.win_ = deps.win();\n\n    /** @private @const {!web-activities/activity-ports.ActivityPorts} */\n    this.activityPorts_ = deps.activities();\n\n    /** @private @const {!../components/dialog-manager.DialogManager} */\n    this.dialogManager_ = deps.dialogManager();\n\n    /** @private @const {!./entitlements-manager.EntitlementsManager} */\n    this.entitlementsManager_ = deps.entitlementsManager();\n\n    /** @private @const {!./callbacks.Callbacks} */\n    this.callbacks_ = deps.callbacks();\n\n    const index = response && response['index'] || '0';\n    /** @private @const {!ActivityIframeView} */\n    this.activityIframeView_ =\n        new ActivityIframeView(\n            this.win_,\n            this.activityPorts_,\n            feUrl('/linkconfirmiframe', '/u/' + index),\n            feArgs({\n              'productId': deps.pageConfig().getProductId(),\n              'publicationId': deps.pageConfig().getPublicationId(),\n            }),\n            /* shouldFadeBody */ true);\n\n    /** @private {?function()} */\n    this.completeResolver_ = null;\n\n    /** @private @const {!Promise} */\n    this.completePromise_ = new Promise(resolve => {\n      this.completeResolver_ = resolve;\n    });\n  }\n\n  /**\n   * Starts the Link account flow.\n   * @return {!Promise}\n   */\n  start() {\n    const promise = this.activityIframeView_.port().then(port => {\n      return acceptPortResultData(\n          port,\n          feOrigin(),\n          /* requireOriginVerified */ true,\n          /* requireSecureChannel */ true);\n    });\n    promise.then(response => {\n      this.complete_(response);\n    }).catch(reason => {\n      // Rethrow async.\n      setTimeout(() => {\n        throw reason;\n      });\n    }).then(() => {\n      // The flow is complete.\n      this.dialogManager_.completeView(this.activityIframeView_);\n    });\n    return this.dialogManager_.openView(this.activityIframeView_);\n  }\n\n  /**\n   * @param {?Object} response\n   * @private\n   */\n  complete_(response) {\n    this.callbacks_.triggerLinkComplete();\n    this.callbacks_.resetLinkProgress();\n    this.entitlementsManager_.setToastShown(true);\n    this.entitlementsManager_.unblockNextNotification();\n    this.entitlementsManager_.reset(response && response['success'] || false);\n    if (response && response['entitlements']) {\n      this.entitlementsManager_.pushNextEntitlements(response['entitlements']);\n    }\n    this.completeResolver_();\n  }\n\n  /** @return {!Promise} */\n  whenComplete() {\n    return this.completePromise_;\n  }\n}\n\n/**\n * The flow to save subscription information.\n */\nclass LinkSaveFlow {\n\n  /**\n   * @param {!./deps.DepsDef} deps\n   * @param {!../api/subscriptions.SaveSubscriptionRequestCallback} callback\n   */\n  constructor(deps, callback) {\n    /** @private @const {!Window} */\n    this.win_ = deps.win();\n\n    /** @private @const {!./deps.DepsDef} */\n    this.deps_ = deps;\n\n    /** @private @const {!web-activities/activity-ports.ActivityPorts} */\n    this.activityPorts_ = deps.activities();\n\n    /** @private @const {!../components/dialog-manager.DialogManager} */\n    this.dialogManager_ = deps.dialogManager();\n\n    /** @private {!../api/subscriptions.SaveSubscriptionRequestCallback} */\n    this.callback_ = callback;\n\n    /** @private {?Promise<!../api/subscriptions.SaveSubscriptionRequest>} */\n    this.requestPromise_ = null;\n\n    /** @private {?ActivityIframeView} */\n    this.activityIframeView_ = null;\n  }\n\n  /**\n   * @return {?Promise<!../api/subscriptions.SaveSubscriptionRequest>}\n   * @package Visible for testing.\n   */\n  getRequestPromise() {\n    return this.requestPromise_;\n  }\n  /**\n   * Starts the save subscription\n   * @return {!Promise}\n   */\n  start() {\n    const iframeArgs = {\n      'publicationId': this.deps_.pageConfig().getPublicationId(),\n      'isClosable': true,\n    };\n\n    this.activityIframeView_ = new ActivityIframeView(\n        this.win_,\n        this.activityPorts_,\n        feUrl('/linksaveiframe'),\n        feArgs(iframeArgs),\n        /* shouldFadeBody */ false\n    );\n    this.activityIframeView_.onMessage(data => {\n      if (data['getLinkingInfo']) {\n        this.requestPromise_ = new Promise(resolve => {\n          resolve(this.callback_());\n        }).then(request => {\n          let saveRequest;\n          if (request && request.token) {\n            if (request.authCode) {\n              throw new Error('Both authCode and token are available');\n            } else {\n              saveRequest = {'token': request.token};\n            }\n          } else if (request && request.authCode) {\n            saveRequest = {'authCode': request.authCode};\n          } else {\n            throw new Error('Neither token or authCode is available');\n          }\n          this.activityIframeView_.message(saveRequest);\n        }).catch(reason => {\n          // The flow is complete.\n          this.dialogManager_.completeView(this.activityIframeView_);\n          throw reason;\n        });\n      }\n    });\n    /** {!Promise<boolean>} */\n    return this.dialogManager_.openView(this.activityIframeView_,\n        /* hidden */ true).then(() => {\n          return this.activityIframeView_.port().then(port => {\n            return acceptPortResultData(\n                port,\n                feOrigin(),\n                /* requireOriginVerified */ true,\n                /* requireSecureChannel */ true);\n          }).then(result => {\n            return result['linked'];\n          }).catch(() => {\n            return false;\n          }).then(result => {\n            // The flow is complete.\n            this.dialogManager_.completeView(this.activityIframeView_);\n            return result;\n          });\n        });\n  }\n}\n\n/**\n * Copyright 2018 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nclass LoginPromptApi {\n  /**\n   * @param {!./deps.DepsDef} deps\n   */\n  constructor(deps) {\n    /** @private @const {!./deps.DepsDef} */\n    this.deps_ = deps;\n\n    /** @private @const {!Window} */\n    this.win_ = deps.win();\n\n    /** @private @const {!web-activities/activity-ports.ActivityPorts} */\n    this.activityPorts_ = deps.activities();\n\n    /** @private @const {!../components/dialog-manager.DialogManager} */\n    this.dialogManager_ = deps.dialogManager();\n\n    /** @private {?Promise} */\n    this.openViewPromise_ = null;\n\n    /** @private @const {!ActivityIframeView} */\n    this.activityIframeView_ = new ActivityIframeView(\n        this.win_,\n        this.activityPorts_,\n        feUrl('/loginiframe'),\n        feArgs({\n          publicationId: deps.pageConfig().getPublicationId(),\n          productId: deps.pageConfig().getProductId(),\n          // First ask the user if they want us to log them in.\n          userConsent: true,\n          // TODO(chenshay): Pass entitlements value here.\n        }),\n        /* shouldFadeBody */ true\n    );\n  }\n\n  /**\n   * Prompts the user to login.\n   * @return {!Promise}\n   */\n  start() {\n    this.deps_.callbacks().triggerFlowStarted(\n        SubscriptionFlows.SHOW_LOGIN_PROMPT);\n\n    this.openViewPromise_ = this.dialogManager_.openView(\n        this.activityIframeView_);\n\n    return this.activityIframeView_.acceptResult().then(() => {\n      // The consent part is complete.\n      this.dialogManager_.completeView(this.activityIframeView_);\n    }, reason => {\n      if (isCancelError(reason)) {\n        this.deps_.callbacks().triggerFlowCanceled(\n            SubscriptionFlows.SHOW_LOGIN_PROMPT);\n      } else {\n        this.dialogManager_.completeView(this.activityIframeView_);\n      }\n      throw reason;\n    });\n  }\n}\n\n/**\n * Copyright 2018 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nclass LoginNotificationApi {\n  /**\n   * @param {!./deps.DepsDef} deps\n   */\n  constructor(deps) {\n    /** @private @const {!./deps.DepsDef} */\n    this.deps_ = deps;\n\n    /** @private @const {!Window} */\n    this.win_ = deps.win();\n\n    /** @private @const {!web-activities/activity-ports.ActivityPorts} */\n    this.activityPorts_ = deps.activities();\n\n    /** @private @const {!../components/dialog-manager.DialogManager} */\n    this.dialogManager_ = deps.dialogManager();\n\n    /** @private {?Promise} */\n    this.openViewPromise_ = null;\n\n    /** @private @const {!ActivityIframeView} */\n    this.activityIframeView_ = new ActivityIframeView(\n        this.win_,\n        this.activityPorts_,\n        feUrl('/loginiframe'),\n        feArgs({\n          publicationId: deps.pageConfig().getPublicationId(),\n          productId: deps.pageConfig().getProductId(),\n          // No need to ask the user. Just tell them you're logging them in.\n          userConsent: false,\n          // TODO(chenshay): Pass entitlements value here.\n        }),\n        /* shouldFadeBody */ true\n    );\n  }\n\n  /**\n   * Continues the Login flow (after waiting).\n   * @return {!Promise}\n   */\n  start() {\n    this.deps_.callbacks().triggerFlowStarted(\n        SubscriptionFlows.SHOW_LOGIN_NOTIFICATION);\n\n    this.openViewPromise_ = this.dialogManager_.openView(\n        this.activityIframeView_);\n\n    return this.activityIframeView_.acceptResult().then(() => {\n      // The consent part is complete.\n      this.dialogManager_.completeView(this.activityIframeView_);\n    }, reason => {\n      this.dialogManager_.completeView(this.activityIframeView_);\n      throw reason;\n    });\n  }\n}\n\n/**\n * Copyright 2018 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nclass WaitForSubscriptionLookupApi {\n  /**\n   * @param {!./deps.DepsDef} deps\n   * @param {?Promise} accountPromise\n   */\n  constructor(deps, accountPromise) {\n    /** @private @const {!./deps.DepsDef} */\n    this.deps_ = deps;\n\n    /** @private @const {!Window} */\n    this.win_ = deps.win();\n\n    /** @private @const {!web-activities/activity-ports.ActivityPorts} */\n    this.activityPorts_ = deps.activities();\n\n    /** @private @const {!../components/dialog-manager.DialogManager} */\n    this.dialogManager_ = deps.dialogManager();\n\n    /** @private {?Promise} */\n    this.openViewPromise_ = null;\n\n    /** @private {?Promise} */\n    this.accountPromise_ = accountPromise || null;\n\n    /** @private @const {!ActivityIframeView} */\n    this.activityIframeView_ = new ActivityIframeView(\n        this.win_,\n        this.activityPorts_,\n        feUrl('/waitforsubscriptionlookupiframe'),\n        feArgs({\n          publicationId: deps.pageConfig().getPublicationId(),\n          productId: deps.pageConfig().getProductId(),\n        }),\n        /* shouldFadeBody */ true\n    );\n  }\n\n  /**\n   * Starts the Login Flow.\n   * @return {!Promise}\n   */\n  start() {\n    this.openViewPromise_ = this.dialogManager_.openView(\n        this.activityIframeView_);\n\n    return this.accountPromise_.then(account => {\n      // Account was found.\n      this.dialogManager_.completeView(this.activityIframeView_);\n      return account;\n    }, reason => {\n      this.dialogManager_.completeView(this.activityIframeView_);\n      throw reason;\n    });\n  }\n}\n\n/**\n * Copyright 2018 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nclass OffersApi {\n\n  /**\n   * @param {!../model/page-config.PageConfig} config\n   * @param {!./fetcher.Fetcher} fetcher\n   */\n  constructor(config, fetcher) {\n    /** @private @const {!../model/page-config.PageConfig} */\n    this.config_ = config;\n\n    /** @private @const {!./fetcher.Fetcher} */\n    this.fetcher_ = fetcher;\n  }\n\n  /**\n   * @param {string=} opt_productId\n   * @return {!Promise<!Array<!../api/offer.Offer>>}\n   */\n  getOffers(opt_productId) {\n    const productId = opt_productId || this.config_.getProductId();\n    if (!productId) {\n      throw new Error('getOffers requires productId in config or arguments');\n    }\n    return this.fetch_(productId);\n  }\n\n  /**\n   * @param {string} productId\n   * @return {!Promise<!Array<!../api/offer.Offer>>}\n   * @private\n   */\n  fetch_(productId) {\n    const url = serviceUrl(\n        '/publication/' +\n        encodeURIComponent(this.config_.getPublicationId()) +\n        '/offers' +\n        '?label=' + encodeURIComponent(productId));\n    // TODO(dvoytenko): switch to a non-credentialed request after launch.\n    return this.fetcher_.fetchCredentialedJson(url).then(json => {\n      return json['offers'] || [];\n    });\n  }\n}\n\n/**\n * Copyright 2018 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Offers view is closable when request was originated from 'AbbrvOfferFlow'\n * or from 'SubscribeOptionFlow'.\n */\nconst OFFERS_VIEW_CLOSABLE = true;\n\n/**\n * The class for Offers flow.\n */\nclass OffersFlow {\n\n  /**\n   * @param {!./deps.DepsDef} deps\n   * @param {!../api/subscriptions.OffersRequest|undefined} options\n   */\n  constructor(deps, options) {\n    /** @private @const {!./deps.DepsDef} */\n    this.deps_ = deps;\n\n    /** @private @const {!Window} */\n    this.win_ = deps.win();\n\n    /** @private @const {!web-activities/activity-ports.ActivityPorts} */\n    this.activityPorts_ = deps.activities();\n\n    /** @private @const {!../components/dialog-manager.DialogManager} */\n    this.dialogManager_ = deps.dialogManager();\n\n    let isClosable = options && options.isClosable;\n    if (isClosable == undefined) {\n      isClosable = false;  // Default is to hide Close button.\n    }\n\n    /** @private @const {!ActivityIframeView} */\n    this.activityIframeView_ = new ActivityIframeView(\n        this.win_,\n        this.activityPorts_,\n        feUrl('/offersiframe'),\n        feArgs({\n          'productId': deps.pageConfig().getProductId(),\n          'publicationId': deps.pageConfig().getPublicationId(),\n          'showNative': deps.callbacks().hasSubscribeRequestCallback(),\n          'list': options && options.list || 'default',\n          'skus': options && options.skus || null,\n          'isClosable': isClosable,\n        }),\n        /* shouldFadeBody */ true);\n  }\n\n  /**\n   * Starts the offers flow or alreadySubscribed flow.\n   * @return {!Promise}\n   */\n  start() {\n    // Start/cancel events.\n    this.deps_.callbacks().triggerFlowStarted(\n        SubscriptionFlows.SHOW_OFFERS);\n    this.activityIframeView_.onCancel(() => {\n      this.deps_.callbacks().triggerFlowCanceled(\n          SubscriptionFlows.SHOW_OFFERS);\n    });\n\n    // If result is due to OfferSelection, redirect to payments.\n    this.activityIframeView_.onMessage(result => {\n      if (result['alreadySubscribed']) {\n        this.deps_.callbacks().triggerLoginRequest({\n          linkRequested: !!result['linkRequested'],\n        });\n        return;\n      }\n      if (result['sku']) {\n        new PayStartFlow(\n            this.deps_,\n            /** @type {string} */ (result['sku']))\n            .start();\n        return;\n      }\n      if (result['native']) {\n        this.deps_.callbacks().triggerSubscribeRequest();\n        return;\n      }\n    });\n\n    return this.dialogManager_.openView(this.activityIframeView_);\n  }\n}\n\n\n/**\n * The class for subscribe option flow.\n */\nclass SubscribeOptionFlow {\n\n  /**\n   * @param {!./deps.DepsDef} deps\n   * @param {!../api/subscriptions.OffersRequest|undefined} options\n   */\n  constructor(deps, options) {\n\n    /** @private @const {!./deps.DepsDef} */\n    this.deps_ = deps;\n\n    /** @private @const {!../api/subscriptions.OffersRequest|undefined} */\n    this.options_ = options;\n\n    /** @private @const {!web-activities/activity-ports.ActivityPorts} */\n    this.activityPorts_ = deps.activities();\n\n    /** @private @const {!../components/dialog-manager.DialogManager} */\n    this.dialogManager_ = deps.dialogManager();\n\n    /** @private @const {!ActivityIframeView} */\n    this.activityIframeView_ = new ActivityIframeView(\n        deps.win(),\n        this.activityPorts_,\n        feUrl('/optionsiframe'),\n        feArgs({\n          'publicationId': deps.pageConfig().getPublicationId(),\n          'productId': deps.pageConfig().getProductId(),\n          'list': options && options.list || 'default',\n          'skus': options && options.skus || null,\n          'isClosable': true,\n        }),\n        /* shouldFadeBody */ false);\n  }\n\n  /**\n   * Starts the offers flow or alreadySubscribed flow.\n   * @return {!Promise}\n   */\n  start() {\n    // Start/cancel events.\n    this.deps_.callbacks().triggerFlowStarted(\n        SubscriptionFlows.SHOW_SUBSCRIBE_OPTION);\n    this.activityIframeView_.onCancel(() => {\n      this.deps_.callbacks().triggerFlowCanceled(\n          SubscriptionFlows.SHOW_SUBSCRIBE_OPTION);\n    });\n\n    this.activityIframeView_.onMessage(data => {\n      this.maybeOpenOffersFlow_(data);\n    });\n    this.activityIframeView_.acceptResult().then(result => {\n      this.maybeOpenOffersFlow_(result.data);\n    }, reason => {\n      this.dialogManager_.completeView(this.activityIframeView_);\n      throw reason;\n    });\n    return this.dialogManager_.openView(this.activityIframeView_);\n  }\n\n  /**\n   * @param {*} data\n   * @private\n   */\n  maybeOpenOffersFlow_(data) {\n    if (data && data['subscribe']) {\n      const options = this.options_ || {};\n      if (options.isClosable == undefined) {\n        options.isClosable = OFFERS_VIEW_CLOSABLE;\n      }\n      new OffersFlow(this.deps_, options).start();\n    }\n  }\n}\n\n\n/**\n * The class for Abbreviated Offer flow.\n *\n */\nclass AbbrvOfferFlow {\n\n  /**\n   * @param {!./deps.DepsDef} deps\n   * @param {!../api/subscriptions.OffersRequest=} options\n   */\n  constructor(deps, options = {}) {\n\n    /** @private @const {!./deps.DepsDef} */\n    this.deps_ = deps;\n\n    /** @private @const {!../api/subscriptions.OffersRequest|undefined} */\n    this.options_ = options;\n\n    /** @private @const {!Window} */\n    this.win_ = deps.win();\n\n    /** @private @const {!web-activities/activity-ports.ActivityPorts} */\n    this.activityPorts_ = deps.activities();\n\n    /** @private @const {!../components/dialog-manager.DialogManager} */\n    this.dialogManager_ = deps.dialogManager();\n\n    /** @private @const {!ActivityIframeView} */\n    this.activityIframeView_ = new ActivityIframeView(\n        this.win_,\n        this.activityPorts_,\n        feUrl('/abbrvofferiframe'),\n        feArgs({\n          'publicationId': deps.pageConfig().getPublicationId(),\n          'productId': deps.pageConfig().getProductId(),\n          'showNative': deps.callbacks().hasSubscribeRequestCallback(),\n          'list': options && options.list || 'default',\n          'skus': options && options.skus || null,\n          'isClosable': true,\n        }),\n        /* shouldFadeBody */ false);\n  }\n\n  /**\n   * Starts the offers flow\n   * @return {!Promise}\n   */\n  start() {\n    // Start/cancel events.\n    this.deps_.callbacks().triggerFlowStarted(\n        SubscriptionFlows.SHOW_ABBRV_OFFER);\n    this.activityIframeView_.onCancel(() => {\n      this.deps_.callbacks().triggerFlowCanceled(\n          SubscriptionFlows.SHOW_ABBRV_OFFER);\n    });\n\n    // If the user is already subscribed, trigger login flow\n    this.activityIframeView_.onMessage(data => {\n      if (data['alreadySubscribed']) {\n        this.deps_.callbacks().triggerLoginRequest({\n          linkRequested: !!data['linkRequested'],\n        });\n        return;\n      }\n    });\n    // If result is due to requesting offers, redirect to offers flow\n    this.activityIframeView_.acceptResult().then(result => {\n      if (result.data['viewOffers']) {\n        const options = this.options_ || {};\n        if (options.isClosable == undefined) {\n          options.isClosable = OFFERS_VIEW_CLOSABLE;\n        }\n        new OffersFlow(this.deps_, options).start();\n        return;\n      }\n      if (result.data['native']) {\n        this.deps_.callbacks().triggerSubscribeRequest();\n        // The flow is complete.\n        this.dialogManager_.completeView(this.activityIframeView_);\n        return;\n      }\n    });\n\n    return this.dialogManager_.openView(this.activityIframeView_);\n  }\n}\n\n/**\n * Copyright 2018 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Copyright 2018 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Copyright 2018 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nclass Preconnect {\n\n  /**\n   * @param {!Document} doc\n   */\n  constructor(doc) {\n    /** @private @const {!Document} */\n    this.doc_ = doc;\n  }\n\n  /**\n   * @param {string} url\n   */\n  preconnect(url) {\n    this.pre_(url, 'preconnect');\n  }\n\n  /**\n   * @param {string} url\n   */\n  dnsPrefetch(url) {\n    this.pre_(url, 'dns-prefetch');\n  }\n\n  /**\n   * @param {string} url\n   */\n  prefetch(url) {\n    this.pre_(url, 'preconnect prefetch');\n  }\n\n  /**\n   * @param {string} url\n   * @param {string} as\n   */\n  preload(url, as) {\n    this.pre_(url, 'preconnect preload', as);\n  }\n\n  /**\n   * @param {string} url\n   * @param {string} rel\n   * @param {?string=} opt_as\n   * @private\n   */\n  pre_(url, rel, opt_as) {\n    // <link rel=\"prefetch\" href=\"...\" as=\"\">\n    const linkEl = createElement(this.doc_, 'link', {\n      'rel': rel,\n      'href': url,\n    });\n    if (opt_as) {\n      linkEl.setAttribute('as', opt_as);\n    }\n    this.doc_.head.appendChild(linkEl);\n  }\n}\n\n/**\n * Copyright 2018 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nconst PREFIX = 'subscribe.google.com';\n\n\nclass Storage {\n\n  /**\n   * @param {!Window} win\n   */\n  constructor(win) {\n    /** @private @const {!Window} */\n    this.win_ = win;\n\n    /** @private @const {!Object<string, !Promise<?string>>} */\n    this.values_ = {};\n  }\n\n  /**\n   * @param {string} key\n   * @return {!Promise<?string>}\n   */\n  get(key) {\n    if (!this.values_[key]) {\n      this.values_[key] = new Promise(resolve => {\n        if (this.win_.sessionStorage) {\n          try {\n            resolve(this.win_.sessionStorage.getItem(storageKey(key)));\n          } catch (e) {\n            // Ignore error.\n            resolve(null);\n          }\n        } else {\n          resolve(null);\n        }\n      });\n    }\n    return this.values_[key];\n  }\n\n  /**\n   * @param {string} key\n   * @param {string} value\n   * @return {!Promise}\n   */\n  set(key, value) {\n    this.values_[key] = Promise.resolve(value);\n    return new Promise(resolve => {\n      if (this.win_.sessionStorage) {\n        try {\n          this.win_.sessionStorage.setItem(storageKey(key), value);\n        } catch (e) {\n          // Ignore error.\n        }\n      }\n      resolve();\n    });\n  }\n\n  /**\n   * @param {string} key\n   * @return {!Promise}\n   */\n  remove(key) {\n    delete this.values_[key];\n    return new Promise(resolve => {\n      if (this.win_.sessionStorage) {\n        try {\n          this.win_.sessionStorage.removeItem(storageKey(key));\n        } catch (e) {\n          // Ignore error.\n        }\n      }\n      resolve();\n    });\n  }\n}\n\n\n/**\n * @param {string} key\n * @return {string}\n */\nfunction storageKey(key) {\n  return PREFIX + ':' + key;\n}\n\n/**\n * Copyright 2018 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n/**\n * @implements {DepsDef}\n * @implements {Subscriptions}\n */\nclass ConfiguredRuntime {\n\n  /**\n   * @param {!Window|!Document|!Doc} winOrDoc\n   * @param {!../model/page-config.PageConfig} pageConfig\n   * @param {{\n   *     fetcher: (!Fetcher|undefined),\n   *   }=} opt_integr\n   */\n  constructor(winOrDoc, pageConfig, opt_integr) {\n    /** @private @const {!Doc} */\n    this.doc_ = resolveDoc(winOrDoc);\n\n    /** @private @const {!Window} */\n    this.win_ = this.doc_.getWin();\n\n    /** @private @const {!../api/subscriptions.Config} */\n    this.config_ = defaultConfig();\n\n    /** @private @const {!../model/page-config.PageConfig} */\n    this.pageConfig_ = pageConfig;\n\n    /** @private @const {!Promise} */\n    this.documentParsed_ = this.doc_.whenReady();\n\n    /** @private @const {!Fetcher} */\n    this.fetcher_ = opt_integr && opt_integr.fetcher ||\n        new XhrFetcher(this.win_);\n\n    /** @private @const {!Storage} */\n    this.storage_ = new Storage(this.win_);\n\n    /** @private @const {!DialogManager} */\n    this.dialogManager_ = new DialogManager(this.doc_);\n\n    /** @private @const {!web-activities/activity-ports.ActivityPorts} */\n    this.activityPorts_ = new activityPorts_1(this.win_);\n\n    /** @private @const {!Callbacks} */\n    this.callbacks_ = new Callbacks();\n\n    /** @private @const {!EntitlementsManager} */\n    this.entitlementsManager_ = new EntitlementsManager(\n        this.win_, this.pageConfig_, this.fetcher_, this);\n\n    /** @private @const {!OffersApi} */\n    this.offersApi_ = new OffersApi(this.pageConfig_, this.fetcher_);\n\n    /** @private @const {!ButtonApi} */\n    this.buttonApi_ = new ButtonApi(this.doc_);\n\n    const preconnect = new Preconnect(this.win_.document);\n\n    LinkCompleteFlow.configurePending(this);\n    PayCompleteFlow.configurePending(this);\n    PayStartFlow.preconnect(preconnect);\n\n    injectStyleSheet(this.win_.document, CSS);\n  }\n\n  /** @override */\n  doc() {\n    return this.doc_;\n  }\n\n  /** @override */\n  win() {\n    return this.win_;\n  }\n\n  /** @override */\n  pageConfig() {\n    return this.pageConfig_;\n  }\n\n  /** @override */\n  activities() {\n    return this.activityPorts_;\n  }\n\n  /** @override */\n  dialogManager() {\n    return this.dialogManager_;\n  }\n\n  /** @override */\n  entitlementsManager() {\n    return this.entitlementsManager_;\n  }\n\n  /** @override */\n  callbacks() {\n    return this.callbacks_;\n  }\n\n  /** @override */\n  storage() {\n    return this.storage_;\n  }\n\n  /** @override */\n  init() {\n    // Implemented by the `Runtime` class.\n  }\n\n  /** @override */\n  configure(config) {\n    // Validate first.\n    let error = null;\n    for (const k in config) {\n      const v = config[k];\n      if (k == 'windowOpenMode') {\n        if (v != WindowOpenMode.AUTO &&\n            v != WindowOpenMode.REDIRECT) {\n          error = 'Unknown windowOpenMode: ' + v;\n        }\n      } else {\n        error = 'Unknown config property: ' + k;\n      }\n    }\n    if (error) {\n      throw new Error(error);\n    }\n    // Assign.\n    Object.assign(this.config_, config);\n  }\n\n  /** @override */\n  config() {\n    return this.config_;\n  }\n\n  /** @override */\n  reset() {\n    this.entitlementsManager_.reset();\n    this.dialogManager_.completeAll();\n  }\n\n  /** @override */\n  start() {\n    // No need to run entitlements without a product or for an unlocked page.\n    if (!this.pageConfig_.getProductId() || !this.pageConfig_.isLocked()) {\n      return Promise.resolve();\n    }\n    this.getEntitlements();\n  }\n\n  /** @override */\n  getEntitlements() {\n    return this.entitlementsManager_.getEntitlements()\n        .then(entitlements => entitlements.clone());\n  }\n\n  /** @override */\n  setOnEntitlementsResponse(callback) {\n    this.callbacks_.setOnEntitlementsResponse(callback);\n  }\n\n  /** @override */\n  getOffers(opt_options) {\n    return this.offersApi_.getOffers(opt_options && opt_options.productId);\n  }\n\n  /** @override */\n  showOffers(opt_options) {\n    return this.documentParsed_.then(() => {\n      const flow = new OffersFlow(this, opt_options);\n      return flow.start();\n    });\n  }\n\n  /** @override */\n  showSubscribeOption(opt_options) {\n    return this.documentParsed_.then(() => {\n      const flow = new SubscribeOptionFlow(this, opt_options);\n      return flow.start();\n    });\n  }\n\n  /** @override */\n  showAbbrvOffer(opt_options) {\n    return this.documentParsed_.then(() => {\n      const flow = new AbbrvOfferFlow(this, opt_options);\n      return flow.start();\n    });\n  }\n\n  /** @override */\n  showSubscriptionLookupProgress(accountPromise) {\n    return this.documentParsed_.then(() => {\n      const wait = new WaitForSubscriptionLookupApi(this, accountPromise);\n      return wait.start();\n    });\n  }\n\n  /** @override */\n  setOnLoginRequest(callback) {\n    this.callbacks_.setOnLoginRequest(callback);\n  }\n\n  /** @override */\n  setOnLinkComplete(callback) {\n    this.callbacks_.setOnLinkComplete(callback);\n  }\n\n  /** @override */\n  linkAccount() {\n    return this.documentParsed_.then(() => {\n      return new LinkbackFlow(this).start();\n    });\n  }\n\n  /** @override */\n  saveSubscription(saveSubscriptionRequestCallback) {\n    return this.documentParsed_.then(() => {\n      return new LinkSaveFlow(this, saveSubscriptionRequestCallback).start();\n    });\n  }\n\n  /** @override */\n  showLoginPrompt() {\n    return this.documentParsed_.then(() => {\n      return new LoginPromptApi(this).start();\n    });\n  }\n\n  /** @override */\n  showLoginNotification() {\n    return this.documentParsed_.then(() => {\n      return new LoginNotificationApi(this).start();\n    });\n  }\n\n  /** @override */\n  setOnNativeSubscribeRequest(callback) {\n    this.callbacks_.setOnSubscribeRequest(callback);\n  }\n\n  /** @override */\n  setOnSubscribeResponse(callback) {\n    this.callbacks_.setOnSubscribeResponse(callback);\n  }\n\n  /** @override */\n  subscribe(sku) {\n    return this.documentParsed_.then(() => {\n      return new PayStartFlow(this, sku).start();\n    });\n  }\n\n  /** @override */\n  completeDeferredAccountCreation(opt_options) {\n    return this.documentParsed_.then(() => {\n      return new DeferredAccountFlow(this, opt_options || null).start();\n    });\n  }\n\n  /** @override */\n  setOnFlowStarted(callback) {\n    this.callbacks_.setOnFlowStarted(callback);\n  }\n\n  /** @override */\n  setOnFlowCanceled(callback) {\n    this.callbacks_.setOnFlowCanceled(callback);\n  }\n\n  /** @override */\n  createButton(optionsOrCallback, opt_callback) {\n    // This is a minor duplication to allow this code to be sync.\n    return this.buttonApi_.create(optionsOrCallback, opt_callback);\n  }\n\n  /** @override */\n  attachButton(button, optionsOrCallback, opt_callback) {\n    // This is a minor duplication to allow this code to be sync.\n    this.buttonApi_.attach(button, optionsOrCallback, opt_callback);\n  }\n}\n\n/**\n * Copyright 2018 The Subscribe with Google Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nexport {\n  ConfiguredRuntime,\n  Entitlements,\n  Entitlement,\n  Fetcher,\n  SubscribeResponse,\n};\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}