{"version":3,"sources":["node_modules/browser-pack/_prelude.js","build/amp-image-lightbox-0.1.css.js","extensions/amp-image-lightbox/0.1/amp-image-lightbox.js","node_modules/document-register-element/build/document-register-element.patched.js","node_modules/promise-pjs/promise.js","src/animation.js","src/config.js","src/cookies.js","src/curve.js","src/dom.js","src/element-service.js","src/event-helper-listen.js","src/event-helper.js","src/experiments.js","src/gesture-recognizers.js","src/gesture.js","src/layout-rect.js","src/log.js","src/mode-object.js","src/mode.js","src/motion.js","src/observable.js","src/pass.js","src/polyfills.js","src/polyfills/array-includes.js","src/polyfills/custom-elements.js","src/polyfills/document-contains.js","src/polyfills/domtokenlist-toggle.js","src/polyfills/math-sign.js","src/polyfills/object-assign.js","src/polyfills/promise.js","src/service.js","src/services.js","src/srcset.js","src/string.js","src/style.js","src/time.js","src/transition.js","src/types.js","src/url-parse-query-string.js","src/url-try-decode-uri-component.js","src/url.js","src/utils/array.js","src/utils/key-codes.js","src/utils/lru-cache.js","src/utils/object.js","src/utils/promise.js","third_party/css-escape/css-escape.js"],"names":[],"mappings":"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A;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnqjBCngBA;;;;;;;;;;;;;;;;AAgBA;;AACA;;AACA;;AACA;;;;AAEA,IAAM,OAAO,WAAb;;AAEA,IAAM,gBAAgB,SAAhB,aAAgB,GAAW,CAAE,CAAnC;;AAEA;;;;;;;;IAOa,S,WAAA,S;;;;;AAEX;;;;;;;;;;;4BAWe,W,EAAa,U,EAAY,Q,EAAU,S,EAAW;AAC3D,aAAO,IAAI,SAAJ,CAAc,WAAd,EACF,QADE,CACO,SADP,EAEF,GAFE,CAEE,CAFF,EAEK,UAFL,EAEiB,CAFjB,EAGF,KAHE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","file":"amp-image-lightbox-0.1.max.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","export const CSS = \"amp-image-lightbox{position:fixed!important;top:0!important;left:0!important;bottom:0!important;right:0!important;margin:0!important;padding:0!important;overflow:hidden!important;-webkit-transform:translateZ(0)!important;transform:translateZ(0)!important;-ms-touch-action:none!important;touch-action:none!important;z-index:1000;background:rgba(0,0,0,0.95);color:#f2f2f2}.i-amphtml-image-lightbox-container{position:absolute;z-index:0;top:0;left:0;right:0;bottom:0;overflow:hidden;-webkit-transform:translateZ(0);transform:translateZ(0)}.i-amphtml-image-lightbox-trans{pointer-events:none!important;position:fixed;z-index:1001;top:0;left:0;bottom:0;right:0}.i-amphtml-image-lightbox-caption{position:absolute!important;z-index:2;bottom:0!important;left:0!important;right:0!important}.i-amphtml-image-lightbox-caption.i-amphtml-empty,.i-amphtml-image-lightbox-view-mode .i-amphtml-image-lightbox-caption{visibility:hidden}.amp-image-lightbox-caption{background:rgba(0,0,0,0.5);max-height:25%;padding:8px}.i-amphtml-image-lightbox-viewer{position:absolute;z-index:1;top:0;left:0;right:0;bottom:0;overflow:hidden;-webkit-transform:translateZ(0);transform:translateZ(0)}.i-amphtml-image-lightbox-viewer-image{position:absolute;z-index:1;display:block;-webkit-transform-origin:50% 50%;transform-origin:50% 50%}\\n/*# sourceURL=/extensions/amp-image-lightbox/0.1/amp-image-lightbox.css*/\";\n","/**\n * Copyright 2015 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as dom from '../../../src/dom';\nimport * as st from '../../../src/style';\nimport * as tr from '../../../src/transition';\nimport {Animation} from '../../../src/animation';\nimport {CSS} from '../../../build/amp-image-lightbox-0.1.css';\nimport {\n  DoubletapRecognizer,\n  SwipeXYRecognizer,\n  TapRecognizer,\n  TapzoomRecognizer,\n} from '../../../src/gesture-recognizers';\nimport {Gestures} from '../../../src/gesture';\nimport {KeyCodes} from '../../../src/utils/key-codes';\nimport {Services} from '../../../src/services';\nimport {bezierCurve} from '../../../src/curve';\nimport {continueMotion} from '../../../src/motion';\nimport {dev, user} from '../../../src/log';\nimport {isLoaded} from '../../../src/event-helper';\nimport {\n  layoutRectFromDomRect,\n  layoutRectLtwh,\n  moveLayoutRect,\n} from '../../../src/layout-rect';\nimport {srcsetFromElement} from '../../../src/srcset';\nimport {startsWith} from '../../../src/string';\n\nconst TAG = 'amp-image-lightbox';\n\n/** @private @const {!Object<string, boolean>} */\nconst SUPPORTED_ELEMENTS_ = {\n  'amp-img': true,\n  'amp-anim': true,\n};\n\n/** @private @const */\nconst ARIA_ATTRIBUTES = ['aria-label', 'aria-describedby',\n  'aria-labelledby'];\n\n/** @private @const {!../../../src/curve.CurveDef} */\nconst ENTER_CURVE_ = bezierCurve(0.4, 0, 0.2, 1);\n\n/** @private @const {!../../../src/curve.CurveDef} */\nconst EXIT_CURVE_ = bezierCurve(0.4, 0, 0.2, 1);\n\n/** @private @const {!../../../src/curve.CurveDef} */\nconst PAN_ZOOM_CURVE_ = bezierCurve(0.4, 0, 0.2, 1.4);\n\n/** @private @const {number} */\nconst DEFAULT_MAX_SCALE = 2;\n\n/**\n * This class is responsible providing all operations necessary for viewing\n * an image, such as full-bleed display, zoom and pan, etc.\n * @package  Visible for testing only!\n * TODO(dvoytenko): move to the separate file once build system is ready.\n */\nexport class ImageViewer {\n  /**\n   * @param {!AmpImageLightbox} lightbox\n   * @param {!Window} win\n   * @param {function(T, number=):Promise<T>} loadPromise\n   * @template T\n   */\n  constructor(lightbox, win, loadPromise) {\n    /** @private {!AmpImageLightbox} */\n    this.lightbox_ = lightbox;\n\n    /** @const {!Window} */\n    this.win = win;\n\n    /** @private {function(T, number=):Promise<T>} */\n    this.loadPromise_ = loadPromise;\n\n    /** @private {!Element} */\n    this.viewer_ = lightbox.element.ownerDocument.createElement('div');\n    this.viewer_.classList.add('i-amphtml-image-lightbox-viewer');\n\n    /** @private {!Element} */\n    this.image_ = lightbox.element.ownerDocument.createElement('img');\n    this.image_.classList.add('i-amphtml-image-lightbox-viewer-image');\n    this.viewer_.appendChild(this.image_);\n\n    /** @private {?../../../src/srcset.Srcset} */\n    this.srcset_ = null;\n\n    /** @private {number} */\n    this.sourceWidth_ = 0;\n\n    /** @private {number} */\n    this.sourceHeight_ = 0;\n\n    /** @private {!../../../src/layout-rect.LayoutRectDef} */\n    this.viewerBox_ = layoutRectLtwh(0, 0, 0, 0);\n\n    /** @private {!../../../src/layout-rect.LayoutRectDef} */\n    this.imageBox_ = layoutRectLtwh(0, 0, 0, 0);\n\n    /** @private {number} */\n    this.scale_ = 1;\n    /** @private {number} */\n    this.startScale_ = 1;\n    /** @private {number} */\n    this.maxSeenScale_ = 1;\n    /** @private {number} */\n    this.minScale_ = 1;\n    /** @private {number} */\n    this.maxScale_ = DEFAULT_MAX_SCALE;\n\n    /** @private {number} */\n    this.startX_ = 0;\n    /** @private {number} */\n    this.startY_ = 0;\n    /** @private {number} */\n    this.posX_ = 0;\n    /** @private {number} */\n    this.posY_ = 0;\n    /** @private {number} */\n    this.minX_ = 0;\n    /** @private {number} */\n    this.minY_ = 0;\n    /** @private {number} */\n    this.maxX_ = 0;\n    /** @private {number} */\n    this.maxY_ = 0;\n\n    /** @private {?../../../src/motion.Motion} */\n    this.motion_ = null;\n\n    this.setupGestures_();\n  }\n\n  /**\n   * Returns the root element of the image viewer.\n   * @return {!Element}\n   */\n  getElement() {\n    return this.viewer_;\n  }\n\n  /**\n   * Returns the img element of the image viewer.\n   * @return {!Element}\n   */\n  getImage() {\n    return this.image_;\n  }\n\n  /**\n   * Returns the boundaries of the viewer.\n   * @return {!../../../src/layout-rect.LayoutRectDef}\n   */\n  getViewerBox() {\n    return this.viewerBox_;\n  }\n\n  /**\n   * Returns the boundaries of the image element.\n   * @return {!../../../src/layout-rect.LayoutRectDef}\n   */\n  getImageBox() {\n    return this.imageBox_;\n  }\n\n  /**\n   * Returns the boundaries of the image element with the offset if it was\n   * moved by a gesture.\n   * @return {!../../../src/layout-rect.LayoutRectDef}\n   */\n  getImageBoxWithOffset() {\n    if (this.posX_ == 0 && this.posY_ == 0) {\n      return this.imageBox_;\n    }\n    return moveLayoutRect(this.imageBox_, this.posX_, this.posY_);\n  }\n\n  /**\n   * Resets the image viewer to the initial state.\n   */\n  reset() {\n    this.image_.setAttribute('src', '');\n    ARIA_ATTRIBUTES.forEach(key => {\n      this.image_.removeAttribute(key);\n    });\n    this.image_.removeAttribute('aria-describedby');\n    this.srcset_ = null;\n    this.imageBox_ = layoutRectLtwh(0, 0, 0, 0);\n    this.sourceWidth_ = 0;\n    this.sourceHeight_ = 0;\n\n    this.maxSeenScale_ = 1;\n    this.scale_ = 1;\n    this.startScale_ = 1;\n    this.maxScale_ = 2;\n\n    this.startX_ = 0;\n    this.startY_ = 0;\n    this.posX_ = 0;\n    this.posY_ = 0;\n    this.minX_ = 0;\n    this.minY_ = 0;\n    this.maxX_ = 0;\n    this.maxY_ = 0;\n\n    if (this.motion_) {\n      this.motion_.halt();\n    }\n    this.motion_ = null;\n  }\n\n  /**\n   * Sets the source width and height based the natural dimensions of the\n   * source image if loaded, and the offset dimensions of amp-img element\n   * if not.\n   * @param {!Element} ampImg\n   * @param {?Element} img\n   * @private\n   */\n  setSourceDimensions_(ampImg, img) {\n    if (img) {\n      this.sourceWidth_ = img.naturalWidth || ampImg./*OK*/offsetWidth;\n      this.sourceHeight_ = img.naturalHeight || ampImg./*OK*/offsetHeight;\n    } else {\n      this.sourceWidth_ = ampImg./*OK*/offsetWidth;\n      this.sourceHeight_ = ampImg./*OK*/offsetHeight;\n    }\n  }\n\n  /**\n   * Initializes the image viewer to the target image element such as\n   * \"amp-img\". The target image element may or may not yet have the img\n   * element initialized.\n   * @param {!Element} sourceElement\n   * @param {?Element} sourceImage\n   */\n  init(sourceElement, sourceImage) {\n    this.setSourceDimensions_(sourceElement, sourceImage);\n    this.srcset_ = srcsetFromElement(sourceElement);\n\n    sourceElement.getImpl().then(elem => {\n      elem.propagateAttributes(ARIA_ATTRIBUTES, this.image_);\n    });\n\n    if (sourceImage && isLoaded(sourceImage) && sourceImage.src) {\n      // Set src provisionally to the known loaded value for fast display.\n      // It will be updated later.\n      this.image_.setAttribute('src', sourceImage.src);\n    }\n  }\n\n  /**\n   * Measures the image viewer and image sizes and positioning.\n   * @return {!Promise}\n   */\n  measure() {\n    this.viewerBox_ = layoutRectFromDomRect(this.viewer_\n        ./*OK*/getBoundingClientRect());\n    const sourceAspectRatio = this.sourceWidth_ / this.sourceHeight_;\n    let height = Math.min(\n        this.viewerBox_.width / sourceAspectRatio,\n        this.viewerBox_.height\n    );\n    let width = Math.min(\n        this.viewerBox_.height * sourceAspectRatio,\n        this.viewerBox_.width\n    );\n\n    // TODO(dvoytenko): This is to reduce very small expansions that often\n    // look like a stutter. To be evaluated if this is still the right\n    // idea.\n    if (Math.abs(width - this.sourceWidth_) <= 16\n        && Math.abs(height - this.sourceHeight_) <= 16) {\n      width = this.sourceWidth_;\n      height = this.sourceHeight_;\n    }\n\n    this.imageBox_ = layoutRectLtwh(\n        Math.round((this.viewerBox_.width - width) / 2),\n        Math.round((this.viewerBox_.height - height) / 2),\n        Math.round(width),\n        Math.round(height));\n\n    st.setStyles(this.image_, {\n      top: st.px(this.imageBox_.top),\n      left: st.px(this.imageBox_.left),\n      width: st.px(this.imageBox_.width),\n      height: st.px(this.imageBox_.height),\n    });\n\n    // If aspect ratio is off by too much, adjust max scale\n    const viewerBoxRatio = this.viewerBox_.width / this.viewerBox_.height;\n    const maxScale = Math.max(\n        viewerBoxRatio / sourceAspectRatio,\n        sourceAspectRatio / viewerBoxRatio\n    );\n    this.maxScale_ = Math.max(DEFAULT_MAX_SCALE, maxScale);\n\n    // Reset zoom and pan.\n    this.startScale_ = this.scale_ = 1;\n    this.startX_ = this.posX_ = 0;\n    this.startY_ = this.posY_ = 0;\n    this.updatePanZoomBounds_(this.scale_);\n    this.updatePanZoom_();\n\n    return this.updateSrc_();\n  }\n\n  /**\n   * @return {!Promise}\n   * @private\n   */\n  updateSrc_() {\n    if (!this.srcset_) {\n      // Do not update source if the lightbox has already exited.\n      return Promise.resolve();\n    }\n    this.maxSeenScale_ = Math.max(this.maxSeenScale_, this.scale_);\n    const width = this.imageBox_.width * this.maxSeenScale_;\n    const src = this.srcset_.select(width, this.lightbox_.getDpr());\n    if (src == this.image_.getAttribute('src')) {\n      return Promise.resolve();\n    }\n    // Notice that we will wait until the next event cycle to set the \"src\".\n    // This ensures that the already available image will show immediately\n    // and then naturally upgrade to a higher quality image.\n    return Services.timerFor(this.win).promise(1).then(() => {\n      this.image_.setAttribute('src', src);\n      return this.loadPromise_(this.image_);\n    });\n  }\n\n  /** @private */\n  setupGestures_() {\n    const gestures = Gestures.get(this.image_);\n\n    // Toggle viewer mode.\n    gestures.onGesture(TapRecognizer, () => {\n      this.lightbox_.toggleViewMode();\n    });\n\n    // Movable.\n    gestures.onGesture(SwipeXYRecognizer, e => {\n      this.onMove_(e.data.deltaX, e.data.deltaY, false);\n      if (e.data.last) {\n        this.onMoveRelease_(e.data.velocityX, e.data.velocityY);\n      }\n    });\n    gestures.onPointerDown(() => {\n      if (this.motion_) {\n        this.motion_.halt();\n      }\n    });\n\n    // Zoomable.\n    gestures.onGesture(DoubletapRecognizer, e => {\n      let newScale;\n      if (this.scale_ == 1) {\n        newScale = this.maxScale_;\n      } else {\n        newScale = this.minScale_;\n      }\n      const deltaX = this.viewerBox_.width / 2 - e.data.clientX;\n      const deltaY = this.viewerBox_.height / 2 - e.data.clientY;\n      this.onZoom_(newScale, deltaX, deltaY, true).then(() => {\n        return this.onZoomRelease_(0, 0, 0, 0, 0, 0);\n      });\n    });\n    gestures.onGesture(TapzoomRecognizer, e => {\n      this.onZoomInc_(e.data.centerClientX, e.data.centerClientY,\n          e.data.deltaX, e.data.deltaY);\n      if (e.data.last) {\n        this.onZoomRelease_(e.data.centerClientX, e.data.centerClientY,\n            e.data.deltaX, e.data.deltaY, e.data.velocityY, e.data.velocityY);\n      }\n    });\n  }\n\n  /**\n   * Returns value bound to min and max values +/- extent.\n   * @param {number} v\n   * @param {number} min\n   * @param {number} max\n   * @param {number} extent\n   * @return {number}\n   * @private\n   */\n  boundValue_(v, min, max, extent) {\n    return Math.max(min - extent, Math.min(max + extent, v));\n  }\n\n  /**\n   * Returns the scale within the allowed range with possible extent.\n   * @param {number} s\n   * @param {boolean} allowExtent\n   * @return {number}\n   * @private\n   */\n  boundScale_(s, allowExtent) {\n    return this.boundValue_(s, this.minScale_, this.maxScale_,\n        allowExtent ? 0.25 : 0);\n  }\n\n  /**\n   * Returns the X position within the allowed range with possible extent.\n   * @param {number} x\n   * @param {boolean} allowExtent\n   * @return {number}\n   * @private\n   */\n  boundX_(x, allowExtent) {\n    return this.boundValue_(x, this.minX_, this.maxX_,\n        allowExtent && this.scale_ > 1 ? this.viewerBox_.width * 0.25 : 0);\n  }\n\n  /**\n   * Returns the Y position within the allowed range with possible extent.\n   * @param {number} y\n   * @param {boolean} allowExtent\n   * @return {number}\n   * @private\n   */\n  boundY_(y, allowExtent) {\n    return this.boundValue_(y, this.minY_, this.maxY_,\n        allowExtent ? this.viewerBox_.height * 0.25 : 0);\n  }\n\n  /**\n   * Updates X/Y bounds based on the provided scale value. The min/max bounds\n   * are calculated to allow full pan of the image regardless of the scale\n   * value.\n   * @param {number} scale\n   * @private\n   */\n  updatePanZoomBounds_(scale) {\n    let maxY = 0;\n    let minY = 0;\n    const dh = this.viewerBox_.height - this.imageBox_.height * scale;\n    if (dh >= 0) {\n      minY = maxY = 0;\n    } else {\n      minY = dh / 2;\n      maxY = -minY;\n    }\n\n    let maxX = 0;\n    let minX = 0;\n    const dw = this.viewerBox_.width - this.imageBox_.width * scale;\n    if (dw >= 0) {\n      minX = maxX = 0;\n    } else {\n      minX = dw / 2;\n      maxX = -minX;\n    }\n\n    this.minX_ = minX;\n    this.minY_ = minY;\n    this.maxX_ = maxX;\n    this.maxY_ = maxY;\n  }\n\n  /**\n   * Updates pan/zoom of the image based on the current values.\n   * @private\n   */\n  updatePanZoom_() {\n    st.setStyles(this.image_, {\n      transform: st.translate(this.posX_, this.posY_) +\n          ' ' + st.scale(this.scale_),\n    });\n    if (this.scale_ != 1) {\n      this.lightbox_.toggleViewMode(true);\n    }\n  }\n\n  /**\n   * Performs a one-step or an animated motion (panning).\n   * @param {number} deltaX\n   * @param {number} deltaY\n   * @param {boolean} animate\n   * @private\n   */\n  onMove_(deltaX, deltaY, animate) {\n    const newPosX = this.boundX_(this.startX_ + deltaX, true);\n    const newPosY = this.boundY_(this.startY_ + deltaY, true);\n    this.set_(this.scale_, newPosX, newPosY, animate);\n  }\n\n  /**\n   * Performs actions once the motion gesture has been complete. The motion\n   * may continue based on the final velocity.\n   * @param {number} veloX\n   * @param {number} veloY\n   * @private\n   */\n  onMoveRelease_(veloX, veloY) {\n    const deltaY = this.posY_ - this.startY_;\n    if (this.scale_ == 1 && Math.abs(deltaY) > 10) {\n      this.lightbox_.close();\n      return;\n    }\n\n    // Continue motion.\n    this.motion_ = continueMotion(this.image_,\n        this.posX_, this.posY_, veloX, veloY,\n        (x, y) => {\n          const newPosX = this.boundX_(x, true);\n          const newPosY = this.boundY_(y, true);\n          if (Math.abs(newPosX - this.posX_) < 1 &&\n                Math.abs(newPosY - this.posY_) < 1) {\n            // Hit the wall: stop motion.\n            return false;\n          }\n          this.set_(this.scale_, newPosX, newPosY, false);\n          return true;\n        });\n\n    // Snap back.\n    this.motion_.thenAlways(() => {\n      this.motion_ = null;\n      return this.release_();\n    });\n  }\n\n  /**\n   * Performs a one-step zoom action.\n   * @param {number} centerClientX\n   * @param {number} centerClientY\n   * @param {number} deltaX\n   * @param {number} deltaY\n   * @private\n   */\n  onZoomInc_(centerClientX, centerClientY, deltaX, deltaY) {\n    const dist = Math.sqrt(deltaX * deltaX + deltaY * deltaY);\n\n    const zoomSign = Math.abs(deltaY) > Math.abs(deltaX) ?\n      Math.sign(deltaY) : Math.sign(-deltaX);\n    if (zoomSign == 0) {\n      return;\n    }\n\n    const newScale = this.startScale_ * (1 + zoomSign * dist / 100);\n    const deltaCenterX = this.viewerBox_.width / 2 - centerClientX;\n    const deltaCenterY = this.viewerBox_.height / 2 - centerClientY;\n    deltaX = Math.min(deltaCenterX, deltaCenterX * (dist / 100));\n    deltaY = Math.min(deltaCenterY, deltaCenterY * (dist / 100));\n    this.onZoom_(newScale, deltaX, deltaY, false);\n  }\n\n  /**\n   * Performs a one-step or an animated zoom action.\n   * @param {number} scale\n   * @param {number} deltaX\n   * @param {number} deltaY\n   * @param {boolean} animate\n   * @return {!Promise|undefined}\n   * @private\n   */\n  onZoom_(scale, deltaX, deltaY, animate) {\n    const newScale = this.boundScale_(scale, true);\n    if (newScale == this.scale_) {\n      return;\n    }\n\n    this.updatePanZoomBounds_(newScale);\n\n    const newPosX = this.boundX_(this.startX_ + deltaX * newScale, false);\n    const newPosY = this.boundY_(this.startY_ + deltaY * newScale, false);\n    return /** @type {!Promise|undefined} */ (\n      this.set_(newScale, newPosX, newPosY, animate));\n  }\n\n  /**\n   * Performs actions after the gesture that was performing zooming has been\n   * released. The zooming may continue based on the final velocity.\n   * @param {number} centerClientX\n   * @param {number} centerClientY\n   * @param {number} deltaX\n   * @param {number} deltaY\n   * @param {number} veloX\n   * @param {number} veloY\n   * @return {!Promise}\n   * @private\n   */\n  onZoomRelease_(centerClientX, centerClientY, deltaX, deltaY, veloX, veloY) {\n    let promise;\n    if (veloX == 0 && veloY == 0) {\n      promise = Promise.resolve();\n    } else {\n      promise = continueMotion(this.image_,\n          deltaX, deltaY, veloX, veloY,\n          (x, y) => {\n            this.onZoomInc_(centerClientX, centerClientY, x, y);\n            return true;\n          }).thenAlways();\n    }\n\n    const relayout = this.scale_ > this.startScale_;\n    return promise.then(() => {\n      return this.release_();\n    }).then(() => {\n      if (relayout) {\n        this.updateSrc_();\n      }\n    });\n  }\n\n  /**\n   * Sets or animates pan/zoom parameters.\n   * @param {number} newScale\n   * @param {number} newPosX\n   * @param {number} newPosY\n   * @param {boolean} animate\n   * @return {!Promise|undefined}\n   * @private\n   */\n  set_(newScale, newPosX, newPosY, animate) {\n    const ds = newScale - this.scale_;\n    const dx = newPosX - this.posX_;\n    const dy = newPosY - this.posY_;\n    const dist = Math.sqrt(dx * dx + dy * dy);\n\n    let dur = 0;\n    if (animate) {\n      const maxDur = 250;\n      dur = Math.min(maxDur, Math.max(\n          maxDur * dist * 0.01, // Moving component.\n          maxDur * Math.abs(ds))); // Zooming component.\n    }\n\n    let promise;\n    if (dur > 16 && animate) {\n      /** @const {!TransitionDef<number>} */\n      const scaleFunc = tr.numeric(this.scale_, newScale);\n      /** @const {!TransitionDef<number>} */\n      const xFunc = tr.numeric(this.posX_, newPosX);\n      /** @const {!TransitionDef<number>} */\n      const yFunc = tr.numeric(this.posY_, newPosY);\n      promise = Animation.animate(this.image_, time => {\n        this.scale_ = scaleFunc(time);\n        this.posX_ = xFunc(time);\n        this.posY_ = yFunc(time);\n        this.updatePanZoom_();\n      }, dur, PAN_ZOOM_CURVE_).thenAlways(() => {\n        this.scale_ = newScale;\n        this.posX_ = newPosX;\n        this.posY_ = newPosY;\n        this.updatePanZoom_();\n      });\n    } else {\n      this.scale_ = newScale;\n      this.posX_ = newPosX;\n      this.posY_ = newPosY;\n      this.updatePanZoom_();\n      if (animate) {\n        promise = Promise.resolve();\n      } else {\n        promise = undefined;\n      }\n    }\n\n    return promise;\n  }\n\n  /**\n   * Sets or animates pan/zoom parameters after release of the gesture.\n   * @return {!Promise}\n   * @private\n   */\n  release_() {\n    const newScale = this.boundScale_(this.scale_, false);\n    if (newScale != this.scale_) {\n      this.updatePanZoomBounds_(newScale);\n    }\n    const newPosX = this.boundX_(this.posX_ / this.scale_ * newScale, false);\n    const newPosY = this.boundY_(this.posY_ / this.scale_ * newScale, false);\n    return this.set_(newScale, newPosX, newPosY, true).then(() => {\n      this.startScale_ = this.scale_;\n      this.startX_ = this.posX_;\n      this.startY_ = this.posY_;\n    });\n  }\n}\n\n\n/**\n * This class implements \"amp-image-lightbox\" extension element.\n */\nclass AmpImageLightbox extends AMP.BaseElement {\n\n  /** @param {!AmpElement} element */\n  constructor(element) {\n    super(element);\n\n    /** @private {number} */\n    this.historyId_ = -1;\n\n    /** @private {boolean} */\n    this.active_ = false;\n\n    /** @private {boolean} */\n    this.entering_ = false;\n\n    /** @private {?Element} */\n    this.sourceElement_ = null;\n\n    /** @private {?Element} */\n    this.sourceImage_ = null;\n\n    /** @private {?UnlistenDef} */\n    this.unlistenViewport_ = null;\n\n    /** @private {?Element} */\n    this.container_ = null;\n\n    /** @private {?ImageViewer} */\n    this.imageViewer_ = null;\n\n    /** @private {?Element} */\n    this.captionElement_ = null;\n\n    /** @private {!Function} */\n    this.boundCloseOnEscape_ = this.closeOnEscape_.bind(this);\n  }\n\n  /**\n  * Lazily builds the image-lightbox DOM on the first open.\n  * @private\n  * */\n  buildLightbox_() {\n    if (this.container_) {\n      return;\n    }\n    this.container_ = this.element.ownerDocument.createElement('div');\n    this.container_.classList.add('i-amphtml-image-lightbox-container');\n    this.element.appendChild(this.container_);\n\n    this.imageViewer_ = new ImageViewer(this, this.win,\n        this.loadPromise.bind(this));\n    this.container_.appendChild(this.imageViewer_.getElement());\n\n    this.captionElement_ = this.element.ownerDocument.createElement('div');\n\n    // Set id to the captionElement_ for accessibility reason\n    this.captionElement_.setAttribute('id', this.element.getAttribute('id')\n        + '-caption');\n\n    this.captionElement_.classList.add('amp-image-lightbox-caption');\n    this.captionElement_.classList.add('i-amphtml-image-lightbox-caption');\n    this.container_.appendChild(this.captionElement_);\n\n    // Invisible close button at the end of lightbox for screen-readers.\n    const screenReaderCloseButton = this.element.ownerDocument\n        .createElement('button');\n    // TODO(aghassemi, #4146) i18n\n    const ariaLabel = this.element.getAttribute('data-close-button-aria-label')\n        || 'Close the lightbox';\n    screenReaderCloseButton.textContent = ariaLabel;\n    screenReaderCloseButton.classList.add('i-amphtml-screen-reader');\n\n    // This is for screen-readers only, should not get a tab stop.\n    screenReaderCloseButton.tabIndex = -1;\n    screenReaderCloseButton.addEventListener('click', () => {\n      this.close();\n    });\n    this.element.appendChild(screenReaderCloseButton);\n\n    const gestures = Gestures.get(this.element);\n    this.element.addEventListener('click', e => {\n      if (!this.entering_ &&\n            !this.imageViewer_.getImage().contains(/** @type {?Node} */ (\n              e.target))) {\n        this.close();\n      }\n    });\n    gestures.onGesture(TapRecognizer, () => {\n      if (!this.entering_) {\n        this.close();\n      }\n    });\n    gestures.onGesture(SwipeXYRecognizer, () => {\n      // Consume to block scroll events and side-swipe.\n    });\n  }\n\n  /** @override */\n  activate(invocation) {\n    if (this.active_) {\n      return;\n    }\n    this.buildLightbox_();\n\n    const source = invocation.caller;\n    user().assert(source && SUPPORTED_ELEMENTS_[source.tagName.toLowerCase()],\n        'Unsupported element: %s', source.tagName);\n\n    this.active_ = true;\n    this.reset_();\n    this.init_(source);\n\n    this.win.document.documentElement.addEventListener(\n        'keydown', this.boundCloseOnEscape_);\n\n    // Prepare to enter in lightbox\n    this.getViewport().enterLightboxMode();\n\n    this.enter_();\n\n    this.unlistenViewport_ = this.getViewport().onChanged(() => {\n      if (this.active_) {\n        // In IOS 10.3, the measured size of an element is incorrect if the\n        // element size depends on window size directly and the measurement\n        // happens in window.resize event. Adding a timeout for correct\n        // measurement. See https://github.com/ampproject/amphtml/issues/8479\n        if (startsWith(\n            Services.platformFor(this.win).getIosVersionString(), '10.3')) {\n          Services.timerFor(this.win).delay(() => {\n            this.imageViewer_.measure();\n          }, 500);\n        } else {\n          this.imageViewer_.measure();\n        }\n      }\n    });\n\n    this.getHistory_().push(this.close.bind(this)).then(historyId => {\n      this.historyId_ = historyId;\n    });\n  }\n\n  /**\n   * Handles closing the lightbox when the ESC key is pressed.\n   * @param {!Event} event\n   * @private\n   */\n  closeOnEscape_(event) {\n    if (event.keyCode == KeyCodes.ESCAPE) {\n      this.close();\n    }\n  }\n\n  /**\n   * Closes the lightbox.\n   */\n  close() {\n    if (!this.active_) {\n      return;\n    }\n    this.active_ = false;\n    this.entering_ = false;\n\n    this.exit_();\n\n    if (this.unlistenViewport_) {\n      this.unlistenViewport_();\n      this.unlistenViewport_ = null;\n    }\n\n    this.getViewport().leaveLightboxMode();\n    if (this.historyId_ != -1) {\n      this.getHistory_().pop(this.historyId_);\n    }\n    this.win.document.documentElement.removeEventListener(\n        'keydown', this.boundCloseOnEscape_);\n    if (this.sourceElement_) {\n      dom.tryFocus(this.sourceElement_);\n    }\n  }\n\n  /**\n   * Toggles the view mode.\n   * @param {boolean=} opt_on\n   */\n  toggleViewMode(opt_on) {\n    if (opt_on !== undefined) {\n      this.container_.classList.toggle(\n          'i-amphtml-image-lightbox-view-mode', opt_on);\n    } else {\n      this.container_.classList.toggle('i-amphtml-image-lightbox-view-mode');\n    }\n  }\n\n  /**\n   * @param {!Element} sourceElement\n   * @private\n   */\n  init_(sourceElement) {\n    this.sourceElement_ = sourceElement;\n\n    // Initialize the viewer.\n    this.sourceImage_ = dom.elementByTag(sourceElement, 'img');\n    this.imageViewer_.init(this.sourceElement_, this.sourceImage_);\n\n    // Discover caption.\n    let caption = null;\n\n    // 1. Check <figure> and <figcaption>.\n    const figure = dom.closestByTag(sourceElement, 'figure');\n    if (figure) {\n      caption = dom.elementByTag(figure, 'figcaption');\n    }\n\n    // 2. Check \"aria-describedby\".\n    if (!caption) {\n      const describedBy = sourceElement.getAttribute('aria-describedby');\n      caption = this.element.ownerDocument.getElementById(describedBy);\n    }\n\n    if (caption) {\n      dom.copyChildren(caption, dev().assertElement(this.captionElement_));\n      this.imageViewer_.getImage().setAttribute('aria-describedby',\n          this.captionElement_.getAttribute('id'));\n    }\n\n    this.captionElement_.classList.toggle('i-amphtml-empty', !caption);\n  }\n\n  /** @private */\n  reset_() {\n    this.imageViewer_.reset();\n    dom.removeChildren(dev().assertElement(this.captionElement_));\n    this.sourceElement_ = null;\n    this.sourceImage_ = null;\n    this.toggleViewMode(false);\n  }\n\n  /**\n   * @return {!Promise}\n   * @private\n   */\n  enter_() {\n    this.entering_ = true;\n\n    st.setStyles(this.element, {\n      opacity: 0,\n      display: '',\n    });\n    this.imageViewer_.measure();\n\n    const anim = new Animation(this.element);\n    const dur = 500;\n\n    // Lightbox background fades in.\n    anim.add(0, tr.setStyles(this.element, {\n      opacity: tr.numeric(0, 1),\n    }), 0.6, ENTER_CURVE_);\n\n    // Try to transition from the source image.\n    let transLayer = null;\n    if (this.sourceImage_ && isLoaded(this.sourceImage_) &&\n            this.sourceImage_.src) {\n      transLayer = this.element.ownerDocument.createElement('div');\n      transLayer.classList.add('i-amphtml-image-lightbox-trans');\n      this.element.ownerDocument.body.appendChild(transLayer);\n\n      const rect = layoutRectFromDomRect(this.sourceImage_\n          ./*OK*/getBoundingClientRect());\n      const imageBox = this.imageViewer_.getImageBox();\n      const clone = this.sourceImage_.cloneNode(true);\n      clone.className = '';\n      st.setStyles(clone, {\n        position: 'absolute',\n        top: st.px(rect.top),\n        left: st.px(rect.left),\n        width: st.px(rect.width),\n        height: st.px(rect.height),\n        transformOrigin: 'top left',\n        willChange: 'transform',\n      });\n      transLayer.appendChild(clone);\n\n      this.sourceImage_.classList.add('i-amphtml-ghost');\n\n      // Move and resize the image to the location given by the lightbox.\n      const dx = imageBox.left - rect.left;\n      const dy = imageBox.top - rect.top;\n      const scaleX = rect.width != 0 ? imageBox.width / rect.width : 1;\n      // Duration will be somewhere between 0.2 and 0.8 depending on how far\n      // the image needs to move.\n      const motionTime = Math.max(0.2, Math.min(0.8, Math.abs(dy) / 250 * 0.8));\n      anim.add(0, tr.setStyles(clone, {\n        transform: tr.concat([\n          tr.translate(tr.numeric(0, dx), tr.numeric(0, dy)),\n          tr.scale(tr.numeric(1, scaleX)),\n        ]),\n      }), motionTime, ENTER_CURVE_);\n\n      // Fade in the container. This will mostly affect the caption.\n      st.setStyles(dev().assertElement(this.container_), {opacity: 0});\n      anim.add(0.8, tr.setStyles(dev().assertElement(this.container_), {\n        opacity: tr.numeric(0, 1),\n      }), 0.1, ENTER_CURVE_);\n\n      // At the end, fade out the transition image.\n      anim.add(0.9, tr.setStyles(transLayer, {\n        opacity: tr.numeric(1, 0.01),\n      }), 0.1, EXIT_CURVE_);\n    }\n\n    return anim.start(dur).thenAlways(() => {\n      this.entering_ = false;\n      st.setStyles(this.element, {opacity: ''});\n      st.setStyles(dev().assertElement(this.container_), {opacity: ''});\n      if (transLayer) {\n        this.element.ownerDocument.body.removeChild(transLayer);\n      }\n    });\n  }\n\n  /**\n   * @return {!Promise}\n   * @private\n   */\n  exit_() {\n    const image = this.imageViewer_.getImage();\n    const imageBox = this.imageViewer_.getImageBoxWithOffset();\n\n    const anim = new Animation(this.element);\n    let dur = 500;\n\n    // Lightbox background fades out.\n    anim.add(0, tr.setStyles(this.element, {\n      opacity: tr.numeric(1, 0),\n    }), 0.9, EXIT_CURVE_);\n\n    // Try to transition to the source image.\n    let transLayer = null;\n    if (isLoaded(image) && image.src && this.sourceImage_) {\n      transLayer = this.element.ownerDocument.createElement('div');\n      transLayer.classList.add('i-amphtml-image-lightbox-trans');\n      this.element.ownerDocument.body.appendChild(transLayer);\n\n      const rect = layoutRectFromDomRect(this.sourceImage_\n          ./*OK*/getBoundingClientRect());\n      const clone = image.cloneNode(true);\n      st.setStyles(clone, {\n        position: 'absolute',\n        top: st.px(imageBox.top),\n        left: st.px(imageBox.left),\n        width: st.px(imageBox.width),\n        height: st.px(imageBox.height),\n        transform: '',\n        transformOrigin: 'top left',\n        willChange: 'transform',\n      });\n      transLayer.appendChild(clone);\n\n      // Fade out the container.\n      anim.add(0, tr.setStyles(dev().assertElement(this.container_), {\n        opacity: tr.numeric(1, 0),\n      }), 0.1, EXIT_CURVE_);\n\n      // Move and resize the image back to where it is in the article.\n      const dx = rect.left - imageBox.left;\n      const dy = rect.top - imageBox.top;\n      const scaleX = imageBox.width != 0 ? rect.width / imageBox.width : 1;\n      /** @const {!TransitionDef<void>} */\n      const moveAndScale = tr.setStyles(clone, {\n        transform: tr.concat([\n          tr.translate(tr.numeric(0, dx), tr.numeric(0, dy)),\n          tr.scale(tr.numeric(1, scaleX)),\n        ]),\n      });\n\n      // Duration will be somewhere between 0.2 and 0.8 depending on how far\n      // the image needs to move. Start the motion later too, but no later\n      // than 0.2.\n      const motionTime = Math.max(0.2, Math.min(0.8, Math.abs(dy) / 250 * 0.8));\n      anim.add(Math.min(0.8 - motionTime, 0.2), (time, complete) => {\n        moveAndScale(time);\n        if (complete) {\n          this.sourceImage_.classList.remove('i-amphtml-ghost');\n        }\n      }, motionTime, EXIT_CURVE_);\n\n      // Fade out the transition image.\n      anim.add(0.8, tr.setStyles(transLayer, {\n        opacity: tr.numeric(1, 0.01),\n      }), 0.2, EXIT_CURVE_);\n\n      // Duration will be somewhere between 300ms and 700ms depending on\n      // how far the image needs to move.\n      dur = Math.max(Math.min(Math.abs(dy) / 250 * dur, dur), 300);\n    }\n\n    return anim.start(dur).thenAlways(() => {\n      if (this.sourceImage_) {\n        this.sourceImage_.classList.remove('i-amphtml-ghost');\n      }\n      this./*OK*/collapse();\n      st.setStyles(this.element, {\n        opacity: '',\n      });\n      st.setStyles(dev().assertElement(this.container_), {opacity: ''});\n      if (transLayer) {\n        this.element.ownerDocument.body.removeChild(transLayer);\n      }\n      this.reset_();\n    });\n  }\n\n  /** @private @return {!../../../src/service/history-impl.History} */\n  getHistory_() {\n    return Services.historyForDoc(this.getAmpDoc());\n  }\n}\n\n\nAMP.extension(TAG, '0.1', AMP => {\n  AMP.registerElement(TAG, AmpImageLightbox, CSS);\n});\n","/*!\n\nCopyright (C) 2014-2016 by Andrea Giammarchi - @WebReflection\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\n*/\n// global window Object\n// optional polyfill info\n//    'auto' used by default, everything is feature detected\n//    'force' use the polyfill even if not fully needed\nfunction installCustomElements(window, polyfill) {'use strict';\n\n  // DO NOT USE THIS FILE DIRECTLY, IT WON'T WORK\n  // THIS IS A PROJECT BASED ON A BUILD SYSTEM\n  // THIS FILE IS JUST WRAPPED UP RESULTING IN\n  // build/document-register-element.node.js\n\n  var\n    document = window.document,\n    Object = window.Object\n  ;\n\n  var htmlClass = (function (info) {\n    // (C) Andrea Giammarchi - @WebReflection - MIT Style\n    var\n      catchClass = /^[A-Z]+[a-z]/,\n      filterBy = function (re) {\n        var arr = [], tag;\n        for (tag in register) {\n          if (re.test(tag)) arr.push(tag);\n        }\n        return arr;\n      },\n      add = function (Class, tag) {\n        tag = tag.toLowerCase();\n        if (!(tag in register)) {\n          register[Class] = (register[Class] || []).concat(tag);\n          register[tag] = (register[tag.toUpperCase()] = Class);\n        }\n      },\n      register = (Object.create || Object)(null),\n      htmlClass = {},\n      i, section, tags, Class\n    ;\n    for (section in info) {\n      for (Class in info[section]) {\n        tags = info[section][Class];\n        register[Class] = tags;\n        for (i = 0; i < tags.length; i++) {\n          register[tags[i].toLowerCase()] =\n          register[tags[i].toUpperCase()] = Class;\n        }\n      }\n    }\n    htmlClass.get = function get(tagOrClass) {\n      return typeof tagOrClass === 'string' ?\n        (register[tagOrClass] || (catchClass.test(tagOrClass) ? [] : '')) :\n        filterBy(tagOrClass);\n    };\n    htmlClass.set = function set(tag, Class) {\n      return (catchClass.test(tag) ?\n        add(tag, Class) :\n        add(Class, tag)\n      ), htmlClass;\n    };\n    return htmlClass;\n  }({\n    \"collections\": {\n      \"HTMLAllCollection\": [\n        \"all\"\n      ],\n      \"HTMLCollection\": [\n        \"forms\"\n      ],\n      \"HTMLFormControlsCollection\": [\n        \"elements\"\n      ],\n      \"HTMLOptionsCollection\": [\n        \"options\"\n      ]\n    },\n    \"elements\": {\n      \"Element\": [\n        \"element\"\n      ],\n      \"HTMLAnchorElement\": [\n        \"a\"\n      ],\n      \"HTMLAppletElement\": [\n        \"applet\"\n      ],\n      \"HTMLAreaElement\": [\n        \"area\"\n      ],\n      \"HTMLAttachmentElement\": [\n        \"attachment\"\n      ],\n      \"HTMLAudioElement\": [\n        \"audio\"\n      ],\n      \"HTMLBRElement\": [\n        \"br\"\n      ],\n      \"HTMLBaseElement\": [\n        \"base\"\n      ],\n      \"HTMLBodyElement\": [\n        \"body\"\n      ],\n      \"HTMLButtonElement\": [\n        \"button\"\n      ],\n      \"HTMLCanvasElement\": [\n        \"canvas\"\n      ],\n      \"HTMLContentElement\": [\n        \"content\"\n      ],\n      \"HTMLDListElement\": [\n        \"dl\"\n      ],\n      \"HTMLDataElement\": [\n        \"data\"\n      ],\n      \"HTMLDataListElement\": [\n        \"datalist\"\n      ],\n      \"HTMLDetailsElement\": [\n        \"details\"\n      ],\n      \"HTMLDialogElement\": [\n        \"dialog\"\n      ],\n      \"HTMLDirectoryElement\": [\n        \"dir\"\n      ],\n      \"HTMLDivElement\": [\n        \"div\"\n      ],\n      \"HTMLDocument\": [\n        \"document\"\n      ],\n      \"HTMLElement\": [\n        \"element\",\n        \"abbr\",\n        \"address\",\n        \"article\",\n        \"aside\",\n        \"b\",\n        \"bdi\",\n        \"bdo\",\n        \"cite\",\n        \"code\",\n        \"command\",\n        \"dd\",\n        \"dfn\",\n        \"dt\",\n        \"em\",\n        \"figcaption\",\n        \"figure\",\n        \"footer\",\n        \"header\",\n        \"i\",\n        \"kbd\",\n        \"mark\",\n        \"nav\",\n        \"noscript\",\n        \"rp\",\n        \"rt\",\n        \"ruby\",\n        \"s\",\n        \"samp\",\n        \"section\",\n        \"small\",\n        \"strong\",\n        \"sub\",\n        \"summary\",\n        \"sup\",\n        \"u\",\n        \"var\",\n        \"wbr\"\n      ],\n      \"HTMLEmbedElement\": [\n        \"embed\"\n      ],\n      \"HTMLFieldSetElement\": [\n        \"fieldset\"\n      ],\n      \"HTMLFontElement\": [\n        \"font\"\n      ],\n      \"HTMLFormElement\": [\n        \"form\"\n      ],\n      \"HTMLFrameElement\": [\n        \"frame\"\n      ],\n      \"HTMLFrameSetElement\": [\n        \"frameset\"\n      ],\n      \"HTMLHRElement\": [\n        \"hr\"\n      ],\n      \"HTMLHeadElement\": [\n        \"head\"\n      ],\n      \"HTMLHeadingElement\": [\n        \"h1\",\n        \"h2\",\n        \"h3\",\n        \"h4\",\n        \"h5\",\n        \"h6\"\n      ],\n      \"HTMLHtmlElement\": [\n        \"html\"\n      ],\n      \"HTMLIFrameElement\": [\n        \"iframe\"\n      ],\n      \"HTMLImageElement\": [\n        \"img\"\n      ],\n      \"HTMLInputElement\": [\n        \"input\"\n      ],\n      \"HTMLKeygenElement\": [\n        \"keygen\"\n      ],\n      \"HTMLLIElement\": [\n        \"li\"\n      ],\n      \"HTMLLabelElement\": [\n        \"label\"\n      ],\n      \"HTMLLegendElement\": [\n        \"legend\"\n      ],\n      \"HTMLLinkElement\": [\n        \"link\"\n      ],\n      \"HTMLMapElement\": [\n        \"map\"\n      ],\n      \"HTMLMarqueeElement\": [\n        \"marquee\"\n      ],\n      \"HTMLMediaElement\": [\n        \"media\"\n      ],\n      \"HTMLMenuElement\": [\n        \"menu\"\n      ],\n      \"HTMLMenuItemElement\": [\n        \"menuitem\"\n      ],\n      \"HTMLMetaElement\": [\n        \"meta\"\n      ],\n      \"HTMLMeterElement\": [\n        \"meter\"\n      ],\n      \"HTMLModElement\": [\n        \"del\",\n        \"ins\"\n      ],\n      \"HTMLOListElement\": [\n        \"ol\"\n      ],\n      \"HTMLObjectElement\": [\n        \"object\"\n      ],\n      \"HTMLOptGroupElement\": [\n        \"optgroup\"\n      ],\n      \"HTMLOptionElement\": [\n        \"option\"\n      ],\n      \"HTMLOutputElement\": [\n        \"output\"\n      ],\n      \"HTMLParagraphElement\": [\n        \"p\"\n      ],\n      \"HTMLParamElement\": [\n        \"param\"\n      ],\n      \"HTMLPictureElement\": [\n        \"picture\"\n      ],\n      \"HTMLPreElement\": [\n        \"pre\"\n      ],\n      \"HTMLProgressElement\": [\n        \"progress\"\n      ],\n      \"HTMLQuoteElement\": [\n        \"blockquote\",\n        \"q\",\n        \"quote\"\n      ],\n      \"HTMLScriptElement\": [\n        \"script\"\n      ],\n      \"HTMLSelectElement\": [\n        \"select\"\n      ],\n      \"HTMLShadowElement\": [\n        \"shadow\"\n      ],\n      \"HTMLSlotElement\": [\n        \"slot\"\n      ],\n      \"HTMLSourceElement\": [\n        \"source\"\n      ],\n      \"HTMLSpanElement\": [\n        \"span\"\n      ],\n      \"HTMLStyleElement\": [\n        \"style\"\n      ],\n      \"HTMLTableCaptionElement\": [\n        \"caption\"\n      ],\n      \"HTMLTableCellElement\": [\n        \"td\",\n        \"th\"\n      ],\n      \"HTMLTableColElement\": [\n        \"col\",\n        \"colgroup\"\n      ],\n      \"HTMLTableElement\": [\n        \"table\"\n      ],\n      \"HTMLTableRowElement\": [\n        \"tr\"\n      ],\n      \"HTMLTableSectionElement\": [\n        \"thead\",\n        \"tbody\",\n        \"tfoot\"\n      ],\n      \"HTMLTemplateElement\": [\n        \"template\"\n      ],\n      \"HTMLTextAreaElement\": [\n        \"textarea\"\n      ],\n      \"HTMLTimeElement\": [\n        \"time\"\n      ],\n      \"HTMLTitleElement\": [\n        \"title\"\n      ],\n      \"HTMLTrackElement\": [\n        \"track\"\n      ],\n      \"HTMLUListElement\": [\n        \"ul\"\n      ],\n      \"HTMLUnknownElement\": [\n        \"unknown\",\n        \"vhgroupv\",\n        \"vkeygen\"\n      ],\n      \"HTMLVideoElement\": [\n        \"video\"\n      ]\n    },\n    \"nodes\": {\n      \"Attr\": [\n        \"node\"\n      ],\n      \"Audio\": [\n        \"audio\"\n      ],\n      \"CDATASection\": [\n        \"node\"\n      ],\n      \"CharacterData\": [\n        \"node\"\n      ],\n      \"Comment\": [\n        \"#comment\"\n      ],\n      \"Document\": [\n        \"#document\"\n      ],\n      \"DocumentFragment\": [\n        \"#document-fragment\"\n      ],\n      \"DocumentType\": [\n        \"node\"\n      ],\n      \"HTMLDocument\": [\n        \"#document\"\n      ],\n      \"Image\": [\n        \"img\"\n      ],\n      \"Option\": [\n        \"option\"\n      ],\n      \"ProcessingInstruction\": [\n        \"node\"\n      ],\n      \"ShadowRoot\": [\n        \"#shadow-root\"\n      ],\n      \"Text\": [\n        \"#text\"\n      ],\n      \"XMLDocument\": [\n        \"xml\"\n      ]\n    }\n  }));\n  \n  \n    \n  // passed at runtime, configurable\n  // via nodejs module\n  if (!polyfill) polyfill = 'auto';\n  \n  var\n    // V0 polyfill entry\n    REGISTER_ELEMENT = 'registerElement',\n  \n    // IE < 11 only + old WebKit for attributes + feature detection\n    EXPANDO_UID = '__' + REGISTER_ELEMENT + (window.Math.random() * 10e4 >> 0),\n  \n    // shortcuts and costants\n    ADD_EVENT_LISTENER = 'addEventListener',\n    ATTACHED = 'attached',\n    CALLBACK = 'Callback',\n    DETACHED = 'detached',\n    EXTENDS = 'extends',\n  \n    ATTRIBUTE_CHANGED_CALLBACK = 'attributeChanged' + CALLBACK,\n    ATTACHED_CALLBACK = ATTACHED + CALLBACK,\n    CONNECTED_CALLBACK = 'connected' + CALLBACK,\n    DISCONNECTED_CALLBACK = 'disconnected' + CALLBACK,\n    CREATED_CALLBACK = 'created' + CALLBACK,\n    DETACHED_CALLBACK = DETACHED + CALLBACK,\n  \n    ADDITION = 'ADDITION',\n    MODIFICATION = 'MODIFICATION',\n    REMOVAL = 'REMOVAL',\n  \n    DOM_ATTR_MODIFIED = 'DOMAttrModified',\n    DOM_CONTENT_LOADED = 'DOMContentLoaded',\n    DOM_SUBTREE_MODIFIED = 'DOMSubtreeModified',\n  \n    PREFIX_TAG = '<',\n    PREFIX_IS = '=',\n  \n    // valid and invalid node names\n    validName = /^[A-Z][A-Z0-9]*(?:-[A-Z0-9]+)+$/,\n    invalidNames = [\n      'ANNOTATION-XML',\n      'COLOR-PROFILE',\n      'FONT-FACE',\n      'FONT-FACE-SRC',\n      'FONT-FACE-URI',\n      'FONT-FACE-FORMAT',\n      'FONT-FACE-NAME',\n      'MISSING-GLYPH'\n    ],\n  \n    // registered types and their prototypes\n    types = [],\n    protos = [],\n  \n    // to query subnodes\n    query = '',\n  \n    // html shortcut used to feature detect\n    documentElement = document.documentElement,\n  \n    // ES5 inline helpers || basic patches\n    indexOf = types.indexOf || function (v) {\n      for(var i = this.length; i-- && this[i] !== v;){}\n      return i;\n    },\n  \n    // other helpers / shortcuts\n    OP = Object.prototype,\n    hOP = OP.hasOwnProperty,\n    iPO = OP.isPrototypeOf,\n  \n    defineProperty = Object.defineProperty,\n    empty = [],\n    gOPD = Object.getOwnPropertyDescriptor,\n    gOPN = Object.getOwnPropertyNames,\n    gPO = Object.getPrototypeOf,\n    sPO = Object.setPrototypeOf,\n  \n    // jshint proto: true\n    hasProto = !!Object.__proto__,\n  \n    // V1 helpers\n    fixGetClass = false,\n    DRECEV1 = '__dreCEv1',\n    customElements = window.customElements,\n    usableCustomElements = polyfill !== 'force' && !!(\n      customElements &&\n      customElements.define &&\n      customElements.get &&\n      customElements.whenDefined\n    ),\n    Dict = Object.create || Object,\n    Map = window.Map || function Map() {\n      var K = [], V = [], i;\n      return {\n        get: function (k) {\n          return V[indexOf.call(K, k)];\n        },\n        set: function (k, v) {\n          i = indexOf.call(K, k);\n          if (i < 0) V[K.push(k) - 1] = v;\n          else V[i] = v;\n        }\n      };\n    },\n    Promise = window.Promise || function (fn) {\n      var\n        notify = [],\n        done = false,\n        p = {\n          'catch': function () {\n            return p;\n          },\n          'then': function (cb) {\n            notify.push(cb);\n            if (done) setTimeout(resolve, 1);\n            return p;\n          }\n        }\n      ;\n      function resolve(value) {\n        done = true;\n        while (notify.length) notify.shift()(value);\n      }\n      fn(resolve);\n      return p;\n    },\n    justCreated = false,\n    constructors = Dict(null),\n    waitingList = Dict(null),\n    nodeNames = new Map(),\n    secondArgument = function (is) {\n      return is.toLowerCase();\n    },\n  \n    // used to create unique instances\n    create = Object.create || function Bridge(proto) {\n      // silly broken polyfill probably ever used but short enough to work\n      return proto ? ((Bridge.prototype = proto), new Bridge()) : this;\n    },\n  \n    // will set the prototype if possible\n    // or copy over all properties\n    setPrototype = sPO || (\n      hasProto ?\n        function (o, p) {\n          o.__proto__ = p;\n          return o;\n        } : (\n      (gOPN && gOPD) ?\n        (function(){\n          function setProperties(o, p) {\n            for (var\n              key,\n              names = gOPN(p),\n              i = 0, length = names.length;\n              i < length; i++\n            ) {\n              key = names[i];\n              if (!hOP.call(o, key)) {\n                defineProperty(o, key, gOPD(p, key));\n              }\n            }\n          }\n          return function (o, p) {\n            do {\n              setProperties(o, p);\n            } while ((p = gPO(p)) && !iPO.call(p, o));\n            return o;\n          };\n        }()) :\n        function (o, p) {\n          for (var key in p) {\n            o[key] = p[key];\n          }\n          return o;\n        }\n    )),\n  \n    // DOM shortcuts and helpers, if any\n  \n    MutationObserver = window.MutationObserver ||\n                       window.WebKitMutationObserver,\n  \n    HTMLElementPrototype = (\n      window.HTMLElement ||\n      window.Element ||\n      window.Node\n    ).prototype,\n  \n    IE8 = !iPO.call(HTMLElementPrototype, documentElement),\n  \n    safeProperty = IE8 ? function (o, k, d) {\n      o[k] = d.value;\n      return o;\n    } : defineProperty,\n  \n    isValidNode = IE8 ?\n      function (node) {\n        return node.nodeType === 1;\n      } :\n      function (node) {\n        return iPO.call(HTMLElementPrototype, node);\n      },\n  \n    targets = IE8 && [],\n  \n    attachShadow = HTMLElementPrototype.attachShadow,\n    cloneNode = HTMLElementPrototype.cloneNode,\n    dispatchEvent = HTMLElementPrototype.dispatchEvent,\n    getAttribute = HTMLElementPrototype.getAttribute,\n    hasAttribute = HTMLElementPrototype.hasAttribute,\n    removeAttribute = HTMLElementPrototype.removeAttribute,\n    setAttribute = HTMLElementPrototype.setAttribute,\n  \n    // replaced later on\n    createElement = document.createElement,\n    patchedCreateElement = createElement,\n  \n    // shared observer for all attributes\n    attributesObserver = MutationObserver && {\n      attributes: true,\n      characterData: true,\n      attributeOldValue: true\n    },\n  \n    // useful to detect only if there's no MutationObserver\n    DOMAttrModified = MutationObserver || function(e) {\n      doesNotSupportDOMAttrModified = false;\n      documentElement.removeEventListener(\n        DOM_ATTR_MODIFIED,\n        DOMAttrModified\n      );\n    },\n  \n    // will both be used to make DOMNodeInserted asynchronous\n    asapQueue,\n    asapTimer = 0,\n  \n    // internal flags\n    V0 = REGISTER_ELEMENT in document,\n    setListener = true,\n    justSetup = false,\n    doesNotSupportDOMAttrModified = true,\n    dropDomContentLoaded = true,\n  \n    // needed for the innerHTML helper\n    notFromInnerHTMLHelper = true,\n  \n    // optionally defined later on\n    onSubtreeModified,\n    callDOMAttrModified,\n    getAttributesMirror,\n    observer,\n    observe,\n  \n    // based on setting prototype capability\n    // will check proto or the expando attribute\n    // in order to setup the node once\n    patchIfNotAlready,\n    patch\n  ;\n  \n  // only if needed\n  if (!V0) {\n  \n    if (sPO || hasProto) {\n        patchIfNotAlready = function (node, proto) {\n          if (!iPO.call(proto, node)) {\n            setupNode(node, proto);\n          }\n        };\n        patch = setupNode;\n    } else {\n        patchIfNotAlready = function (node, proto) {\n          if (!node[EXPANDO_UID]) {\n            node[EXPANDO_UID] = Object(true);\n            setupNode(node, proto);\n          }\n        };\n        patch = patchIfNotAlready;\n    }\n  \n    if (IE8) {\n      doesNotSupportDOMAttrModified = false;\n      (function (){\n        var\n          descriptor = gOPD(HTMLElementPrototype, ADD_EVENT_LISTENER),\n          addEventListener = descriptor.value,\n          patchedRemoveAttribute = function (name) {\n            var e = new CustomEvent(DOM_ATTR_MODIFIED, {bubbles: true});\n            e.attrName = name;\n            e.prevValue = getAttribute.call(this, name);\n            e.newValue = null;\n            e[REMOVAL] = e.attrChange = 2;\n            removeAttribute.call(this, name);\n            dispatchEvent.call(this, e);\n          },\n          patchedSetAttribute = function (name, value) {\n            var\n              had = hasAttribute.call(this, name),\n              old = had && getAttribute.call(this, name),\n              e = new CustomEvent(DOM_ATTR_MODIFIED, {bubbles: true})\n            ;\n            setAttribute.call(this, name, value);\n            e.attrName = name;\n            e.prevValue = had ? old : null;\n            e.newValue = value;\n            if (had) {\n              e[MODIFICATION] = e.attrChange = 1;\n            } else {\n              e[ADDITION] = e.attrChange = 0;\n            }\n            dispatchEvent.call(this, e);\n          },\n          onPropertyChange = function (e) {\n            // jshint eqnull:true\n            var\n              node = e.currentTarget,\n              superSecret = node[EXPANDO_UID],\n              propertyName = e.propertyName,\n              event\n            ;\n            if (superSecret.hasOwnProperty(propertyName)) {\n              superSecret = superSecret[propertyName];\n              event = new CustomEvent(DOM_ATTR_MODIFIED, {bubbles: true});\n              event.attrName = superSecret.name;\n              event.prevValue = superSecret.value || null;\n              event.newValue = (superSecret.value = node[propertyName] || null);\n              if (event.prevValue == null) {\n                event[ADDITION] = event.attrChange = 0;\n              } else {\n                event[MODIFICATION] = event.attrChange = 1;\n              }\n              dispatchEvent.call(node, event);\n            }\n          }\n        ;\n        descriptor.value = function (type, handler, capture) {\n          if (\n            type === DOM_ATTR_MODIFIED &&\n            this[ATTRIBUTE_CHANGED_CALLBACK] &&\n            this.setAttribute !== patchedSetAttribute\n          ) {\n            this[EXPANDO_UID] = {\n              className: {\n                name: 'class',\n                value: this.className\n              }\n            };\n            this.setAttribute = patchedSetAttribute;\n            this.removeAttribute = patchedRemoveAttribute;\n            addEventListener.call(this, 'propertychange', onPropertyChange);\n          }\n          addEventListener.call(this, type, handler, capture);\n        };\n        defineProperty(HTMLElementPrototype, ADD_EVENT_LISTENER, descriptor);\n      }());\n    } else if (!MutationObserver) {\n      documentElement[ADD_EVENT_LISTENER](DOM_ATTR_MODIFIED, DOMAttrModified);\n      documentElement.setAttribute(EXPANDO_UID, 1);\n      documentElement.removeAttribute(EXPANDO_UID);\n      if (doesNotSupportDOMAttrModified) {\n        onSubtreeModified = function (e) {\n          var\n            node = this,\n            oldAttributes,\n            newAttributes,\n            key\n          ;\n          if (node === e.target) {\n            oldAttributes = node[EXPANDO_UID];\n            node[EXPANDO_UID] = (newAttributes = getAttributesMirror(node));\n            for (key in newAttributes) {\n              if (!(key in oldAttributes)) {\n                // attribute was added\n                return callDOMAttrModified(\n                  0,\n                  node,\n                  key,\n                  oldAttributes[key],\n                  newAttributes[key],\n                  ADDITION\n                );\n              } else if (newAttributes[key] !== oldAttributes[key]) {\n                // attribute was changed\n                return callDOMAttrModified(\n                  1,\n                  node,\n                  key,\n                  oldAttributes[key],\n                  newAttributes[key],\n                  MODIFICATION\n                );\n              }\n            }\n            // checking if it has been removed\n            for (key in oldAttributes) {\n              if (!(key in newAttributes)) {\n                // attribute removed\n                return callDOMAttrModified(\n                  2,\n                  node,\n                  key,\n                  oldAttributes[key],\n                  newAttributes[key],\n                  REMOVAL\n                );\n              }\n            }\n          }\n        };\n        callDOMAttrModified = function (\n          attrChange,\n          currentTarget,\n          attrName,\n          prevValue,\n          newValue,\n          action\n        ) {\n          var e = {\n            attrChange: attrChange,\n            currentTarget: currentTarget,\n            attrName: attrName,\n            prevValue: prevValue,\n            newValue: newValue\n          };\n          e[action] = attrChange;\n          onDOMAttrModified(e);\n        };\n        getAttributesMirror = function (node) {\n          for (var\n            attr, name,\n            result = {},\n            attributes = node.attributes,\n            i = 0, length = attributes.length;\n            i < length; i++\n          ) {\n            attr = attributes[i];\n            name = attr.name;\n            if (name !== 'setAttribute') {\n              result[name] = attr.value;\n            }\n          }\n          return result;\n        };\n      }\n    }\n  \n    // set as enumerable, writable and configurable\n    document[REGISTER_ELEMENT] = function registerElement(type, options) {\n      upperType = type.toUpperCase();\n      if (setListener) {\n        // only first time document.registerElement is used\n        // we need to set this listener\n        // setting it by default might slow down for no reason\n        setListener = false;\n        if (MutationObserver) {\n          observer = (function(attached, detached){\n            function checkEmAll(list, callback) {\n              for (var i = 0, length = list.length; i < length; callback(list[i++])){}\n            }\n            return new MutationObserver(function (records) {\n              for (var\n                current, node, newValue,\n                i = 0, length = records.length; i < length; i++\n              ) {\n                current = records[i];\n                if (current.type === 'childList') {\n                  checkEmAll(current.addedNodes, attached);\n                  checkEmAll(current.removedNodes, detached);\n                } else {\n                  node = current.target;\n                  if (notFromInnerHTMLHelper &&\n                      node[ATTRIBUTE_CHANGED_CALLBACK] &&\n                      current.attributeName !== 'style') {\n                    newValue = getAttribute.call(node, current.attributeName);\n                    if (newValue !== current.oldValue) {\n                      node[ATTRIBUTE_CHANGED_CALLBACK](\n                        current.attributeName,\n                        current.oldValue,\n                        newValue\n                      );\n                    }\n                  }\n                }\n              }\n            });\n          }(executeAction(ATTACHED), executeAction(DETACHED)));\n          observe = function (node) {\n            observer.observe(\n              node,\n              {\n                childList: true,\n                subtree: true\n              }\n            );\n            return node;\n          };\n          observe(document);\n          if (attachShadow) {\n            HTMLElementPrototype.attachShadow = function () {\n              return observe(attachShadow.apply(this, arguments));\n            };\n          }\n        } else {\n          asapQueue = [];\n          document[ADD_EVENT_LISTENER]('DOMNodeInserted', onDOMNode(ATTACHED));\n          document[ADD_EVENT_LISTENER]('DOMNodeRemoved', onDOMNode(DETACHED));\n        }\n  \n        document[ADD_EVENT_LISTENER](DOM_CONTENT_LOADED, onReadyStateChange);\n        document[ADD_EVENT_LISTENER]('readystatechange', onReadyStateChange);\n  \n        HTMLElementPrototype.cloneNode = function (deep) {\n          var\n            node = cloneNode.call(this, !!deep),\n            i = getTypeIndex(node)\n          ;\n          if (-1 < i) patch(node, protos[i]);\n          if (deep && query.length) loopAndSetup(node.querySelectorAll(query));\n          return node;\n        };\n      }\n  \n      if (justSetup) return (justSetup = false);\n  \n      if (-2 < (\n        indexOf.call(types, PREFIX_IS + upperType) +\n        indexOf.call(types, PREFIX_TAG + upperType)\n      )) {\n        throwTypeError(type);\n      }\n  \n      if (!validName.test(upperType) || -1 < indexOf.call(invalidNames, upperType)) {\n        throw new Error('The type ' + type + ' is invalid');\n      }\n  \n      var\n        constructor = function () {\n          return extending ?\n            document.createElement(nodeName, upperType) :\n            document.createElement(nodeName);\n        },\n        opt = options || OP,\n        extending = hOP.call(opt, EXTENDS),\n        nodeName = extending ? options[EXTENDS].toUpperCase() : upperType,\n        upperType,\n        i\n      ;\n  \n      if (extending && -1 < (\n        indexOf.call(types, PREFIX_TAG + nodeName)\n      )) {\n        throwTypeError(nodeName);\n      }\n  \n      i = types.push((extending ? PREFIX_IS : PREFIX_TAG) + upperType) - 1;\n  \n      query = query.concat(\n        query.length ? ',' : '',\n        extending ? nodeName + '[is=\"' + type.toLowerCase() + '\"]' : nodeName\n      );\n  \n      constructor.prototype = (\n        protos[i] = hOP.call(opt, 'prototype') ?\n          opt.prototype :\n          create(HTMLElementPrototype)\n      );\n  \n      if (query.length) loopAndVerify(\n        document.querySelectorAll(query),\n        ATTACHED\n      );\n  \n      return constructor;\n    };\n  \n    document.createElement = (patchedCreateElement = function (localName, typeExtension) {\n      var\n        is = getIs(typeExtension),\n        node = is ?\n          createElement.call(document, localName, secondArgument(is)) :\n          createElement.call(document, localName),\n        name = '' + localName,\n        i = indexOf.call(\n          types,\n          (is ? PREFIX_IS : PREFIX_TAG) +\n          (is || name).toUpperCase()\n        ),\n        setup = -1 < i\n      ;\n      if (is) {\n        node.setAttribute('is', is = is.toLowerCase());\n        if (setup) {\n          setup = isInQSA(name.toUpperCase(), is);\n        }\n      }\n      notFromInnerHTMLHelper = !document.createElement.innerHTMLHelper;\n      if (setup) patch(node, protos[i]);\n      return node;\n    });\n  \n  }\n  \n  function ASAP() {\n    var queue = asapQueue.splice(0, asapQueue.length);\n    asapTimer = 0;\n    while (queue.length) {\n      queue.shift().call(\n        null, queue.shift()\n      );\n    }\n  }\n  \n  function loopAndVerify(list, action) {\n    for (var i = 0, length = list.length; i < length; i++) {\n      verifyAndSetupAndAction(list[i], action);\n    }\n  }\n  \n  function loopAndSetup(list) {\n    for (var i = 0, length = list.length, node; i < length; i++) {\n      node = list[i];\n      patch(node, protos[getTypeIndex(node)]);\n    }\n  }\n  \n  function executeAction(action) {\n    return function (node) {\n      if (isValidNode(node)) {\n        verifyAndSetupAndAction(node, action);\n        if (query.length) loopAndVerify(\n          node.querySelectorAll(query),\n          action\n        );\n      }\n    };\n  }\n  \n  function getTypeIndex(target) {\n    var\n      is = getAttribute.call(target, 'is'),\n      nodeName = target.nodeName.toUpperCase(),\n      i = indexOf.call(\n        types,\n        is ?\n            PREFIX_IS + is.toUpperCase() :\n            PREFIX_TAG + nodeName\n      )\n    ;\n    return is && -1 < i && !isInQSA(nodeName, is) ? -1 : i;\n  }\n  \n  function isInQSA(name, type) {\n    return -1 < query.indexOf(name + '[is=\"' + type + '\"]');\n  }\n  \n  function onDOMAttrModified(e) {\n    var\n      node = e.currentTarget,\n      attrChange = e.attrChange,\n      attrName = e.attrName,\n      target = e.target,\n      addition = e[ADDITION] || 2,\n      removal = e[REMOVAL] || 3\n    ;\n    if (notFromInnerHTMLHelper &&\n        (!target || target === node) &&\n        node[ATTRIBUTE_CHANGED_CALLBACK] &&\n        attrName !== 'style' && (\n          e.prevValue !== e.newValue ||\n          // IE9, IE10, and Opera 12 gotcha\n          e.newValue === '' && (\n            attrChange === addition ||\n            attrChange === removal\n          )\n    )) {\n      node[ATTRIBUTE_CHANGED_CALLBACK](\n        attrName,\n        attrChange === addition ? null : e.prevValue,\n        attrChange === removal ? null : e.newValue\n      );\n    }\n  }\n  \n  function onDOMNode(action) {\n    var executor = executeAction(action);\n    return function (e) {\n      asapQueue.push(executor, e.target);\n      if (asapTimer) clearTimeout(asapTimer);\n      asapTimer = setTimeout(ASAP, 1);\n    };\n  }\n  \n  function onReadyStateChange(e) {\n    if (dropDomContentLoaded) {\n      dropDomContentLoaded = false;\n      e.currentTarget.removeEventListener(DOM_CONTENT_LOADED, onReadyStateChange);\n    }\n    if (query.length) loopAndVerify(\n      (e.target || document).querySelectorAll(query),\n      e.detail === DETACHED ? DETACHED : ATTACHED\n    );\n    if (IE8) purge();\n  }\n  \n  function patchedSetAttribute(name, value) {\n    // jshint validthis:true\n    var self = this;\n    setAttribute.call(self, name, value);\n    onSubtreeModified.call(self, {target: self});\n  }\n  \n  function setupNode(node, proto) {\n    setPrototype(node, proto);\n    if (observer) {\n      observer.observe(node, attributesObserver);\n    } else {\n      if (doesNotSupportDOMAttrModified) {\n        node.setAttribute = patchedSetAttribute;\n        node[EXPANDO_UID] = getAttributesMirror(node);\n        node[ADD_EVENT_LISTENER](DOM_SUBTREE_MODIFIED, onSubtreeModified);\n      }\n      node[ADD_EVENT_LISTENER](DOM_ATTR_MODIFIED, onDOMAttrModified);\n    }\n    if (node[CREATED_CALLBACK] && notFromInnerHTMLHelper) {\n      node.created = true;\n      node[CREATED_CALLBACK]();\n      node.created = false;\n    }\n  }\n  \n  function purge() {\n    for (var\n      node,\n      i = 0,\n      length = targets.length;\n      i < length; i++\n    ) {\n      node = targets[i];\n      if (!documentElement.contains(node)) {\n        length--;\n        targets.splice(i--, 1);\n        verifyAndSetupAndAction(node, DETACHED);\n      }\n    }\n  }\n  \n  function throwTypeError(type) {\n    throw new Error('A ' + type + ' type is already registered');\n  }\n  \n  function verifyAndSetupAndAction(node, action) {\n    var\n      fn,\n      i = getTypeIndex(node)\n    ;\n    if (-1 < i) {\n      patchIfNotAlready(node, protos[i]);\n      i = 0;\n      if (action === ATTACHED && !node[ATTACHED]) {\n        node[DETACHED] = false;\n        node[ATTACHED] = true;\n        i = 1;\n        if (IE8 && indexOf.call(targets, node) < 0) {\n          targets.push(node);\n        }\n      } else if (action === DETACHED && !node[DETACHED]) {\n        node[ATTACHED] = false;\n        node[DETACHED] = true;\n        i = 1;\n      }\n      if (i && (fn = node[action + CALLBACK])) fn.call(node);\n    }\n  }\n  \n  \n  \n  // V1 in da House!\n  function CustomElementRegistry() {}\n  \n  CustomElementRegistry.prototype = {\n    constructor: CustomElementRegistry,\n    // a workaround for the stubborn WebKit\n    define: usableCustomElements ?\n      function (name, Class, options) {\n        if (options) {\n          CERDefine(name, Class, options);\n        } else {\n          var NAME = name.toUpperCase();\n          constructors[NAME] = {\n            constructor: Class,\n            create: [NAME]\n          };\n          nodeNames.set(Class, NAME);\n          customElements.define(name, Class);\n        }\n      } :\n      CERDefine,\n    get: usableCustomElements ?\n      function (name) {\n        return customElements.get(name) || get(name);\n      } :\n      get,\n    whenDefined: usableCustomElements ?\n      function (name) {\n        return Promise.race([\n          customElements.whenDefined(name),\n          whenDefined(name)\n        ]);\n      } :\n      whenDefined\n  };\n  \n  function CERDefine(name, Class, options) {\n    var\n      is = options && options[EXTENDS] || '',\n      CProto = Class.prototype,\n      proto = create(CProto),\n      attributes = Class.observedAttributes || empty,\n      definition = {prototype: proto}\n    ;\n    // TODO: is this needed at all since it's inherited?\n    // defineProperty(proto, 'constructor', {value: Class});\n    safeProperty(proto, CREATED_CALLBACK, {\n        value: function () {\n          if (justCreated) justCreated = false;\n          else if (!this[DRECEV1]) {\n            this[DRECEV1] = true;\n            new Class(this);\n            if (CProto[CREATED_CALLBACK])\n              CProto[CREATED_CALLBACK].call(this);\n            var info = constructors[nodeNames.get(Class)];\n            if (!usableCustomElements || info.create.length > 1) {\n              notifyAttributes(this);\n            }\n          }\n      }\n    });\n    safeProperty(proto, ATTRIBUTE_CHANGED_CALLBACK, {\n      value: function (name) {\n        if (-1 < indexOf.call(attributes, name))\n          CProto[ATTRIBUTE_CHANGED_CALLBACK].apply(this, arguments);\n      }\n    });\n    if (CProto[CONNECTED_CALLBACK]) {\n      safeProperty(proto, ATTACHED_CALLBACK, {\n        value: CProto[CONNECTED_CALLBACK]\n      });\n    }\n    if (CProto[DISCONNECTED_CALLBACK]) {\n      safeProperty(proto, DETACHED_CALLBACK, {\n        value: CProto[DISCONNECTED_CALLBACK]\n      });\n    }\n    if (is) definition[EXTENDS] = is;\n    name = name.toUpperCase();\n    constructors[name] = {\n      constructor: Class,\n      create: is ? [is, secondArgument(name)] : [name]\n    };\n    nodeNames.set(Class, name);\n    document[REGISTER_ELEMENT](name.toLowerCase(), definition);\n    whenDefined(name);\n    waitingList[name].r();\n  }\n  \n  function get(name) {\n    var info = constructors[name.toUpperCase()];\n    return info && info.constructor;\n  }\n  \n  function getIs(options) {\n    return typeof options === 'string' ?\n        options : (options && options.is || '');\n  }\n  \n  function notifyAttributes(self) {\n    var\n      callback = self[ATTRIBUTE_CHANGED_CALLBACK],\n      attributes = callback ? self.attributes : empty,\n      i = attributes.length,\n      attribute\n    ;\n    while (i--) {\n      attribute =  attributes[i]; // || attributes.item(i);\n      callback.call(\n        self,\n        attribute.name || attribute.nodeName,\n        null,\n        attribute.value || attribute.nodeValue\n      );\n    }\n  }\n  \n  function whenDefined(name) {\n    name = name.toUpperCase();\n    if (!(name in waitingList)) {\n      waitingList[name] = {};\n      waitingList[name].p = new Promise(function (resolve) {\n        waitingList[name].r = resolve;\n      });\n    }\n    return waitingList[name].p;\n  }\n  \n  function polyfillV1() {\n    if (customElements) delete window.customElements;\n    defineProperty(window, 'customElements', {\n      configurable: true,\n      value: new CustomElementRegistry()\n    });\n    defineProperty(window, 'CustomElementRegistry', {\n      configurable: true,\n      value: CustomElementRegistry\n    });\n    for (var\n      patchClass = function (name) {\n        var Class = window[name];\n        if (Class) {\n          window[name] = function CustomElementsV1(self) {\n            var info, isNative;\n            if (!self) self = this;\n            if (!self[DRECEV1]) {\n              justCreated = true;\n              info = constructors[nodeNames.get(self.constructor)];\n              isNative = usableCustomElements && info.create.length === 1;\n              self = isNative ?\n                Reflect.construct(Class, empty, info.constructor) :\n                document.createElement.apply(document, info.create);\n              self[DRECEV1] = true;\n              justCreated = false;\n              if (!isNative) notifyAttributes(self);\n            }\n            return self;\n          };\n          window[name].prototype = Class.prototype;\n          try {\n            Class.prototype.constructor = window[name];\n          } catch(WebKit) {\n            fixGetClass = true;\n            defineProperty(Class, DRECEV1, {value: window[name]});\n          }\n        }\n      },\n      Classes = htmlClass.get(/^HTML[A-Z]*[a-z]/),\n      i = Classes.length;\n      i--;\n      patchClass(Classes[i])\n    ) {}\n    (document.createElement = function (name, options) {\n      var is = getIs(options);\n      return is ?\n        patchedCreateElement.call(this, name, secondArgument(is)) :\n        patchedCreateElement.call(this, name);\n    });\n    if (!V0) {\n      justSetup = true;\n      document[REGISTER_ELEMENT]('');\n    }\n  }\n  \n  // if customElements is not there at all\n  if (!customElements || polyfill === 'force') polyfillV1();\n  else {\n    // if available test extends work as expected\n    try {\n      (function (DRE, options, name) {\n        options[EXTENDS] = 'a';\n        DRE.prototype = create(HTMLAnchorElement.prototype);\n        DRE.prototype.constructor = DRE;\n        window.customElements.define(name, DRE, options);\n        if (\n          getAttribute.call(document.createElement('a', {is: name}), 'is') !== name ||\n          (usableCustomElements && getAttribute.call(new DRE(), 'is') !== name)\n        ) {\n          throw options;\n        }\n      }(\n        function DRE() {\n          return Reflect.construct(HTMLAnchorElement, [], DRE);\n        },\n        {},\n        'document-register-element-a'\n      ));\n    } catch(o_O) {\n      // or force the polyfill if not\n      // and keep internal original reference\n      polyfillV1();\n    }\n  }\n  \n  try {\n    createElement.call(document, 'a', 'a');\n  } catch(FireFox) {\n    secondArgument = function (is) {\n      return {is: is.toLowerCase()};\n    };\n  }\n  \n}\n\nexports.installCustomElements = installCustomElements;\n\n","'use strict';\n\n/**\n * Constructs a ES6/Promises A+ Promise instance.\n *\n * @constructor\n * @param {function(function(*=), function (*=))} resolver\n */\nfunction Promise(resolver) {\n  if (!(this instanceof Promise)) {\n    throw new TypeError('Constructor Promise requires `new`');\n  }\n  if (!isFunction(resolver)) {\n    throw new TypeError('Must pass resolver function');\n  }\n\n  /**\n   * @type {function(this:Promise,*=,function(*=),function(*=),Deferred):!Promise}\n   * @private\n   */\n  this._state = PendingPromise;\n\n  /**\n   * @type {*}\n   * @private\n   */\n  this._value = [];\n\n  /**\n   * @type {boolean}\n   * @private\n   */\n  this._isChainEnd = true;\n\n  doResolve(\n    this,\n    adopter(this, FulfilledPromise),\n    adopter(this, RejectedPromise),\n    { then: resolver }\n  );\n}\n\n/****************************\n  Public Instance Methods\n ****************************/\n\n/**\n * Creates a new promise instance that will receive the result of this promise\n * as inputs to the onFulfilled or onRejected callbacks.\n *\n * @param {function(*)} onFulfilled\n * @param {function(*)} onRejected\n */\nPromise.prototype.then = function(onFulfilled, onRejected) {\n  onFulfilled = isFunction(onFulfilled) ? onFulfilled : void 0;\n  onRejected = isFunction(onRejected) ? onRejected : void 0;\n\n  if (onFulfilled || onRejected) {\n    this._isChainEnd = false;\n  }\n\n  return this._state(\n    this._value,\n    onFulfilled,\n    onRejected\n  );\n};\n\n/**\n * Creates a new promise that will handle the rejected state of this promise.\n *\n * @param {function(*)} onRejected\n * @returns {!Promise}\n */\nPromise.prototype.catch = function(onRejected) {\n  return this.then(void 0, onRejected);\n};\n\n/****************************\n  Public Static Methods\n ****************************/\n\n/**\n * Creates a fulfilled Promise of value. If value is itself a then-able,\n * resolves with the then-able's value.\n *\n * @this {!Promise}\n * @param {*=} value\n * @returns {!Promise}\n */\nPromise.resolve = function(value) {\n  var Constructor = this;\n  var promise;\n\n  if (isObject(value) && value instanceof this) {\n    promise = value;\n  } else {\n    promise = new Constructor(function(resolve) {\n      resolve(value);\n    });\n  }\n\n  return /** @type {!Promise} */(promise);\n};\n\n/**\n * Creates a rejected Promise of reason.\n *\n * @this {!Promise}\n * @param {*=} reason\n * @returns {!Promise}\n */\nPromise.reject = function(reason) {\n  var Constructor = this;\n  var promise = new Constructor(function(_, reject) {\n    reject(reason);\n  });\n\n  return /** @type {!Promise} */(promise);\n};\n\n/**\n * Creates a Promise that will resolve with an array of the values of the\n * passed in promises. If any promise rejects, the returned promise will\n * reject.\n *\n * @this {!Promise}\n * @param {!Array<Promise|*>} promises\n * @returns {!Promise}\n */\nPromise.all = function(promises) {\n  var Constructor = this;\n  var promise = new Constructor(function(resolve, reject) {\n    var length = promises.length;\n    var values = new Array(length);\n\n    if (length === 0) {\n      return resolve(values);\n    }\n\n    each(promises, function(promise, index) {\n      Constructor.resolve(promise).then(function(value) {\n        values[index] = value;\n        if (--length === 0) {\n          resolve(values);\n        }\n      }, reject);\n    });\n  });\n\n  return /** @type {!Promise} */(promise);\n};\n\n/**\n * Creates a Promise that will resolve or reject based on the first\n * resolved or rejected promise.\n *\n * @this {!Promise}\n * @param {!Array<Promise|*>} promises\n * @returns {!Promise}\n */\nPromise.race = function(promises) {\n  var Constructor = this;\n  var promise = new Constructor(function(resolve, reject) {\n    for (var i = 0; i < promises.length; i++) {\n      Constructor.resolve(promises[i]).then(resolve, reject);\n    }\n  });\n\n  return /** @type {!Promise} */(promise);\n};\n\nvar onPossiblyUnhandledRejection = function(reason, promise) {\n  throw reason;\n};\n\n/**\n * An internal use static function.\n */\nPromise._overrideUnhandledExceptionHandler = function(handler) {\n  onPossiblyUnhandledRejection = handler;\n};\n\n/****************************\n  Private functions\n ****************************/\n\n/**\n * The Fulfilled Promise state. Calls onFulfilled with the resolved value of\n * this promise, creating a new promise.\n *\n * If there is no onFulfilled, returns the current promise to avoid an promise\n * instance.\n *\n * @this {!Promise} The current promise\n * @param {*=} value The current promise's resolved value.\n * @param {function(*=)=} onFulfilled\n * @param {function(*=)=} unused\n * @param {Deferred} deferred A deferred object that holds a promise and its\n *     resolve and reject functions. It IS NOT passed when called from\n *     Promise#then to save an object instance (since we may return the current\n *     promise). It IS passed in when adopting the Fulfilled state from the\n *     Pending state.\n * @returns {!Promise}\n */\nfunction FulfilledPromise(value, onFulfilled, unused, deferred) {\n  if (!onFulfilled) {\n    deferredAdopt(deferred, FulfilledPromise, value);\n    return this;\n  }\n  if (!deferred) {\n    deferred = new Deferred(this.constructor);\n  }\n  defer(tryCatchDeferred(deferred, onFulfilled, value));\n  return deferred.promise;\n}\n\n/**\n * The Rejected Promise state. Calls onRejected with the resolved value of\n * this promise, creating a new promise.\n *\n * If there is no onRejected, returns the current promise to avoid an promise\n * instance.\n *\n * @this {!Promise} The current promise\n * @param {*=} reason The current promise's rejection reason.\n * @param {function(*=)=} unused\n * @param {function(*=)=} onRejected\n * @param {Deferred} deferred A deferred object that holds a promise and its\n *     resolve and reject functions. It IS NOT passed when called from\n *     Promise#then to save an object instance (since we may return the current\n *     promise). It IS passed in when adopting the Rejected state from the\n *     Pending state.\n * @returns {!Promise}\n */\nfunction RejectedPromise(reason, unused, onRejected, deferred) {\n  if (!onRejected) {\n    deferredAdopt(deferred, RejectedPromise, reason);\n    return this;\n  }\n  if (!deferred) {\n    deferred = new Deferred(this.constructor);\n  }\n  defer(tryCatchDeferred(deferred, onRejected, reason));\n  return deferred.promise;\n}\n\n/**\n * The Pending Promise state. Eventually calls onFulfilled once the promise has\n * resolved, or onRejected once the promise rejects.\n *\n * If there is no onFulfilled and no onRejected, returns the current promise to\n * avoid an promise instance.\n *\n * @this {!Promise} The current promise\n * @param {*=} queue The current promise's pending promises queue.\n * @param {function(*=)=} onFulfilled\n * @param {function(*=)=} onRejected\n * @param {Deferred} deferred A deferred object that holds a promise and its\n *     resolve and reject functions. It IS NOT passed when called from\n *     Promise#then to save an object instance (since we may return the current\n *     promise). It IS passed in when adopting the Pending state from the\n *     Pending state of another promise.\n * @returns {!Promise}\n */\nfunction PendingPromise(queue, onFulfilled, onRejected, deferred) {\n  if (!deferred) {\n    if (!onFulfilled && !onRejected) { return this; }\n    deferred = new Deferred(this.constructor);\n  }\n  queue.push({\n    deferred: deferred,\n    onFulfilled: onFulfilled || deferred.resolve,\n    onRejected: onRejected || deferred.reject\n  });\n  return deferred.promise;\n}\n\n/**\n * Constructs a deferred instance that holds a promise and its resolve and\n * reject functions.\n *\n * @constructor\n */\nfunction Deferred(Promise) {\n  var deferred = this;\n  /** @type {!Promise} */\n  this.promise = new Promise(function(resolve, reject) {\n    /** @type {function(*=)} */\n    deferred.resolve = resolve;\n\n    /** @type {function(*=)} */\n    deferred.reject = reject;\n  });\n  return deferred;\n}\n\n/**\n * Transitions the state of promise to another state. This is only ever called\n * on with a promise that is currently in the Pending state.\n *\n * @param {!Promise} promise\n * @param {function(this:Promise,*=,function(*=),function(*=),Deferred):!Promise} state\n * @param {*=} value\n */\nfunction adopt(promise, state, value, adoptee) {\n  var queue = promise._value;\n  promise._state = state;\n  promise._value = value;\n\n  if (adoptee && state === PendingPromise) {\n    adoptee._state(value, void 0, void 0, {\n      promise: promise,\n      resolve: void 0,\n      reject: void 0\n    });\n  }\n\n  for (var i = 0; i < queue.length; i++) {\n    var next = queue[i];\n    promise._state(\n      value,\n      next.onFulfilled,\n      next.onRejected,\n      next.deferred\n    );\n  }\n  queue.length = 0;\n\n  // Determine if this rejected promise will be \"handled\".\n  if (state === RejectedPromise && promise._isChainEnd) {\n    setTimeout(function() {\n      if (promise._isChainEnd) {\n        onPossiblyUnhandledRejection(value, promise);\n      }\n    }, 0);\n  }\n}\n\n/**\n * A partial application of adopt.\n *\n * @param {!Promise} promise\n * @param {function(this:Promise,*=,function(*=),function(*=),Deferred):!Promise} state\n * @returns {function(*=)}\n */\nfunction adopter(promise, state) {\n  return function(value) {\n    adopt(promise, state, value);\n  };\n}\n\n/**\n * Updates a deferred promises state. Necessary for updating an adopting\n * promise's state when the adoptee resolves.\n *\n * @param {?Deferred} deferred\n * @param {function(this:Promise,*=,function(*=),function(*=),Deferred):!Promise} state\n * @param {*=} value\n */\nfunction deferredAdopt(deferred, state, value) {\n  if (deferred) {\n    var promise = deferred.promise;\n    promise._state = state;\n    promise._value = value;\n  }\n}\n\n/**\n * A no-op function to prevent double resolving.\n */\nfunction noop() {}\n\n/**\n * Tests if fn is a Function\n *\n * @param {*} fn\n * @returns {boolean}\n */\nfunction isFunction(fn) {\n  return typeof fn === 'function';\n}\n\n/**\n * Tests if fn is an Object\n *\n * @param {*} obj\n * @returns {boolean}\n */\nfunction isObject(obj) {\n  return obj === Object(obj);\n}\n\n/**\n * Iterates over each element of an array, calling the iterator with the\n * element and its index.\n *\n * @param {!Array} collection\n * @param {function(*=,number)} iterator\n */\nfunction each(collection, iterator) {\n  for (var i = 0; i < collection.length; i++) {\n    iterator(collection[i], i);\n  }\n}\n\n/**\n * Creates a function that will attempt to resolve the deferred with the return\n * of fn. If any error is raised, rejects instead.\n *\n * @param {!Deferred} deferred\n * @param {function(*=)} fn\n * @param {*} arg\n * @returns {function()}\n */\nfunction tryCatchDeferred(deferred, fn, arg) {\n  var promise = deferred.promise;\n  var resolve = deferred.resolve;\n  var reject = deferred.reject;\n  return function() {\n    try {\n      var result = fn(arg);\n      doResolve(promise, resolve, reject, result, result);\n    } catch (e) {\n      reject(e);\n    }\n  };\n}\n\n/**\n * Queues and executes multiple deferred functions on another run loop.\n */\nvar defer = (function() {\n  /**\n   * Defers fn to another run loop.\n   */\n  var scheduleFlush;\n  if (typeof window !== 'undefined' && window.postMessage) {\n    window.addEventListener('message', flush);\n    scheduleFlush = function() {\n      window.postMessage('macro-task', '*');\n    };\n  } else {\n    scheduleFlush = function() {\n      setTimeout(flush, 0);\n    };\n  }\n\n  var queue = new Array(16);\n  var length = 0;\n\n  function flush() {\n    for (var i = 0; i < length; i++) {\n      var fn = queue[i];\n      queue[i] = null;\n      fn();\n    }\n    length = 0;\n  }\n\n  /**\n   * @param {function()} fn\n   */\n  function defer(fn) {\n    if (length === 0) { scheduleFlush(); }\n    queue[length++] = fn;\n  }\n\n  return defer;\n})();\n\n/**\n * The Promise resolution procedure.\n * https://github.com/promises-aplus/promises-spec#the-promise-resolution-procedure\n *\n * @param {!Promise} promise\n * @param {function(*=)} resolve\n * @param {function(*=)} reject\n * @param {*} value\n * @param {*=} context\n */\nfunction doResolve(promise, resolve, reject, value, context) {\n  var _reject = reject;\n  var then;\n  var _resolve;\n  try {\n    if (value === promise) {\n      throw new TypeError('Cannot fulfill promise with itself');\n    }\n    var isObj = isObject(value);\n    if (isObj && value instanceof promise.constructor) {\n      adopt(promise, value._state, value._value, value);\n    } else if (isObj && (then = value.then) && isFunction(then)) {\n      _resolve = function(value) {\n        _resolve = _reject = noop;\n        doResolve(promise, resolve, reject, value, value);\n      };\n      _reject = function(reason) {\n        _resolve = _reject = noop;\n        reject(reason);\n      };\n      then.call(\n        context,\n        function(value) { _resolve(value); },\n        function(reason) { _reject(reason); }\n      );\n    } else {\n      resolve(value);\n    }\n  } catch (e) {\n    _reject(e);\n  }\n}\n\nmodule.exports = Promise;\n","/**\n * Copyright 2015 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Deferred} from './utils/promise';\nimport {Services} from './services';\nimport {dev} from './log';\nimport {getCurve} from './curve';\n\nconst TAG_ = 'Animation';\n\nconst NOOP_CALLBACK = function() {};\n\n/**\n * The animation class allows construction of arbitrary animation processes.\n * The main method is \"add\" that adds a segment of animation at particular\n * time offset (delay) and duration. All animation segments are simply functions\n * of type Transition which are iterated from 0 to 1 in animation frames to\n * achieve the desired effect.\n */\nexport class Animation {\n\n  /**\n   * Creates and starts animation with a single segment. Returns AnimationPlayer\n   * object that can be used to monitor or control animation.\n   *\n   * @param {!Node} contextNode The context node.\n   * @param {!TransitionDef<?>} transition Transition to animate.\n   * @param {./time.timeDef} duration Duration in milliseconds.\n   * @param {(!./curve.CurveDef|string)=} opt_curve Optional curve to use for\n   *   animation. Default is the linear animation.\n   * @return {!AnimationPlayer}\n   */\n  static animate(contextNode, transition, duration, opt_curve) {\n    return new Animation(contextNode)\n        .setCurve(opt_curve)\n        .add(0, transition, 1)\n        .start(duration);\n  }\n\n  /**\n   * @param {!Node} contextNode\n   * @param {!./service/vsync-impl.Vsync=} opt_vsync\n   */\n  constructor(contextNode, opt_vsync) {\n    /** @private @const {!Node} */\n    this.contextNode_ = contextNode;\n\n    /** @private @const {!./service/vsync-impl.Vsync} */\n    this.vsync_ = opt_vsync || Services.vsyncFor(self);\n\n    /** @private {?./curve.CurveDef} */\n    this.curve_ = null;\n\n    /**\n     * @private @const {!Array<!SegmentDef>}\n     */\n    this.segments_ = [];\n  }\n\n  /**\n   * Sets the default curve for the animation. Each segment is allowed to have\n   * its own curve, but this curve will be used if a segment doesn't specify\n   * its own.\n   * @param {!./curve.CurveDef|string|undefined} curve\n   * @return {!Animation}\n   */\n  setCurve(curve) {\n    if (curve) {\n      this.curve_ = getCurve(curve);\n    }\n    return this;\n  }\n\n  /**\n   * Adds a segment to the animation. Each segment starts at offset (delay) and\n   * runs for a portion of the overall animation (duration). Note that both\n   * delay and duration and normtimeDef types which accept values from 0 to 1.\n   * Optionally, the time is pushed through a curve. If curve is not specified,\n   * the default animation curve will be used. The specified transition is\n   * animated over the specified duration from 0 to 1.\n   *\n   * @param {./time.normtimeDef} delay\n   * @param {!TransitionDef<?>} transition\n   * @param {./time.normtimeDef} duration\n   * @param {(!./curve.CurveDef|string)=} opt_curve\n   * @return {!Animation}\n   */\n  add(delay, transition, duration, opt_curve) {\n    this.segments_.push({\n      delay,\n      func: transition,\n      duration,\n      curve: getCurve(opt_curve),\n    });\n    return this;\n  }\n\n  /**\n   * Starts the animation and returns the AnimationPlayer object that can be\n   * used to monitor and control the animation.\n   *\n   * @param {./time.timeDef} duration Absolute time in milliseconds.\n   * @return {!AnimationPlayer}\n   */\n  start(duration) {\n    const player = new AnimationPlayer(this.vsync_, this.contextNode_,\n        this.segments_, this.curve_, duration);\n    return player;\n  }\n}\n\n\n/**\n * AnimationPlayer allows tracking and monitoring of the running animation.\n * Most importantly it exposes methods \"then\" and \"thenAlways\" that have the\n * semantics of a Promise and signal when the animation completed or failed.\n * Additionally, it exposes the method \"halt\" which allows to stop/reset the\n * animation.\n * // TODO(@cramforce) Actually fully implement.\n * implements {IThenable}\n */\nclass AnimationPlayer {\n\n  /**\n   * @param {!./service/vsync-impl.Vsync} vsync\n   * @param {!Node} contextNode\n   * @param {!Array<!SegmentDef>} segments\n   * @param {?./curve.CurveDef} defaultCurve\n   * @param {./time.timeDef} duration\n   */\n  constructor(vsync, contextNode, segments, defaultCurve, duration) {\n\n    /** @private @const {!./service/vsync-impl.Vsync} */\n    this.vsync_ = vsync;\n\n    /** @private @const {!Node} */\n    this.contextNode_ = contextNode;\n\n    /** @private @const {!Array<!SegmentRuntimeDef>} */\n    this.segments_ = [];\n    for (let i = 0; i < segments.length; i++) {\n      const segment = segments[i];\n      this.segments_.push({\n        delay: segment.delay,\n        func: segment.func,\n        duration: segment.duration,\n        curve: segment.curve || defaultCurve,\n        started: false,\n        completed: false,\n      });\n    }\n\n    /** @private @const */\n    this.duration_ = duration;\n\n    /** @private {./time.timeDef} */\n    this.startTime_ = Date.now();\n\n    /** @private {./time.normtimeDef} */\n    // this.normLinearTime_ = 0;\n\n    /** @private {./time.normtimeDef} */\n    // this.normTime_ = 0;\n\n    /** @private {boolean} */\n    this.running_ = true;\n\n    /** @private {!Object<string, *>} */\n    this.state_ = {};\n\n    const deferred = new Deferred();\n\n    /** @const @private */\n    this.promise_ = deferred.promise;\n\n    /** @const @private */\n    this.resolve_ = deferred.resolve;\n\n    /** @const @private */\n    this.reject_ = deferred.reject;\n\n    /** @const */\n    this.task_ = this.vsync_.createAnimTask(this.contextNode_, {\n      mutate: this.stepMutate_.bind(this),\n    });\n\n    if (this.vsync_.canAnimate(this.contextNode_)) {\n      this.task_(this.state_);\n    } else {\n      dev().warn(TAG_, 'cannot animate');\n      this.complete_(/* success */ false, /* dir */ 0);\n    }\n  }\n\n  /**\n   * Chains to the animation's promise that will resolve when the animation has\n   * completed or will reject if animation has failed or was interrupted.\n   * @param {!Function=} opt_resolve\n   * @param {!Function=} opt_reject\n   * @return {!Promise}\n   */\n  then(opt_resolve, opt_reject) {\n    if (!opt_resolve && !opt_reject) {\n      return this.promise_;\n    }\n    return this.promise_.then(opt_resolve, opt_reject);\n  }\n\n  /**\n   * Callback for regardless whether the animation succeeds or fails.\n   * @param {!Function=} opt_callback\n   * @return {!Promise}\n   */\n  thenAlways(opt_callback) {\n    const callback = opt_callback || NOOP_CALLBACK;\n    return this.then(callback, callback);\n  }\n\n  /**\n   * Halts the animation. Depending on the opt_dir value, the following actions\n   * can be performed:\n   * 0: No action. The state will be as at the moment of halting (default)\n   * 1: Final state. Transitionable will be set to state = 1.\n   * -1: Reset state. Transitionable will be reset to state = 0.\n   * The animation's promise will be rejected since the transition has been\n   * interrupted.\n   * @param {number=} opt_dir\n   */\n  halt(opt_dir) {\n    this.complete_(/* success */ false, /* dir */ opt_dir || 0);\n  }\n\n  /**\n   * @param {boolean} success\n   * @param {number} dir\n   * @private\n   */\n  complete_(success, dir) {\n    if (!this.running_) {\n      return;\n    }\n    this.running_ = false;\n    if (dir != 0) {\n      // Sort in the completion order.\n      if (this.segments_.length > 1) {\n        this.segments_.sort((s1, s2) => {\n          return (s1.delay + s1.duration) - (s2.delay + s2.duration);\n        });\n      }\n      try {\n        if (dir > 0) {\n          // Natural order - all set to 1.\n          for (let i = 0; i < this.segments_.length; i++) {\n            this.segments_[i].func(1, true);\n          }\n        } else {\n          // Reverse order - all set to 0.\n          for (let i = this.segments_.length - 1; i >= 0; i--) {\n            this.segments_[i].func(0, false);\n          }\n        }\n      } catch (e) {\n        dev().error(TAG_, 'completion failed: ' + e, e);\n        success = false;\n      }\n    }\n    if (success) {\n      this.resolve_();\n    } else {\n      this.reject_();\n    }\n  }\n\n  /**\n   * @param {!Object<string, *>} unusedState\n   * @private\n   */\n  stepMutate_(unusedState) {\n    if (!this.running_) {\n      return;\n    }\n    const currentTime = Date.now();\n    const normLinearTime = Math.min((currentTime - this.startTime_) /\n        this.duration_, 1);\n\n    // Start segments due to be started\n    for (let i = 0; i < this.segments_.length; i++) {\n      const segment = this.segments_[i];\n      if (!segment.started && normLinearTime >= segment.delay) {\n        segment.started = true;\n      }\n    }\n\n    // Execute all pending segments.\n    for (let i = 0; i < this.segments_.length; i++) {\n      const segment = this.segments_[i];\n      if (!segment.started || segment.completed) {\n        continue;\n      }\n      this.mutateSegment_(segment, normLinearTime);\n    }\n\n    // Complete or start next cycle.\n    if (normLinearTime == 1) {\n      this.complete_(/* success */ true, /* dir */ 0);\n    } else {\n      if (this.vsync_.canAnimate(this.contextNode_)) {\n        this.task_(this.state_);\n      } else {\n        dev().warn(TAG_, 'cancel animation');\n        this.complete_(/* success */ false, /* dir */ 0);\n      }\n    }\n  }\n\n  /**\n   * @param {!SegmentRuntimeDef} segment\n   * @param {number} totalLinearTime\n   */\n  mutateSegment_(segment, totalLinearTime) {\n    let normLinearTime;\n    let normTime;\n    if (segment.duration > 0) {\n      normLinearTime = Math.min((totalLinearTime - segment.delay) /\n          segment.duration, 1);\n      normTime = normLinearTime;\n      if (segment.curve && normTime != 1) {\n        try {\n          normTime = segment.curve(normLinearTime);\n        } catch (e) {\n          dev().error(TAG_, 'step curve failed: ' + e, e);\n          this.complete_(/* success */ false, /* dir */ 0);\n          return;\n        }\n      }\n    } else {\n      normLinearTime = 1;\n      normTime = 1;\n    }\n    if (normLinearTime == 1) {\n      segment.completed = true;\n    }\n    try {\n      segment.func(normTime, segment.completed);\n    } catch (e) {\n      dev().error(TAG_, 'step mutate failed: ' + e, e);\n      this.complete_(/* success */ false, /* dir */ 0);\n      return;\n    }\n  }\n}\n\n\n/**\n * @typedef {{\n *   delay: ./time.normtimeDef,\n *   func: !TransitionDef,\n *   duration: ./time.normtimeDef,\n *   curve: ?./curve.CurveDef\n * }}\n */\nlet SegmentDef;\n\n\n/**\n * @typedef {{\n *   delay: ./time.normtimeDef,\n *   func: !TransitionDef,\n *   duration: ./time.normtimeDef,\n *   curve: ?./curve.CurveDef,\n *   started: boolean,\n *   completed: boolean\n * }}\n */\nlet SegmentRuntimeDef;\n","/**\n * Copyright 2016 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Allows for runtime configuration. Internally, the runtime should\n * use the src/config.js module for various constants. We can use the\n * AMP_CONFIG global to translate user-defined configurations to this\n * module.\n * @type {!Object<string, string>}\n */\nconst env = self.AMP_CONFIG || {};\n\nconst thirdPartyFrameRegex = typeof env['thirdPartyFrameRegex'] == 'string' ?\n  new RegExp(env['thirdPartyFrameRegex']) : env['thirdPartyFrameRegex'];\n\nconst cdnProxyRegex = typeof env['cdnProxyRegex'] == 'string' ?\n  new RegExp(env['cdnProxyRegex']) : env['cdnProxyRegex'];\n\n/** @type {!Object<string, string|boolean|RegExp>} */\nexport const urls = {\n  thirdParty: env['thirdPartyUrl'] || 'https://3p.ampproject.net',\n  thirdPartyFrameHost: env['thirdPartyFrameHost'] || 'ampproject.net',\n  thirdPartyFrameRegex: thirdPartyFrameRegex || /^d-\\d+\\.ampproject\\.net$/,\n  cdn: env['cdnUrl'] || 'https://cdn.ampproject.org',\n  /* Note that cdnProxyRegex is only ever checked against origins\n   * (proto://host[:port]) so does not need to consider path\n   */\n  cdnProxyRegex: cdnProxyRegex ||\n      /^https:\\/\\/([a-zA-Z0-9_-]+\\.)?cdn\\.ampproject\\.org$/,\n  localhostRegex: /^https?:\\/\\/localhost(:\\d+)?$/,\n  errorReporting: env['errorReportingUrl'] ||\n      'https://amp-error-reporting.appspot.com/r',\n  localDev: env['localDev'] || false,\n};\n\nexport const config = {\n  urls,\n};\n","/**\n * Copyright 2015 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {endsWith} from './string';\nimport {\n  isProxyOrigin,\n  parseUrlDeprecated,\n  tryDecodeUriComponent,\n} from './url';\nimport {urls} from './config';\n\n\n/**\n * Returns the value of the cookie. The cookie access is restricted and must\n * go through the privacy review. Before using this method please file a\n * GitHub issue with \"Privacy Review\" label.\n *\n * Returns the cookie's value or `null`.\n *\n * @param {!Window} win\n * @param {string} name\n * @return {?string}\n */\nexport function getCookie(win, name) {\n  const cookieString = tryGetDocumentCookieNoInline(win);\n  if (!cookieString) {\n    return null;\n  }\n  const cookies = cookieString.split(';');\n  for (let i = 0; i < cookies.length; i++) {\n    const cookie = cookies[i].trim();\n    const eq = cookie.indexOf('=');\n    if (eq == -1) {\n      continue;\n    }\n    if (tryDecodeUriComponent(cookie.substring(0, eq).trim()) == name) {\n      const value = cookie.substring(eq + 1).trim();\n      return tryDecodeUriComponent(value, value);\n    }\n  }\n  return null;\n}\n\n/**\n * This method should not be inlined to prevent TryCatch deoptimization.\n * NoInline keyword at the end of function name also prevents Closure compiler\n * from inlining the function.\n * @param {!Window} win\n * @return {string}\n */\nfunction tryGetDocumentCookieNoInline(win) {\n  try {\n    return win.document.cookie;\n  } catch (e) {\n    // Act as if no cookie is available. Exceptions can be thrown when\n    // AMP docs are opened on origins that do not allow setting\n    // cookies such as null origins.\n    return '';\n  }\n}\n\n/**\n * Sets the value of the cookie. The cookie access is restricted and must\n * go through the privacy review. Before using this method please file a\n * GitHub issue with \"Privacy Review\" label.\n *\n * @param {!Window} win\n * @param {string} name\n * @param {string} value\n * @param {time} expirationTime\n * @param {{\n *   highestAvailableDomain:(boolean|undefined),\n *   domain:(string|undefined)\n * }=} opt_options\n *     - highestAvailableDomain: If true, set the cookie at the widest domain\n *       scope allowed by the browser. E.g. on example.com if we are currently\n *       on www.example.com.\n *     - domain: Explicit domain to set.\n *     - allowOnProxyOrigin: Allow setting a cookie on the AMP Cache.\n */\nexport function setCookie(win, name, value, expirationTime, opt_options) {\n  checkOriginForSettingCookie(win, opt_options, name);\n  if (opt_options && opt_options.highestAvailableDomain) {\n    const parts = win.location.hostname.split('.');\n    let domain = parts[parts.length - 1];\n    for (let i = parts.length - 2; i >= 0; i--) {\n      domain = parts[i] + '.' + domain;\n      trySetCookie(win, name, value, expirationTime, domain);\n      if (getCookie(win, name) == value) {\n        return;\n      }\n    }\n  }\n  let domain = undefined;\n  if (opt_options && opt_options.domain) {\n    domain = opt_options.domain;\n  }\n  trySetCookie(win, name, value, expirationTime, domain);\n}\n\n/**\n * Attempt to set a cookie with the given params.\n *\n * @param {!Window} win\n * @param {string} name\n * @param {string} value\n * @param {time} expirationTime\n * @param {string|undefined} domain\n */\nfunction trySetCookie(win, name, value, expirationTime, domain) {\n  // We do not allow setting cookies on the domain that contains both\n  // the cdn. and www. hosts.\n  if (domain == 'ampproject.org') {\n    // Actively delete them.\n    value = 'delete';\n    expirationTime = 0;\n  }\n  const cookie = encodeURIComponent(name) + '=' +\n      encodeURIComponent(value) +\n      '; path=/' +\n      (domain ? '; domain=' + domain : '') +\n      '; expires=' + new Date(expirationTime).toUTCString();\n  try {\n    win.document.cookie = cookie;\n  } catch (ignore) {\n    // Do not throw if setting the cookie failed Exceptions can be thrown\n    // when AMP docs are opened on origins that do not allow setting\n    // cookies such as null origins.\n  }\n}\n\n/**\n * Throws if a given cookie should not be set on the given origin.\n * This is a defense-in-depth. Callers should never run into this.\n *\n * @param {!Window} win\n * @param {!Object|undefined} options\n * @param {string} name For the error message.\n */\nfunction checkOriginForSettingCookie(win, options, name) {\n  if (options && options.allowOnProxyOrigin) {\n    return;\n  }\n  if (isProxyOrigin(win.location.href)) {\n    throw new Error('Should never attempt to set cookie on proxy origin: '\n        + name);\n  }\n\n  const current = parseUrlDeprecated(win.location.href).hostname.toLowerCase();\n  const proxy = parseUrlDeprecated(urls.cdn).hostname.toLowerCase();\n  if (current == proxy || endsWith(current, '.' + proxy)) {\n    throw new Error('Should never attempt to set cookie on proxy origin.'\n        + ' (in depth check): ' + name);\n  }\n}\n","/**\n * Copyright 2015 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// Imported just for the side effect of getting the `types` it exports into\n// the type system during compile time.\nimport './time';\n\n\n/**\n * A CurveDef is a function that returns a normtime value (0 to 1) for another\n * normtime value.\n * @typedef {function(./time.normtimeDef): ./time.normtimeDef}\n */\nexport let CurveDef;\n\n\n/**\n * Returns a cubic bezier curve.\n * @param {number} x1 X coordinate of the first control point.\n * @param {number} y1 Y coordinate of the first control point.\n * @param {number} x2 X coordinate of the second control point.\n * @param {number} y2 Y coordinate of the second control point.\n * @return {!CurveDef}\n */\nexport function bezierCurve(x1, y1, x2, y2) {\n  const bezier = new Bezier(0, 0, x1, y1, x2, y2, 1, 1);\n  return bezier.solveYValueFromXValue.bind(bezier);\n}\n\n\n/**\n * Thanks to\n * https://closure-library.googlecode.com/git-history/docs/local_closure_goog_math_bezier.js.source.html\n */\nclass Bezier {\n\n  /**\n   * @param {number} x0 X coordinate of the start point.\n   * @param {number} y0 Y coordinate of the start point.\n   * @param {number} x1 X coordinate of the first control point.\n   * @param {number} y1 Y coordinate of the first control point.\n   * @param {number} x2 X coordinate of the second control point.\n   * @param {number} y2 Y coordinate of the second control point.\n   * @param {number} x3 X coordinate of the end point.\n   * @param {number} y3 Y coordinate of the end point.\n   */\n  constructor(x0, y0, x1, y1, x2, y2, x3, y3) {\n    /**\n     * X coordinate of the first point.\n     * @type {number}\n     */\n    this.x0 = x0;\n\n    /**\n     * Y coordinate of the first point.\n     * @type {number}\n     */\n    this.y0 = y0;\n\n    /**\n     * X coordinate of the first control point.\n     * @type {number}\n     */\n    this.x1 = x1;\n\n    /**\n     * Y coordinate of the first control point.\n     * @type {number}\n     */\n    this.y1 = y1;\n\n    /**\n     * X coordinate of the second control point.\n     * @type {number}\n     */\n    this.x2 = x2;\n\n    /**\n     * Y coordinate of the second control point.\n     * @type {number}\n     */\n    this.y2 = y2;\n\n    /**\n     * X coordinate of the end point.\n     * @type {number}\n     */\n    this.x3 = x3;\n\n    /**\n     * Y coordinate of the end point.\n     * @type {number}\n     */\n    this.y3 = y3;\n  }\n\n  /**\n   * Computes the y coordinate of a point on the curve given its x coordinate.\n   * @param {number} xVal The x coordinate of the point on the curve.\n   * @return {number} The y coordinate of the point on the curve.\n   */\n  solveYValueFromXValue(xVal) {\n    return this.getPointY(this.solvePositionFromXValue(xVal));\n  }\n\n  /**\n   * Computes the position t of a point on the curve given its x coordinate.\n   * That is, for an input xVal, finds t s.t. getPointX(t) = xVal.\n   * As such, the following should always be true up to some small epsilon:\n   * t ~ solvePositionFromXValue(getPointX(t)) for t in [0, 1].\n   * @param {number} xVal The x coordinate of the point to find on the curve.\n   * @return {number} The position t.\n   */\n  solvePositionFromXValue(xVal) {\n    // Desired precision on the computation.\n    const epsilon = 1e-6;\n\n    // Initial estimate of t using linear interpolation.\n    let t = (xVal - this.x0) / (this.x3 - this.x0);\n    if (t <= 0) {\n      return 0;\n    } else if (t >= 1) {\n      return 1;\n    }\n\n    // Try gradient descent to solve for t. If it works, it is very fast.\n    let tMin = 0;\n    let tMax = 1;\n    let value = 0;\n    for (let i = 0; i < 8; i++) {\n      value = this.getPointX(t);\n      const derivative = (this.getPointX(t + epsilon) - value) / epsilon;\n      if (Math.abs(value - xVal) < epsilon) {\n        return t;\n      } else if (Math.abs(derivative) < epsilon) {\n        break;\n      } else {\n        if (value < xVal) {\n          tMin = t;\n        } else {\n          tMax = t;\n        }\n        t -= (value - xVal) / derivative;\n      }\n    }\n\n    // If the gradient descent got stuck in a local minimum, e.g. because\n    // the derivative was close to 0, use a Dichotomy refinement instead.\n    // We limit the number of iterations to 8.\n    for (let i = 0; Math.abs(value - xVal) > epsilon && i < 8; i++) {\n      if (value < xVal) {\n        tMin = t;\n        t = (t + tMax) / 2;\n      } else {\n        tMax = t;\n        t = (t + tMin) / 2;\n      }\n      value = this.getPointX(t);\n    }\n    return t;\n  }\n\n  /**\n   * Computes the curve's X coordinate at a point between 0 and 1.\n   * @param {number} t The point on the curve to find.\n   * @return {number} The computed coordinate.\n   */\n  getPointX(t) {\n    // Special case start and end.\n    if (t == 0) {\n      return this.x0;\n    } else if (t == 1) {\n      return this.x3;\n    }\n\n    // Step one - from 4 points to 3\n    let ix0 = this.lerp(this.x0, this.x1, t);\n    let ix1 = this.lerp(this.x1, this.x2, t);\n    const ix2 = this.lerp(this.x2, this.x3, t);\n\n    // Step two - from 3 points to 2\n    ix0 = this.lerp(ix0, ix1, t);\n    ix1 = this.lerp(ix1, ix2, t);\n\n    // Final step - last point\n    return this.lerp(ix0, ix1, t);\n  }\n\n  /**\n   * Computes the curve's Y coordinate at a point between 0 and 1.\n   * @param {number} t The point on the curve to find.\n   * @return {number} The computed coordinate.\n   */\n  getPointY(t) {\n    // Special case start and end.\n    if (t == 0) {\n      return this.y0;\n    } else if (t == 1) {\n      return this.y3;\n    }\n\n    // Step one - from 4 points to 3\n    let iy0 = this.lerp(this.y0, this.y1, t);\n    let iy1 = this.lerp(this.y1, this.y2, t);\n    const iy2 = this.lerp(this.y2, this.y3, t);\n\n    // Step two - from 3 points to 2\n    iy0 = this.lerp(iy0, iy1, t);\n    iy1 = this.lerp(iy1, iy2, t);\n\n    // Final step - last point\n    return this.lerp(iy0, iy1, t);\n  }\n\n  /**\n   * Performs linear interpolation between values a and b. Returns the value\n   * between a and b proportional to x (when x is between 0 and 1. When x is\n   * outside this range, the return value is a linear extrapolation).\n   * @param {number} a A number.\n   * @param {number} b A number.\n   * @param {number} x The proportion between a and b.\n   * @return {number} The interpolated value between a and b.\n   */\n  lerp(a, b, x) {\n    return a + x * (b - a);\n  }\n}\n\n\n/**\n * A collection of common curves.\n * See https://developer.mozilla.org/en-US/docs/Web/CSS/timing-function\n * @enum {!CurveDef}\n */\nexport const Curves = {\n  /**\n   * linear\n   * @param {number} n\n   * @return {number}\n   */\n  LINEAR(n) {return n;},\n\n  /**\n   * ease\n   */\n  EASE: bezierCurve(0.25, 0.1, 0.25, 1.0),\n\n  /**\n   * ease-in: slow out, fast in\n   */\n  EASE_IN: bezierCurve(0.42, 0.0, 1.0, 1.0),\n\n  /**\n   * ease-out: fast out, slow in\n   */\n  EASE_OUT: bezierCurve(0.0, 0.0, 0.58, 1.0),\n\n  /**\n   * ease-in-out\n   */\n  EASE_IN_OUT: bezierCurve(0.42, 0.0, 0.58, 1.0),\n};\n\n\n/**\n * @const {!Object<string, !CurveDef>}\n */\nconst NAME_MAP = {\n  'linear': Curves.LINEAR,\n  'ease': Curves.EASE,\n  'ease-in': Curves.EASE_IN,\n  'ease-out': Curves.EASE_OUT,\n  'ease-in-out': Curves.EASE_IN_OUT,\n};\n\n\n/**\n * If the argument is a string, this methods matches an existing curve by name.\n * @param {?CurveDef|string|undefined} curve\n * @return {?CurveDef}\n */\nexport function getCurve(curve) {\n  if (!curve) {\n    return null;\n  }\n  if (typeof curve == 'string') {\n    // If the curve is a custom cubic-bezier curve\n    if (curve.indexOf('cubic-bezier') != -1) {\n      const match = curve.match(/cubic-bezier\\((.+)\\)/);\n      if (match) {\n        const values = match[1].split(',').map(parseFloat);\n        if (values.length == 4) {\n          for (let i = 0; i < 4; i++) {\n            if (isNaN(values[i])) {\n              return null;\n            }\n          }\n          return bezierCurve(values[0], values[1], values[2], values[3]);\n        }\n      }\n      return null;\n    }\n    return NAME_MAP[curve];\n  }\n  return curve;\n}\n","/**\n * Copyright 2015 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Deferred} from './utils/promise';\nimport {cssEscape} from '../third_party/css-escape/css-escape';\nimport {dev} from './log';\nimport {dict} from './utils/object';\nimport {startsWith} from './string';\nimport {toWin} from './types';\n\nconst HTML_ESCAPE_CHARS = {\n  '&': '&amp;',\n  '<': '&lt;',\n  '>': '&gt;',\n  '\"': '&quot;',\n  \"'\": '&#x27;',\n  '`': '&#x60;',\n};\nconst HTML_ESCAPE_REGEX = /(&|<|>|\"|'|`)/g;\n\n/** @const {string} */\nexport const UPGRADE_TO_CUSTOMELEMENT_PROMISE =\n    '__AMP_UPG_PRM';\n\n/** @const {string} */\nexport const UPGRADE_TO_CUSTOMELEMENT_RESOLVER =\n    '__AMP_UPG_RES';\n\n/**\n * Waits until the child element is constructed. Once the child is found, the\n * callback is executed.\n * @param {!Element} parent\n * @param {function(!Element):boolean} checkFunc\n * @param {function()} callback\n */\nexport function waitForChild(parent, checkFunc, callback) {\n  if (checkFunc(parent)) {\n    callback();\n    return;\n  }\n  /** @const {!Window} */\n  const win = toWin(parent.ownerDocument.defaultView);\n  if (win.MutationObserver) {\n    /** @const {MutationObserver} */\n    const observer = new win.MutationObserver(() => {\n      if (checkFunc(parent)) {\n        observer.disconnect();\n        callback();\n      }\n    });\n    observer.observe(parent, {childList: true});\n  } else {\n    /** @const {number} */\n    const interval = win.setInterval(() => {\n      if (checkFunc(parent)) {\n        win.clearInterval(interval);\n        callback();\n      }\n    }, /* milliseconds */ 5);\n  }\n}\n\n/**\n * Waits until the child element is constructed. Once the child is found, the\n * promise is resolved.\n * @param {!Element} parent\n * @param {function(!Element):boolean} checkFunc\n * @return {!Promise}\n */\nexport function waitForChildPromise(parent, checkFunc) {\n  return new Promise(resolve => {\n    waitForChild(parent, checkFunc, resolve);\n  });\n}\n\n/**\n * Waits for document's body to be available.\n * Will be deprecated soon; use {@link AmpDoc#whenBodyAvailable} or\n * @{link DocumentState#onBodyAvailable} instead.\n * @param {!Document} doc\n * @param {function()} callback\n */\nexport function waitForBody(doc, callback) {\n  waitForChild(doc.documentElement, () => !!doc.body, callback);\n}\n\n\n/**\n * Waits for document's body to be available.\n * @param {!Document} doc\n * @return {!Promise}\n */\nexport function waitForBodyPromise(doc) {\n  return new Promise(resolve => {\n    waitForBody(doc, resolve);\n  });\n}\n\n\n/**\n * Removes the element.\n * @param {!Element} element\n */\nexport function removeElement(element) {\n  if (element.parentElement) {\n    element.parentElement.removeChild(element);\n  }\n}\n\n\n/**\n * Removes all child nodes of the specified element.\n * @param {!Element} parent\n */\nexport function removeChildren(parent) {\n  while (parent.firstChild) {\n    parent.removeChild(parent.firstChild);\n  }\n}\n\n\n/**\n * Copies all children nodes of element \"from\" to element \"to\". Child nodes\n * are deeply cloned. Notice, that this method should be used with care and\n * preferably on smaller subtrees.\n * @param {!Element} from\n * @param {!Element|!DocumentFragment} to\n */\nexport function copyChildren(from, to) {\n  const frag = to.ownerDocument.createDocumentFragment();\n  for (let n = from.firstChild; n; n = n.nextSibling) {\n    frag.appendChild(n.cloneNode(true));\n  }\n  to.appendChild(frag);\n}\n\n/**\n * Insert the element in the root after the element named after or\n * if that is null at the beginning.\n * @param {!Element|!ShadowRoot} root\n * @param {!Element} element\n * @param {?Node} after\n */\nexport function insertAfterOrAtStart(root, element, after) {\n  const before = after ? after.nextSibling : root.firstChild;\n  root.insertBefore(element, before);\n}\n\n/**\n * Add attributes to an element.\n * @param {!Element} element\n * @param {!JsonObject<string, string>} attributes\n * @return {!Element} created element\n */\nexport function addAttributesToElement(element, attributes) {\n  for (const attr in attributes) {\n    element.setAttribute(attr, attributes[attr]);\n  }\n  return element;\n}\n\n/**\n * Create a new element on document with specified tagName and attributes.\n * @param {!Document} doc\n * @param {string} tagName\n * @param {!JsonObject<string, string>} attributes\n * @return {!Element} created element\n */\nexport function createElementWithAttributes(doc, tagName, attributes) {\n  const element = doc.createElement(tagName);\n  return addAttributesToElement(element, attributes);\n}\n\n/**\n * Returns true if node is connected (attached).\n * @param {!Node} node\n * @return {boolean}\n * @see https://dom.spec.whatwg.org/#connected\n */\nexport function isConnectedNode(node) {\n  const connected = node.isConnected;\n  if (connected !== undefined) {\n    return connected;\n  }\n\n  // \"An element is connected if its shadow-including root is a document.\"\n  let n = node;\n  do {\n    n = rootNodeFor(n);\n    if (n.host) {\n      n = n.host;\n    } else {\n      break;\n    }\n  } while (true);\n  return n.nodeType === Node.DOCUMENT_NODE;\n}\n\n/**\n * Returns the root for a given node. Does not cross shadow DOM boundary.\n * @param {!Node} node\n * @return {!Node}\n */\nexport function rootNodeFor(node) {\n  if (Node.prototype.getRootNode) {\n    // Type checker says `getRootNode` may return null.\n    return node.getRootNode() || node;\n  }\n  let n;\n  for (n = node; !!n.parentNode; n = n.parentNode) {}\n  return n;\n}\n\n/**\n * Finds the closest element that satisfies the callback from this element\n * up the DOM subtree.\n * @param {!Element} element\n * @param {function(!Element):boolean} callback\n * @param {Element=} opt_stopAt optional elemnt to stop the search at.\n * @return {?Element}\n */\nexport function closest(element, callback, opt_stopAt) {\n  for (let el = element; el && el !== opt_stopAt; el = el.parentElement) {\n    if (callback(el)) {\n      return el;\n    }\n  }\n  return null;\n}\n\n\n/**\n * Finds the closest node that satisfies the callback from this node\n * up the DOM subtree.\n * @param {!Node} node\n * @param {function(!Node):boolean} callback\n * @return {?Node}\n */\nexport function closestNode(node, callback) {\n  for (let n = node; n; n = n.parentNode) {\n    if (callback(n)) {\n      return n;\n    }\n  }\n  return null;\n}\n\n\n/**\n * Finds the closest element with the specified name from this element\n * up the DOM subtree.\n * @param {!Element} element\n * @param {string} tagName\n * @return {?Element}\n */\nexport function closestByTag(element, tagName) {\n  if (element.closest) {\n    return element.closest(tagName);\n  }\n  tagName = tagName.toUpperCase();\n  return closest(element, el => {\n    return el.tagName == tagName;\n  });\n}\n\n/**\n * Finds the closest element with the specified selector from this element\n * @param {!Element} element\n * @param {string} selector\n * @return {?Element} closest ancestor if found.\n */\nexport function closestBySelector(element, selector) {\n  if (element.closest) {\n    return element.closest(selector);\n  }\n\n  return closest(element, el => {\n    return matches(el, selector);\n  });\n}\n\n/**\n * Checks if the given element matches the selector\n * @param  {!Element} el The element to verify\n * @param  {string} selector The selector to check against\n * @return {boolean} True if the element matched the selector. False otherwise.\n */\nexport function matches(el, selector) {\n  const matcher = el.matches ||\n      el.webkitMatchesSelector ||\n      el.mozMatchesSelector ||\n      el.msMatchesSelector ||\n      el.oMatchesSelector;\n  if (matcher) {\n    return matcher.call(el, selector);\n  }\n  return false; // IE8 always returns false.\n}\n\n/**\n * Finds the first descendant element with the specified name.\n * @param {!Element|!Document|!ShadowRoot} element\n * @param {string} tagName\n * @return {?Element}\n */\nexport function elementByTag(element, tagName) {\n  let elements;\n  // getElementsByTagName() is not supported on ShadowRoot.\n  if (typeof element.getElementsByTagName === 'function') {\n    elements = element.getElementsByTagName(tagName);\n  } else {\n    elements = element./*OK*/querySelectorAll(tagName);\n  }\n  return (elements && elements[0]) || null;\n}\n\n\n/**\n * Finds the first child element that satisfies the callback.\n * @param {!Element} parent\n * @param {function(!Element):boolean} callback\n * @return {?Element}\n */\nexport function childElement(parent, callback) {\n  for (let child = parent.firstElementChild; child;\n    child = child.nextElementSibling) {\n    if (callback(child)) {\n      return child;\n    }\n  }\n  return null;\n}\n\n\n/**\n * Finds all child elements that satisfy the callback.\n * @param {!Element} parent\n * @param {function(!Element):boolean} callback\n * @return {!Array<!Element>}\n */\nexport function childElements(parent, callback) {\n  const children = [];\n  for (let child = parent.firstElementChild; child;\n    child = child.nextElementSibling) {\n    if (callback(child)) {\n      children.push(child);\n    }\n  }\n  return children;\n}\n\n\n/**\n * Finds the last child element that satisfies the callback.\n * @param {!Element} parent\n * @param {function(!Element):boolean} callback\n * @return {?Element}\n */\nexport function lastChildElement(parent, callback) {\n  for (let child = parent.lastElementChild; child;\n    child = child.previousElementSibling) {\n    if (callback(child)) {\n      return child;\n    }\n  }\n  return null;\n}\n\n/**\n * Finds all child nodes that satisfy the callback.\n * These nodes can include Text, Comment and other child nodes.\n * @param {!Node} parent\n * @param {function(!Node):boolean} callback\n * @return {!Array<!Node>}\n */\nexport function childNodes(parent, callback) {\n  const nodes = [];\n  for (let child = parent.firstChild; child;\n    child = child.nextSibling) {\n    if (callback(child)) {\n      nodes.push(child);\n    }\n  }\n  return nodes;\n}\n\n/**\n * @type {boolean|undefined}\n * @visibleForTesting\n */\nlet scopeSelectorSupported;\n\n/**\n * @param {boolean|undefined} val\n * @visibleForTesting\n */\nexport function setScopeSelectorSupportedForTesting(val) {\n  scopeSelectorSupported = val;\n}\n\n/**\n * Test that the :scope selector is supported and behaves correctly.\n * @param {!Element} parent\n * @return {boolean}\n */\nfunction isScopeSelectorSupported(parent) {\n  const doc = parent.ownerDocument;\n  try {\n    const testElement = doc.createElement('div');\n    const testChild = doc.createElement('div');\n    testElement.appendChild(testChild);\n    // NOTE(cvializ, #12383): Firefox's implementation is incomplete,\n    // therefore we test actual functionality of`:scope` as well.\n    return testElement./*OK*/querySelector(':scope div') === testChild;\n  } catch (e) {\n    return false;\n  }\n}\n\n/**\n * Finds the first child element that has the specified attribute.\n * @param {!Element} parent\n * @param {string} attr\n * @return {?Element}\n */\nexport function childElementByAttr(parent, attr) {\n  return scopedQuerySelector/*OK*/(parent, `> [${attr}]`);\n}\n\n\n/**\n * Finds the last child element that has the specified attribute.\n * @param {!Element} parent\n * @param {string} attr\n * @return {?Element}\n */\nexport function lastChildElementByAttr(parent, attr) {\n  return lastChildElement(parent, el => {\n    return el.hasAttribute(attr);\n  });\n}\n\n\n/**\n * Finds all child elements that has the specified attribute.\n * @param {!Element} parent\n * @param {string} attr\n * @return {!NodeList<!Element>}\n */\nexport function childElementsByAttr(parent, attr) {\n  return scopedQuerySelectorAll/*OK*/(parent, `> [${attr}]`);\n}\n\n\n/**\n * Finds the first child element that has the specified tag name.\n * @param {!Element} parent\n * @param {string} tagName\n * @return {?Element}\n */\nexport function childElementByTag(parent, tagName) {\n  return scopedQuerySelector/*OK*/(parent, `> ${tagName}`);\n}\n\n\n/**\n * Finds all child elements with the specified tag name.\n * @param {!Element} parent\n * @param {string} tagName\n * @return {!NodeList<!Element>}\n */\nexport function childElementsByTag(parent, tagName) {\n  return scopedQuerySelectorAll/*OK*/(parent, `> ${tagName}`);\n}\n\n\n/**\n * Finds the first element that matches `selector`, scoped inside `root`.\n * Note: in IE, this causes a quick mutation of the element's class list.\n * @param {!Element} root\n * @param {string} selector\n * @return {?Element}\n */\nexport function scopedQuerySelector(root, selector) {\n  if (scopeSelectorSupported == null) {\n    scopeSelectorSupported = isScopeSelectorSupported(root);\n  }\n  if (scopeSelectorSupported) {\n    return root./*OK*/querySelector(`:scope ${selector}`);\n  }\n\n  // Only IE.\n  const unique = 'i-amphtml-scoped';\n  root.classList.add(unique);\n  const element = root./*OK*/querySelector(`.${unique} ${selector}`);\n  root.classList.remove(unique);\n  return element;\n}\n\n\n/**\n * Finds the every element that matches `selector`, scoped inside `root`.\n * Note: in IE, this causes a quick mutation of the element's class list.\n * @param {!Element} root\n * @param {string} selector\n * @return {!NodeList<!Element>}\n */\nexport function scopedQuerySelectorAll(root, selector) {\n  if (scopeSelectorSupported == null) {\n    scopeSelectorSupported = isScopeSelectorSupported(root);\n  }\n  if (scopeSelectorSupported) {\n    return root./*OK*/querySelectorAll(`:scope ${selector}`);\n  }\n\n  // Only IE.\n  const unique = 'i-amphtml-scoped';\n  root.classList.add(unique);\n  const elements = root./*OK*/querySelectorAll(`.${unique} ${selector}`);\n  root.classList.remove(unique);\n  return elements;\n}\n\n\n/**\n * Returns element data-param- attributes as url parameters key-value pairs.\n * e.g. data-param-some-attr=value -> {someAttr: value}.\n * @param {!Element} element\n * @param {function(string):string=} opt_computeParamNameFunc to compute the\n *    parameter name, get passed the camel-case parameter name.\n * @param {!RegExp=} opt_paramPattern Regex pattern to match data attributes.\n * @return {!JsonObject}\n */\nexport function getDataParamsFromAttributes(element, opt_computeParamNameFunc,\n  opt_paramPattern) {\n  const computeParamNameFunc = opt_computeParamNameFunc || (key => key);\n  const {dataset} = element;\n  const params = dict();\n  const paramPattern = opt_paramPattern ? opt_paramPattern : /^param(.+)/;\n  for (const key in dataset) {\n    const matches = key.match(paramPattern);\n    if (matches) {\n      const param = matches[1][0].toLowerCase() + matches[1].substr(1);\n      params[computeParamNameFunc(param)] = dataset[key];\n    }\n  }\n  return params;\n}\n\n/**\n * Whether the element have a next node in the document order.\n * This means either:\n *  a. The element itself has a nextSibling.\n *  b. Any of the element ancestors has a nextSibling.\n * @param {!Element} element\n * @param {?Node} opt_stopNode\n * @return {boolean}\n */\nexport function hasNextNodeInDocumentOrder(element, opt_stopNode) {\n  let currentElement = element;\n  do {\n    if (currentElement.nextSibling) {\n      return true;\n    }\n  } while ((currentElement = currentElement.parentNode) &&\n            currentElement != opt_stopNode);\n  return false;\n}\n\n\n/**\n * Finds all ancestor elements that satisfy predicate.\n * @param {!Element} child\n * @param {function(!Element):boolean} predicate\n * @return {!Array<!Element>}\n */\nexport function ancestorElements(child, predicate) {\n  const ancestors = [];\n  for (let ancestor = child.parentElement; ancestor;\n    ancestor = ancestor.parentElement) {\n    if (predicate(ancestor)) {\n      ancestors.push(ancestor);\n    }\n  }\n  return ancestors;\n}\n\n\n/**\n * Finds all ancestor elements that has the specified tag name.\n * @param {!Element} child\n * @param {string} tagName\n * @return {!Array<!Element>}\n */\nexport function ancestorElementsByTag(child, tagName) {\n  tagName = tagName.toUpperCase();\n  return ancestorElements(child, el => {\n    return el.tagName == tagName;\n  });\n}\n\n/**\n * Returns a clone of the content of a template element.\n *\n * Polyfill to replace .content access for browsers that do not support\n * HTMLTemplateElements natively.\n *\n * @param {!HTMLTemplateElement|!Element} template\n * @return {!DocumentFragment}\n */\nexport function templateContentClone(template) {\n  if ('content' in template) {\n    return template.content.cloneNode(true);\n  } else {\n    const content = template.ownerDocument.createDocumentFragment();\n    copyChildren(template, content);\n    return content;\n  }\n}\n\n/**\n * Iterate over an array-like. Some collections like NodeList are\n * lazily evaluated in some browsers, and accessing `length` forces full\n * evaluation. We can improve performance by iterating until an element is\n * `undefined` to avoid checking the `length` property.\n * Test cases: https://jsperf.com/iterating-over-collections-of-elements\n * @param {!IArrayLike<T>} iterable\n * @param {function(T, number)} cb\n * @template T\n */\nexport function iterateCursor(iterable, cb) {\n  for (let i = 0, value; (value = iterable[i]) !== undefined; i++) {\n    cb(value, i);\n  }\n}\n\n/**\n * This method wraps around window's open method. It first tries to execute\n * `open` call with the provided target and if it fails, it retries the call\n * with the `_top` target. This is necessary given that in some embedding\n * scenarios, such as iOS' WKWebView, navigation to `_blank` and other targets\n * is blocked by default.\n *\n * @param {!Window} win\n * @param {string} url\n * @param {string} target\n * @param {string=} opt_features\n * @return {?Window}\n */\nexport function openWindowDialog(win, url, target, opt_features) {\n  // Try first with the specified target. If we're inside the WKWebView or\n  // a similar environments, this method is expected to fail by default for\n  // all targets except `_top`.\n  let res;\n  try {\n    res = win.open(url, target, opt_features);\n  } catch (e) {\n    dev().error('DOM', 'Failed to open url on target: ', target, e);\n  }\n\n  // Then try with `_top` target.\n  if (!res && target != '_top') {\n    res = win.open(url, '_top');\n  }\n  return res;\n}\n\n/**\n * Whether the element is a script tag with application/json type.\n * @param {!Element} element\n * @return {boolean}\n */\nexport function isJsonScriptTag(element) {\n  return element.tagName == 'SCRIPT' &&\n            element.getAttribute('type').toUpperCase() == 'APPLICATION/JSON';\n}\n\n/**\n * Whether the element is a script tag with application/json type.\n * @param {!Element} element\n * @return {boolean}\n */\nexport function isJsonLdScriptTag(element) {\n  return element.tagName == 'SCRIPT' &&\n      element.getAttribute('type').toUpperCase() == 'APPLICATION/LD+JSON';\n}\n\n/**\n * Whether the page's direction is right to left or not.\n * @param {!Document} doc\n * @return {boolean}\n */\nexport function isRTL(doc) {\n  const dir = doc.body.getAttribute('dir')\n                 || doc.documentElement.getAttribute('dir')\n                 || 'ltr';\n  return dir == 'rtl';\n}\n\n\n/**\n * Escapes an ident (ID or a class name) to be used as a CSS selector.\n *\n * See https://drafts.csswg.org/cssom/#serialize-an-identifier.\n *\n * @param {string} ident\n * @return {string}\n */\nexport function escapeCssSelectorIdent(ident) {\n  return cssEscape(ident);\n}\n\n/**\n * Escapes an ident in a way that can be used by :nth-child() psuedo-class.\n *\n * See https://github.com/w3c/csswg-drafts/issues/2306.\n *\n * @param {string|number} ident\n * @return {string}\n */\nexport function escapeCssSelectorNth(ident) {\n  const escaped = String(ident);\n  // Ensure it doesn't close the nth-child psuedo class.\n  dev().assert(escaped.indexOf(')') === -1);\n  return escaped;\n}\n\n/**\n * Escapes `<`, `>` and other HTML charcaters with their escaped forms.\n * @param {string} text\n * @return {string}\n */\nexport function escapeHtml(text) {\n  if (!text) {\n    return text;\n  }\n  return text.replace(HTML_ESCAPE_REGEX, escapeHtmlChar);\n}\n\n/**\n * @param {string} c\n * @return {string}\n */\nfunction escapeHtmlChar(c) {\n  return HTML_ESCAPE_CHARS[c];\n}\n\n/**\n * Tries to focus on the given element; fails silently if browser throws an\n * exception.\n * @param {!Element} element\n */\nexport function tryFocus(element) {\n  try {\n    element./*OK*/focus();\n  } catch (e) {\n    // IE <= 7 may throw exceptions when focusing on hidden items.\n  }\n}\n\n/**\n * Whether the given window is in an iframe or not.\n * @param {!Window} win\n * @return {boolean}\n */\nexport function isIframed(win) {\n  return win.parent && win.parent != win;\n}\n\n/**\n * Determines if this element is an AMP element\n * @param {!Element} element\n * @return {boolean}\n */\nexport function isAmpElement(element) {\n  const tag = element.tagName;\n  // Use prefix to recognize AMP element. This is necessary because stub\n  // may not be attached yet.\n  return startsWith(tag, 'AMP-') &&\n      // Some \"amp-*\" elements are not really AMP elements. :smh:\n      !(tag == 'AMP-STICKY-AD-TOP-PADDING' || tag == 'AMP-BODY');\n}\n\n/**\n * Return a promise that resolve when an AMP element upgrade from HTMLElement\n * to CustomElement\n * @param {!Element} element\n * @return {!Promise<!Element>}\n */\nexport function whenUpgradedToCustomElement(element) {\n  dev().assert(isAmpElement(element), 'element is not AmpElement');\n  if (element.createdCallback) {\n    // Element already is CustomElement;\n    return Promise.resolve(element);\n  }\n  // If Element is still HTMLElement, wait for it to upgrade to customElement\n  // Note: use pure string to avoid obfuscation between versions.\n  if (!element[UPGRADE_TO_CUSTOMELEMENT_PROMISE]) {\n    const deferred = new Deferred();\n    element[UPGRADE_TO_CUSTOMELEMENT_PROMISE] = deferred.promise;\n    element[UPGRADE_TO_CUSTOMELEMENT_RESOLVER] = deferred.resolve;\n\n  }\n\n  return element[UPGRADE_TO_CUSTOMELEMENT_PROMISE];\n}\n\n/**\n * Replacement for `Element.requestFullscreen()` method.\n * https://developer.mozilla.org/en-US/docs/Web/API/Element/requestFullscreen\n * @param {!Element} element\n */\nexport function fullscreenEnter(element) {\n  const requestFs = element.requestFullscreen\n   || element.requestFullScreen\n   || element.webkitRequestFullscreen\n   || element.webkitRequestFullScreen\n   || element.webkitEnterFullscreen\n   || element.webkitEnterFullScreen\n   || element.msRequestFullscreen\n   || element.msRequestFullScreen\n   || element.mozRequestFullscreen\n   || element.mozRequestFullScreen;\n  if (requestFs) {\n    requestFs.call(element);\n  }\n}\n\n/**\n * Replacement for `Document.exitFullscreen()` method.\n * https://developer.mozilla.org/en-US/docs/Web/API/Document/exitFullscreen\n * @param {!Element} element\n */\nexport function fullscreenExit(element) {\n  let exitFs = element.cancelFullScreen\n               || element.exitFullscreen\n               || element.exitFullScreen\n               || element.webkitExitFullscreen\n               || element.webkitExitFullScreen\n               || element.webkitCancelFullScreen\n               || element.mozCancelFullScreen\n               || element.msExitFullscreen;\n  if (exitFs) {\n    exitFs.call(element);\n    return;\n  }\n  if (element.ownerDocument) {\n    exitFs = element.ownerDocument.cancelFullScreen\n             || element.ownerDocument.exitFullscreen\n             || element.ownerDocument.exitFullScreen\n             || element.ownerDocument.webkitExitFullscreen\n             || element.ownerDocument.webkitExitFullScreen\n             || element.ownerDocument.webkitCancelFullScreen\n             || element.ownerDocument.mozCancelFullScreen\n             || element.ownerDocument.msExitFullscreen;\n  }\n  if (exitFs) {\n    exitFs.call(element.ownerDocument);\n    return;\n  }\n}\n\n\n/**\n * Replacement for `Document.fullscreenElement`.\n * https://developer.mozilla.org/en-US/docs/Web/API/Document/fullscreenElement\n * @param {!Element} element\n * @return {boolean}\n */\nexport function isFullscreenElement(element) {\n  const isFullscreen = element.webkitDisplayingFullscreen;\n  if (isFullscreen) {\n    return true;\n  }\n  if (element.ownerDocument) {\n    const fullscreenElement = element.ownerDocument.fullscreenElement\n             || element.ownerDocument.webkitFullscreenElement\n             || element.ownerDocument.mozFullScreenElement\n             || element.webkitCurrentFullScreenElement;\n    if (fullscreenElement == element) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/**\n * Returns true if node is not disabled.\n *\n * IE8 can return false positives, see {@link matches}.\n * @param {!Element} element\n * @return {boolean}\n * @see https://www.w3.org/TR/html5/forms.html#concept-fe-disabled\n */\nexport function isEnabled(element) {\n  return !(element.disabled || matches(element, ':disabled'));\n}\n","/**\n * Copyright 2016 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as dom from './dom';\nimport {\n  getAmpdoc,\n  getExistingServiceForDocInEmbedScope,\n  getService,\n  getServicePromise,\n  getServicePromiseForDoc,\n  getServicePromiseOrNull,\n  getServicePromiseOrNullForDoc,\n  getTopWindow,\n} from './service';\nimport {toWin} from './types';\nimport {user} from './log';\n\n/**\n * Returns a promise for a service for the given id and window. Also expects an\n * element that has the actual implementation. The promise resolves when the\n * implementation loaded. Users should typically wrap this as a special purpose\n * function (e.g. Services.viewportForDoc(...)) for type safety and because the\n * factory should not be passed around.\n * @param {!Window} win\n * @param {string} id of the service.\n * @param {string} extension Name of the custom extension that provides the\n *     implementation of this service.\n * @param {boolean=} opt_element Whether this service is provided by an element,\n *     not the extension.\n * @return {!Promise<*>}\n */\nexport function getElementService(win, id, extension, opt_element) {\n  return getElementServiceIfAvailable(win, id, extension, opt_element).then(\n      service => assertService(service, id, extension));\n}\n\n/**\n * Same as getElementService but produces null if the given element is not\n * actually available on the current page.\n * @param {!Window} win\n * @param {string} id of the service.\n * @param {string} extension Name of the custom extension that provides the\n *     implementation of this service.\n * @param {boolean=} opt_element Whether this service is provided by an\n *     element, not the extension.\n * @return {!Promise<?Object>}\n */\nexport function getElementServiceIfAvailable(win, id, extension, opt_element) {\n  const s = getServicePromiseOrNull(win, id);\n  if (s) {\n    return /** @type {!Promise<?Object>} */ (s);\n  }\n  return getElementServicePromiseOrNull(win, id, extension, opt_element);\n}\n\n/**\n * @param {!Window} win\n * @param {string} elementName Name of an extended custom element.\n * @return {boolean} Whether this element is scheduled to be loaded.\n */\nfunction isElementScheduled(win, elementName) {\n  // Set in custom-element.js\n  if (!win.ampExtendedElements) {\n    return false;\n  }\n  return !!win.ampExtendedElements[elementName];\n}\n\n\n/**\n * Returns a promise for a service for the given id and window. Also expects an\n * element that has the actual implementation. The promise resolves when the\n * implementation loaded. Users should typically wrap this as a special purpose\n * function (e.g. Services.viewportForDoc(...)) for type safety and because the\n * factory should not be passed around.\n * @param {!Element|!./service/ampdoc-impl.AmpDoc} elementOrAmpDoc\n * @param {string} id of the service.\n * @param {string} extension Name of the custom extension that provides the\n *     implementation of this service.\n * @param {boolean=} opt_element Whether this service is provided by an element,\n *     not the extension.\n * @return {!Promise<*>}\n */\nexport function getElementServiceForDoc(elementOrAmpDoc, id, extension,\n  opt_element) {\n  return getElementServiceIfAvailableForDoc(\n      elementOrAmpDoc, id, extension, opt_element)\n      .then(service => assertService(service, id, extension));\n}\n\n/**\n * Same as getElementService but produces null if the given element is not\n * actually available on the current page.\n * @param {!Element|!./service/ampdoc-impl.AmpDoc} elementOrAmpDoc\n * @param {string} id of the service.\n * @param {string} extension Name of the custom extension that provides the\n *     implementation of this service.\n * @param {boolean=} opt_element Whether this service is provided by an\n *     element, not the extension.\n * @return {!Promise<?Object>}\n */\nexport function getElementServiceIfAvailableForDoc(\n  elementOrAmpDoc, id, extension, opt_element) {\n  const ampdoc = getAmpdoc(elementOrAmpDoc);\n  const s = getServicePromiseOrNullForDoc(elementOrAmpDoc, id);\n  if (s) {\n    return /** @type {!Promise<?Object>} */ (s);\n  }\n\n  return ampdoc.whenBodyAvailable()\n      .then(() => waitForExtensionIfPresent(\n          ampdoc.win, extension,\n          ampdoc.getHeadNode()))\n      .then(() => {\n        // If this service is provided by an element, then we can't depend on\n        // the service (they may not use the element).\n        if (opt_element) {\n          return getServicePromiseOrNullForDoc(elementOrAmpDoc, id);\n        } else if (isElementScheduled(ampdoc.win, extension)) {\n          return getServicePromiseForDoc(elementOrAmpDoc, id);\n        }\n        return null;\n      });\n}\n\n/**\n * Returns a promise for service for the given id in the embed scope of\n * a given node, if it exists. Otherwise, falls back to ampdoc scope IFF\n * the given node is in the top-level window.\n * @param {!Element|!./service/ampdoc-impl.AmpDoc} elementOrAmpDoc\n * @param {string} id of the service.\n * @param {string} extension Name of the custom element that provides\n *     the implementation of this service.\n * @return {!Promise<?Object>}\n */\nexport function getElementServiceIfAvailableForDocInEmbedScope(\n  elementOrAmpDoc, id, extension) {\n  const s = getExistingServiceForDocInEmbedScope(elementOrAmpDoc, id);\n  if (s) {\n    return /** @type {!Promise<?Object>} */ (Promise.resolve(s));\n  }\n  // Return embed-scope element service promise if scheduled.\n  if (elementOrAmpDoc.nodeType) {\n    const win = toWin(elementOrAmpDoc.ownerDocument.defaultView);\n    const topWin = getTopWindow(win);\n    // In embeds, doc-scope services are window-scope. But make sure to\n    // only do this for embeds (not the top window), otherwise we'd grab\n    // a promise from the wrong service holder which would never resolve.\n    if (win !== topWin) {\n      return getElementServicePromiseOrNull(win, id, extension);\n    } else {\n      // Fallback to ampdoc IFF the given node is _not_ FIE.\n      return getElementServiceIfAvailableForDoc(elementOrAmpDoc, id, extension);\n    }\n  }\n  return /** @type {!Promise<?Object>} */ (Promise.resolve(null));\n}\n\n/**\n * Throws user error if `service` is null.\n * @param {Object} service\n * @param {string} id\n * @param {string} extension\n * @return {!Object}\n * @private\n */\nfunction assertService(service, id, extension) {\n  return /** @type {!Object} */ (user().assert(service,\n      'Service %s was requested to be provided through %s, ' +\n      'but %s is not loaded in the current page. To fix this ' +\n      'problem load the JavaScript file for %s in this page.',\n      id, extension, extension, extension));\n}\n\n/**\n * Get list of all the extension JS files\n * @param {HTMLHeadElement|Element|ShadowRoot} head\n * @return {!Array<string>}\n */\nexport function extensionScriptsInNode(head) {\n  // ampdoc.getHeadNode() can return null\n  if (!head) {\n    return [];\n  }\n  const scripts = [];\n  const list = head.querySelectorAll('script[custom-element]');\n  for (let i = 0; i < list.length; i++) {\n    scripts.push(list[i].getAttribute('custom-element'));\n  }\n  return scripts;\n}\n\n/**\n * Waits for body to be present then verifies that an extension script is\n * present in head for installation.\n * @param {!./service/ampdoc-impl.AmpDoc} ampdoc\n * @param {string} extensionId\n * @return {!Promise<boolean>}\n */\nexport function isExtensionScriptInNode(ampdoc, extensionId) {\n  return ampdoc.whenBodyAvailable()\n      .then(() => {\n        return extensionScriptInNode(\n            ampdoc.getHeadNode(), extensionId);\n      });\n}\n\n/**\n * Verifies that an extension script is present in head for\n * installation.\n * @param {HTMLHeadElement|Element|ShadowRoot} head\n * @param {string} extensionId\n * @private\n */\nfunction extensionScriptInNode(head, extensionId) {\n  return extensionScriptsInNode(head).includes(extensionId);\n}\n\n/**\n * Waits for an extension if its script is present\n * @param {!Window} win\n * @param {string} extension\n * @param {HTMLHeadElement|Element|ShadowRoot} head\n * @return {!Promise}\n * @private\n */\nfunction waitForExtensionIfPresent(win, extension, head) {\n  /**\n   * If there is an extension script wait for it to load before trying\n   * to get the service. Prevents a race condition when everything but\n   * the extensions is in cache. If there is no script then it's either\n   * not present, or the service was defined by a test. In those cases\n   * we don't wait around for an extension that does not exist.\n   */\n\n  // TODO(jpettitt) investigate registerExtension to short circuit\n  // the dom call in extensionScriptsInNode()\n  if (!extensionScriptInNode(head, extension)) {\n    return Promise.resolve();\n  }\n\n  const extensions = getService(win, 'extensions');\n  return /** @type {!Promise<?Object>} */ (\n    extensions.waitForExtension(win, extension));\n}\n\n/**\n * Returns the promise for service with `id` on the given window if available.\n * Otherwise, resolves with null (service was not registered).\n * @param {!Window} win\n * @param {string} id\n * @param {string} extension\n * @param {boolean=} opt_element\n * @return {!Promise<Object>}\n * @private\n */\nfunction getElementServicePromiseOrNull(win, id, extension, opt_element) {\n  return dom.waitForBodyPromise(win.document)\n      .then(() => waitForExtensionIfPresent(win, extension, win.document.head))\n      .then(() => {\n        // If this service is provided by an element, then we can't depend on\n        // the service (they may not use the element).\n        if (opt_element) {\n          return getServicePromiseOrNull(win, id);\n        } else if (isElementScheduled(win, extension)) {\n          return getServicePromise(win, id);\n        }\n        return null;\n      });\n}\n","/**\n * Copyright 2017 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n  * Whether addEventListener supports options or only takes capture as a boolean\n  * @type {boolean|undefined}\n  * @visibleForTesting\n  */\nlet optsSupported;\n\n/**\n * Listens for the specified event on the element.\n *\n * Do not use this directly. This method is implemented as a shared\n * dependency. Use `listen()` in either `event-helper` or `3p-frame-messaging`,\n * depending on your use case.\n *\n * @param {!EventTarget} element\n * @param {string} eventType\n * @param {function(!Event)} listener\n * @param {Object=} opt_evtListenerOpts\n * @return {!UnlistenDef}\n */\nexport function internalListenImplementation(element, eventType, listener,\n  opt_evtListenerOpts) {\n  let localElement = element;\n  let localListener = listener;\n  /**\n   * @type {?Function}\n   */\n  let wrapped;\n\n  wrapped = event => {\n    try {\n      return localListener(event);\n    } catch (e) {\n      // reportError is installed globally per window in the entry point.\n      self.reportError(e);\n      throw e;\n    }\n  };\n  const optsSupported = detectEvtListenerOptsSupport();\n  let capture = false;\n  if (opt_evtListenerOpts) {\n    capture = opt_evtListenerOpts.capture;\n  }\n  localElement.addEventListener(\n      eventType,\n      wrapped,\n      optsSupported ? opt_evtListenerOpts : capture\n  );\n  return () => {\n    if (localElement) {\n      localElement.removeEventListener(\n          eventType,\n          wrapped,\n          optsSupported ? opt_evtListenerOpts : capture\n      );\n    }\n    // Ensure these are GC'd\n    localListener = null;\n    localElement = null;\n    wrapped = null;\n  };\n}\n\n/**\n * Tests whether the browser supports options as an argument of addEventListener\n * or not.\n *\n * @return {boolean}\n */\nexport function detectEvtListenerOptsSupport() {\n  // Only run the test once\n  if (optsSupported !== undefined) {\n    return optsSupported;\n  }\n\n  optsSupported = false;\n  try {\n    // Test whether browser supports EventListenerOptions or not\n    const options = {\n      get capture() {\n        optsSupported = true;\n      },\n    };\n    self.addEventListener('test-options', null, options);\n    self.removeEventListener('test-options', null, options);\n  } catch (err) {\n    // EventListenerOptions are not supported\n  }\n  return optsSupported;\n}\n\n/**\n  * Resets the test for whether addEventListener supports options or not.\n  */\nexport function resetEvtListenerOptsSupportForTesting() {\n  optsSupported = undefined;\n}\n","/**\n * Copyright 2015 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {internalListenImplementation} from './event-helper-listen';\nimport {user} from './log';\n\n/** @const {string}  */\nconst LOAD_FAILURE_PREFIX = 'Failed to load:';\n\n/**\n * Returns a CustomEvent with a given type and detail; supports fallback for IE.\n * @param {!Window} win\n * @param {string} type\n * @param {!JsonObject|string|undefined|null} detail\n * @param {EventInit=} opt_eventInit\n * @return {!Event}\n */\nexport function createCustomEvent(win, type, detail, opt_eventInit) {\n  const eventInit = /** @type {!CustomEventInit} */ ({detail});\n  Object.assign(eventInit, opt_eventInit);\n  // win.CustomEvent is a function on Edge, Chrome, FF, Safari but\n  // is an object on IE 11.\n  if (typeof win.CustomEvent == 'function') {\n    return new win.CustomEvent(type, eventInit);\n  } else {\n    // Deprecated fallback for IE.\n    const e = win.document.createEvent('CustomEvent');\n    e.initCustomEvent(\n        type, !!eventInit.bubbles, !!eventInit.cancelable, detail);\n    return e;\n  }\n}\n\n/**\n * Listens for the specified event on the element.\n * @param {!EventTarget} element\n * @param {string} eventType\n * @param {function(!Event)} listener\n * @param {Object=} opt_evtListenerOpts\n * @return {!UnlistenDef}\n */\nexport function listen(element, eventType, listener, opt_evtListenerOpts) {\n  return internalListenImplementation(\n      element, eventType, listener, opt_evtListenerOpts);\n}\n\n/**\n * Returns the data property of an event with the correct type.\n * @param {!Event|{data: !JsonObject}} event\n * @return {?JsonObject|string|undefined}\n */\nexport function getData(event) {\n  return /** @type {?JsonObject|string|undefined} */ (event.data);\n}\n\n/**\n * Returns the detail property of an event with the correct type.\n * @param {!Event|{detail: !JsonObject}} event\n * @return {?JsonObject|string|undefined}\n */\nexport function getDetail(event) {\n  return /** @type {?JsonObject|string|undefined} */ (event.detail);\n}\n\n/**\n * Listens for the specified event on the element and removes the listener\n * as soon as event has been received.\n * @param {!EventTarget} element\n * @param {string} eventType\n * @param {function(!Event)} listener\n * @param {Object=} opt_evtListenerOpts\n * @return {!UnlistenDef}\n */\nexport function listenOnce(element, eventType, listener, opt_evtListenerOpts) {\n  let localListener = listener;\n  const unlisten = internalListenImplementation(element, eventType, event => {\n    try {\n      localListener(event);\n    } finally {\n      // Ensure listener is GC'd\n      localListener = null;\n      unlisten();\n    }\n  }, opt_evtListenerOpts);\n  return unlisten;\n}\n\n\n/**\n * Returns  a promise that will resolve as soon as the specified event has\n * fired on the element.\n * @param {!EventTarget} element\n * @param {string} eventType\n * @param {Object=} opt_evtListenerOpts\n * @param {function(!UnlistenDef)=} opt_cancel An optional function that, when\n *     provided, will be called with the unlistener. This gives the caller\n *     access to the unlistener, so it may be called manually when necessary.\n * @return {!Promise<!Event>}\n */\nexport function listenOncePromise(element, eventType, opt_evtListenerOpts,\n  opt_cancel) {\n  let unlisten;\n  const eventPromise = new Promise(resolve => {\n    unlisten = listenOnce(element, eventType, resolve, opt_evtListenerOpts);\n  });\n  eventPromise.then(unlisten, unlisten);\n  if (opt_cancel) {\n    opt_cancel(unlisten);\n  }\n  return eventPromise;\n}\n\n\n/**\n * Whether the specified element/window has been loaded already.\n * @param {!Element|!Window} eleOrWindow\n * @return {boolean}\n */\nexport function isLoaded(eleOrWindow) {\n  return !!(eleOrWindow.complete || eleOrWindow.readyState == 'complete'\n      // If the passed in thing is a Window, infer loaded state from\n      //\n      || (eleOrWindow.document\n          && eleOrWindow.document.readyState == 'complete'));\n}\n\n/**\n * Returns a promise that will resolve or fail based on the eleOrWindow's 'load'\n * and 'error' events. Optionally this method takes a timeout, which will reject\n * the promise if the resource has not loaded by then.\n * @param {T} eleOrWindow Supports both Elements and as a special case Windows.\n * @return {!Promise<T>}\n * @template T\n */\nexport function loadPromise(eleOrWindow) {\n  let unlistenLoad;\n  let unlistenError;\n  if (isLoaded(eleOrWindow)) {\n    return Promise.resolve(eleOrWindow);\n  }\n  const loadingPromise = new Promise((resolve, reject) => {\n    // Listen once since IE 5/6/7 fire the onload event continuously for\n    // animated GIFs.\n    const {tagName} = eleOrWindow;\n    if (tagName === 'AUDIO' || tagName === 'VIDEO') {\n      unlistenLoad = listenOnce(eleOrWindow, 'loadstart', resolve);\n    } else {\n      unlistenLoad = listenOnce(eleOrWindow, 'load', resolve);\n    }\n    // For elements, unlisten on error (don't for Windows).\n    if (tagName) {\n      unlistenError = listenOnce(eleOrWindow, 'error', reject);\n    }\n  });\n\n  return loadingPromise.then(() => {\n    if (unlistenError) {\n      unlistenError();\n    }\n    return eleOrWindow;\n  }, () => {\n    if (unlistenLoad) {\n      unlistenLoad();\n    }\n    failedToLoad(eleOrWindow);\n  });\n}\n\n/**\n * Emit error on load failure.\n * @param {!Element|!Window} eleOrWindow Supports both Elements and as a special\n *     case Windows.\n */\nfunction failedToLoad(eleOrWindow) {\n  // Report failed loads as user errors so that they automatically go\n  // into the \"document error\" bucket.\n  let target = eleOrWindow;\n  if (target && target.src) {\n    target = target.src;\n  }\n  throw user().createError(LOAD_FAILURE_PREFIX, target);\n}\n\n/**\n * Returns true if this error message is was created for a load error.\n * @param {string} message An error message\n * @return {boolean}\n */\nexport function isLoadErrorMessage(message) {\n  return message.indexOf(LOAD_FAILURE_PREFIX) != -1;\n}\n","/**\n * Copyright 2015 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Experiments system allows a developer to opt-in to test\n * features that are not yet fully tested.\n *\n * Experiments page: https://cdn.ampproject.org/experiments.html *\n */\n\nimport {getCookie, setCookie} from './cookies';\nimport {hasOwn} from './utils/object';\nimport {parseQueryString} from './url';\n\n/** @const {string} */\nconst COOKIE_NAME = 'AMP_EXP';\n\n/** @const {number} */\nconst COOKIE_MAX_AGE_DAYS = 180; // 6 month\n\n/** @const {time} */\nconst COOKIE_EXPIRATION_INTERVAL = COOKIE_MAX_AGE_DAYS * 24 * 60 * 60 * 1000;\n\n/** @const {string} */\nconst TOGGLES_WINDOW_PROPERTY = '__AMP__EXPERIMENT_TOGGLES';\n\n/**\n * @typedef {{\n *   isTrafficEligible: function(!Window):boolean,\n *   branches: !Array<string>\n * }}\n */\nexport let ExperimentInfo;\n\n/**\n * Whether we are in canary.\n * @param {!Window} win\n * @return {boolean}\n */\nexport function isCanary(win) {\n  return !!(win.AMP_CONFIG && win.AMP_CONFIG.canary);\n}\n\n/**\n * Returns binary type, e.g., canary, control, or production.\n * @param {!Window} win\n * @return {string}\n */\nexport function getBinaryType(win) {\n  return win.AMP_CONFIG && win.AMP_CONFIG.type ?\n    win.AMP_CONFIG.type : 'unknown';\n}\n\n/**\n * Whether the specified experiment is on or off.\n * @param {!Window} win\n * @param {string} experimentId\n * @return {boolean}\n */\nexport function isExperimentOn(win, experimentId) {\n  const toggles = experimentToggles(win);\n  return !!toggles[experimentId];\n}\n\n/**\n * Toggles the experiment on or off. Returns the actual value of the experiment\n * after toggling is done.\n * @param {!Window} win\n * @param {string} experimentId\n * @param {boolean=} opt_on\n * @param {boolean=} opt_transientExperiment  Whether to toggle the\n *     experiment state \"transiently\" (i.e., for this page load only) or\n *     durably (by saving the experiment IDs to the cookie after toggling).\n *     Default: false (save durably).\n * @return {boolean} New state for experimentId.\n */\nexport function toggleExperiment(win, experimentId, opt_on,\n  opt_transientExperiment) {\n  const currentlyOn = isExperimentOn(win, /*OK*/experimentId);\n  const on = !!(opt_on !== undefined ? opt_on : !currentlyOn);\n  if (on != currentlyOn) {\n    const toggles = experimentToggles(win);\n    toggles[experimentId] = on;\n\n    if (!opt_transientExperiment) {\n      const cookieToggles = getExperimentTogglesFromCookie(win);\n      cookieToggles[experimentId] = on;\n      saveExperimentTogglesToCookie(win, cookieToggles);\n    }\n  }\n  return on;\n}\n\n/**\n * Calculate whether the experiment is on or off based off of the\n * cookieFlag or the global config frequency given.\n * @param {!Window} win\n * @return {!Object<string, boolean>}\n */\nexport function experimentToggles(win) {\n  if (win[TOGGLES_WINDOW_PROPERTY]) {\n    return win[TOGGLES_WINDOW_PROPERTY];\n  }\n  win[TOGGLES_WINDOW_PROPERTY] = Object.create(null);\n  const toggles = win[TOGGLES_WINDOW_PROPERTY];\n\n  // Read the default config of this build.\n  if (win.AMP_CONFIG) {\n    for (const experimentId in win.AMP_CONFIG) {\n      const frequency = win.AMP_CONFIG[experimentId];\n      if (typeof frequency === 'number' && frequency >= 0 && frequency <= 1) {\n        toggles[experimentId] = Math.random() < frequency;\n      }\n    }\n  }\n  // Read document level override from meta tag.\n  if (win.AMP_CONFIG\n      && Array.isArray(win.AMP_CONFIG['allow-doc-opt-in'])\n      && win.AMP_CONFIG['allow-doc-opt-in'].length > 0) {\n    const allowed = win.AMP_CONFIG['allow-doc-opt-in'];\n    const meta =\n        win.document.head.querySelector('meta[name=\"amp-experiments-opt-in\"]');\n    if (meta) {\n      const optedInExperiments = meta.getAttribute('content').split(',');\n      for (let i = 0; i < optedInExperiments.length; i++) {\n        if (allowed.indexOf(optedInExperiments[i]) != -1) {\n          toggles[optedInExperiments[i]] = true;\n        }\n      }\n    }\n  }\n\n  Object.assign(toggles, getExperimentTogglesFromCookie(win));\n\n  if (win.AMP_CONFIG\n      && Array.isArray(win.AMP_CONFIG['allow-url-opt-in'])\n      && win.AMP_CONFIG['allow-url-opt-in'].length > 0) {\n    const allowed = win.AMP_CONFIG['allow-url-opt-in'];\n    const hash = win.location.originalHash || win.location.hash;\n    const params = parseQueryString(hash);\n    for (let i = 0; i < allowed.length; i++) {\n      const param = params[`e-${allowed[i]}`];\n      if (param == '1') {\n        toggles[allowed[i]] = true;\n      }\n      if (param == '0') {\n        toggles[allowed[i]] = false;\n      }\n    }\n  }\n  return toggles;\n}\n\n/**\n * Returns the cached experiments toggles, or null if they have not been\n * computed yet.\n * @param {!Window} win\n * @return {Object<string, boolean>}\n */\nexport function experimentTogglesOrNull(win) {\n  return win[TOGGLES_WINDOW_PROPERTY] || null;\n}\n\n/**\n * Returns a set of experiment IDs currently on.\n * @param {!Window} win\n * @return {!Object<string, boolean>}\n */\nfunction getExperimentTogglesFromCookie(win) {\n  const experimentCookie = getCookie(win, COOKIE_NAME);\n  const tokens = experimentCookie ? experimentCookie.split(/\\s*,\\s*/g) : [];\n\n  const toggles = Object.create(null);\n  for (let i = 0; i < tokens.length; i++) {\n    if (tokens[i].length == 0) {\n      continue;\n    }\n    if (tokens[i][0] == '-') {\n      toggles[tokens[i].substr(1)] = false;\n    } else {\n      toggles[tokens[i]] = true;\n    }\n  }\n\n  return toggles;\n}\n\n/**\n * Saves a set of experiment IDs currently on.\n * @param {!Window} win\n * @param {!Object<string, boolean>} toggles\n */\nfunction saveExperimentTogglesToCookie(win, toggles) {\n  const experimentIds = [];\n  for (const experiment in toggles) {\n    experimentIds.push((toggles[experiment] === false ? '-' : '') + experiment);\n  }\n\n  setCookie(win, COOKIE_NAME, experimentIds.join(','),\n      Date.now() + COOKIE_EXPIRATION_INTERVAL, {\n        // Set explicit domain, so the cookie gets send to sub domains.\n        domain: win.location.hostname,\n        allowOnProxyOrigin: true,\n      });\n}\n\n/**\n * See getExperimentTogglesFromCookie().\n * @param {!Window} win\n * @return {!Object<string, boolean>}\n * @visibleForTesting\n */\nexport function getExperimentToglesFromCookieForTesting(win) {\n  return getExperimentTogglesFromCookie(win);\n}\n\n/**\n * Resets the experimentsToggle cache for testing purposes.\n * @param {!Window} win\n * @visibleForTesting\n */\nexport function resetExperimentTogglesForTesting(win) {\n  setCookie(win, COOKIE_NAME, '', 0, {\n    domain: win.location.hostname,\n  });\n  win[TOGGLES_WINDOW_PROPERTY] = null;\n}\n\n/**\n * In some browser implementations of Math.random(), sequential calls of\n * Math.random() are correlated and can cause a bias.  In particular,\n * if the previous random() call was < 0.001 (as it will be if we select\n * into an experiment), the next value could be less than 0.5 more than\n * 50.7% of the time.  This provides an implementation that roots down into\n * the crypto API, when available, to produce less biased samples.\n *\n * @return {number} Pseudo-random floating-point value on the range [0, 1).\n */\nfunction slowButAccuratePrng() {\n  // TODO(tdrl): Implement.\n  return Math.random();\n}\n\n/**\n * Container for alternate random number generator implementations.  This\n * allows us to set an \"accurate\" PRNG for branch selection, but to mock it\n * out easily in tests.\n *\n * @visibleForTesting\n * @const {!{accuratePrng: function():number}}\n */\nexport const RANDOM_NUMBER_GENERATORS = {\n  accuratePrng: slowButAccuratePrng,\n};\n\n/**\n * Selects, uniformly at random, a single item from the array.\n * @param {!Array<string>} arr Object to select from.\n * @return {?string} Single item from arr or null if arr was empty.\n */\nfunction selectRandomItem(arr) {\n  const rn = RANDOM_NUMBER_GENERATORS.accuratePrng();\n  return arr[Math.floor(rn * arr.length)] || null;\n}\n\n/**\n * Selects which page-level experiment branches are enabled. If a given\n * experiment name is already set (including to the null / no branches selected\n * state), this won't alter its state.\n *\n * Check whether a given experiment is set using isExperimentOn(win,\n * experimentName) and, if it is on, look for which branch is selected in\n * win.experimentBranches[experimentName].\n *\n * @param {!Window} win Window context on which to save experiment\n *     selection state.\n * @param {!Object<string, !ExperimentInfo>} experiments  Set of experiments to\n *     configure for this page load.\n * @return {!Object<string, string>} Map of experiment names to selected\n *     branches.\n */\nexport function randomlySelectUnsetExperiments(win, experiments) {\n  win.experimentBranches = win.experimentBranches || {};\n  const selectedExperiments = {};\n  for (const experimentName in experiments) {\n    // Skip experimentName if it is not a key of experiments object or if it\n    // has already been populated by some other property.\n    if (!hasOwn(experiments, experimentName)) {\n      continue;\n    }\n    if (hasOwn(win.experimentBranches, experimentName)) {\n      selectedExperiments[experimentName] =\n          win.experimentBranches[experimentName];\n      continue;\n    }\n\n    if (!experiments[experimentName].isTrafficEligible ||\n        !experiments[experimentName].isTrafficEligible(win)) {\n      win.experimentBranches[experimentName] = null;\n      continue;\n    }\n\n    // If we're in the experiment, but we haven't already forced a specific\n    // experiment branch (e.g., via a test setup), then randomize the branch\n    // choice.\n    if (!win.experimentBranches[experimentName] &&\n      isExperimentOn(win, /*OK*/experimentName)) {\n      const {branches} = experiments[experimentName];\n      win.experimentBranches[experimentName] = selectRandomItem(branches);\n      selectedExperiments[experimentName] =\n          win.experimentBranches[experimentName];\n    }\n  }\n  return selectedExperiments;\n}\n\n/**\n * Returns the experiment branch enabled for the given experiment ID.\n * For example, 'control' or 'experiment'.\n *\n * @param {!Window} win Window context to check for experiment state.\n * @param {string} experimentName Name of the experiment to check.\n * @return {?string} Active experiment branch ID for experimentName (possibly\n *     null if experimentName has been tested but no branch was enabled).\n */\nexport function getExperimentBranch(win, experimentName) {\n  return win.experimentBranches ? win.experimentBranches[experimentName] : null;\n}\n\n/**\n * Force enable (or disable) a specific branch of a given experiment name.\n * Disables the experiment name altogether if branchId is falseish.\n *\n * @param {!Window} win Window context to check for experiment state.\n * @param {string} experimentName Name of the experiment to check.\n * @param {?string} branchId ID of branch to force or null to disable\n *     altogether.\n * @visibleForTesting\n */\nexport function forceExperimentBranch(win, experimentName, branchId) {\n  win.experimentBranches = win.experimentBranches || {};\n  toggleExperiment(win, experimentName, !!branchId, true);\n  win.experimentBranches[experimentName] = branchId;\n}\n","/**\n * Copyright 2015 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {GestureRecognizer} from './gesture';\nimport {calcVelocity} from './motion';\n\n\n/**\n * A \"tap\" gesture.\n * @typedef {{\n *   clientX: number,\n *   clientY: number\n * }}\n */\nlet TapDef;\n\n\n/**\n * Recognizes \"tap\" gestures.\n * @extends {GestureRecognizer<TapDef>}\n */\nexport class TapRecognizer extends GestureRecognizer {\n  /**\n   * @param {!./gesture.Gestures} manager\n   */\n  constructor(manager) {\n    super('tap', manager);\n\n    /** @private {number} */\n    this.startX_ = 0;\n\n    /** @private {number} */\n    this.startY_ = 0;\n\n    /** @private {number} */\n    this.lastX_ = 0;\n\n    /** @private {number} */\n    this.lastY_ = 0;\n\n    /** @private {?EventTarget} */\n    this.target_ = null;\n  }\n\n  /** @override */\n  onTouchStart(e) {\n    const {touches} = e;\n    this.target_ = e.target;\n    if (touches && touches.length == 1) {\n      this.startX_ = touches[0].clientX;\n      this.startY_ = touches[0].clientY;\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  /** @override */\n  onTouchMove(e) {\n    const touches = e.changedTouches || e.touches;\n    if (touches && touches.length == 1) {\n      this.lastX_ = touches[0].clientX;\n      this.lastY_ = touches[0].clientY;\n      const dx = Math.abs(this.lastX_ - this.startX_) >= 8;\n      const dy = Math.abs(this.lastY_ - this.startY_) >= 8;\n      if (dx || dy) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  /** @override */\n  onTouchEnd(unusedE) {\n    this.signalReady(0);\n  }\n\n  /** @override */\n  acceptStart() {\n    this.signalEmit({\n      clientX: this.lastX_,\n      clientY: this.lastY_,\n      target: this.target_,\n    }, null);\n    this.signalEnd();\n  }\n}\n\n\n\n/**\n * A \"doubletap\" gesture.\n * @typedef {{\n *   clientX: number,\n *   clientY: number\n * }}\n */\nlet DoubletapDef;\n\n\n/**\n * Recognizes a \"doubletap\" gesture. This gesture will block a single \"tap\"\n * for about 300ms while it's expecting the second \"tap\".\n * @extends {GestureRecognizer<DoubletapDef>}\n */\nexport class DoubletapRecognizer extends GestureRecognizer {\n  /**\n   * @param {!./gesture.Gestures} manager\n   */\n  constructor(manager) {\n    super('doubletap', manager);\n\n    /** @private {number} */\n    this.startX_ = 0;\n\n    /** @private {number} */\n    this.startY_ = 0;\n\n    /** @private {number} */\n    this.lastX_ = 0;\n\n    /** @private {number} */\n    this.lastY_ = 0;\n\n    /** @private {number} */\n    this.tapCount_ = 0;\n\n    /** @private {?Event} */\n    this.event_ = null;\n  }\n\n  /** @override */\n  onTouchStart(e) {\n    if (this.tapCount_ > 1) {\n      return false;\n    }\n    const {touches} = e;\n    if (touches && touches.length == 1) {\n      this.startX_ = touches[0].clientX;\n      this.startY_ = touches[0].clientY;\n      this.lastX_ = touches[0].clientX;\n      this.lastY_ = touches[0].clientY;\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  /** @override */\n  onTouchMove(e) {\n    const {touches} = e;\n    if (touches && touches.length == 1) {\n      this.lastX_ = touches[0].clientX;\n      this.lastY_ = touches[0].clientY;\n      const dx = Math.abs(this.lastX_ - this.startX_) >= 8;\n      const dy = Math.abs(this.lastY_ - this.startY_) >= 8;\n      if (dx || dy) {\n        this.acceptCancel();\n        return false;\n      }\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  /** @override */\n  onTouchEnd(e) {\n    this.tapCount_++;\n    if (this.tapCount_ < 2) {\n      this.signalPending(300);\n    } else {\n      this.event_ = e;\n      this.signalReady(0);\n    }\n  }\n\n  /** @override */\n  acceptStart() {\n    this.tapCount_ = 0;\n    this.signalEmit({clientX: this.lastX_, clientY: this.lastY_}, this.event_);\n    this.signalEnd();\n  }\n\n  /** @override */\n  acceptCancel() {\n    this.tapCount_ = 0;\n  }\n}\n\n\n\n/**\n * A \"swipe-xy\", \"swipe-x\" or \"swipe-y\" gesture. A number of these gestures\n * may be emitted for a single touch series.\n * @typedef {{\n *   first: boolean,\n *   last: boolean,\n *   deltaX: number,\n *   deltaY: number,\n *   velocityX: number,\n *   velocityY: number\n * }}\n */\nexport let SwipeDef;\n\n\n/**\n * Recognizes swipe gestures. This gesture will yield about 10ms to other\n * gestures.\n * @extends {GestureRecognizer<SwipeDef>}\n */\nclass SwipeRecognizer extends GestureRecognizer {\n  /**\n   * @param {string} type\n   * @param {!./gesture.Gestures} manager\n   * @param {boolean} horiz\n   * @param {boolean} vert\n   */\n  constructor(type, manager, horiz, vert) {\n    super(type, manager);\n\n    /** @private {boolean} */\n    this.horiz_ = horiz;\n\n    /** @private {boolean} */\n    this.vert_ = vert;\n\n    /** @private {boolean} */\n    this.eventing_ = false;\n\n    /** @private {number} */\n    this.startX_ = 0;\n\n    /** @private {number} */\n    this.startY_ = 0;\n\n    /** @private {number} */\n    this.lastX_ = 0;\n\n    /** @private {number} */\n    this.lastY_ = 0;\n\n    /** @private {number} */\n    this.prevX_ = 0;\n\n    /** @private {number} */\n    this.prevY_ = 0;\n\n    /** @private {time} */\n    this.startTime_ = 0;\n\n    /** @private {time} */\n    this.lastTime_ = 0;\n\n    /** @private {time} */\n    this.prevTime_ = 0;\n\n    /** @private {number} */\n    this.velocityX_ = 0;\n\n    /** @private {number} */\n    this.velocityY_ = 0;\n  }\n\n  /** @override */\n  onTouchStart(e) {\n    const {touches} = e;\n    if (touches && touches.length == 1) {\n      this.startTime_ = Date.now();\n      this.startX_ = touches[0].clientX;\n      this.startY_ = touches[0].clientY;\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  /** @override */\n  onTouchMove(e) {\n    const {touches} = e;\n    if (touches && touches.length == 1) {\n      const {clientX: x, clientY: y} = touches[0] ;\n      this.lastX_ = x;\n      this.lastY_ = y;\n      if (this.eventing_) {\n        this.emit_(false, false, e);\n      } else {\n        const dx = Math.abs(x - this.startX_);\n        const dy = Math.abs(y - this.startY_);\n        // Swipe is penalized slightly since it's one of the least demanding\n        // gesture, thus -10 in signalReady.\n        if (this.horiz_ && this.vert_) {\n          if (dx >= 8 || dy >= 8) {\n            this.signalReady(-10);\n          }\n        } else if (this.horiz_) {\n          if (dx >= 8 && dx > dy) {\n            this.signalReady(-10);\n          } else if (dy >= 8) {\n            return false;\n          }\n        } else if (this.vert_) {\n          if (dy >= 8 && dy > dx) {\n            this.signalReady(-10);\n          } else if (dx >= 8) {\n            return false;\n          }\n        } else {\n          return false;\n        }\n      }\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  /** @override */\n  onTouchEnd(e) {\n    this.end_(e);\n  }\n\n  /** @override */\n  acceptStart() {\n    this.eventing_ = true;\n    // Reset start coordinates to where the gesture began to avoid visible\n    // jump, but preserve them as \"prev\" coordinates to calculate the right\n    // velocity.\n    this.prevX_ = this.startX_;\n    this.prevY_ = this.startY_;\n    this.prevTime_ = this.startTime_;\n    this.startX_ = this.lastX_;\n    this.startY_ = this.lastY_;\n    this.emit_(true, false, null);\n  }\n\n  /** @override */\n  acceptCancel() {\n    this.eventing_ = false;\n  }\n\n  /**\n   * @param {boolean} first\n   * @param {boolean} last\n   * @param {?Event} event\n   * @private\n   */\n  emit_(first, last, event) {\n    this.lastTime_ = Date.now();\n    const deltaTime = this.lastTime_ - this.prevTime_;\n    // It's often that `touchend` arrives on the next frame. These should\n    // be ignored to avoid a significant velocity downgrade.\n    if ((!last && deltaTime > 4) || (last && deltaTime > 16)) {\n      this.velocityX_ = calcVelocity(this.lastX_ - this.prevX_, deltaTime,\n          this.velocityX_);\n      this.velocityY_ = calcVelocity(this.lastY_ - this.prevY_, deltaTime,\n          this.velocityY_);\n      this.velocityX_ = Math.abs(this.velocityX_) > 1e-4 ? this.velocityX_ : 0;\n      this.velocityY_ = Math.abs(this.velocityY_) > 1e-4 ? this.velocityY_ : 0;\n      this.prevX_ = this.lastX_;\n      this.prevY_ = this.lastY_;\n      this.prevTime_ = this.lastTime_;\n    }\n\n    this.signalEmit({\n      first,\n      last,\n      time: this.lastTime_,\n      deltaX: this.horiz_ ? this.lastX_ - this.startX_ : 0,\n      deltaY: this.vert_ ? this.lastY_ - this.startY_ : 0,\n      startX: this.startX_,\n      startY: this.startY_,\n      lastX: this.lastX_,\n      lastY: this.lastY_,\n      velocityX: this.horiz_ ? this.velocityX_ : 0,\n      velocityY: this.vert_ ? this.velocityY_ : 0,\n    }, event);\n  }\n\n  /**\n   * @param {?Event} event\n   * @private\n   */\n  end_(event) {\n    if (this.eventing_) {\n      this.eventing_ = false;\n      this.emit_(false, true, event);\n      this.signalEnd();\n    }\n  }\n}\n\n\n/**\n * Recognizes \"swipe-xy\" gesture. Yields about 10ms to other gestures.\n */\nexport class SwipeXYRecognizer extends SwipeRecognizer {\n  /**\n   * @param {!./gesture.Gestures} manager\n   */\n  constructor(manager) {\n    super('swipe-xy', manager, true, true);\n  }\n}\n\n\n/**\n * Recognizes \"swipe-x\" gesture. Yields about 10ms to other gestures.\n */\nexport class SwipeXRecognizer extends SwipeRecognizer {\n  /**\n   * @param {!./gesture.Gestures} manager\n   */\n  constructor(manager) {\n    super('swipe-x', manager, true, false);\n  }\n}\n\n\n/**\n * Recognizes \"swipe-y\" gesture. Yields about 10ms to other gestures.\n */\nexport class SwipeYRecognizer extends SwipeRecognizer {\n  /**\n   * @param {!./gesture.Gestures} manager\n   */\n  constructor(manager) {\n    super('swipe-y', manager, false, true);\n  }\n}\n\n\n\n/**\n * A \"tapzoom\" gesture. It has a center, delta off the center center and\n * the velocity of moving away from the center.\n * @typedef {{\n *   first: boolean,\n *   last: boolean,\n *   centerClientX: number,\n *   centerClientY: number,\n *   deltaX: number,\n *   deltaY: number,\n *   velocityX: number,\n *   velocityY: number\n * }}\n */\nlet TapzoomDef;\n\n\n/**\n * Recognizes a \"tapzoom\" gesture. This gesture will block other gestures\n * for about 400ms after first \"tap\" while it's expecting swipe.\n * @extends {GestureRecognizer<TapzoomDef>}\n */\nexport class TapzoomRecognizer extends GestureRecognizer {\n  /**\n   * @param {!./gesture.Gestures} manager\n   */\n  constructor(manager) {\n    super('tapzoom', manager);\n\n    /** @private {boolean} */\n    this.eventing_ = false;\n\n    /** @private {number} */\n    this.startX_ = 0;\n\n    /** @private {number} */\n    this.startY_ = 0;\n\n    /** @private {number} */\n    this.lastX_ = 0;\n\n    /** @private {number} */\n    this.lastY_ = 0;\n\n    /** @private {number} */\n    this.tapCount_ = 0;\n\n    /** @private {number} */\n    this.prevX_ = 0;\n\n    /** @private {number} */\n    this.prevY_ = 0;\n\n    /** @private {time} */\n    this.lastTime_ = 0;\n\n    /** @private {time} */\n    this.prevTime_ = 0;\n\n    /** @private {number} */\n    this.velocityX_ = 0;\n\n    /** @private {number} */\n    this.velocityY_ = 0;\n  }\n\n  /** @override */\n  onTouchStart(e) {\n    if (this.eventing_) {\n      return false;\n    }\n    const {touches} = e;\n    if (touches && touches.length == 1) {\n      this.startX_ = touches[0].clientX;\n      this.startY_ = touches[0].clientY;\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  /** @override */\n  onTouchMove(e) {\n    const {touches} = e;\n    if (touches && touches.length == 1) {\n      this.lastX_ = touches[0].clientX;\n      this.lastY_ = touches[0].clientY;\n      if (this.eventing_) {\n        this.emit_(false, false, e);\n      } else {\n        const dx = Math.abs(this.lastX_ - this.startX_) >= 8;\n        const dy = Math.abs(this.lastY_ - this.startY_) >= 8;\n        if (dx || dy) {\n          if (this.tapCount_ == 0) {\n            this.acceptCancel();\n            return false;\n          } else {\n            this.signalReady(0);\n          }\n        }\n      }\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  /** @override */\n  onTouchEnd(e) {\n    if (this.eventing_) {\n      this.end_(e);\n      return;\n    }\n\n    this.tapCount_++;\n    if (this.tapCount_ == 1) {\n      this.signalPending(400);\n      return;\n    }\n\n    this.acceptCancel();\n  }\n\n  /** @override */\n  acceptStart() {\n    this.tapCount_ = 0;\n    this.eventing_ = true;\n    this.emit_(true, false, null);\n  }\n\n  /** @override */\n  acceptCancel() {\n    this.tapCount_ = 0;\n    this.eventing_ = false;\n  }\n\n  /**\n   * @param {boolean} first\n   * @param {boolean} last\n   * @param {?Event} event\n   * @private\n   */\n  emit_(first, last, event) {\n    this.lastTime_ = Date.now();\n    if (first) {\n      this.velocityX_ = this.velocityY_ = 0;\n    } else if (this.lastTime_ - this.prevTime_ > 2) {\n      this.velocityX_ = calcVelocity(this.lastX_ - this.prevX_,\n          this.lastTime_ - this.prevTime_, this.velocityX_);\n      this.velocityY_ = calcVelocity(this.lastY_ - this.prevY_,\n          this.lastTime_ - this.prevTime_, this.velocityY_);\n    }\n    this.prevX_ = this.lastX_;\n    this.prevY_ = this.lastY_;\n    this.prevTime_ = this.lastTime_;\n\n    this.signalEmit({\n      first,\n      last,\n      centerClientX: this.startX_,\n      centerClientY: this.startY_,\n      deltaX: this.lastX_ - this.startX_,\n      deltaY: this.lastY_ - this.startY_,\n      velocityX: this.velocityX_,\n      velocityY: this.velocityY_,\n    }, event);\n  }\n\n  /**\n   * @param {?Event} event\n   * @private\n   */\n  end_(event) {\n    if (this.eventing_) {\n      this.eventing_ = false;\n      this.emit_(false, true, event);\n      this.signalEnd();\n    }\n  }\n}\n\n\n\n/**\n * A \"pinch\" gesture. It has a center, delta off the center center and\n * the velocity of moving away from the center. \"dir\" component of `1`\n * indicates that it's a expand motion and `-1` indicates pinch motion.\n * @typedef {{\n *   first: boolean,\n *   last: boolean,\n *   centerClientX: number,\n *   centerClientY: number,\n *   dir: number,\n *   deltaX: number,\n *   deltaY: number,\n *   velocityX: number,\n *   velocityY: number\n * }}\n */\nlet PinchDef;\n\n/**\n * Threshold in pixels for how much two touches move away from\n * each other before we recognize the gesture as a pinch.\n */\nconst PINCH_ACCEPT_THRESHOLD = 4;\n\n/**\n * Threshold in pixels for how much two touches move in the same\n * direction before we reject the gesture as a pinch.\n */\nconst PINCH_REJECT_THRESHOLD = 10;\n\n/**\n * Recognizes a \"pinch\" gesture.\n * @extends {GestureRecognizer<PinchDef>}\n */\nexport class PinchRecognizer extends GestureRecognizer {\n  /**\n   * @param {!./gesture.Gestures} manager\n   */\n  constructor(manager) {\n    super('pinch', manager);\n\n    /** @private {boolean} */\n    this.eventing_ = false;\n\n    /** @private {number} */\n    this.startX1_ = 0;\n    /** @private {number} */\n    this.startY1_ = 0;\n\n    /** @private {number} */\n    this.startX2_ = 0;\n    /** @private {number} */\n    this.startY2_ = 0;\n\n    /** @private {number} */\n    this.lastX1_ = 0;\n    /** @private {number} */\n    this.lastY1_ = 0;\n\n    /** @private {number} */\n    this.lastX2_ = 0;\n    /** @private {number} */\n    this.lastY2_ = 0;\n\n    /** @private {number} */\n    this.prevDeltaX_ = 0;\n    /** @private {number} */\n    this.prevDeltaY_ = 0;\n\n    /** @private {number} */\n    this.centerClientX_ = 0;\n    /** @private {number} */\n    this.centerClientY_ = 0;\n\n    /** @private {time} */\n    this.startTime_ = 0;\n    /** @private {time} */\n    this.lastTime_ = 0;\n    /** @private {time} */\n    this.prevTime_ = 0;\n\n    /** @private {number} */\n    this.velocityX_ = 0;\n    /** @private {number} */\n    this.velocityY_ = 0;\n  }\n\n  /** @override */\n  onTouchStart(e) {\n    const {touches} = e;\n    // Pinch touches are not always simultaneous, continue to listen\n    // for second touch.\n    if (touches && touches.length == 1) {\n      return true;\n    } else if (touches && touches.length == 2) {\n      this.startTime_ = Date.now();\n      this.startX1_ = touches[0].clientX;\n      this.startY1_ = touches[0].clientY;\n      this.startX2_ = touches[1].clientX;\n      this.startY2_ = touches[1].clientY;\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  /** @override */\n  onTouchMove(e) {\n    const {touches} = e;\n    // Pinch touches are not always simultaneous, continue to listen\n    // for second touch.\n    if (touches && touches.length == 1) {\n      return true;\n    } else if (touches && touches.length == 2) {\n      this.lastX1_ = touches[0].clientX;\n      this.lastY1_ = touches[0].clientY;\n      this.lastX2_ = touches[1].clientX;\n      this.lastY2_ = touches[1].clientY;\n      if (this.eventing_) {\n        this.emit_(false, false, e);\n      } else {\n        const dx1 = this.lastX1_ - this.startX1_;\n        const dy1 = this.lastY1_ - this.startY1_;\n        const dx2 = this.lastX2_ - this.startX2_;\n        const dy2 = this.lastY2_ - this.startY2_;\n        // Fingers should move in opposite directions and go over the threshold.\n        if (dx1 * dx2 <= 0 && dy1 * dy2 <= 0) {\n          if (Math.abs(dx1 - dx2) >= PINCH_ACCEPT_THRESHOLD\n            || Math.abs(dy1 - dy2) >= PINCH_ACCEPT_THRESHOLD) {\n            this.signalReady(0);\n          }\n        } else if (Math.abs(dx1 + dx2) >= PINCH_REJECT_THRESHOLD\n          || Math.abs(dy1 + dy2) >= PINCH_REJECT_THRESHOLD) {\n          // Moving in the same direction over a threshold.\n          return false;\n        }\n      }\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  /** @override */\n  onTouchEnd(e) {\n    this.end_(e);\n  }\n\n  /** @override */\n  acceptStart() {\n    this.eventing_ = true;\n    this.prevTime_ = this.startTime_;\n    this.prevDeltaX_ = 0;\n    this.prevDeltaY_ = 0;\n    this.centerClientX_ = (this.startX1_ + this.startX2_) * 0.5;\n    this.centerClientY_ = (this.startY1_ + this.startY2_) * 0.5;\n    this.emit_(true, false, null);\n  }\n\n  /** @override */\n  acceptCancel() {\n    this.eventing_ = false;\n  }\n\n  /**\n   * @param {boolean} first\n   * @param {boolean} last\n   * @param {?Event} event\n   * @private\n   */\n  emit_(first, last, event) {\n    this.lastTime_ = Date.now();\n    const deltaTime = this.lastTime_ - this.prevTime_;\n    const deltaX = this.deltaX_();\n    const deltaY = this.deltaY_();\n    // It's often that `touchend` arrives on the next frame. These should\n    // be ignored to avoid a significant velocity downgrade.\n    if ((!last && deltaTime > 4) || (last && deltaTime > 16)) {\n      this.velocityX_ = calcVelocity(deltaX - this.prevDeltaX_, deltaTime,\n          this.velocityX_);\n      this.velocityY_ = calcVelocity(deltaY - this.prevDeltaY_, deltaTime,\n          this.velocityY_);\n      this.velocityX_ = Math.abs(this.velocityX_) > 1e-4 ? this.velocityX_ : 0;\n      this.velocityY_ = Math.abs(this.velocityY_) > 1e-4 ? this.velocityY_ : 0;\n      this.prevDeltaX_ = deltaX;\n      this.prevDeltaY_ = deltaY;\n      this.prevTime_ = this.lastTime_;\n    }\n\n    const startSq = this.sqDist_(this.startX1_, this.startX2_,\n        this.startY1_, this.startY2_);\n    const lastSq = this.sqDist_(this.lastX1_, this.lastX2_,\n        this.lastY1_, this.lastY2_);\n    this.signalEmit({\n      first,\n      last,\n      time: this.lastTime_,\n      centerClientX: this.centerClientX_,\n      centerClientY: this.centerClientY_,\n      dir: Math.sign(lastSq - startSq),\n      deltaX: deltaX * 0.5,\n      deltaY: deltaY * 0.5,\n      velocityX: this.velocityX_ * 0.5,\n      velocityY: this.velocityY_ * 0.5,\n    }, event);\n  }\n\n  /**\n   * @param {?Event} event\n   * @private\n   */\n  end_(event) {\n    if (this.eventing_) {\n      this.eventing_ = false;\n      this.emit_(false, true, event);\n      this.signalEnd();\n    }\n  }\n\n  /**\n   * @param {number} x1\n   * @param {number} x2\n   * @param {number} y1\n   * @param {number} y2\n   * @return {number}\n   * @private\n   */\n  sqDist_(x1, x2, y1, y2) {\n    return (x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2);\n  }\n\n  /**\n   * @return {number}\n   * @private\n   */\n  deltaX_() {\n    return Math.abs((this.lastX1_ - this.startX1_) -\n        (this.lastX2_ - this.startX2_));\n  }\n\n  /**\n   * @return {number}\n   * @private\n   */\n  deltaY_() {\n    return Math.abs((this.lastY1_ - this.startY1_) -\n        (this.lastY2_ - this.startY2_));\n  }\n}\n","/**\n * Copyright 2015 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Observable} from './observable';\nimport {Pass} from './pass';\nimport {dev} from './log';\nimport {findIndex} from './utils/array';\nimport {toWin} from './types';\n\n\nconst PROP_ = '__AMP_Gestures';\n\n\n/**\n * A gesture object contains the type and data of the gesture such as\n * a tap or a double-tap or a swipe. See {@link GestureRecognizer} for\n * more details.\n * @struct\n * @const\n * @template DATA\n */\nexport class Gesture {\n  /**\n   * @param {string} type The gesture's string type.\n   * @param {DATA} data The data of the gesture.\n   * @param {time} time The time that the gesture has been emitted.\n   * @param {?Event} event An optional browser event that resulted in the\n   *   gesture.\n   */\n  constructor(type, data, time, event) {\n    /** @const {string} */\n    this.type = type;\n    /** @const {DATA} */\n    this.data = data;\n    /** @const {time} */\n    this.time = time;\n    /** @const {?Event} */\n    this.event = event;\n  }\n}\n\n\n/**\n * Gestures object manages all gestures on a particular element. It listens\n * to all pointer events and delegates them to individual gesture recognizers.\n * When a recognizer has recognized a gesture and ready to start emitting it\n * it requests permission to do so from this class which resolves conflicts\n * between competing recognizers to decide which gesture should go forward.\n */\nexport class Gestures {\n\n  /**\n   * Creates if not yet created and returns the shared Gestures instance for\n   * the specified element.\n   * @param {!Element} element\n   * @param {boolean=} opt_shouldNotPreventDefault\n   * @return {!Gestures}\n   */\n  static get(element, opt_shouldNotPreventDefault = false) {\n    let res = element[PROP_];\n    if (!res) {\n      res = new Gestures(element, opt_shouldNotPreventDefault);\n      element[PROP_] = res;\n    }\n    return res;\n  }\n\n  /**\n   * @param {!Element} element\n   * @param {boolean} shouldNotPreventDefault\n   */\n  constructor(element, shouldNotPreventDefault) {\n    /** @private {!Element} */\n    this.element_ = element;\n\n    /** @private {!Array<!GestureRecognizer>} */\n    this.recognizers_ = [];\n\n    /** @private {!Array<boolean>} */\n    this.tracking_ = [];\n\n    /** @private {!Array<time>} */\n    this.ready_ = [];\n\n    /** @private {!Array<time>} */\n    this.pending_ = [];\n\n    /** @private {?GestureRecognizer} */\n    this.eventing_ = null;\n\n    /** @private {boolean} */\n    this.shouldNotPreventDefault_ = shouldNotPreventDefault;\n\n    /**\n     * This variable indicates that the eventing has stopped on this\n     * event cycle.\n     * @private {boolean}\n     */\n    this.wasEventing_ = false;\n\n    /** @private {!Pass} */\n    this.pass_ = new Pass(toWin(element.ownerDocument.defaultView),\n        this.doPass_.bind(this));\n\n    /** @private {!Observable} */\n    this.pointerDownObservable_ = new Observable();\n\n    /**\n     * Observers for each type of registered gesture types.\n     * @private {!Object<string, !Observable<!Gesture>>}\n     */\n    this.overservers_ = Object.create(null);\n\n    /** @private @const {function(!Event)} */\n    this.boundOnTouchStart_ = this.onTouchStart_.bind(this);\n    /** @private @const {function(!Event)} */\n    this.boundOnTouchEnd_ = this.onTouchEnd_.bind(this);\n    /** @private @const {function(!Event)} */\n    this.boundOnTouchMove_ = this.onTouchMove_.bind(this);\n    /** @private @const {function(!Event)} */\n    this.boundOnTouchCancel_ = this.onTouchCancel_.bind(this);\n\n    this.element_.addEventListener('touchstart', this.boundOnTouchStart_);\n    this.element_.addEventListener('touchend', this.boundOnTouchEnd_);\n    this.element_.addEventListener('touchmove', this.boundOnTouchMove_);\n    this.element_.addEventListener('touchcancel', this.boundOnTouchCancel_);\n\n    /** @private {boolean} */\n    this.passAfterEvent_ = false;\n  }\n\n  /**\n   * Unsubscribes from all pointer events and removes the shared cache instance.\n   */\n  cleanup() {\n    this.element_.removeEventListener('touchstart', this.boundOnTouchStart_);\n    this.element_.removeEventListener('touchend', this.boundOnTouchEnd_);\n    this.element_.removeEventListener('touchmove', this.boundOnTouchMove_);\n    this.element_.removeEventListener('touchcancel', this.boundOnTouchCancel_);\n    delete this.element_[PROP_];\n    this.pass_.cancel();\n  }\n\n  /**\n   * Subscribes to a gesture emitted by the specified recognizer. For a first\n   * gesture handler registered in this method the recognizer is installed\n   * and from that point on it participates in the event processing.\n   *\n   * @param {function(new:GestureRecognizer<DATA>, !Gestures)} recognizerConstr\n   * @param {function(!Gesture<DATA>)} handler\n   * @return {!UnlistenDef}\n   * @template DATA\n   */\n  onGesture(recognizerConstr, handler) {\n    const recognizer = new recognizerConstr(this);\n    const type = recognizer.getType();\n    let overserver = this.overservers_[type];\n    if (!overserver) {\n      this.recognizers_.push(recognizer);\n      overserver = new Observable();\n      this.overservers_[type] = overserver;\n    }\n    return overserver.add(handler);\n  }\n\n  /**\n   * Unsubscribes all handlers from the given gesture recognizer. Returns\n   * true if anything was done. Returns false if there were no handlers\n   * registered on the given gesture recognizer in first place.\n   *\n   * @param {function(new:GestureRecognizer<DATA>, !Gestures)} recognizerConstr\n   * @return {boolean}\n   */\n  removeGesture(recognizerConstr) {\n    const type = new recognizerConstr(this).getType();\n    const overserver = this.overservers_[type];\n    if (overserver) {\n      overserver.removeAll();\n      const index = findIndex(this.recognizers_, e => e.getType() == type);\n      if (index < 0) {\n        return false;\n      }\n      // Remove the recognizer as well as all associated tracking state\n      this.recognizers_.splice(index, 1);\n      this.ready_.splice(index, 1);\n      this.pending_.splice(index, 1);\n      this.tracking_.splice(index, 1);\n      delete this.overservers_[type];\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  /**\n   * Subscribes to pointer down events, such as \"touchstart\" or \"mousedown\".\n   * @param {!Function} handler\n   * @return {!UnlistenDef}\n   */\n  onPointerDown(handler) {\n    return this.pointerDownObservable_.add(handler);\n  }\n\n  /**\n   * Handles all \"touchstart\" events and dispatches them to the tracking\n   * recognizers.\n   * @param {!Event} event\n   * @private\n   */\n  onTouchStart_(event) {\n    const now = Date.now();\n    this.wasEventing_ = false;\n\n    this.pointerDownObservable_.fire(event);\n\n    for (let i = 0; i < this.recognizers_.length; i++) {\n      if (this.ready_[i]) {\n        // If the recognizer is in the \"ready\" state, it won't receive\n        // any more touch series until it's allowed to emit.\n        continue;\n      }\n      if (this.pending_[i] && this.pending_[i] < now) {\n        // Pending state expired. Reset.\n        this.stopTracking_(i);\n      }\n      if (this.recognizers_[i].onTouchStart(event)) {\n        // When a recognizer is interested in the touch series it returns \"true\"\n        // from its onTouchStart method. For this recognizer we start tracking\n        // the whole series of touch events from touchstart to touchend. Other\n        // recognizers will not receive them unless they return \"true\" from\n        // onTouchStart.\n        this.startTracking_(i);\n      }\n    }\n\n    this.afterEvent_(event);\n  }\n\n  /**\n   * Handles all \"touchmove\" events and dispatches them to the tracking\n   * recognizers.\n   * @param {!Event} event\n   * @private\n   */\n  onTouchMove_(event) {\n    const now = Date.now();\n\n    for (let i = 0; i < this.recognizers_.length; i++) {\n      if (!this.tracking_[i]) {\n        // The whole touch series are ignored for non-tracking recognizers.\n        continue;\n      }\n      if (this.pending_[i] && this.pending_[i] < now) {\n        // Pending state expired. Reset.\n        this.stopTracking_(i);\n        continue;\n      }\n      if (!this.recognizers_[i].onTouchMove(event)) {\n        // Recognizer lost interest in the series. Reset.\n        this.stopTracking_(i);\n      }\n    }\n\n    this.afterEvent_(event);\n  }\n\n  /**\n   * Handles all \"touchend\" events and dispatches them to the tracking\n   * recognizers.\n   * @param {!Event} event\n   * @private\n   */\n  onTouchEnd_(event) {\n    const now = Date.now();\n\n    for (let i = 0; i < this.recognizers_.length; i++) {\n      if (!this.tracking_[i]) {\n        // The whole touch series are ignored for non-tracking recognizers.\n        continue;\n      }\n      if (this.pending_[i] && this.pending_[i] < now) {\n        // Pending state expired. Reset.\n        this.stopTracking_(i);\n        continue;\n      }\n      this.recognizers_[i].onTouchEnd(event);\n      if (!this.pending_[i] || this.pending_[i] < now) {\n        this.stopTracking_(i);\n      }\n    }\n\n    this.afterEvent_(event);\n  }\n\n  /**\n   * Handles all \"touchcancel\" events. Cancels all tracking/emitting\n   * recognizers.\n   * @param {!Event} event\n   * @private\n   */\n  onTouchCancel_(event) {\n    for (let i = 0; i < this.recognizers_.length; i++) {\n      this.cancelEventing_(i);\n    }\n    this.afterEvent_(event);\n  }\n\n  /**\n   * Callback for a gesture recognizer to communicate that it's ready to\n   * start emitting gestures. Gestures instance may or may not allow the\n   * recognizer to proceed.\n   * @param {!GestureRecognizer} recognizer\n   * @param {number} offset\n   * @private\n   * @restricted\n   * @visibleForTesting\n   */\n  signalReady_(recognizer, offset) {\n    // Somebody got here first.\n    if (this.eventing_) {\n      recognizer.acceptCancel();\n      return;\n    }\n\n    // Set the recognizer as ready and wait for the pass to\n    // make the decision.\n    const now = Date.now();\n    for (let i = 0; i < this.recognizers_.length; i++) {\n      if (this.recognizers_[i] == recognizer) {\n        this.ready_[i] = now + offset;\n        this.pending_[i] = 0;\n      }\n    }\n    this.passAfterEvent_ = true;\n  }\n\n  /**\n   * Callback for a gesture recognizer to communicate that it's close to\n   * start emitting gestures, but needs more time to see more events. Once\n   * this time expires the recognizer should either signal readiness or it\n   * will be canceled.\n   * @param {!GestureRecognizer} recognizer\n   * @param {number} timeLeft\n   * @private\n   * @restricted\n   * @visibleForTesting\n   */\n  signalPending_(recognizer, timeLeft) {\n    // Somebody got here first.\n    if (this.eventing_) {\n      recognizer.acceptCancel();\n      return;\n    }\n\n    const now = Date.now();\n    for (let i = 0; i < this.recognizers_.length; i++) {\n      if (this.recognizers_[i] == recognizer) {\n        this.pending_[i] = now + timeLeft;\n      }\n    }\n  }\n\n  /**\n   * Callback for a gesture recognizer to communicate that it's done\n   * emitting gestures.\n   * @param {!GestureRecognizer} recognizer\n   * @private\n   * @restricted\n   * @visibleForTesting\n   */\n  signalEnd_(recognizer) {\n    if (this.eventing_ == recognizer) {\n      this.eventing_ = null;\n      this.wasEventing_ = true;\n    }\n  }\n\n  /**\n   * Callback for a gesture emit the gesture. Only the currently emitting\n   * recognizer is allowed to emit gestures.\n   * @param {!GestureRecognizer} recognizer\n   * @param {*} data\n   * @param {?Event} event\n   * @private\n   * @restricted\n   * @visibleForTesting\n   */\n  signalEmit_(recognizer, data, event) {\n    dev().assert(this.eventing_ == recognizer,\n        'Recognizer is not currently allowed: %s', recognizer.getType());\n    const overserver = this.overservers_[recognizer.getType()];\n    if (overserver) {\n      overserver.fire(new Gesture(recognizer.getType(), data, Date.now(),\n          event));\n    }\n  }\n\n  /**\n   * @param {!Event} event\n   * @private\n   */\n  afterEvent_(event) {\n    let cancelEvent = !!this.eventing_ || this.wasEventing_;\n    this.wasEventing_ = false;\n    if (!cancelEvent) {\n      const now = Date.now();\n      for (let i = 0; i < this.recognizers_.length; i++) {\n        if (this.ready_[i] ||\n                (this.pending_[i] && this.pending_[i] >= now)) {\n          cancelEvent = true;\n          break;\n        }\n      }\n    }\n    if (cancelEvent) {\n      event.stopPropagation();\n      if (!this.shouldNotPreventDefault_) {\n        event.preventDefault();\n      }\n    }\n    if (this.passAfterEvent_) {\n      this.passAfterEvent_ = false;\n      this.doPass_();\n    }\n  }\n\n  /**\n   * The pass that decides which recognizers can start emitting and which\n   * are canceled.\n   * @private\n   */\n  doPass_() {\n    const now = Date.now();\n\n    // The \"most ready\" recognizer is the youngest in the \"ready\" set.\n    // Otherwise we wouldn't wait for it at all.\n    let readyIndex = -1;\n    for (let i = 0; i < this.recognizers_.length; i++) {\n      if (!this.ready_[i]) {\n        if (this.pending_[i] && this.pending_[i] < now) {\n          // Pending state expired. Reset.\n          this.stopTracking_(i);\n        }\n        continue;\n      }\n      if (readyIndex == -1 || this.ready_[i] > this.ready_[readyIndex]) {\n        readyIndex = i;\n      }\n    }\n\n    if (readyIndex == -1) {\n      // Nothing to do.\n      return;\n    }\n\n    // Look for conflicts.\n    let waitTime = 0;\n    for (let i = 0; i < this.recognizers_.length; i++) {\n      if (this.ready_[i] || !this.tracking_[i]) {\n        continue;\n      }\n      waitTime = Math.max(waitTime, this.pending_[i] - now);\n    }\n\n    if (waitTime < 2) {\n      // We waited long enough.\n      this.startEventing_(readyIndex);\n      return;\n    }\n\n    // Some conflicts: have to wait to see who wins.\n    this.pass_.schedule(waitTime);\n  }\n\n  /**\n   * This recognizer is given \"go ahead\" and all others are canceled.\n   * @param {number} index\n   * @private\n   */\n  startEventing_(index) {\n    const recognizer = this.recognizers_[index];\n    for (let i = 0; i < this.recognizers_.length; i++) {\n      if (i != index) {\n        this.cancelEventing_(i);\n      }\n    }\n    this.ready_[index] = 0;\n    this.pending_[index] = 0;\n    this.eventing_ = recognizer;\n    recognizer.acceptStart();\n  }\n\n  /**\n   * @param {number} index\n   * @private\n   */\n  startTracking_(index) {\n    this.tracking_[index] = true;\n    this.pending_[index] = 0;\n  }\n\n  /**\n   * @param {number} index\n   * @private\n   */\n  stopTracking_(index) {\n    this.tracking_[index] = false;\n    this.pending_[index] = 0;\n    if (!this.ready_[index]) {\n      this.recognizers_[index].acceptCancel();\n    }\n  }\n\n  /**\n   * @param {number} index\n   * @private\n   */\n  cancelEventing_(index) {\n    this.ready_[index] = 0;\n    this.stopTracking_(index);\n  }\n}\n\n\n/**\n * The gesture recognizer receives the pointer events from Gestures instance.\n * Based on these events, it can \"recognize\" the gesture it's responsible for,\n * request to start emitting and emit gestures. Gestures instances manages\n * several competing recognizers and decides which ones get to emit gestures\n * and which do not.\n *\n * The recognizer can be in several main states:\n * 1. Tracking state. In this state the recognizer is receiving the series of\n *    touch events from touchstart to touchend. To get into this state the\n *    recognizer has to return \"true\" from the {@link onTouchStart}.\n * 2. Pending state (optional). The recognizer matched part of the gesture,\n *    but needs more time to get track more events. It requests more time\n *    by calling {@link signalPending}, By the end of this time the recognizer\n *    has either matched the gesture or has been canceled.\n * 3. Ready state. The recognizer matched the whole gesture and ready to start\n *    emitting. It communicates to the Gestures this readiness by calling\n *    {@link signalReady}.\n * 5. Emitting state. If Gestures decides to go ahead with this recognizer, it\n *    will call {@link acceptStart} method. Otherwise, it will call\n *    {@link acceptCancel} method. Once in the emitting state, the recognizer\n *    can emit any number of events by calling {@link signalEmit}.\n * 6. Complete state. Once done, the recognizer can call {@link signalEnd} to\n *    communicate that it's done.\n *\n * @template DATA\n */\nexport class GestureRecognizer {\n\n  /**\n   * @param {string} type\n   * @param {!Gestures} manager\n   */\n  constructor(type, manager) {\n    /** @private @const {string} */\n    this.type_ = type;\n\n    /** @private @const {!Gestures} */\n    this.manager_ = manager;\n  }\n\n  /**\n   * Returns the type of the gesture emitted by the instance of this class.\n   * It has to be unique in the scope of the Gestures instance.\n   * @return {string}\n   */\n  getType() {\n    return this.type_;\n  }\n\n  /**\n   * The recognizer can call this method to communicate that it's ready to\n   * start emitting the gesture. Optionally it can pass a zero, positive or\n   * negative offset - a time on how much the gesture should be penalized or\n   * given advantage in conflict resolution. The recognizer at this point is\n   * in the \"ready\" state.\n   * @param {time} offset\n   */\n  signalReady(offset) {\n    this.manager_.signalReady_(this, offset);\n  }\n\n  /**\n   * The recognizer can call this method to communicate that it needs more\n   * time (timeLeft) to match the gesture. By the end of this time the\n   * recognizer has to either transit to the ready state using\n   * {@link signalReady} or it will be canceled. The recognizer is in the\n   * \"pending\" state.\n   * @param {time} timeLeft\n   */\n  signalPending(timeLeft) {\n    this.manager_.signalPending_(this, timeLeft);\n  }\n\n  /**\n   * The recognizer can call this method to communicate that it's done\n   * emitting the gestures. It will return to the waiting state. Recognizer\n   * can only call this method if it has previously received the\n   * {@link acceptStart} call.\n   */\n  signalEnd() {\n    this.manager_.signalEnd_(this);\n  }\n\n  /**\n   * The recognizer can call this method to emit the gestures while in the\n   * \"emitting\" state. Recognizer can only call this method if it has\n   * previously received the {@link acceptStart} call.\n   * @param {DATA} data\n   * @param {?Event} event\n   */\n  signalEmit(data, event) {\n    this.manager_.signalEmit_(this, data, event);\n  }\n\n  /**\n   * The Gestures instance calls this method to allow the recognizer to start\n   * emitting the gestures. At this point the recognizer is in the \"emitting\"\n   * state. It will be in this state until it calls {@link signalEnd} or\n   * the {@link acceptCancel} is called by the Gestures instance.\n   */\n  acceptStart() {\n  }\n\n  /**\n   * The Gestures instance calls this method to reset the recognizer. At this\n   * point the recognizer is in the initial waiting state.\n   */\n  acceptCancel() {\n  }\n\n  /**\n   * The Gestures instance calls this method for each \"touchstart\" event. If\n   * the recognizer wants to receive other touch events in the series, it has\n   * to return \"true\".\n   * @param {!Event} unusedEvent\n   * @return {boolean}\n   */\n  onTouchStart(unusedEvent) {\n    return false;\n  }\n\n  /**\n   * The Gestures instance calls this method for each \"touchmove\" event. If\n   * the recognizer wants to continue receiving touch events in the series,\n   * it has to return \"true\".\n   * @param {!Event} unusedEvent\n   * @return {boolean}\n   */\n  onTouchMove(unusedEvent) {\n    return false;\n  }\n\n  /**\n   * The Gestures instance calls this method for the \"touchend\" event.\n   * Somewhere within this touch series the recognizer has to call\n   * {@link signalReady} or {@link signalPending} or it will be reset for the\n   * next touch series.\n   * @param {!Event} unusedEvent\n   */\n  onTouchEnd(unusedEvent) {\n  }\n}\n","/**\n * Copyright 2015 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n/**\n * The structure that combines position and size for an element. The exact\n * interpretation of position and size depends on the use case.\n *\n * @typedef {{\n *   top: number,\n *   bottom: number,\n *   left: number,\n *   right: number,\n *   width: number,\n *   height: number,\n *   x: number,\n *   y: number\n * }}\n */\nexport let LayoutRectDef;\n\n\n/**\n * The structure that represents the margins of an Element.\n *\n * @typedef {{\n *   top: number,\n *   right: number,\n *   bottom: number,\n *   left: number\n * }}\n */\nexport let LayoutMarginsDef;\n\n\n/**\n * The structure that represents a requested change to the margins of an\n * Element. Any new values specified will replace existing ones (rather than\n * being additive).\n *\n * @typedef {{\n *   top: (number|undefined),\n *   right: (number|undefined),\n *   bottom: (number|undefined),\n *   left: (number|undefined)\n * }}\n */\nexport let LayoutMarginsChangeDef;\n\n/**\n* RelativePositions\n*\n* Describes the relative position of an element to another (whether the\n* first is inside the second, on top of the second or on the bottom\n* @enum {string}\n*/\nexport const RelativePositions = {\n  INSIDE: 'inside',\n  TOP: 'top',\n  BOTTOM: 'bottom',\n};\n\n/**\n * Creates a layout rect based on the left, top, width and height parameters\n * in that order.\n * @param {number} left\n * @param {number} top\n * @param {number} width\n * @param {number} height\n * @return {!LayoutRectDef}\n */\nexport function layoutRectLtwh(left, top, width, height) {\n  return {\n    left,\n    top,\n    width,\n    height,\n    bottom: top + height,\n    right: left + width,\n    x: left,\n    y: top,\n  };\n}\n\n\n/**\n * Creates a layout rect based on the DOMRect, e.g. obtained from calling\n * getBoundingClientRect.\n * @param {!ClientRect} rect\n * @return {!LayoutRectDef}\n */\nexport function layoutRectFromDomRect(rect) {\n  return layoutRectLtwh(Number(rect.left), Number(rect.top),\n      Number(rect.width), Number(rect.height));\n}\n\n/**\n * Returns true if the specified two rects overlap by a single pixel.\n * @param {!LayoutRectDef} r1\n * @param {!LayoutRectDef} r2\n * @return {boolean}\n */\nexport function layoutRectsOverlap(r1, r2) {\n  return (r1.top <= r2.bottom && r2.top <= r1.bottom &&\n      r1.left <= r2.right && r2.left <= r1.right);\n}\n\n\n/**\n * Returns the intersection between a, b or null if there is none.\n * @param {...?LayoutRectDef|undefined} var_args\n * @return {?LayoutRectDef}\n */\nexport function rectIntersection(var_args) {\n  let x0 = -Infinity;\n  let x1 = Infinity;\n  let y0 = -Infinity;\n  let y1 = Infinity;\n  for (let i = 0; i < arguments.length; i++) {\n    const current = arguments[i];\n    if (!current) {\n      continue;\n    }\n    x0 = Math.max(x0, current.left);\n    x1 = Math.min(x1, current.left + current.width);\n    y0 = Math.max(y0, current.top);\n    y1 = Math.min(y1, current.top + current.height);\n    if (x1 < x0 || y1 < y0) {\n      return null;\n    }\n  }\n  if (x1 == Infinity) {\n    return null;\n  }\n  return layoutRectLtwh(x0, y0, x1 - x0, y1 - y0);\n}\n\n/**\n * Returns the position of r2 relative to r1\n * @param {!LayoutRectDef} r1\n * @param {!LayoutRectDef} r2\n * @return {RelativePositions}\n */\nexport function layoutRectsRelativePos(r1, r2) {\n  if (r1.top < r2.top) {\n    return RelativePositions.TOP;\n  } else if (r1.bottom > r2.bottom) {\n    return RelativePositions.BOTTOM;\n  } else {\n    return RelativePositions.INSIDE;\n  }\n}\n\n/**\n * Expand the layout rect using multiples of width and height.\n * @param {!LayoutRectDef} rect Original rect.\n * @param {number} dw Expansion in width, specified as a multiple of width.\n * @param {number} dh Expansion in height, specified as a multiple of height.\n * @return {!LayoutRectDef}\n */\nexport function expandLayoutRect(rect, dw, dh) {\n  return layoutRectLtwh(rect.left - rect.width * dw,\n      rect.top - rect.height * dh,\n      rect.width * (1 + dw * 2),\n      rect.height * (1 + dh * 2));\n}\n\n/**\n * Moves the layout rect using dx and dy.\n * @param {!LayoutRectDef} rect Original rect.\n * @param {number} dx Move horizontally with this value.\n * @param {number} dy Move vertically with this value.\n * @return {!LayoutRectDef}\n */\nexport function moveLayoutRect(rect, dx, dy) {\n  if ((dx == 0 && dy == 0) ||\n      (rect.width == 0 && rect.height == 0)) {\n    return rect;\n  }\n  return layoutRectLtwh(rect.left + dx, rect.top + dy,\n      rect.width, rect.height);\n}\n\n\n/**\n * @param {!LayoutMarginsDef} margins\n * @param {!LayoutMarginsChangeDef} change\n * @return {boolean}\n */\nexport function areMarginsChanged(margins, change) {\n  return (change.top !== undefined && change.top != margins.top) ||\n      (change.right !== undefined && change.right != margins.right) ||\n      (change.bottom !== undefined && change.bottom != margins.bottom) ||\n      (change.left !== undefined && change.left != margins.left);\n}\n\n/**\n * @param {!LayoutRectDef} from\n * @param {!LayoutRectDef} to\n * @return {boolean}\n */\nexport function layoutRectSizeEquals(from, to) {\n  return from.width == to.width &&\n      from.height === to.height;\n}\n\n/**\n * @param {?LayoutRectDef} r1\n * @param {?LayoutRectDef} r2\n * @return {boolean}\n */\nexport function layoutRectEquals(r1, r2) {\n  if (!r1 || !r2) {\n    return false;\n  }\n  return r1.left == r2.left && r1.top == r2.top &&\n      r1.width == r2.width && r1.height == r2.height;\n}\n\n/**\n * @param {LayoutMarginsChangeDef|undefined} marginsChange\n * @return {LayoutMarginsChangeDef|undefined}\n */\nexport function cloneLayoutMarginsChangeDef(marginsChange) {\n  if (!marginsChange) {\n    return marginsChange;\n  }\n  return {\n    top: marginsChange.top,\n    bottom: marginsChange.bottom,\n    left: marginsChange.left,\n    right: marginsChange.right,\n  };\n}\n","/**\n * Copyright 2015 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {getMode} from './mode';\nimport {getModeObject} from './mode-object';\nimport {isEnumValue} from './types';\n\n/**\n * Triple zero width space.\n *\n * This is added to user error messages, so that we can later identify\n * them, when the only thing that we have is the message. This is the\n * case in many browsers when the global exception handler is invoked.\n *\n * @const {string}\n */\nexport const USER_ERROR_SENTINEL = '\\u200B\\u200B\\u200B';\n\n\n/**\n * Four zero width space.\n *\n * @const {string}\n */\nexport const USER_ERROR_EMBED_SENTINEL = '\\u200B\\u200B\\u200B\\u200B';\n\n\n/**\n * @param {string} message\n * @return {boolean} Whether this message was a user error.\n */\nexport function isUserErrorMessage(message) {\n  return message.indexOf(USER_ERROR_SENTINEL) >= 0;\n}\n\n/**\n * @param {string} message\n * @return {boolean} Whether this message was a a user error from an iframe embed.\n */\nexport function isUserErrorEmbed(message) {\n  return message.indexOf(USER_ERROR_EMBED_SENTINEL) >= 0;\n}\n\n\n/**\n * @enum {number}\n * @private Visible for testing only.\n */\nexport const LogLevel = {\n  OFF: 0,\n  ERROR: 1,\n  WARN: 2,\n  INFO: 3,\n  FINE: 4,\n};\n\n/**\n * Sets reportError function. Called from error.js to break cyclic\n * dependency.\n * @param {function(*, !Element=)|undefined} fn\n */\nexport function setReportError(fn) {\n  self.reportError = fn;\n}\n\n/**\n * @type {!LogLevel|undefined}\n * @private\n */\nlet levelOverride_ = undefined;\n\n/**\n * @param {!LogLevel} level\n */\nexport function overrideLogLevel(level) {\n  levelOverride_ = level;\n}\n\n/**\n * Logging class. Use of sentinel string instead of a boolean to check user/dev\n * errors because errors could be rethrown by some native code as a new error,\n * and only a message would survive. Also, some browser don’t support a 5th\n * error object argument in window.onerror. List of supporting browser can be\n * found here:\n * https://blog.sentry.io/2016/01/04/client-javascript-reporting-window-onerror.html\n * @final\n * @private Visible for testing only.\n */\nexport class Log {\n  /**\n   * opt_suffix will be appended to error message to identify the type of the\n   * error message. We can't rely on the error object to pass along the type\n   * because some browsers do not have this param in its window.onerror API.\n   * See:\n   * https://blog.sentry.io/2016/01/04/client-javascript-reporting-window-onerror.html\n   *\n   * @param {!Window} win\n   * @param {function(!./mode.ModeDef):!LogLevel} levelFunc\n   * @param {string=} opt_suffix\n   */\n  constructor(win, levelFunc, opt_suffix) {\n    /**\n     * In tests we use the main test window instead of the iframe where\n     * the tests runs because only the former is relayed to the console.\n     * @const {!Window}\n     */\n    this.win = (getMode().test && win.AMP_TEST_IFRAME) ? win.parent : win;\n\n    /** @private @const {function(!./mode.ModeDef):!LogLevel} */\n    this.levelFunc_ = levelFunc;\n\n    /** @private @const {!LogLevel} */\n    this.level_ = this.defaultLevel_();\n\n    /** @private @const {string} */\n    this.suffix_ = opt_suffix || '';\n  }\n\n  /**\n   * @return {!LogLevel}\n   * @private\n   */\n  getLevel_() {\n    return (levelOverride_ !== undefined) ? levelOverride_ : this.level_;\n  }\n\n  /**\n   * @return {!LogLevel}\n   * @private\n   */\n  defaultLevel_() {\n    // No console - can't enable logging.\n    if (!this.win.console || !this.win.console.log) {\n      return LogLevel.OFF;\n    }\n\n    // Logging has been explicitly disabled.\n    if (getMode().log == '0') {\n      return LogLevel.OFF;\n    }\n\n    // Logging is enabled for tests directly.\n    if (getMode().test && this.win.ENABLE_LOG) {\n      return LogLevel.FINE;\n    }\n\n    // LocalDev by default allows INFO level, unless overriden by `#log`.\n    if (getMode().localDev && !getMode().log) {\n      return LogLevel.INFO;\n    }\n\n    // Delegate to the specific resolver.\n    return this.levelFunc_(getModeObject());\n  }\n\n  /**\n   * @param {string} tag\n   * @param {string} level\n   * @param {!Array} messages\n   */\n  msg_(tag, level, messages) {\n    if (this.getLevel_() != LogLevel.OFF) {\n      let fn = this.win.console.log;\n      if (level == 'ERROR') {\n        fn = this.win.console.error || fn;\n      } else if (level == 'INFO') {\n        fn = this.win.console.info || fn;\n      } else if (level == 'WARN') {\n        fn = this.win.console.warn || fn;\n      }\n      if (getMode().localDev) {\n        messages.unshift('[' + tag + ']');\n      }\n      fn.apply(this.win.console, messages);\n    }\n  }\n\n  /**\n   * Whether the logging is enabled.\n   * @return {boolean}\n   */\n  isEnabled() {\n    return this.getLevel_() != LogLevel.OFF;\n  }\n\n  /**\n   * Reports a fine-grained message.\n   * @param {string} tag\n   * @param {...*} var_args\n   */\n  fine(tag, var_args) {\n    if (this.getLevel_() >= LogLevel.FINE) {\n      this.msg_(tag, 'FINE', Array.prototype.slice.call(arguments, 1));\n    }\n  }\n\n  /**\n   * Reports a informational message.\n   * @param {string} tag\n   * @param {...*} var_args\n   */\n  info(tag, var_args) {\n    if (this.getLevel_() >= LogLevel.INFO) {\n      this.msg_(tag, 'INFO', Array.prototype.slice.call(arguments, 1));\n    }\n  }\n\n  /**\n   * Reports a warning message.\n   * @param {string} tag\n   * @param {...*} var_args\n   */\n  warn(tag, var_args) {\n    if (this.getLevel_() >= LogLevel.WARN) {\n      this.msg_(tag, 'WARN', Array.prototype.slice.call(arguments, 1));\n    }\n  }\n\n  /**\n   * Reports an error message. If the logging is disabled, the error is rethrown\n   * asynchronously.\n   * @param {string} tag\n   * @param {...*} var_args\n   * @return {!Error|undefined}\n   * @private\n   */\n  error_(tag, var_args) {\n    if (this.getLevel_() >= LogLevel.ERROR) {\n      this.msg_(tag, 'ERROR', Array.prototype.slice.call(arguments, 1));\n    } else {\n      const error = createErrorVargs.apply(null,\n          Array.prototype.slice.call(arguments, 1));\n      this.prepareError_(error);\n      return error;\n    }\n  }\n\n  /**\n   * Reports an error message.\n   * @param {string} tag\n   * @param {...*} var_args\n   */\n  error(tag, var_args) {\n    const error = this.error_.apply(this, arguments);\n    if (error) {\n      error.name = tag || error.name;\n      // reportError is installed globally per window in the entry point.\n      self.reportError(error);\n    }\n  }\n\n  /**\n   * Reports an error message and marks with an expected property. If the\n   * logging is disabled, the error is rethrown asynchronously.\n   * @param {string} unusedTag\n   * @param {...*} var_args\n   */\n  expectedError(unusedTag, var_args) {\n    const error = this.error_.apply(this, arguments);\n    if (error) {\n      error.expected = true;\n      // reportError is installed globally per window in the entry point.\n      self.reportError(error);\n    }\n  }\n\n  /**\n   * Creates an error object.\n   * @param {...*} var_args\n   * @return {!Error}\n   */\n  createError(var_args) {\n    const error = createErrorVargs.apply(null, arguments);\n    this.prepareError_(error);\n    return error;\n  }\n\n  /**\n   * Creates an error object with its expected property set to true.\n   * @param {...*} var_args\n   * @return {!Error}\n   */\n  createExpectedError(var_args) {\n    const error = createErrorVargs.apply(null, arguments);\n    this.prepareError_(error);\n    error.expected = true;\n    return error;\n  }\n\n  /**\n   * Throws an error if the first argument isn't trueish.\n   *\n   * Supports argument substitution into the message via %s placeholders.\n   *\n   * Throws an error object that has two extra properties:\n   * - associatedElement: This is the first element provided in the var args.\n   *   It can be used for improved display of error messages.\n   * - messageArray: The elements of the substituted message as non-stringified\n   *   elements in an array. When e.g. passed to console.error this yields\n   *   native displays of things like HTML elements.\n   *\n   * @param {T} shouldBeTrueish The value to assert. The assert fails if it does\n   *     not evaluate to true.\n   * @param {string=} opt_message The assertion message\n   * @param {...*} var_args Arguments substituted into %s in the message.\n   * @return {T} The value of shouldBeTrueish.\n   * @template T\n   * eslint \"google-camelcase/google-camelcase\": 0\n   */\n  assert(shouldBeTrueish, opt_message, var_args) {\n    let firstElement;\n    if (!shouldBeTrueish) {\n      const message = opt_message || 'Assertion failed';\n      const splitMessage = message.split('%s');\n      const first = splitMessage.shift();\n      let formatted = first;\n      const messageArray = [];\n      pushIfNonEmpty(messageArray, first);\n      for (let i = 2; i < arguments.length; i++) {\n        const val = arguments[i];\n        if (val && val.tagName) {\n          firstElement = val;\n        }\n        const nextConstant = splitMessage.shift();\n        messageArray.push(val);\n        pushIfNonEmpty(messageArray, nextConstant.trim());\n        formatted += toString(val) + nextConstant;\n      }\n      const e = new Error(formatted);\n      e.fromAssert = true;\n      e.associatedElement = firstElement;\n      e.messageArray = messageArray;\n      this.prepareError_(e);\n      // reportError is installed globally per window in the entry point.\n      self.reportError(e);\n      throw e;\n    }\n    return shouldBeTrueish;\n  }\n\n  /**\n   * Throws an error if the first argument isn't an Element\n   *\n   * Otherwise see `assert` for usage\n   *\n   * @param {*} shouldBeElement\n   * @param {string=} opt_message The assertion message\n   * @return {!Element} The value of shouldBeTrueish.\n   * @template T\n   * eslint \"google-camelcase/google-camelcase\": 2\n   */\n  assertElement(shouldBeElement, opt_message) {\n    const shouldBeTrueish = shouldBeElement && shouldBeElement.nodeType == 1;\n    this.assert(shouldBeTrueish, (opt_message || 'Element expected') + ': %s',\n        shouldBeElement);\n    return /** @type {!Element} */ (shouldBeElement);\n  }\n\n  /**\n   * Throws an error if the first argument isn't a string. The string can\n   * be empty.\n   *\n   * For more details see `assert`.\n   *\n   * @param {*} shouldBeString\n   * @param {string=} opt_message The assertion message\n   * @return {string} The string value. Can be an empty string.\n   * eslint \"google-camelcase/google-camelcase\": 2\n   */\n  assertString(shouldBeString, opt_message) {\n    this.assert(typeof shouldBeString == 'string',\n        (opt_message || 'String expected') + ': %s', shouldBeString);\n    return /** @type {string} */ (shouldBeString);\n  }\n\n  /**\n   * Throws an error if the first argument isn't a number. The allowed values\n   * include `0` and `NaN`.\n   *\n   * For more details see `assert`.\n   *\n   * @param {*} shouldBeNumber\n   * @param {string=} opt_message The assertion message\n   * @return {number} The number value. The allowed values include `0`\n   *   and `NaN`.\n   */\n  assertNumber(shouldBeNumber, opt_message) {\n    this.assert(typeof shouldBeNumber == 'number',\n        (opt_message || 'Number expected') + ': %s', shouldBeNumber);\n    return /** @type {number} */ (shouldBeNumber);\n  }\n\n  /**\n   * Throws an error if the first argument isn't a boolean.\n   *\n   * For more details see `assert`.\n   *\n   * @param {*} shouldBeBoolean\n   * @param {string=} opt_message The assertion message\n   * @return {boolean} The boolean value.\n   */\n  assertBoolean(shouldBeBoolean, opt_message) {\n    this.assert(!!shouldBeBoolean === shouldBeBoolean,\n        (opt_message || 'Boolean expected') + ': %s', shouldBeBoolean);\n    return /** @type {boolean} */ (shouldBeBoolean);\n  }\n\n  /**\n   * Asserts and returns the enum value. If the enum doesn't contain such a\n   * value, the error is thrown.\n   *\n   * @param {!Object<T>} enumObj\n   * @param {string} s\n   * @param {string=} opt_enumName\n   * @return {T}\n   * @template T\n   * eslint \"google-camelcase/google-camelcase\": 2\n   */\n  assertEnumValue(enumObj, s, opt_enumName) {\n    if (isEnumValue(enumObj, s)) {\n      return s;\n    }\n    this.assert(false,\n        'Unknown %s value: \"%s\"',\n        opt_enumName || 'enum', s);\n  }\n\n  /**\n   * @param {!Error} error\n   * @private\n   */\n  prepareError_(error) {\n    error = duplicateErrorIfNecessary(error);\n    if (this.suffix_) {\n      if (!error.message) {\n        error.message = this.suffix_;\n      } else if (error.message.indexOf(this.suffix_) == -1) {\n        error.message += this.suffix_;\n      }\n    } else if (isUserErrorMessage(error.message)) {\n      error.message = error.message.replace(USER_ERROR_SENTINEL, '');\n    }\n  }\n}\n\n/**\n * @param {string|!Element} val\n * @return {string}\n */\nfunction toString(val) {\n  // Do check equivalent to `val instanceof Element` without cross-window bug\n  if (val && val.nodeType == 1) {\n    return val.tagName.toLowerCase() + (val.id ? '#' + val.id : '');\n  }\n  return /** @type {string} */ (val);\n}\n\n\n/**\n * @param {!Array} array\n * @param {*} val\n */\nfunction pushIfNonEmpty(array, val) {\n  if (val != '') {\n    array.push(val);\n  }\n}\n\n/**\n * Some exceptions (DOMException, namely) have read-only message.\n * @param {!Error} error\n * @return {!Error};\n */\nexport function duplicateErrorIfNecessary(error) {\n  const {message} = error;\n  const test = String(Math.random());\n  error.message = test;\n\n  if (error.message === test) {\n    error.message = message;\n    return error;\n  }\n\n  const e = new Error(error.message);\n  // Copy all the extraneous things we attach.\n  for (const prop in error) {\n    e[prop] = error[prop];\n  }\n  // Ensure these are copied.\n  e.stack = error.stack;\n  return e;\n}\n\n/**\n * @param {...*} var_args\n * @return {!Error}\n * @visibleForTesting\n */\nexport function createErrorVargs(var_args) {\n  let error = null;\n  let message = '';\n  for (let i = 0; i < arguments.length; i++) {\n    const arg = arguments[i];\n    if (arg instanceof Error && !error) {\n      error = duplicateErrorIfNecessary(arg);\n    } else {\n      if (message) {\n        message += ' ';\n      }\n      message += arg;\n    }\n  }\n\n  if (!error) {\n    error = new Error(message);\n  } else if (message) {\n    error.message = message + ': ' + error.message;\n  }\n  return error;\n}\n\n\n/**\n * Rethrows the error without terminating the current context. This preserves\n * whether the original error designation is a user error or a dev error.\n * @param {...*} var_args\n */\nexport function rethrowAsync(var_args) {\n  const error = createErrorVargs.apply(null, arguments);\n  setTimeout(() => {\n    // reportError is installed globally per window in the entry point.\n    self.reportError(error);\n    throw error;\n  });\n}\n\n\n/**\n * Cache for logs. We do not use a Service since the service module depends\n * on Log and closure literally can't even.\n * @type {{user: ?Log, dev: ?Log, userForEmbed: ?Log}}\n */\nself.log = (self.log || {\n  user: null,\n  dev: null,\n  userForEmbed: null,\n});\n\nconst logs = self.log;\n\n/**\n * Eventually holds a constructor for Log objects. Lazily initialized, so we\n * can avoid ever referencing the real constructor except in JS binaries\n * that actually want to include the implementation.\n * @type {?Function}\n */\nlet logConstructor = null;\n\n/**\n * Initializes log contructor.\n */\nexport function initLogConstructor() {\n  logConstructor = Log;\n  // Initialize instances for use. If a binary (an extension for example) that\n  // does not call `initLogConstructor` invokes `dev()` or `user()` earlier than\n  // the binary that does call `initLogConstructor` (amp.js), the extension will\n  // throw an error as that extension will never be able to initialize the log\n  // instances and we also don't want it to call `initLogConstructor` either\n  // (since that will cause the Log implementation to be bundled into that\n  // binary). So we must initialize the instances eagerly so that they are ready\n  // for use (stored globally) after the main binary calls `initLogConstructor`.\n  dev();\n  user();\n}\n\n/**\n * Resets log contructor for testing.\n */\nexport function resetLogConstructorForTesting() {\n  logConstructor = null;\n}\n\n/**\n * Publisher level log.\n *\n * Enabled in the following conditions:\n *  1. Not disabled using `#log=0`.\n *  2. Development mode is enabled via `#development=1` or logging is explicitly\n *     enabled via `#log=D` where D >= 1.\n *  3. AMP.setLogLevel(D) is called, where D >= 1.\n *\n * @param {!Element=} opt_element\n * @return {!Log}\n */\nexport function user(opt_element) {\n  if (!logs.user) {\n    logs.user = getUserLogger(USER_ERROR_SENTINEL);\n  }\n  if (!isFromEmbed(logs.user.win, opt_element)) {\n    return logs.user;\n  } else {\n    if (logs.userForEmbed) {\n      return logs.userForEmbed;\n    }\n    return logs.userForEmbed = getUserLogger(USER_ERROR_EMBED_SENTINEL);\n  }\n}\n\n/**\n * Getter for user logger\n * @param {string=} suffix\n * @return {!Log}\n */\nfunction getUserLogger(suffix) {\n  if (!logConstructor) {\n    throw new Error('failed to call initLogConstructor');\n  }\n  return new logConstructor(self, mode => {\n    const logNum = parseInt(mode.log, 10);\n    if (mode.development || logNum >= 1) {\n      return LogLevel.FINE;\n    }\n    return LogLevel.WARN;\n  }, suffix);\n}\n\n/**\n * AMP development log. Calls to `devLog().assert` and `dev.fine` are stripped\n * in the PROD binary. However, `devLog().assert` result is preserved in either\n * case.\n *\n * Enabled in the following conditions:\n *  1. Not disabled using `#log=0`.\n *  2. Logging is explicitly enabled via `#log=D`, where D >= 2.\n *  3. AMP.setLogLevel(D) is called, where D >= 2.\n *\n * @return {!Log}\n */\nexport function dev() {\n  if (logs.dev) {\n    return logs.dev;\n  }\n  if (!logConstructor) {\n    throw new Error('failed to call initLogConstructor');\n  }\n  return logs.dev = new logConstructor(self, mode => {\n    const logNum = parseInt(mode.log, 10);\n    if (logNum >= 3) {\n      return LogLevel.FINE;\n    }\n    if (logNum >= 2) {\n      return LogLevel.INFO;\n    }\n    return LogLevel.OFF;\n  });\n}\n\n/**\n * @param {!Window} win\n * @param {!Element=} opt_element\n * @return {boolean} isEmbed\n */\nexport function isFromEmbed(win, opt_element) {\n  if (!opt_element) {\n    return false;\n  }\n  return opt_element.ownerDocument.defaultView != win;\n}\n","/**\n * Copyright 2016 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {getMode} from './mode';\n\n/**\n * Provides info about the current app. This return value may be cached and\n * passed around as it will always be DCE'd.\n * @param {?Window=} opt_win\n * @return {!./mode.ModeDef}\n */\nexport function getModeObject(opt_win) {\n  return {\n    localDev: getMode(opt_win).localDev,\n    development: getMode(opt_win).development,\n    filter: getMode(opt_win).filter,\n    minified: getMode(opt_win).minified,\n    lite: getMode(opt_win).lite,\n    test: getMode(opt_win).test,\n    log: getMode(opt_win).log,\n    version: getMode(opt_win).version,\n    rtvVersion: getMode(opt_win).rtvVersion,\n  };\n}\n","/**\n * Copyright 2015 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {parseQueryString_} from './url-parse-query-string';\n\n/**\n * @typedef {{\n *   localDev: boolean,\n *   development: boolean,\n *   filter: (string|undefined),\n *   minified: boolean,\n *   lite: boolean,\n *   test: boolean,\n *   log: (string|undefined),\n *   version: string,\n *   rtvVersion: string,\n * }}\n */\nexport let ModeDef;\n\n/** @type {string} */\nconst version = '$internalRuntimeVersion$';\n\n/**\n * `rtvVersion` is the prefixed version we serve off of the cdn.\n * The prefix denotes canary(00) or prod(01) or an experiment version ( > 01).\n * @type {string}\n */\nlet rtvVersion = '';\n\n/**\n * Provides info about the current app.\n * @param {?Window=} opt_win\n * @return {!ModeDef}\n */\nexport function getMode(opt_win) {\n  const win = opt_win || self;\n  if (win.AMP_MODE) {\n    return win.AMP_MODE;\n  }\n  return win.AMP_MODE = getMode_(win);\n}\n\n/**\n * Provides info about the current app.\n * @param {!Window} win\n * @return {!ModeDef}\n */\nfunction getMode_(win) {\n  // Magic constants that are replaced by closure compiler.\n  // IS_MINIFIED is always replaced with true when closure compiler is used\n  // while IS_DEV is only replaced when `gulp dist` is called without the\n  // --fortesting flag.\n  const IS_DEV = true;\n  const IS_MINIFIED = false;\n\n  const localDevEnabled = !!(self.AMP_CONFIG && self.AMP_CONFIG.localDev);\n  const runningTests = IS_DEV && !!(win.AMP_TEST || win.__karma__);\n  const isLocalDev = IS_DEV && (localDevEnabled || runningTests);\n  const hashQuery = parseQueryString_(\n      // location.originalHash is set by the viewer when it removes the fragment\n      // from the URL.\n      win.location.originalHash || win.location.hash);\n\n  const searchQuery = parseQueryString_(win.location.search);\n\n  if (!rtvVersion) {\n    rtvVersion = getRtvVersion(win, isLocalDev);\n  }\n\n  // The `minified`, `test` and `localDev` properties are replaced\n  // as boolean literals when we run `gulp dist` without the `--fortesting`\n  // flags. This improved DCE on the production file we deploy as the code\n  // paths for localhost/testing/development are eliminated.\n  return {\n    localDev: isLocalDev,\n    // Triggers validation or enable pub level logging. Validation can be\n    // bypassed via #validate=0.\n    // Note that AMP_DEV_MODE flag is used for testing purposes.\n    development: !!(hashQuery['development'] == '1' || win.AMP_DEV_MODE),\n    examiner: hashQuery['development'] == '2',\n    // Allows filtering validation errors by error category. For the\n    // available categories, see ErrorCategory in validator/validator.proto.\n    filter: hashQuery['filter'],\n    // amp-geo override\n    geoOverride: hashQuery['amp-geo'],\n    minified: IS_MINIFIED,\n    // Whether document is in an amp-lite viewer. It signal that the user\n    // would prefer to use less bandwidth.\n    lite: searchQuery['amp_lite'] != undefined,\n    test: runningTests,\n    log: hashQuery['log'],\n    version,\n    rtvVersion,\n  };\n}\n\n/**\n * Retrieve the `rtvVersion` which will have a numeric prefix\n * denoting canary/prod/experiment (unless `isLocalDev` is true).\n *\n * @param {!Window} win\n * @param {boolean} isLocalDev\n * @return {string}\n */\nfunction getRtvVersion(win, isLocalDev) {\n  // If it's local dev then we won't actually have a full version so\n  // just use the version.\n  if (isLocalDev) {\n    return version;\n  }\n\n  if (win.AMP_CONFIG && win.AMP_CONFIG.v) {\n    return win.AMP_CONFIG.v;\n  }\n\n  // Currently `$internalRuntimeVersion$` and thus `mode.version` contain only\n  // major version. The full version however must also carry the minor version.\n  // We will default to production default `01` minor version for now.\n  // TODO(erwinmombay): decide whether $internalRuntimeVersion$ should contain\n  // minor version.\n  return `01${version}`;\n}\n\n\n/**\n * @param {!Window} win\n * @param {boolean} isLocalDev\n * @return {string}\n * @visibleForTesting\n */\nexport function getRtvVersionForTesting(win, isLocalDev) {\n  return getRtvVersion(win, isLocalDev);\n}\n\n\n/** @visibleForTesting */\nexport function resetRtvVersionForTesting() {\n  rtvVersion = '';\n}\n","/**\n * Copyright 2015 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Deferred} from './utils/promise';\nimport {Services} from './services';\n\n/** @const {function()} */\nconst NOOP_CALLBACK_ = function() {};\n\n/** @const {number} */\nconst MIN_VELOCITY_ = 0.02;\n\n/** @const {number} */\nconst FRAME_CONST_ = 16.67;\n\n/** @const {number} */\nconst EXP_FRAME_CONST_ = Math.round(-FRAME_CONST_ / Math.log(0.95));\n\n/**\n * Depreciation factor of 1/100 of a millisecond. This is how much previous\n * velocity is depreciated when calculating the new velocity.\n * @const {number}\n */\nconst VELOCITY_DEPR_FACTOR_ = FRAME_CONST_ * 2;\n\n\n/**\n * Calculates velocity for an object traveling the distance deltaV in the\n * time deltaTime given the previous velocity prevVelocity. The calculation\n * assumes a basic informational depreciation of previous velocity.\n * @param {number} deltaV\n * @param {time} deltaTime\n * @param {number} prevVelocity\n * @return {number}\n */\nexport function calcVelocity(deltaV, deltaTime, prevVelocity) {\n  if (deltaTime < 1) {\n    deltaTime = 1;\n  }\n\n  // Calculate speed and speed depreciation.\n  const speed = deltaV / deltaTime;\n\n  // Depreciation is simply an informational quality. It basically means:\n  // we can't ignore the velocity we knew recently, but we'd only consider\n  // it proportionally to how long ago we've seen it. Currently, this\n  // depreciation factor is 1/100 of a millisecond. New average velocity is\n  // calculated by weighing toward the new velocity and away from old\n  // velocity based on the depreciation.\n  const depr = 0.5 + Math.min(deltaTime / VELOCITY_DEPR_FACTOR_, 0.5);\n  return speed * depr + prevVelocity * (1 - depr);\n}\n\n\n/**\n * Returns a motion process that will yield when the velocity has run down to\n * zerp. For each iteration, the velocity is depreciated and the coordinates\n * are advanced from start X/Y to the destination according to velocity\n * vectors. For each such iteration the callback is called with the new x and y.\n * @param {!Node} contextNode\n * @param {number} startX Start X coordinate.\n * @param {number} startY Start Y coordinate.\n * @param {number} veloX Starting X velocity.\n * @param {number} veloY Starting Y velocity.\n * @param {function(number, number):boolean} callback The callback for each\n *   step of the deceleration motion.\n * @param {!./service/vsync-impl.Vsync=} opt_vsync Mostly for testing only.\n * @return {!Motion}\n */\nexport function continueMotion(contextNode, startX, startY, veloX, veloY,\n  callback, opt_vsync) {\n  return new Motion(contextNode, startX, startY, veloX, veloY,\n      callback, opt_vsync).start();\n}\n\n\n/**\n * Motion process that allows tracking and monitoring of the running motion.\n * Most importantly it exposes methods \"then\" and \"thenAlways\" that have the\n * semantics of a Promise and signal when the motion has completed or failed.\n * Additionally, it exposes the method \"halt\" which allows to stop/reset the\n * motion.\n * @implements {IThenable}\n */\nexport class Motion {\n  /**\n   * @param {!Node} contextNode Context node.\n   * @param {number} startX Start X coordinate.\n   * @param {number} startY Start Y coordinate.\n   * @param {number} veloX Starting X velocity.\n   * @param {number} veloY Starting Y velocity.\n   * @param {function(number, number):boolean} callback The callback for each\n   *   step of the deceleration motion.\n   * @param {!./service/vsync-impl.Vsync=} opt_vsync\n   */\n  constructor(contextNode, startX, startY, veloX, veloY, callback, opt_vsync) {\n    /** @private @const {!./service/vsync-impl.Vsync} */\n    this.vsync_ = opt_vsync || Services.vsyncFor(self);\n\n    /** @private @const {!Node} */\n    this.contextNode_ = contextNode;\n\n    /** @private @const */\n    this.callback_ = callback;\n\n    /** @private {number} */\n    this.lastX_ = startX;\n\n    /** @private {number} */\n    this.lastY_ = startY;\n\n    /** @private {number} */\n    this.maxVelocityX_ = veloX;\n\n    /** @private {number} */\n    this.maxVelocityY_ = veloY;\n\n    /** @private {number} */\n    this.velocityX_ = 0;\n\n    /** @private {number} */\n    this.velocityY_ = 0;\n\n    const deferred = new Deferred();\n\n    /** @private {!Promise} */\n    this.promise_ = deferred.promise;\n\n    /** @private {!Function} */\n    this.resolve_ = deferred.resolve;\n\n    /** @private {!Function} */\n    this.reject_ = deferred.reject;\n\n    /** @private {boolean} */\n    this.continuing_ = false;\n  }\n\n  /** */\n  start() {\n    this.continuing_ = true;\n    if (Math.abs(this.maxVelocityX_) <= MIN_VELOCITY_ &&\n            Math.abs(this.maxVelocityY_) <= MIN_VELOCITY_) {\n      this.fireMove_();\n      this.completeContinue_(true);\n    } else {\n      this.runContinuing_();\n    }\n    return this;\n  }\n\n  /**\n   * Halts the motion. The motion promise will be rejected since the motion\n   * has been interrupted.\n   */\n  halt() {\n    if (this.continuing_) {\n      this.completeContinue_(false);\n    }\n  }\n\n  /**\n   * Chains to the motion's promise that will resolve when the motion has\n   * completed or will reject if motion has failed or was interrupted.\n   * @override\n   */\n  then(opt_resolve, opt_reject) {\n    if (!opt_resolve && !opt_reject) {\n      return this.promise_;\n    }\n    return this.promise_.then(opt_resolve, opt_reject);\n  }\n\n  /**\n   * Callback for regardless whether the motion succeeds or fails.\n   * @param {function()=} opt_callback\n   * @return {!Promise}\n   */\n  thenAlways(opt_callback) {\n    const callback = opt_callback || NOOP_CALLBACK_;\n    return /** @type {!Promise} */ (this.then(callback, callback));\n  }\n\n  /**\n   * @return {!Promise}\n   * @private\n   */\n  runContinuing_() {\n    this.velocityX_ = this.maxVelocityX_;\n    this.velocityY_ = this.maxVelocityY_;\n    const boundStep = this.stepContinue_.bind(this);\n    const boundComplete = this.completeContinue_.bind(this, true);\n    return this.vsync_.runAnimMutateSeries(this.contextNode_, boundStep, 5000)\n        .then(boundComplete, boundComplete);\n  }\n\n  /**\n   * Returns \"true\" to continue and \"false\" to stop motion process.\n   * @param {time} timeSinceStart\n   * @param {time} timeSincePrev\n   * @return {boolean}\n   * @private\n   */\n  stepContinue_(timeSinceStart, timeSincePrev) {\n    if (!this.continuing_) {\n      return false;\n    }\n\n    this.lastX_ += timeSincePrev * this.velocityX_;\n    this.lastY_ += timeSincePrev * this.velocityY_;\n    if (!this.fireMove_()) {\n      return false;\n    }\n\n    const decel = Math.exp(-timeSinceStart / EXP_FRAME_CONST_);\n    this.velocityX_ = this.maxVelocityX_ * decel;\n    this.velocityY_ = this.maxVelocityY_ * decel;\n    return (Math.abs(this.velocityX_) > MIN_VELOCITY_ ||\n        Math.abs(this.velocityY_) > MIN_VELOCITY_);\n  }\n\n  /**\n   * @param {boolean} success\n   * @private\n   */\n  completeContinue_(success) {\n    if (!this.continuing_) {\n      return;\n    }\n    this.continuing_ = false;\n    this.fireMove_();\n    if (success) {\n      this.resolve_();\n    } else {\n      this.reject_();\n    }\n  }\n\n  /** @private */\n  fireMove_() {\n    return this.callback_(this.lastX_, this.lastY_);\n  }\n}\n","/**\n * Copyright 2015 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\n/**\n * This class helps to manage observers. Observers can be added, removed or\n * fired through and instance of this class.\n * @template TYPE\n */\nexport class Observable {\n\n  /**\n   * Creates an instance of Observable.\n   */\n  constructor() {\n    /** @type {?Array<function(TYPE)>} */\n    this.handlers_ = null;\n  }\n\n  /**\n   * Adds the observer to this instance.\n   * @param {function(TYPE)} handler Observer's handler.\n   * @return {!UnlistenDef}\n   */\n  add(handler) {\n    if (!this.handlers_) {\n      this.handlers_ = [];\n    }\n    this.handlers_.push(handler);\n    return () => {\n      this.remove(handler);\n    };\n  }\n\n  /**\n   * Removes the observer from this instance.\n   * @param {function(TYPE)} handler Observer's instance.\n   */\n  remove(handler) {\n    if (!this.handlers_) {\n      return;\n    }\n    const index = this.handlers_.indexOf(handler);\n    if (index > -1) {\n      this.handlers_.splice(index, 1);\n    }\n  }\n\n  /**\n   * Removes all observers.\n   */\n  removeAll() {\n    if (!this.handlers_) {\n      return;\n    }\n    this.handlers_.length = 0;\n  }\n\n  /**\n   * Fires an event. All observers are called.\n   * @param {TYPE=} opt_event\n   */\n  fire(opt_event) {\n    if (!this.handlers_) {\n      return;\n    }\n    const handlers = this.handlers_;\n    for (let i = 0; i < handlers.length; i++) {\n      const handler = handlers[i];\n      handler(opt_event);\n    }\n  }\n\n  /**\n   * Returns number of handlers. Mostly needed for tests.\n   * @return {number}\n   */\n  getHandlerCount() {\n    if (!this.handlers_) {\n      return 0;\n    }\n    return this.handlers_.length;\n  }\n}\n","/**\n * Copyright 2015 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Services} from './services';\n\n\n/**\n * Pass class helps to manage single-pass process. A pass is scheduled using\n * delay method. Only one pass can be pending at a time. If no pass is pending\n * the process is considered to be \"idle\".\n */\nexport class Pass {\n\n  /**\n   * Creates a new Pass instance.\n   * @param {!Window} win\n   * @param {function()} handler Handler to be executed when pass is triggered.\n   * @param {number=} opt_defaultDelay Default delay to be used when schedule\n   *   is called without one.\n   */\n  constructor(win, handler, opt_defaultDelay) {\n    this.timer_ = Services.timerFor(win);\n\n    /** @private @const {function()} */\n    this.handler_ = handler;\n\n    /** @private @const {number} */\n    this.defaultDelay_ = opt_defaultDelay || 0;\n\n    /** @private {number|string} */\n    this.scheduled_ = -1;\n\n    /** @private {number} */\n    this.nextTime_ = 0;\n\n    /** @private {boolean} */\n    this.running_ = false;\n\n    /** @private @const {!Function} */\n    this.boundPass_ = () => this.pass_();\n  }\n\n  /**\n   * Whether or not a pass is currently pending.\n   * @return {boolean}\n   */\n  isPending() {\n    return this.scheduled_ != -1;\n  }\n\n  /**\n   * Tries to schedule a new pass optionally with specified delay. If the new\n   * requested pass is requested before the pending pass, the pending pass is\n   * canceled. If the new pass is requested after the pending pass, the newly\n   * requested pass is ignored.\n   *\n   * Returns {@code true} if the pass has been scheduled and {@code false} if\n   * ignored.\n   *\n   * @param {number=} opt_delay Delay to schedule the pass. If not specified\n   *   the default delay is used, falling back to 0.\n   * @return {boolean}\n   */\n  schedule(opt_delay) {\n    let delay = opt_delay || this.defaultDelay_;\n    if (this.running_ && delay < 10) {\n      // If we get called recursively, wait at least 10ms for the next\n      // execution.\n      delay = 10;\n    }\n\n    const nextTime = Date.now() + delay;\n    // Schedule anew if nothing is scheduled currently or if the new time is\n    // sooner then previously requested.\n    if (!this.isPending() || nextTime - this.nextTime_ < -10) {\n      this.cancel();\n      this.nextTime_ = nextTime;\n      this.scheduled_ = this.timer_.delay(this.boundPass_, delay);\n\n      return true;\n    }\n\n    return false;\n  }\n\n  /**\n   *\n   */\n  pass_() {\n    this.scheduled_ = -1;\n    this.nextTime_ = 0;\n    this.running_ = true;\n    this.handler_();\n    this.running_ = false;\n  }\n\n  /**\n   * Cancels the pending pass if any.\n   */\n  cancel() {\n    if (this.isPending()) {\n      this.timer_.cancel(this.scheduled_);\n      this.scheduled_ = -1;\n    }\n  }\n}\n","/**\n * Copyright 2015 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {getMode} from './mode';\nimport {install as installArrayIncludes} from './polyfills/array-includes';\nimport {install as installCustomElements} from './polyfills/custom-elements';\nimport {\n  install as installDOMTokenListToggle,\n} from './polyfills/domtokenlist-toggle';\nimport {install as installDocContains} from './polyfills/document-contains';\nimport {install as installMathSign} from './polyfills/math-sign';\nimport {install as installObjectAssign} from './polyfills/object-assign';\nimport {install as installPromise} from './polyfills/promise';\nimport {installCustomElements as installRegisterElement} from\n  'document-register-element/build/document-register-element.patched';\nimport {isExperimentOn} from './experiments';\n\nif (isExperimentOn(self, 'custom-elements-v1') || getMode().test) {\n  installCustomElements(self, class {});\n} else {\n  installRegisterElement(self, 'auto');\n}\ninstallDOMTokenListToggle(self);\ninstallMathSign(self);\ninstallObjectAssign(self);\ninstallPromise(self);\ninstallDocContains(self);\ninstallArrayIncludes(self);\n","/**\n * Copyright 2016 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n/**\n * Returns true if the element is in the array and false otherwise.\n *\n * @param {*} value\n * @param {number=} opt_fromIndex\n * @return {boolean}\n * @this {Array}\n */\nfunction includes(value, opt_fromIndex) {\n  const fromIndex = opt_fromIndex || 0;\n  const len = this.length;\n  let i = fromIndex >= 0 ? fromIndex : Math.max(len + fromIndex, 0);\n  for (; i < len; i++) {\n    const other = this[i];\n    // If value has been found OR (value is NaN AND other is NaN)\n    /*eslint \"no-self-compare\": 0*/\n    if (other === value || (value !== value && other !== other)) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/**\n* Sets the Array.contains polyfill if it does not exist.\n* @param {!Window} win\n*/\nexport function install(win) {\n  if (!win.Array.prototype.includes) {\n    win.Object.defineProperty(Array.prototype, 'includes', {\n      enumerable: false,\n      configurable: true,\n      writable: true,\n      value: includes,\n    });\n  }\n}\n","/**\n * Copyright 2018 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @typedef {{\n *   promise: !Promise<undefined>,\n *   resolve: function(),\n * }}\n */\nlet DeferredDef;\n\n/**\n * @typedef {!Function}\n */\nlet CustomElementConstructorDef;\n\n/**\n * @typedef {{\n *  name: string,\n *  ctor: !CustomElementConstructorDef,\n * }}\n */\nlet CustomElementDef;\n\n/**\n * Validates the custom element's name.\n * This intentionally ignores \"valid\" higher Unicode Code Points.\n * https://html.spec.whatwg.org/multipage/custom-elements.html#valid-custom-element-name\n */\nconst VALID_NAME = /^[a-z][a-z0-9._]*-[a-z0-9._-]*$/;\nconst INVALID_NAMES = [\n  'annotation-xml',\n  'color-profile',\n  'font-face',\n  'font-face-src',\n  'font-face-uri',\n  'font-face-format',\n  'font-face-name',\n  'missing-glyph',\n];\n\n/**\n * Asserts that the custom element name conforms to the spec.\n *\n * @param {!Function} SyntaxError\n * @param {string} name\n */\nfunction assertValidName(SyntaxError, name) {\n  if (!VALID_NAME.test(name) || INVALID_NAMES.indexOf(name) >= 0) {\n    throw new SyntaxError(`invalid custom element name \"${name}\"`);\n  }\n}\n\n/**\n * Does win have a full Custom Elements registry?\n *\n * @param {!Window} win\n * @return {boolean}\n */\nfunction hasCustomElements(win) {\n  const {customElements} = win;\n\n  return !!(\n    customElements &&\n    customElements.define &&\n    customElements.get &&\n    customElements.whenDefined);\n}\n\n/**\n * Was HTMLElement already patched for this window?\n *\n * @param {!Window} win\n * @return {boolean}\n */\nfunction isPatched(win) {\n  const tag = win.HTMLElement.toString();\n  return tag.indexOf('[native code]') === -1;\n}\n\n/**\n * The public Custom Elements API.\n */\nclass CustomElementRegistry {\n  /**\n   * @param {!Window} win\n   * @param {!Registry} registry\n   */\n  constructor(win, registry) {\n    /**\n     * @const @private\n     */\n    this.win_ = win;\n\n    /**\n     * @const @private\n     */\n    this.registry_ = registry;\n\n    /**\n     * @type {!Object<string, DeferredDef>}\n     * @private\n     * @const\n     */\n    this.pendingDefines_ = this.win_.Object.create(null);\n  }\n\n  /**\n   * Register the custom element.\n   *\n   * @param {string} name\n   * @param {!CustomElementConstructorDef} ctor\n   * @param {!Object=} options\n   */\n  define(name, ctor, options) {\n    this.registry_.define(name, ctor, options);\n\n    // If anyone is waiting for this custom element to be defined, resolve\n    // their promise.\n    const pending = this.pendingDefines_;\n    const deferred = pending[name];\n    if (deferred) {\n      deferred.resolve();\n      delete pending[name];\n    }\n  }\n\n  /**\n   * Get the constructor of the (already defined) custom element.\n   *\n   * @param {string} name\n   * @return {!CustomElementConstructorDef|undefined}\n   */\n  get(name) {\n    const def = this.registry_.getByName(name);\n    if (def) {\n      return def.ctor;\n    }\n  }\n\n  /**\n   * Returns a promise that waits until the custom element is defined.\n   * If the custom element is already defined, returns a resolved promise.\n   *\n   * @param {string} name\n   * @return {!Promise<undefined>}\n   */\n  whenDefined(name) {\n    const {Promise, SyntaxError} = this.win_;\n    assertValidName(SyntaxError, name);\n\n    if (this.registry_.getByName(name)) {\n      return Promise.resolve();\n    }\n\n    const pending = this.pendingDefines_;\n    const deferred = pending[name];\n    if (deferred) {\n      return deferred.promise;\n    }\n\n    let resolve;\n    const promise = new /*OK*/Promise(res => resolve = res);\n    pending[name] = {\n      promise,\n      resolve,\n    };\n\n    return promise;\n  }\n\n  /**\n   * Upgrade all custom elements inside root.\n   *\n   * @param {!Node} root\n   */\n  upgrade(root) {\n    this.registry_.upgrade(root);\n  }\n}\n\n/**\n * This internal APIs necessary to run the CustomElementRegistry.\n * Since Registry is never exposed externally, all methods are actually\n * available on the instance.\n */\nclass Registry {\n  /**\n   * @param {!Window} win\n   */\n  constructor(win) {\n    /**\n     * @private @const\n     */\n    this.win_ = win;\n\n    /**\n     * @private @const\n     */\n    this.doc_ = win.document;\n\n    /**\n     * @type {!Object<string, !CustomElementDef>}\n     * @private\n     * @const\n     */\n    this.definitions_ = win.Object.create(null);\n\n    /**\n     * A up-to-date DOM selector for all custom elements.\n     * @type {string}\n     */\n    this.query_ = '';\n\n    /**\n     * The currently upgrading element.\n     * @private {Element}\n     */\n    this.current_ = null;\n  }\n\n  /**\n   * The currently-being-upgraded custom element.\n   *\n   * When an already created (through the DOM parsing APIs, or innerHTML)\n   * custom element node is being upgraded, we can't just create a new node\n   * (it's illegal in the spec). But we still need to run the custom element's\n   * constructor code on the node. We avoid this conundrum by running the\n   * constructor while returning this current node in the HTMLElement\n   * class constructor (the base class of all custom elements).\n   *\n   * @return {Element}\n   */\n  current() {\n    const current = this.current_;\n    this.current_ = null;\n    return current;\n  }\n\n  /**\n   * Finds the custom element definition by name.\n   *\n   * @param {string} name\n   * @return {CustomElementDef|undefined}\n   */\n  getByName(name) {\n    const definition = this.definitions_[name];\n    if (definition) {\n      return definition;\n    }\n  }\n\n  /**\n   * Finds the custom element definition by constructor instance.\n   *\n   * @param {CustomElementConstructorDef} ctor\n   * @return {CustomElementDef|undefined}\n   */\n  getByConstructor(ctor) {\n    const definitions = this.definitions_;\n\n    for (const name in definitions) {\n      const def = definitions[name];\n      if (def.ctor === ctor) {\n        return def;\n      }\n    }\n  }\n\n  /**\n   * Registers the custom element definition, and upgrades all elements by that\n   * name in the root document.\n   *\n   * @param {string} name\n   * @param {!CustomElementConstructorDef} ctor\n   * @param {!Object|undefined} options\n   */\n  define(name, ctor, options) {\n    const {Error, SyntaxError} = this.win_;\n\n    if (options) {\n      throw new Error('Extending native custom elements is not supported');\n    }\n\n    assertValidName(SyntaxError, name);\n\n    if (this.getByName(name) ||\n        this.getByConstructor(ctor)) {\n      throw new Error(`duplicate definition \"${name}\"`);\n    }\n\n    // TODO(jridgewell): Record connectedCallback, disconnectedCallback,\n    // adoptedCallback, attributeChangedCallback, and observedAttributes.\n    // TODO(jridgewell): If attributeChangedCallback, gather observedAttributes\n    this.definitions_[name] = {\n      name,\n      ctor,\n    };\n\n    this.observe_(name);\n    this.upgrade(this.doc_, name);\n  }\n\n  /**\n   * Upgrades custom elements descendants of root (but not including root).\n   *\n   * When called with an opt_query, it both upgrades and connects the custom\n   * elements (this is used during the custom element define algorithm).\n   *\n   * @param {!Node} root\n   * @param {string=} opt_query\n   */\n  upgrade(root, opt_query) {\n    // Only CustomElementRegistry.p.define provides a query (the newly defined\n    // custom element). In this case, we are both upgrading _and_ connecting\n    // the custom elements.\n    const newlyDefined = !!opt_query;\n    const query = opt_query || this.query_;\n    const upgradeCandidates = this.queryAll_(root, query);\n\n    for (let i = 0; i < upgradeCandidates.length; i++) {\n      const candidate = upgradeCandidates[i];\n      if (newlyDefined) {\n        this.connectedCallback_(candidate);\n      } else {\n        this.upgradeSelf(candidate);\n      }\n    }\n  }\n\n  /**\n   * Upgrades the custom element node, if a custom element has been registered\n   * by this name.\n   *\n   * @param {!Node} node\n   */\n  upgradeSelf(node) {\n    const def = this.getByName(node.localName);\n    if (!def) {\n      return;\n    }\n\n    this.upgradeSelf_(/** @type {!Element} */(node), def);\n  }\n\n  /**\n   * @param {!Node} root\n   * @param {string} query\n   * @return {!Array|!NodeList}\n   */\n  queryAll_(root, query) {\n    if (!query || !root.querySelectorAll) {\n      // Nothing to do...\n      return [];\n    }\n\n    return root.querySelectorAll(query);\n  }\n\n  /**\n   * Upgrades the (already created via DOM parsing) custom element.\n   *\n   * @param {!Element} node\n   * @param {!CustomElementDef} def\n   */\n  upgradeSelf_(node, def) {\n    const {ctor} = def;\n    if (node instanceof ctor) {\n      return;\n    }\n\n    // Despite how it looks, this is not a useless construction.\n    // HTMLElementPolyfill (the base class of all custom elements) will return\n    // the current node, allowing the custom element's subclass constructor to\n    // run on the node. The node itself is already constructed, so the return\n    // value is just the node.\n    this.current_ = node;\n    const el = new ctor();\n\n    if (el !== node) {\n      throw new this.win_.Error(\n          'Constructor illegally returned a different instance.');\n    }\n  }\n\n  /**\n   * Fires connectedCallback on the custom element, if it has one.\n   * This also upgrades the custom element, since it may not have been\n   * accessible via the root document before (a detached DOM tree).\n   *\n   * @param {!Node} node\n   */\n  connectedCallback_(node) {\n    const def = this.getByName(node.localName);\n    if (!def) {\n      return;\n    }\n    this.upgradeSelf_(/** @type {!Element} */(node), def);\n    // TODO(jridgewell): It may be appropriate to adoptCallback, if the node\n    // used to be in another doc.\n    // TODO(jridgewell): I should be calling the definitions connectedCallback\n    // with node as the context.\n    if (node.connectedCallback) {\n      node.connectedCallback();\n    }\n  }\n\n  /**\n   * Fires disconnectedCallback on the custom element, if it has one.\n   *\n   * @param {!Node} node\n   */\n  disconnectedCallback_(node) {\n    // TODO(jridgewell): I should be calling the definitions connectedCallback\n    // with node as the context.\n    if (node.disconnectedCallback) {\n      node.disconnectedCallback();\n    }\n  }\n\n  /**\n   * Records name as a registered custom element to observe.\n   *\n   * Starts the Mutation Observer if this is the first registered custom\n   * element. This is deferred until the first custom element is defined to\n   * speed up initial rendering of the page.\n   *\n   * Mutation Observers are conveniently available in every browser we care\n   * about. When a node is connected to the root document, all custom\n   * elements (including that node iteself) will be upgraded and call\n   * connectedCallback. When a node is disconnectedCallback from the root\n   * document, all custom elements will call disconnectedCallback.\n   *\n   * @param {string} name\n   */\n  observe_(name) {\n    if (this.query_) {\n      this.query_ += `,${name}`;\n      return;\n    }\n\n    this.query_ = name;\n\n    // The first registered name starts the mutation observer.\n    const observer = new this.win_.MutationObserver(records => {\n      if (records) {\n        this.handleRecords_(records);\n      }\n    });\n    observer.observe(this.doc_, {\n      childList: true,\n      subtree: true,\n    });\n  }\n\n  /**\n   * Handle all the Mutation Observer's Mutation Records.\n   * All added custom elements will be upgraded (if not already) and call\n   * connectedCallback. All removed custom elements will call\n   * disconnectedCallback.\n   *\n   * @param {!Array<!MutationRecord>} records\n   */\n  handleRecords_(records) {\n    for (let i = 0; i < records.length; i++) {\n      const record = records[i];\n      if (!record) {\n        continue;\n      }\n\n      const {addedNodes, removedNodes} = record;\n      for (let i = 0; i < addedNodes.length; i++) {\n        const node = addedNodes[i];\n        const connectedCandidates = this.queryAll_(node, this.query_);\n        this.connectedCallback_(node);\n        for (let i = 0; i < connectedCandidates.length; i++) {\n          this.connectedCallback_(connectedCandidates[i]);\n        }\n      }\n\n      for (let i = 0; i < removedNodes.length; i++) {\n        const node = removedNodes[i];\n        const disconnectedCandidates = this.queryAll_(node, this.query_);\n        this.disconnectedCallback_(node);\n        for (let i = 0; i < disconnectedCandidates.length; i++) {\n          this.disconnectedCallback_(disconnectedCandidates[i]);\n        }\n      }\n    }\n  }\n}\n\n/**\n * Does the polyfilling.\n * @param {!Window} win\n */\nfunction polyfill(win) {\n  const {HTMLElement, Element, Node, Document, Object, document} = win;\n  const {createElement, cloneNode, importNode} = document;\n\n  const registry = new Registry(win);\n  const customElements = new CustomElementRegistry(win, registry);\n\n  // Expose the custom element registry.\n  // Object.getOwnPropertyDescriptor(window, 'customElements')\n  // {get: ƒ, set: undefined, enumerable: true, configurable: true}\n  Object.defineProperty(win, 'customElements', {\n    enumerable: true,\n    configurable: true,\n    // writable: false,\n    value: customElements,\n  });\n\n  // Patch createElement to immediately upgrade the custom element.\n  // This has the added benefit that it avoids the \"already created but needs\n  // constructor code run\" chicken-and-egg problem.\n  Document.prototype.createElement = function createElementPolyfill(name) {\n    const def = registry.getByName(name);\n    if (def) {\n      return new def.ctor();\n    }\n    return createElement.apply(this, arguments);\n  };\n\n  // Patch importNode to immediately upgrade custom elements.\n  // TODO(jridgewell): Can fire adoptedCallback for cross doc imports.\n  Document.prototype.importNode = function importNodePolyfill() {\n    const imported = importNode.apply(this, arguments);\n    if (imported) {\n      registry.upgradeSelf(imported);\n      registry.upgrade(imported);\n    }\n    return imported;\n  };\n\n  // Patch cloneNode to immediately upgrade custom elements.\n  Node.prototype.cloneNode = function cloneNodePolyfill() {\n    const cloned = cloneNode.apply(this, arguments);\n    registry.upgradeSelf(cloned);\n    registry.upgrade(cloned);\n    return cloned;\n  };\n\n  // Patch the innerHTML setter to immediately upgrade custom elements.\n  // Note, this could technically fire connectedCallbacks if this node was\n  // connected, but we leave that to the Mutation Observer.\n  const innerHTMLDesc = Object.getOwnPropertyDescriptor(Element.prototype,\n      'innerHTML');\n  const innerHTMLSetter = innerHTMLDesc.set;\n  innerHTMLDesc.set = function(html) {\n    innerHTMLSetter.call(this, html);\n    registry.upgrade(this);\n  };\n  Object.defineProperty(Element.prototype, 'innerHTML', innerHTMLDesc);\n\n  /**\n   * You can't use the real HTMLElement constructor, because you can't subclass\n   * it without using native classes. So, mock its approximation using\n   * createElement.\n   */\n  function HTMLElementPolyfill() {\n    const {constructor} = this;\n\n    // If we're upgrading an already created custom element, we can't create\n    // another new node (by the spec, it must be the same node).\n    let el = registry.current();\n\n    // If there's not a already created custom element, we're being invoked via\n    // `new`ing the constructor.\n    //\n    // Technically, we could get here via createElement, but we patched that.\n    // If it the custom element was registered, the patch turned it into a\n    // `new` call.\n    // If it was not registered, the native createElement is used. And if\n    // native createElement is being used and we got to this code, we're really\n    // in an infinite loop (a native createElement call just below) so we've\n    // got bigger problems.\n    //\n    // So just take my word we got here via `new`.\n    if (!el) {\n      // The custom element definition is an invariant. If the custom element\n      // is registered, everything works. If it's not, it throws in the member\n      // property access (only defined custom elements can be directly\n      // constructed via `new`).\n      const def = registry.getByConstructor(constructor);\n      el = createElement.call(document, def.name);\n    }\n\n    // Finally, if the node was already constructed, we need to reset it's\n    // prototype to the custom element prototype. And if it wasn't already\n    // constructed, we created a new node via native createElement, and we need\n    // to reset it's prototype. Basically always reset the prototype.\n    Object.setPrototypeOf(el, constructor.prototype);\n    return el;\n  }\n  subClass(Object, HTMLElement, HTMLElementPolyfill);\n\n  // Expose the polyfilled HTMLElement constructor for everyone to extend from.\n  win.HTMLElement = HTMLElementPolyfill;\n}\n\n/**\n * Wraps HTMLElement in a Reflect.construct constructor, so that transpiled\n * classes can `_this = superClass.call(this)` during their construction.\n *\n * This is only used when Custom Elements v1 is already available _and_ we're\n * using transpiled classes (which use ES5 construction idioms).\n *\n * @param {!Window} win\n */\nfunction wrapHTMLElement(win) {\n  const {HTMLElement, Reflect, Object} = win;\n  /**\n   */\n  function HTMLElementWrapper() {\n    const ctor = /** @type {function(...?):?|undefined} */(\n      /** @type {!HTMLElement} */(this).constructor);\n\n    // Reflect.construct allows us to construct a new HTMLElement without using\n    // `new` (which will always fail because native HTMLElement is a restricted\n    // constructor).\n    return Reflect.construct(HTMLElement, [], ctor);\n  }\n  subClass(Object, HTMLElement, HTMLElementWrapper);\n\n  // Expose the wrapped HTMLElement constructor for everyone to extend from.\n  win.HTMLElement = HTMLElementWrapper;\n}\n\n/**\n * Setups up prototype inheritance\n *\n * @param {!Object} Object\n * @param {!Function} superClass\n * @param {!Function} subClass\n */\nfunction subClass(Object, superClass, subClass) {\n  // Object.getOwnPropertyDescriptor(superClass.prototype, 'constructor')\n  // {value: ƒ, writable: true, enumerable: false, configurable: true}\n  subClass.prototype = Object.create(superClass.prototype, {\n    constructor: {\n      // enumerable: false,\n      configurable: true,\n      writable: true,\n      value: subClass,\n    },\n  });\n}\n\n/**\n * Polyfills Custom Elements v1 API. This has 4 modes:\n *\n * 1. Custom elements v1 already supported, using native classes\n * 2. Custom elements v1 already supported, using transpiled classes\n * 3. Custom elements v1 not supported, using native classes\n * 4. Custom elements v1 not supported, using transpiled classes\n *\n * In mode 1, nothing is done. In mode 2, a minimal polyfill is used to support\n * extending the HTMLElement base class. In mode 3 and 4, a full polyfill is\n * done.\n *\n * @param {!Window} win\n * @param {!Function} ctor\n */\nexport function install(win, ctor) {\n  if (isPatched(win)) {\n    return;\n  }\n\n  let install = true;\n  let installWrapper = false;\n\n  if (hasCustomElements(win)) {\n    // If ctor is constructable without new, it's a function. That means it was\n    // compiled down, and we need to do the minimal polyfill because all you\n    // cannot extend HTMLElement without native classes.\n    try {\n      const {Object, Reflect} = win;\n\n      // \"Construct\" ctor using ES5 idioms\n      const instance = Object.create(ctor.prototype);\n      ctor.call(instance);\n\n      // If that succeeded, we're in a transpiled environment\n      // Let's find out if we can wrap HTMLElement and avoid a full patch.\n      installWrapper = !!(Reflect && Reflect.construct);\n    } catch (e) {\n\n      // The ctor threw when we constructed is via ES5, so it's a real class.\n      // We're ok to not install the polyfill.\n      install = false;\n    }\n  }\n\n  if (installWrapper) {\n    wrapHTMLElement(win);\n  } else if (install) {\n    polyfill(win);\n  }\n}\n","/**\n * Copyright 2016 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n/**\n * Polyfill for `document.contains()` method. Notice that according to spec\n * `document.contains` is inclusionary.\n * See https://developer.mozilla.org/en-US/docs/Web/API/Node/contains\n * @param {?Node} node\n * @return {boolean}\n * @this {Node}\n */\nfunction documentContainsPolyfill(node) {\n  // Per spec, \"contains\" method is inclusionary\n  // i.e. `node.contains(node) == true`. However, we still need to test\n  // equality to the document itself.\n  return node == this || this.documentElement.contains(node);\n}\n\n\n/**\n * Polyfills `HTMLDocument.contains` API.\n * @param {!Window} win\n */\nexport function install(win) {\n  // HTMLDocument is undefined in Internet Explorer 10, but it has Document,\n  // so we use that as a fallback.\n  const documentClass = win.HTMLDocument || win.Document;\n  if (!documentClass.prototype.contains) {\n    win.Object.defineProperty(documentClass.prototype, 'contains', {\n      enumerable: false,\n      configurable: true,\n      writable: true,\n      value: documentContainsPolyfill,\n    });\n  }\n}\n","/**\n * Copyright 2016 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n/**\n * Polyfill for `DOMTokenList.prototype.toggle(token, opt_force)` method. This\n * is specially important because IE does not support `opt_force` attribute. See\n * https://goo.gl/hgKNYY for details.\n * @param {string} token\n * @param {boolean=} opt_force\n * @this {DOMTokenList}\n * @return {boolean}\n */\nfunction domTokenListTogglePolyfill(token, opt_force) {\n  const remove = opt_force === undefined ? this.contains(token) : !opt_force;\n  if (remove) {\n    this.remove(token);\n    return false;\n  } else {\n    this.add(token);\n    return true;\n  }\n}\n\n\n/**\n * Polyfills `DOMTokenList.prototype.toggle` API in IE.\n * @param {!Window} win\n */\nexport function install(win) {\n  if (isIe(win) && win.DOMTokenList) {\n    win.Object.defineProperty(win.DOMTokenList.prototype, 'toggle', {\n      enumerable: false,\n      configurable: true,\n      writable: true,\n      value: domTokenListTogglePolyfill,\n    });\n  }\n}\n\n\n/**\n * Whether the current browser is a IE browser.\n * @param {!Window} win\n * @return {boolean}\n */\nfunction isIe(win) {\n  return /Trident|MSIE|IEMobile/i.test(win.navigator.userAgent);\n}\n","/**\n * Copyright 2016 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Parses the number x and returns its sign. For positive x returns 1, for\n * negative, -1. For 0 and -0, returns 0 and -0 respectively. For any number\n * that parses to NaN, returns NaN.\n *\n * @param {number} x\n * @return {number}\n */\nexport function sign(x) {\n  x = Number(x);\n\n  // If x is 0, -0, or NaN, return it.\n  if (!x) {\n    return x;\n  }\n\n  return x > 0 ? 1 : -1;\n}\n\n\n/**\n * Sets the Math.sign polyfill if it does not exist.\n * @param {!Window} win\n */\nexport function install(win) {\n  if (!win.Math.sign) {\n    win.Object.defineProperty(win.Math, 'sign', {\n      enumerable: false,\n      configurable: true,\n      writable: true,\n      value: sign,\n    });\n  }\n}\n","/**\n * Copyright 2016 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nconst {hasOwnProperty} = Object.prototype;\n\n/**\n * Copies values of all enumerable own properties from one or more source\n * objects (provided as extended arguments to the function) to a target object.\n *\n * @param {!Object} target\n * @param {...Object} var_args\n * @return {!Object}\n */\nexport function assign(target, var_args) {\n  if (target == null) {\n    throw new TypeError('Cannot convert undefined or null to object');\n  }\n\n  const output = Object(target);\n  for (let i = 1; i < arguments.length; i++) {\n    const source = arguments[i];\n    if (source != null) {\n      for (const key in source) {\n        if (hasOwnProperty.call(source, key)) {\n          output[key] = source[key];\n        }\n      }\n    }\n  }\n  return output;\n}\n\n\n/**\n * Sets the Object.assign polyfill if it does not exist.\n * @param {!Window} win\n */\nexport function install(win) {\n  if (!win.Object.assign) {\n    win.Object.defineProperty(win.Object, 'assign', {\n      enumerable: false,\n      configurable: true,\n      writable: true,\n      value: assign,\n    });\n  }\n}\n","/**\n * Copyright 2016 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nimport * as Promise from 'promise-pjs/promise';\n\n/**\n * Sets the Promise polyfill if it does not exist.\n * @param {!Window} win\n */\nexport function install(win) {\n  if (!win.Promise) {\n    win.Promise = /** @type {?} */ (Promise);\n    // In babel the * export is an Object with a default property.\n    // In closure compiler it is the Promise function itself.\n    if (Promise.default) {\n      win.Promise = Promise.default;\n    }\n    // We copy the individual static methods, because closure\n    // compiler flattens the polyfill namespace.\n    win.Promise.resolve = Promise.resolve;\n    win.Promise.reject = Promise.reject;\n    win.Promise.all = Promise.all;\n    win.Promise.race = Promise.race;\n  }\n}\n","/**\n * Copyright 2015 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Registration and getter functions for AMP services.\n *\n * Invariant: Service getters never return null for registered services.\n */\n\n// src/polyfills.js must be the first import.\nimport './polyfills'; // eslint-disable-line sort-imports-es6-autofix/sort-imports-es6\n\nimport {Deferred} from './utils/promise';\nimport {dev} from './log';\nimport {toWin} from './types';\n\n\n/**\n * Holds info about a service.\n * - obj: Actual service implementation when available.\n * - promise: Promise for the obj.\n * - resolve: Function to resolve the promise with the object.\n * - context: Argument for ctor, either a window or an ampdoc.\n * - ctor: Function that constructs and returns the service.\n * @typedef {{\n *   obj: (?Object),\n *   promise: (?Promise),\n *   resolve: (?function(!Object)),\n *   context: (?Window|?./service/ampdoc-impl.AmpDoc),\n *   ctor: (?function(new:Object, !Window)|\n *          ?function(new:Object, !./service/ampdoc-impl.AmpDoc)),\n * }}\n */\nlet ServiceHolderDef;\n\n\n/**\n * This interface provides a `dispose` method that will be called by\n * runtime when a service needs to be disposed of.\n * @interface\n */\nexport class Disposable {\n\n  /**\n   * Instructs the service to release any resources it might be holding. Can\n   * be called only once in the lifecycle of a service.\n   */\n  dispose() {}\n}\n\n\n/**\n * This interface provides a `adoptEmbedWindow` method that will be called by\n * runtime for a new embed window.\n * @interface\n */\nexport class EmbeddableService {\n\n  /**\n   * Instructs the service to adopt the embed window and add any necessary\n   * listeners and resources.\n   * @param {!Window} unusedEmbedWin\n   */\n  adoptEmbedWindow(unusedEmbedWin) {}\n}\n\n\n/**\n * Returns a service with the given id. Assumes that it has been registered\n * already.\n * @param {!Window} win\n * @param {string} id\n * @param {boolean=} opt_fallbackToTopWin\n * @return {Object} The service.\n */\nexport function getExistingServiceInEmbedScope(win, id, opt_fallbackToTopWin) {\n  // First, try to resolve via local (embed) window.\n  const local = getLocalExistingServiceForEmbedWinOrNull(win, id);\n  if (local) {\n    return local;\n  }\n  if (opt_fallbackToTopWin) {\n    return getService(win, id);\n  }\n  return null;\n}\n\n/**\n * Returns a service with the given id. Assumes that it has been constructed\n * already.\n *\n * Unlike most service getters, passing `Node` is necessary for some FIE-scope\n * services since sometimes we only have the FIE Document for context.\n *\n * @param {!Node|!./service/ampdoc-impl.AmpDoc} nodeOrDoc\n * @param {string} id\n * @param {boolean=} opt_fallbackToTopWin\n * @return {Object} The service.\n */\nexport function getExistingServiceForDocInEmbedScope(\n  nodeOrDoc, id, opt_fallbackToTopWin) {\n  // First, try to resolve via local (embed) window.\n  if (nodeOrDoc.nodeType) {\n    // If a node is passed, try to resolve via this node.\n    const win = toWin(/** @type {!Document} */ (\n      nodeOrDoc.ownerDocument || nodeOrDoc).defaultView);\n    const local = getLocalExistingServiceForEmbedWinOrNull(win, id);\n    if (local) {\n      return local;\n    }\n  }\n  // If an ampdoc is passed or fallback is allowed, continue resolving.\n  if (!nodeOrDoc.nodeType || opt_fallbackToTopWin) {\n    return getServiceForDocDeprecated(nodeOrDoc, id);\n  }\n  return null;\n}\n\n/**\n * Installs a service override on amp-doc level.\n * @param {!Window} embedWin\n * @param {string} id\n * @param {!Object} service The service.\n */\nexport function installServiceInEmbedScope(embedWin, id, service) {\n  const topWin = getTopWindow(embedWin);\n  dev().assert(embedWin != topWin,\n      'Service override can only be installed in embed window: %s', id);\n  dev().assert(!getLocalExistingServiceForEmbedWinOrNull(embedWin, id),\n      'Service override has already been installed: %s', id);\n  registerServiceInternal(embedWin, embedWin, id, () => service);\n  getServiceInternal(embedWin, id); // Force service to build.\n}\n\n/**\n * @param {!Window} embedWin\n * @param {string} id\n * @return {?Object}\n */\nfunction getLocalExistingServiceForEmbedWinOrNull(embedWin, id) {\n  // Note that this method currently only resolves against the given window.\n  // It does not try to go all the way up the parent window chain. We can change\n  // this in the future, but for now this gives us a better performance.\n  const topWin = getTopWindow(embedWin);\n  if (embedWin != topWin && isServiceRegistered(embedWin, id)) {\n    return getServiceInternal(embedWin, id);\n  } else {\n    return null;\n  }\n}\n\n/**\n * Registers a service given a class to be used as implementation.\n * @param {!Window} win\n * @param {string} id of the service.\n * @param {function(new:Object, !Window)} constructor\n * @param {boolean=} opt_instantiate Whether to immediately create the service\n */\nexport function registerServiceBuilder(win,\n  id,\n  constructor,\n  opt_instantiate) {\n  win = getTopWindow(win);\n  registerServiceInternal(win, win, id, constructor);\n  if (opt_instantiate) {\n    getServiceInternal(win, id);\n  }\n}\n\n\n/**\n * Returns a service and registers it given a class to be used as\n * implementation.\n * @param {!Node|!./service/ampdoc-impl.AmpDoc} nodeOrDoc\n * @param {string} id of the service.\n * @param {function(new:Object, !./service/ampdoc-impl.AmpDoc)} constructor\n * @param {boolean=} opt_instantiate Whether to immediately create the service\n */\nexport function registerServiceBuilderForDoc(nodeOrDoc,\n  id,\n  constructor,\n  opt_instantiate) {\n  const ampdoc = getAmpdoc(nodeOrDoc);\n  const holder = getAmpdocServiceHolder(ampdoc);\n  registerServiceInternal(holder, ampdoc, id, constructor);\n  if (opt_instantiate) {\n    getServiceInternal(holder, id);\n  }\n}\n\n\n/**\n * Returns a service for the given id and window (a per-window singleton). Users\n * should typically wrap this as a special purpose function (e.g.\n * `Services.vsyncFor(win)`) for type safety and because the factory should not\n * be passed around.\n * @param {!Window} win\n * @param {string} id of the service.\n * @template T\n * @return {T}\n */\nexport function getService(win, id) {\n  win = getTopWindow(win);\n  return getServiceInternal(win, id);\n}\n\n\n/**\n * Returns a promise for a service for the given id and window. Also expects an\n * element that has the actual implementation. The promise resolves when the\n * implementation loaded. Users should typically wrap this as a special purpose\n * function (e.g. `Services.vsyncFor(win)`) for type safety and because the\n * factory should not be passed around.\n * @param {!Window} win\n * @param {string} id of the service.\n * @return {!Promise<!Object>}\n */\nexport function getServicePromise(win, id) {\n  return getServicePromiseInternal(win, id);\n}\n\n\n/**\n * Returns a service or null with the given id.\n * @param {!Window} win\n * @param {string} id\n * @return {?Object} The service.\n */\nexport function getExistingServiceOrNull(win, id) {\n  win = getTopWindow(win);\n  if (isServiceRegistered(win, id)) {\n    return getServiceInternal(win, id);\n  } else {\n    return null;\n  }\n}\n\n\n/**\n * Like getServicePromise but returns null if the service was never registered.\n * @param {!Window} win\n * @param {string} id\n * @return {?Promise<!Object>}\n */\nexport function getServicePromiseOrNull(win, id) {\n  return getServicePromiseOrNullInternal(win, id);\n}\n\n\n/**\n * Returns a service for the given id and ampdoc (a per-ampdoc singleton).\n * Expects service `id` to be registered.\n * @param {!Element|!./service/ampdoc-impl.AmpDoc} elementOrAmpDoc\n * @param {string} id\n * @return {T}\n * @template T\n */\nexport function getServiceForDoc(elementOrAmpDoc, id) {\n  const ampdoc = getAmpdoc(elementOrAmpDoc);\n  const holder = getAmpdocServiceHolder(ampdoc);\n  return getServiceInternal(holder, id);\n}\n\n\n/**\n * tl;dr -- Use getServiceForDoc() instead of this.\n *\n * Privileged variant of getServiceForDoc() that accepts non-element params,\n * e.g. window.document. This is currently necessary for doc-level services\n * used in startup, e.g. Chunks. Eventually we want to remove this function\n * and have callers find the appropriate AmpDoc and use getServiceForDoc().\n *\n * @param {!Node|!./service/ampdoc-impl.AmpDoc} nodeOrDoc\n * @param {string} id\n * @return {T}\n * @template T\n */\nexport function getServiceForDocDeprecated(nodeOrDoc, id) {\n  const ampdoc = getAmpdoc(nodeOrDoc);\n  const holder = getAmpdocServiceHolder(ampdoc);\n  return getServiceInternal(holder, id);\n}\n\n\n/**\n * Returns a promise for a service for the given id and ampdoc. Also expects\n * a service that has the actual implementation. The promise resolves when\n * the implementation loaded.\n * @param {!Element|!./service/ampdoc-impl.AmpDoc} elementOrAmpDoc\n * @param {string} id\n * @return {!Promise<!Object>}\n */\nexport function getServicePromiseForDoc(elementOrAmpDoc, id) {\n  return getServicePromiseInternal(\n      getAmpdocServiceHolder(elementOrAmpDoc), id);\n}\n\n\n/**\n * Like getServicePromiseForDoc but returns null if the service was never\n * registered for this ampdoc.\n * @param {!Element|!./service/ampdoc-impl.AmpDoc} elementOrAmpDoc\n * @param {string} id\n * @return {?Promise<!Object>}\n */\nexport function getServicePromiseOrNullForDoc(elementOrAmpDoc, id) {\n  return getServicePromiseOrNullInternal(\n      getAmpdocServiceHolder(elementOrAmpDoc), id);\n}\n\n/**\n * Set the parent and top windows on a child window (friendly iframe).\n * @param {!Window} win\n * @param {!Window} parentWin\n */\nexport function setParentWindow(win, parentWin) {\n  win.__AMP_PARENT = parentWin;\n  win.__AMP_TOP = getTopWindow(parentWin);\n}\n\n\n/**\n * Returns the parent window for a child window (friendly iframe).\n * @param {!Window} win\n * @return {!Window}\n */\nexport function getParentWindow(win) {\n  return win.__AMP_PARENT || win;\n}\n\n\n/**\n * Returns the top window where AMP Runtime is installed for a child window\n * (friendly iframe).\n * @param {!Window} win\n * @return {!Window}\n */\nexport function getTopWindow(win) {\n  return win.__AMP_TOP || win;\n}\n\n\n/**\n * Returns the parent \"friendly\" iframe if the node belongs to a child window.\n * @param {!Node} node\n * @param {!Window} topWin\n * @return {?HTMLIFrameElement}\n */\nexport function getParentWindowFrameElement(node, topWin) {\n  const childWin = (node.ownerDocument || node).defaultView;\n  if (childWin && childWin != topWin && getTopWindow(childWin) == topWin) {\n    try {\n      return /** @type {?HTMLIFrameElement} */ (childWin.frameElement);\n    } catch (e) {\n      // Ignore the error.\n    }\n  }\n  return null;\n}\n\n\n/**\n * @param {!Node|!./service/ampdoc-impl.AmpDoc} nodeOrDoc\n * @return {!./service/ampdoc-impl.AmpDoc}\n */\nexport function getAmpdoc(nodeOrDoc) {\n  if (nodeOrDoc.nodeType) {\n    const win = toWin(/** @type {!Document} */ (\n      nodeOrDoc.ownerDocument || nodeOrDoc).defaultView);\n    return getAmpdocService(win).getAmpDoc(/** @type {!Node} */ (nodeOrDoc));\n  }\n  return /** @type {!./service/ampdoc-impl.AmpDoc} */ (nodeOrDoc);\n}\n\n\n/**\n * @param {!Node|!./service/ampdoc-impl.AmpDoc} nodeOrDoc\n * @return {!./service/ampdoc-impl.AmpDoc|!Window}\n */\nfunction getAmpdocServiceHolder(nodeOrDoc) {\n  const ampdoc = getAmpdoc(nodeOrDoc);\n  return ampdoc.isSingleDoc() ? ampdoc.win : ampdoc;\n}\n\n\n/**\n * This is essentially a duplicate of `ampdoc.js`, but necessary to avoid\n * circular dependencies.\n * @param {!Window} win\n * @return {!./service/ampdoc-impl.AmpDocService}\n */\nfunction getAmpdocService(win) {\n  return /** @type {!./service/ampdoc-impl.AmpDocService} */ (\n    getService(win, 'ampdoc'));\n}\n\n\n/**\n * Get service `id` from `holder`. Assumes the service\n * has already been registered.\n * @param {!Object} holder Object holding the service instance.\n * @param {string} id of the service.\n * @return {Object}\n * @template T\n */\nfunction getServiceInternal(holder, id) {\n  dev().assert(isServiceRegistered(holder, id),\n      `Expected service ${id} to be registered`);\n  const services = getServices(holder);\n  const s = services[id];\n  if (!s.obj) {\n    dev().assert(s.ctor, `Service ${id} registered without ctor nor impl.`);\n    dev().assert(s.context, `Service ${id} registered without context.`);\n    s.obj = new s.ctor(s.context);\n    dev().assert(s.obj, `Service ${id} constructed to null.`);\n    s.ctor = null;\n    s.context = null;\n    // The service may have been requested already, in which case we have a\n    // pending promise we need to fulfill.\n    if (s.resolve) {\n      s.resolve(s.obj);\n    }\n  }\n  return s.obj;\n}\n\n/**\n * @param {!Object} holder Object holding the service instance.\n * @param {!Window|!./service/ampdoc-impl.AmpDoc} context Win or AmpDoc.\n * @param {string} id of the service.\n * @param {?function(new:Object, !Window)|?function(new:Object, !./service/ampdoc-impl.AmpDoc)} ctor Constructor function to new the service. Called with context.\n */\nfunction registerServiceInternal(holder, context, id, ctor) {\n  const services = getServices(holder);\n  let s = services[id];\n\n  if (!s) {\n    s = services[id] = {\n      obj: null,\n      promise: null,\n      resolve: null,\n      context: null,\n      ctor: null,\n    };\n  }\n\n  if (s.ctor || s.obj) {\n    // Service already registered.\n    return;\n  }\n\n  s.ctor = ctor;\n  s.context = context;\n\n  // The service may have been requested already, in which case there is a\n  // pending promise that needs to fulfilled.\n  if (s.resolve) {\n    // getServiceInternal will resolve the promise.\n    getServiceInternal(holder, id);\n  }\n}\n\n/**\n * @param {!Object} holder\n * @param {string} id of the service.\n * @return {!Promise<!Object>}\n */\nfunction getServicePromiseInternal(holder, id) {\n  const cached = getServicePromiseOrNullInternal(holder, id);\n  if (cached) {\n    return cached;\n  }\n  // Service is not registered.\n\n  // TODO(@cramforce): Add a check that if the element is eventually registered\n  // that the service is actually provided and this promise resolves.\n  const deferred = new Deferred();\n  const {promise, resolve} = deferred;\n\n  const services = getServices(holder);\n  services[id] = {\n    obj: null,\n    promise,\n    resolve,\n    context: null,\n    ctor: null,\n  };\n  return promise;\n}\n\n\n/**\n * Returns a promise for service `id` if the service has been registered\n * on `holder`.\n * @param {!Object} holder\n * @param {string} id of the service.\n * @return {?Promise<!Object>}\n */\nfunction getServicePromiseOrNullInternal(holder, id) {\n  const services = getServices(holder);\n  const s = services[id];\n  if (s) {\n    if (s.promise) {\n      return s.promise;\n    } else {\n      // Instantiate service if not already instantiated.\n      getServiceInternal(holder, id);\n      return s.promise = Promise.resolve(/** @type {!Object} */ (s.obj));\n    }\n  }\n  return null;\n}\n\n\n/**\n * Returns the object that holds the services registered in a holder.\n * @param {!Object} holder\n * @return {!Object<string,!ServiceHolderDef>}\n */\nfunction getServices(holder) {\n  let {services} = holder;\n  if (!services) {\n    services = holder.services = {};\n  }\n  return services;\n}\n\n\n/**\n * Whether the specified service implements `Disposable` interface.\n * @param {!Object} service\n * @return {boolean}\n */\nexport function isDisposable(service) {\n  return typeof service.dispose == 'function';\n}\n\n\n/**\n * Asserts that the specified service implements `Disposable` interface and\n * typecasts the instance to `Disposable`.\n * @param {!Object} service\n * @return {!Disposable}\n */\nexport function assertDisposable(service) {\n  dev().assert(isDisposable(service), 'required to implement Disposable');\n  return /** @type {!Disposable} */ (service);\n}\n\n\n/**\n * Disposes all disposable (implements `Disposable` interface) services in\n * ampdoc scope.\n * @param {!./service/ampdoc-impl.AmpDoc} ampdoc\n */\nexport function disposeServicesForDoc(ampdoc) {\n  disposeServicesInternal(ampdoc);\n}\n\n\n/**\n * Disposes all disposable (implements `Disposable` interface) services in\n * embed scope.\n * @param {!Window} embedWin\n */\nexport function disposeServicesForEmbed(embedWin) {\n  disposeServicesInternal(embedWin);\n}\n\n\n/**\n * @param {!Object} holder Object holding the service instances.\n */\nfunction disposeServicesInternal(holder) {\n  // TODO(dvoytenko): Consider marking holder as destroyed for later-arriving\n  // service to be canceled automatically.\n  const services = getServices(holder);\n  for (const id in services) {\n    if (!Object.prototype.hasOwnProperty.call(services, id)) {\n      continue;\n    }\n    const serviceHolder = services[id];\n    if (serviceHolder.obj) {\n      disposeServiceInternal(id, serviceHolder.obj);\n    } else if (serviceHolder.promise) {\n      serviceHolder.promise.then(\n          instance => disposeServiceInternal(id, instance));\n    }\n  }\n}\n\n\n/**\n * @param {string} id\n * @param {!Object} service\n */\nfunction disposeServiceInternal(id, service) {\n  if (!isDisposable(service)) {\n    return;\n  }\n  try {\n    assertDisposable(service).dispose();\n  } catch (e) {\n    // Ensure that a failure to dispose a service does not disrupt other\n    // services.\n    dev().error('SERVICE', 'failed to dispose service', id, e);\n  }\n}\n\n\n/**\n * Whether the specified service implements `EmbeddableService` interface.\n * @param {!Object} service\n * @return {boolean}\n */\nexport function isEmbeddable(service) {\n  return typeof service.adoptEmbedWindow == 'function';\n}\n\n\n/**\n * Adopts an embeddable (implements `EmbeddableService` interface) service\n * in embed scope.\n * @param {!Window} embedWin\n * @param {string} serviceId\n */\nexport function adoptServiceForEmbed(embedWin, serviceId) {\n  const adopted = adoptServiceForEmbedIfEmbeddable(embedWin, serviceId);\n  dev().assert(adopted, `Service ${serviceId} not found on parent ` +\n      'or doesn\\'t implement EmbeddableService.');\n}\n\n\n/**\n * Adopts an embeddable (implements `EmbeddableService` interface) service\n * in embed scope.\n * @param {!Window} embedWin\n * @param {string} serviceId\n * @return {boolean}\n */\nexport function adoptServiceForEmbedIfEmbeddable(embedWin, serviceId) {\n  const frameElement = /** @type {!Node} */ (dev().assert(\n      embedWin.frameElement,\n      'frameElement not found for embed'));\n  const ampdoc = getAmpdoc(frameElement);\n  const holder = getAmpdocServiceHolder(ampdoc);\n  if (!isServiceRegistered(holder, serviceId)) {\n    return false;\n  }\n  const service = getServiceForDocDeprecated(frameElement, serviceId);\n  if (!isEmbeddable(service)) {\n    return false;\n  }\n  service.adoptEmbedWindow(embedWin);\n  return true;\n}\n\n\n/**\n * Resets a single service, so it gets recreated on next getService invocation.\n * @param {!Object} holder\n * @param {string} id of the service.\n */\nexport function resetServiceForTesting(holder, id) {\n  if (holder.services) {\n    holder.services[id] = null;\n  }\n}\n\n/**\n * @param {!Object} holder Object holding the service instance.\n * @param {string} id of the service.\n * @return {boolean}\n */\nfunction isServiceRegistered(holder, id) {\n  const service = holder.services && holder.services[id];\n  // All registered services must have an implementation or a constructor.\n  return !!(service && (service.ctor || service.obj));\n}\n","/**\n * Copyright 2017 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  getAmpdoc,\n  getExistingServiceForDocInEmbedScope,\n  getExistingServiceOrNull,\n  getService,\n  getServiceForDoc,\n  getServiceForDocDeprecated,\n  getServicePromiseForDoc,\n} from './service';\nimport {\n  getElementServiceForDoc,\n  getElementServiceIfAvailable,\n  getElementServiceIfAvailableForDoc,\n  getElementServiceIfAvailableForDocInEmbedScope,\n} from './element-service';\n\n/** @typedef {!../extensions/amp-subscriptions/0.1/amp-subscriptions.SubscriptionService} */\nexport let SubscriptionService;\n\nexport class Services {\n  /**\n   * Hint: Add extensions folder path to compile.js with\n   * warnings cannot find modules.\n   */\n\n  /**\n   * Returns a promise for the Access service.\n   * @param {!Element|!./service/ampdoc-impl.AmpDoc} elementOrAmpDoc\n   * @return {!Promise<!../extensions/amp-access/0.1/amp-access.AccessService>}\n   */\n  static accessServiceForDoc(elementOrAmpDoc) {\n    return (/** @type {!Promise<!../extensions/amp-access/0.1/amp-access.AccessService>} */ (\n      getElementServiceForDoc(elementOrAmpDoc, 'access', 'amp-access')));\n  }\n\n  /**\n   * Returns a promise for the Access service or a promise for null if the\n   * service is not available on the current page.\n   * @param {!Element|!./service/ampdoc-impl.AmpDoc} elementOrAmpDoc\n   * @return {!Promise<?../extensions/amp-access/0.1/amp-access.AccessService>}\n   */\n  static accessServiceForDocOrNull(elementOrAmpDoc) {\n    return (/** @type {!Promise<?../extensions/amp-access/0.1/amp-access.AccessService>} */ (\n      getElementServiceIfAvailableForDoc(elementOrAmpDoc, 'access',\n          'amp-access')));\n  }\n\n  /**\n   * Returns a promise for the Subscriptions service.\n   * @param {!Element|!./service/ampdoc-impl.AmpDoc} elementOrAmpDoc\n   * @return {!Promise<!SubscriptionService>}\n   */\n  static subscriptionsServiceForDoc(elementOrAmpDoc) {\n    return (/** @type {!Promise<!SubscriptionService>} */ (\n      getElementServiceForDoc(elementOrAmpDoc, 'subscriptions',\n          'amp-subscriptions')));\n  }\n\n  /**\n   * Returns a promise for the Subscriptions service.\n   * @param {!Element|!./service/ampdoc-impl.AmpDoc} elementOrAmpDoc\n   * @return {!Promise<?SubscriptionService>}\n   */\n  static subscriptionsServiceForDocOrNull(elementOrAmpDoc) {\n    return (/** @type {!Promise<?SubscriptionService>} */ (\n      getElementServiceIfAvailableForDoc(elementOrAmpDoc, 'subscriptions',\n          'amp-subscriptions')));\n  }\n\n  /**\n   * Unlike most service getters, passing `Node` is necessary for some FIE-scope\n   * services since sometimes we only have the FIE Document for context.\n   * @param {!Node|!./service/ampdoc-impl.AmpDoc} nodeOrDoc\n   * @return {!./service/action-impl.ActionService}\n   */\n  static actionServiceForDoc(nodeOrDoc) {\n    return /** @type {!./service/action-impl.ActionService} */ (\n      getExistingServiceForDocInEmbedScope(\n          nodeOrDoc, 'action', /* opt_fallbackToTopWin */ true));\n  }\n\n  /**\n   * @param {!Element|!./service/ampdoc-impl.AmpDoc} elementOrAmpDoc\n   * @return {!Promise<!Activity>}\n   */\n  static activityForDoc(elementOrAmpDoc) {\n    return /** @type {!Promise<!Activity>} */ (\n      getElementServiceForDoc(elementOrAmpDoc, 'activity', 'amp-analytics'));\n  }\n\n  /**\n   * Returns the global instance of the `AmpDocService` service that can be\n   * used to resolve an ampdoc for any node: either in the single-doc or\n   * shadow-doc environment.\n   * @param {!Window} window\n   * @return {!./service/ampdoc-impl.AmpDocService}\n   */\n  static ampdocServiceFor(window) {\n    return /** @type {!./service/ampdoc-impl.AmpDocService} */ (\n      getService(window, 'ampdoc'));\n  }\n\n  /**\n   * Returns the AmpDoc for the specified context node.\n   * @param {!Element|!./service/ampdoc-impl.AmpDoc} elementOrAmpDoc\n   * @return {!./service/ampdoc-impl.AmpDoc}\n   */\n  static ampdoc(elementOrAmpDoc) {\n    return getAmpdoc(elementOrAmpDoc);\n  }\n\n  /**\n   * @param {!Element|!./service/ampdoc-impl.AmpDoc} elementOrAmpDoc\n   * @param {boolean=} loadAnalytics\n   * @return {!Promise<!../extensions/amp-analytics/0.1/instrumentation.InstrumentationService>}\n   */\n  static analyticsForDoc(elementOrAmpDoc, loadAnalytics = false) {\n    if (loadAnalytics) {\n      // Get Extensions service and force load analytics extension.\n      const ampdoc = getAmpdoc(elementOrAmpDoc);\n      Services.extensionsFor(ampdoc.win)./*OK*/installExtensionForDoc(\n          ampdoc, 'amp-analytics');\n    }\n    return /** @type {!Promise<!../extensions/amp-analytics/0.1/instrumentation.InstrumentationService>} */ (\n      getElementServiceForDoc(elementOrAmpDoc, 'amp-analytics-instrumentation',\n          'amp-analytics'));\n  }\n\n  /**\n   * @param {!Element|!./service/ampdoc-impl.AmpDoc} elementOrAmpDoc\n   * @return {!Promise<?../extensions/amp-analytics/0.1/instrumentation.InstrumentationService>}\n   */\n  static analyticsForDocOrNull(elementOrAmpDoc) {\n    return /** @type {!Promise<?../extensions/amp-analytics/0.1/instrumentation.InstrumentationService>} */ (\n      getElementServiceIfAvailableForDoc(elementOrAmpDoc,\n          'amp-analytics-instrumentation', 'amp-analytics'));\n  }\n\n  /**\n   * @param {!Window} window\n   * @return {!./service/batched-xhr-impl.BatchedXhr}\n   */\n  static batchedXhrFor(window) {\n    return /** @type {!./service/batched-xhr-impl.BatchedXhr} */ (\n      getService(window, 'batched-xhr'));\n  }\n\n  /**\n   * @param {!Element|!./service/ampdoc-impl.AmpDoc} elementOrAmpDoc\n   * @return {!Promise<?../extensions/amp-bind/0.1/bind-impl.Bind>}\n   */\n  static bindForDocOrNull(elementOrAmpDoc) {\n    return /** @type {!Promise<?../extensions/amp-bind/0.1/bind-impl.Bind>} */ (\n      getElementServiceIfAvailableForDocInEmbedScope(\n          elementOrAmpDoc, 'bind', 'amp-bind'));\n  }\n\n  /**\n   * @param {!Element|!./service/ampdoc-impl.AmpDoc} elementOrAmpDoc\n   * @return {!Promise<!./service/cid-impl.Cid>}\n   */\n  static cidForDoc(elementOrAmpDoc) {\n    return /** @type {!Promise<!./service/cid-impl.Cid>} */ (\n      getServicePromiseForDoc(elementOrAmpDoc, 'cid'));\n  }\n\n  /**\n   * @param {!Element|!./service/ampdoc-impl.AmpDoc} elementOrAmpDoc\n   * @return {!./service/navigation.Navigation}\n   */\n  static navigationForDoc(elementOrAmpDoc) {\n    return /** @type {!./service/navigation.Navigation} */ (\n      getServiceForDoc(elementOrAmpDoc, 'navigation'));\n  }\n\n  /**\n   * @param {!Window} window\n   * @return {!./service/crypto-impl.Crypto}\n   */\n  static cryptoFor(window) {\n    return (/** @type {!./service/crypto-impl.Crypto} */ (\n      getService(window, 'crypto')));\n  }\n\n  /**\n   * @param {!Element|!./service/ampdoc-impl.AmpDoc} elementOrAmpDoc\n   * @return {!./service/document-info-impl.DocumentInfoDef} Info about the doc\n   */\n  static documentInfoForDoc(elementOrAmpDoc) {\n    return /** @type {!./service/document-info-impl.DocInfo} */ (\n      getServiceForDoc(elementOrAmpDoc, 'documentInfo')).get();\n  }\n\n  /**\n   * @param {!Window} window\n   * @return {!./service/document-state.DocumentState}\n   */\n  static documentStateFor(window) {\n    return getService(window, 'documentState');\n  }\n\n  /**\n   * @param {!Window} window\n   * @return {!./service/extensions-impl.Extensions}\n   */\n  static extensionsFor(window) {\n    return /** @type {!./service/extensions-impl.Extensions} */ (\n      getService(window, 'extensions'));\n  }\n\n  /**\n   * Returns service implemented in service/history-impl.\n   * @param {!Element|!./service/ampdoc-impl.AmpDoc} elementOrAmpDoc\n   * @return {!./service/history-impl.History}\n   */\n  static historyForDoc(elementOrAmpDoc) {\n    return /** @type {!./service/history-impl.History} */ (\n      getServiceForDoc(elementOrAmpDoc, 'history'));\n  }\n\n  /**\n   * @param {!Window} win\n   * @return {!./input.Input}\n   */\n  static inputFor(win) {\n    return getService(win, 'input');\n  }\n\n  /**\n   * @param {!Element|!./service/ampdoc-impl.AmpDoc} elementOrAmpDoc\n   * @return {!./service/layers-impl.LayoutLayers}\n   */\n  static layersForDoc(elementOrAmpDoc) {\n    return /** @type {!./service/layers-impl.LayoutLayers} */ (\n      getServiceForDoc(elementOrAmpDoc, 'layers'));\n  }\n\n  /**\n   * @param {!Window} window\n   * @return {!./service/performance-impl.Performance}\n   */\n  static performanceFor(window) {\n    return /** @type {!./service/performance-impl.Performance}*/ (\n      getService(window, 'performance'));\n  }\n\n  /**\n   * @param {!Window} window\n   * @return {!./service/performance-impl.Performance}\n   */\n  static performanceForOrNull(window) {\n    return /** @type {!./service/performance-impl.Performance}*/ (\n      getExistingServiceOrNull(window, 'performance'));\n  }\n\n  /**\n   * @param {!Window} window\n   * @return {!./service/platform-impl.Platform}\n   */\n  static platformFor(window) {\n    return /** @type {!./service/platform-impl.Platform} */ (\n      getService(window, 'platform'));\n  }\n\n  /**\n   * Uses getServiceForDocDeprecated() since Resources is a startup service.\n   * @param {!Node|!./service/ampdoc-impl.AmpDoc} nodeOrDoc\n   * @return {!./service/resources-impl.Resources}\n   */\n  static resourcesForDoc(nodeOrDoc) {\n    return /** @type {!./service/resources-impl.Resources} */ (\n      getServiceForDocDeprecated(nodeOrDoc, 'resources'));\n  }\n\n  /**\n   * @param {!Window} win\n   * @return {?Promise<?{incomingFragment: string, outgoingFragment: string}>}\n   */\n  static shareTrackingForOrNull(win) {\n    return (/** @type {!Promise<?{incomingFragment: string, outgoingFragment: string}>} */ (\n      getElementServiceIfAvailable(win, 'share-tracking',\n          'amp-share-tracking', true)));\n  }\n\n  /**\n   * @param {!Window} win\n   * @return {?Promise<?../extensions/amp-story/1.0/variable-service.StoryVariableDef>}\n   */\n  static storyVariableServiceForOrNull(win) {\n    return (\n    /** @type {!Promise<?../extensions/amp-story/1.0/variable-service.StoryVariableDef>} */\n      (getElementServiceIfAvailable(win, 'story-variable', 'amp-story',\n          true)));\n  }\n\n  /**\n   * Version of the story store service depends on which version of amp-story\n   * the publisher is loading. They all have the same implementation.\n   * @param {!Window} win\n   * @return {?Promise<?../extensions/amp-story/1.0/amp-story-store-service.AmpStoryStoreService|?../extensions/amp-story/0.1/amp-story-store-service.AmpStoryStoreService>}\n   */\n  static storyStoreServiceForOrNull(win) {\n    return (\n    /** @type {!Promise<?../extensions/amp-story/1.0/amp-story-store-service.AmpStoryStoreService|?../extensions/amp-story/0.1/amp-story-store-service.AmpStoryStoreService>} */\n      (getElementServiceIfAvailable(win, 'story-store', 'amp-story')));\n  }\n\n  /**\n   * @param {!Window} win\n   * @return {?../extensions/amp-story/1.0/amp-story-store-service.AmpStoryStoreService}\n   */\n  static storyStoreService(win) {\n    return (/** @type {?../extensions/amp-story/1.0/amp-story-store-service.AmpStoryStoreService} */\n      (getExistingServiceOrNull(win, 'story-store')));\n  }\n\n  /**\n   * @param {!Window} win\n   * @return {?../extensions/amp-story/1.0/amp-story-request-service.AmpStoryRequestService}\n   */\n  static storyRequestService(win) {\n    return (/** @type {?../extensions/amp-story/1.0/amp-story-request-service.AmpStoryRequestService} */\n      (getExistingServiceOrNull(win, 'story-request')));\n  }\n\n  /**\n   * @param {!Window} win\n   * @return {!Promise<?../extensions/amp-story/1.0/localization.LocalizationService>}\n   */\n  static localizationServiceForOrNull(win) {\n    return (\n    /** @type {!Promise<?../extensions/amp-story/1.0/localization.LocalizationService>} */\n      (getElementServiceIfAvailable(win, 'localization', 'amp-story', true)));\n  }\n\n  /**\n   * @param {!Window} win\n   * @return {!../extensions/amp-story/1.0/localization.LocalizationService}\n   */\n  static localizationService(win) {\n    return getService(win, 'localization');\n  }\n\n  /**\n   * TODO(#14357): Remove this when amp-story:0.1 is deprecated.\n   * @param {!Window} win\n   * @return {!../extensions/amp-story/0.1/amp-story-store-service.AmpStoryStoreService}\n   */\n  static storyStoreServiceV01(win) {\n    return getService(win, 'story-store');\n  }\n\n  /**\n   * TODO(#14357): Remove this when amp-story:0.1 is deprecated.\n   * @param {!Window} win\n   * @return {!../extensions/amp-story/0.1/amp-story-request-service.AmpStoryRequestService}\n   */\n  static storyRequestServiceV01(win) {\n    return getService(win, 'story-request-v01');\n  }\n\n  /**\n   * TODO(#14357): Remove this when amp-story:0.1 is deprecated.\n   * @param {!Window} win\n   * @return {!Promise<?../extensions/amp-story/0.1/localization.LocalizationService>}\n   */\n  static localizationServiceForOrNullV01(win) {\n    return (\n    /** @type {!Promise<?../extensions/amp-story/0.1/localization.LocalizationService>} */\n      (getElementServiceIfAvailable(win, 'localization-v01', 'amp-story',\n          true)));\n  }\n\n  /**\n   * TODO(#14357): Remove this when amp-story:0.1 is deprecated.\n   * @param {!Window} win\n   * @return {!../extensions/amp-story/0.1/localization.LocalizationService}\n   */\n  static localizationServiceV01(win) {\n    return getService(win, 'localization-v01');\n  }\n\n  /**\n   * @param {!Window} win\n   * @return {?Promise<?../extensions/amp-viewer-integration/0.1/variable-service.ViewerIntegrationVariableDef>}\n   */\n  static viewerIntegrationVariableServiceForOrNull(win) {\n    return (\n    /** @type {!Promise<?../extensions/amp-viewer-integration/0.1/variable-service.ViewerIntegrationVariableDef>} */\n      (getElementServiceIfAvailable(win, 'viewer-integration-variable',\n          'amp-viewer-integration', true)));\n  }\n\n  /**\n   * @param {!Element|!./service/ampdoc-impl.AmpDoc} elementOrAmpDoc\n   * @return {!Promise<!../extensions/amp-animation/0.1/web-animation-service.WebAnimationService>}\n   */\n  static webAnimationServiceFor(elementOrAmpDoc) {\n    return (/** @type {!Promise<!../extensions/amp-animation/0.1/web-animation-service.WebAnimationService>} */\n      (getElementServiceForDoc(\n          elementOrAmpDoc, 'web-animation', 'amp-animation')));\n  }\n\n  /**\n   * @param {!Element|!./service/ampdoc-impl.AmpDoc} elementOrAmpDoc\n   * @return {!Promise<!./service/storage-impl.Storage>}\n   */\n  static storageForDoc(elementOrAmpDoc) {\n    return /** @type {!Promise<!./service/storage-impl.Storage>} */ (\n      getServicePromiseForDoc(elementOrAmpDoc, 'storage'));\n  }\n\n  /**\n   * @param {!Window} window\n   * @return {!./service/template-impl.Templates}\n   */\n  static templatesFor(window) {\n    return /** @type {!./service/template-impl.Templates} */ (\n      getService(window, 'templates'));\n  }\n\n  /**\n   * @param {!Window} window\n   * @return {!./service/timer-impl.Timer}\n   */\n  static timerFor(window) {\n    return /** @type {!./service/timer-impl.Timer} */ (\n      getService(window, 'timer'));\n  }\n\n  /**\n   * Unlike most service getters, passing `Node` is necessary for some FIE-scope\n   * services since sometimes we only have the FIE Document for context.\n   * @param {!Node|!./service/ampdoc-impl.AmpDoc} nodeOrDoc\n   * @return {!./service/url-replacements-impl.UrlReplacements}\n   */\n  static urlReplacementsForDoc(nodeOrDoc) {\n    return /** @type {!./service/url-replacements-impl.UrlReplacements} */ (\n      getExistingServiceForDocInEmbedScope(\n          nodeOrDoc, 'url-replace', /* opt_fallbackToTopWin */ true));\n  }\n\n  /**\n   * @param {!Element|!./service/ampdoc-impl.AmpDoc} elementOrAmpDoc\n   * @return {!Promise<!../extensions/amp-user-notification/0.1/amp-user-notification.UserNotificationManager>}\n   */\n  static userNotificationManagerForDoc(elementOrAmpDoc) {\n    return (/** @type {!Promise<!../extensions/amp-user-notification/0.1/amp-user-notification.UserNotificationManager>} */\n      (getElementServiceForDoc(elementOrAmpDoc, 'userNotificationManager',\n          'amp-user-notification')));\n  }\n\n  /**\n   * Returns a promise for the consentPolicy Service or a promise for null if\n   * the service is not available on the current page.\n   * @param {!Element|!./service/ampdoc-impl.AmpDoc} elementOrAmpDoc\n   * @return {!Promise<?../extensions/amp-consent/0.1/consent-policy-manager.ConsentPolicyManager>}\n   */\n  static consentPolicyServiceForDocOrNull(elementOrAmpDoc) {\n    return (/** @type {!Promise<?../extensions/amp-consent/0.1/consent-policy-manager.ConsentPolicyManager>} */\n      (getElementServiceIfAvailableForDoc(elementOrAmpDoc,\n          'consentPolicyManager', 'amp-consent')));\n  }\n\n  /**\n   * Returns a promise for the geo service or a promise for null if\n   * the service is not available on the current page.\n   * @param {!Element|!./service/ampdoc-impl.AmpDoc} elementOrAmpDoc\n   * @return {!Promise<?../extensions/amp-geo/0.1/amp-geo.GeoDef>}\n   */\n  static geoForDocOrNull(elementOrAmpDoc) {\n    return /** @type {!Promise<?../extensions/amp-geo/0.1/amp-geo.GeoDef>} */ (\n      getElementServiceIfAvailableForDoc(\n          elementOrAmpDoc, 'geo', 'amp-geo', true));\n  }\n\n  /**\n   * Unlike most service getters, passing `Node` is necessary for some FIE-scope\n   * services since sometimes we only have the FIE Document for context.\n   * @param {!Node|!./service/ampdoc-impl.AmpDoc} nodeOrDoc\n   * @return {!./service/url-impl.Url}\n   */\n  static urlForDoc(nodeOrDoc) {\n    return /** @type {!./service/url-impl.Url} */ (\n      getExistingServiceForDocInEmbedScope(\n          nodeOrDoc, 'url', /* opt_fallbackToTopWin */ true));\n  }\n\n  /**\n   * Returns a promise for the experiment variants or a promise for null if it\n   * is not available on the current page.\n   * @param {!Window} win\n   * @return {!Promise<?Object<string>>}\n   */\n  static variantForOrNull(win) {\n    return /** @type {!Promise<?Object<string>>} */ (\n      getElementServiceIfAvailable(win, 'variant', 'amp-experiment', true));\n  }\n\n  /**\n   * @param {!Element|!./service/ampdoc-impl.AmpDoc} elementOrAmpDoc\n   * @return {!./service/video-service-interface.VideoServiceInterface}\n   */\n  static videoManagerForDoc(elementOrAmpDoc) {\n    return (\n      /** @type {!./service/video-service-interface.VideoServiceInterface} */ (\n        getServiceForDoc(elementOrAmpDoc, 'video-manager')));\n  }\n\n  /**\n   * Uses getServiceForDocDeprecated() since Viewer is a startup service.\n   * @param {!Node|!./service/ampdoc-impl.AmpDoc} nodeOrDoc\n   * @return {!./service/viewer-impl.Viewer}\n   */\n  static viewerForDoc(nodeOrDoc) {\n    return /** @type {!./service/viewer-impl.Viewer} */ (\n      getServiceForDocDeprecated(nodeOrDoc, 'viewer'));\n  }\n\n  /**\n   * Returns promise for the viewer. This is an unusual case and necessary only\n   * for services that need reference to the viewer before it has been\n   * initialized. Most of the code, however, just should use `viewerForDoc`.\n   * @param {!Element|!./service/ampdoc-impl.AmpDoc} elementOrAmpDoc\n   * @return {!Promise<!./service/viewer-impl.Viewer>}\n   */\n  static viewerPromiseForDoc(elementOrAmpDoc) {\n    return /** @type {!Promise<!./service/viewer-impl.Viewer>} */ (\n      getServicePromiseForDoc(elementOrAmpDoc, 'viewer'));\n  }\n\n  /**\n   * @param {!Window} window\n   * @return {!./service/vsync-impl.Vsync}\n   */\n  static vsyncFor(window) {\n    return /** @type {!./service/vsync-impl.Vsync} */ (\n      getService(window, 'vsync'));\n  }\n\n  /**\n   * Uses getServiceForDocDeprecated() since Viewport is a startup service.\n   * @param {!Node|!./service/ampdoc-impl.AmpDoc} nodeOrDoc\n   * @return {!./service/viewport/viewport-impl.Viewport}\n   */\n  static viewportForDoc(nodeOrDoc) {\n    return /** @type {!./service/viewport/viewport-impl.Viewport} */ (\n      getServiceForDocDeprecated(nodeOrDoc, 'viewport'));\n  }\n\n  /**\n   * @param {!Window} window\n   * @return {!./service/xhr-impl.Xhr}\n   */\n  static xhrFor(window) {\n    return /** @type {!./service/xhr-impl.Xhr} */ (getService(window, 'xhr'));\n  }\n}\n","/**\n * Copyright 2015 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {dev, user} from './log';\n\n\n/**\n * A single source within a srcset. Only one: width or DPR can be specified at\n * a time.\n * @typedef {{\n *   url: string,\n *   width: (number|undefined),\n *   dpr: (number|undefined)\n * }}\n */\nlet SrcsetSourceDef;\n\n/**\n * General grammar: (URL [NUM[w|x]],)*\n * Example 1: \"image1.png 100w, image2.png 50w\"\n * Example 2: \"image1.png 2x, image2.png\"\n * Example 3: \"image1,100w.png 100w, image2.png 50w\"\n */\nconst srcsetRegex =\n    /(\\S+)(?:\\s+(?:(-?\\d+(?:\\.\\d+)?)([a-zA-Z]*)))?\\s*(?:,|$)/g;\n\n/**\n * Extracts `srcset` and fallbacks to `src` if not available.\n * @param {!Element} element\n * @return {!Srcset}\n */\nexport function srcsetFromElement(element) {\n  const srcsetAttr = element.getAttribute('srcset');\n  if (srcsetAttr) {\n    return parseSrcset(srcsetAttr);\n  }\n  // We can't push `src` via `parseSrcset` because URLs in `src` are not always\n  // RFC compliant and can't be easily parsed as an `srcset`. For instance,\n  // they sometimes contain space characters.\n  const srcAttr = user().assert(element.getAttribute('src'),\n      'Either non-empty \"srcset\" or \"src\" attribute must be specified: %s',\n      element);\n  return srcsetFromSrc(srcAttr);\n}\n\n/**\n * Creates a Srcset from a `src` attribute value.\n * @param {string} src\n * @return {!Srcset}\n */\nexport function srcsetFromSrc(src) {\n  return new Srcset([{url: src, width: undefined, dpr: 1}]);\n}\n\n/**\n * Parses the text representation of srcset into Srcset object.\n * See https://developer.mozilla.org/en-US/docs/Web/HTML/Element/img#Attributes.\n * See http://www.w3.org/html/wg/drafts/html/master/semantics.html#attr-img-srcset.\n * @param {string} s\n * @return {!Srcset}\n */\nexport function parseSrcset(s) {\n  const sources = [];\n  let match;\n  while ((match = srcsetRegex.exec(s))) {\n    const url = match[1];\n    let width, dpr;\n    if (match[2]) {\n      const type = match[3].toLowerCase();\n      if (type == 'w') {\n        width = parseInt(match[2], 10);\n      } else if (type == 'x') {\n        dpr = parseFloat(match[2]);\n      } else {\n        continue;\n      }\n    } else {\n      // If no \"w\" or \"x\" specified, we assume it's \"1x\".\n      dpr = 1;\n    }\n    sources.push({url, width, dpr});\n  }\n  return new Srcset(sources);\n}\n\n\n/**\n * A srcset object contains one or more sources.\n *\n * There are two types of sources: width-based and DPR-based. Only one type\n * of sources allowed to be specified within a single srcset. Depending on a\n * usecase, the components are free to choose any source that best corresponds\n * to the required rendering quality and network and CPU conditions. See\n * \"select\" method for details on how this selection is performed.\n *\n * See https://developer.mozilla.org/en-US/docs/Web/HTML/Element/img#Attributes\n */\nexport class Srcset {\n\n  /**\n   * @param {!Array<!SrcsetSourceDef>} sources\n   */\n  constructor(sources) {\n    user().assert(sources.length > 0, 'Srcset must have at least one source');\n    /** @private @const {!Array<!SrcsetSourceDef>} */\n    this.sources_ = sources;\n\n    // Only one type of source specified can be used - width or DPR.\n    let hasWidth = false;\n    let hasDpr = false;\n    for (let i = 0; i < sources.length; i++) {\n      const source = sources[i];\n      hasWidth = hasWidth || !!source.width;\n      hasDpr = hasDpr || !!source.dpr;\n    }\n    user().assert(!!(hasWidth ^ hasDpr),\n        'Srcset must have width or dpr sources, but not both');\n\n    // Source and assert duplicates.\n    sources.sort(hasWidth ? sortByWidth : sortByDpr);\n\n    /** @private @const {boolean} */\n    this.widthBased_ = hasWidth;\n  }\n\n  /**\n   * Performs selection for specified width and DPR. Here, width is the width\n   * in screen pixels and DPR is the device-pixel-ratio or pixel density of\n   * the device. Depending on the circumstances, such as low network conditions,\n   * it's possible to manipulate the result of this method by passing a lower\n   * DPR value.\n   *\n   * The source selection depends on whether this is width-based or DPR-based\n   * srcset.\n   *\n   * In a width-based source, the source's width is the physical width of a\n   * resource (e.g. an image). Depending on the provided DPR, this width is\n   * converted to the screen pixels as following:\n   *   pixelWidth = sourceWidth / DPR\n   *\n   * Then, the source closest to the requested \"width\" is selected using\n   * the \"pixelWidth\". The slight preference is given to the bigger sources to\n   * ensure the most optimal quality.\n   *\n   * In a DPR-based source, the source's DPR is used to return the source that\n   * is closest to the requested DPR.\n   *\n   * Based on\n   * http://www.w3.org/html/wg/drafts/html/master/semantics.html#attr-img-srcset.\n   * @param {number} width\n   * @param {number} dpr\n   * @return {string}\n   */\n  select(width, dpr) {\n    dev().assert(width, 'width=%s', width);\n    dev().assert(dpr, 'dpr=%s', dpr);\n    let index = 0;\n    if (this.widthBased_) {\n      index = this.selectByWidth_(width * dpr);\n    } else {\n      index = this.selectByDpr_(dpr);\n    }\n    return this.sources_[index].url;\n  }\n\n  /**\n   * @param {number} width\n   * @return {number}\n   * @private\n   */\n  selectByWidth_(width) {\n    const sources = this.sources_;\n    let minIndex = 0;\n    let minScore = Infinity;\n    let minWidth = Infinity;\n\n    for (let i = 0; i < sources.length; i++) {\n      const sWidth = sources[i].width;\n      const score = Math.abs(sWidth - width);\n\n      // Select the one that is closer with a slight preference toward larger\n      // widths. If smaller size is closer, enforce minimum ratio to ensure\n      // image isn't too distorted.\n      if (score <= minScore * 1.1 || width / minWidth > 1.2) {\n        minIndex = i;\n        minScore = score;\n        minWidth = sWidth;\n      } else {\n        break;\n      }\n    }\n    return minIndex;\n  }\n\n  /**\n   * @param {number} dpr\n   * @return {number}\n   * @private\n   */\n  selectByDpr_(dpr) {\n    const sources = this.sources_;\n    let minIndex = 0;\n    let minScore = Infinity;\n\n    for (let i = 0; i < sources.length; i++) {\n      const score = Math.abs(sources[i].dpr - dpr);\n      if (score <= minScore) {\n        minIndex = i;\n        minScore = score;\n      } else {\n        break;\n      }\n    }\n    return minIndex;\n  }\n\n  /**\n   * Returns all URLs in the srcset.\n   * @return {!Array<string>}\n   */\n  getUrls() {\n    return this.sources_.map(s => s.url);\n  }\n\n  /**\n   * Reconstructs the string expression for this srcset.\n   * @param {function(string):string=} opt_mapper\n   * @return {string}\n   */\n  stringify(opt_mapper) {\n    const res = [];\n    const sources = this.sources_;\n    for (let i = 0; i < sources.length; i++) {\n      const source = sources[i];\n      let src = source.url;\n      if (opt_mapper) {\n        src = opt_mapper(src);\n      }\n      if (this.widthBased_) {\n        src += ` ${source.width}w`;\n      } else {\n        src += ` ${source.dpr}x`;\n      }\n      res.push(src);\n    }\n    return res.join(', ');\n  }\n}\n\n/**\n * Sorts by width\n *\n * @param {number} s1\n * @param {number} s2\n * @return {number}\n */\nfunction sortByWidth(s1, s2) {\n  user().assert(s1.width != s2.width, 'Duplicate width: %s', s1.width);\n  return s1.width - s2.width;\n}\n\n/**\n * Sorts by dpr\n *\n * @param {!Object} s1\n * @param {!Object} s2\n * @return {number}\n */\nfunction sortByDpr(s1, s2) {\n  user().assert(s1.dpr != s2.dpr, 'Duplicate dpr: %s', s1.dpr);\n  return s1.dpr - s2.dpr;\n}\n","/**\n * Copyright 2015 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @param {string} _match\n * @param {string} character\n * @return {string}\n */\nfunction toUpperCase(_match, character) {\n  return character.toUpperCase();\n}\n\n/**\n * @param {string} match\n * @return {string}\n */\nfunction prependDashAndToLowerCase(match) {\n  return '-' + match.toLowerCase();\n}\n\n/**\n * @param {string} name Attribute name containing dashes.\n * @return {string} Dashes removed and successive character sent to upper case.\n * visibleForTesting\n */\nexport function dashToCamelCase(name) {\n  return name.replace(/-([a-z])/g, toUpperCase);\n}\n\n/**\n * Converts a string that is in camelCase to one that is in dash-case.\n *\n * @param {string} string The string to convert.\n * @return {string} The string in dash-case.\n */\nexport function camelCaseToDash(string) {\n  return string.replace(/(?!^)[A-Z]/g, prependDashAndToLowerCase);\n}\n\n/**\n * @param {string} name Attribute name with dashes\n * @return {string} Dashes replaced by underlines.\n */\nexport function dashToUnderline(name) {\n  return name.replace('-', '_');\n}\n\n/**\n * Polyfill for String.prototype.endsWith.\n * @param {string} string\n * @param {string} suffix\n * @return {boolean}\n */\nexport function endsWith(string, suffix) {\n  const index = string.length - suffix.length;\n  return index >= 0 && string.indexOf(suffix, index) == index;\n}\n\n/**\n * Polyfill for String.prototype.startsWith.\n * @param {string} string\n * @param {string} prefix\n * @return {boolean}\n */\nexport function startsWith(string, prefix) {\n  if (prefix.length > string.length) {\n    return false;\n  }\n  return string.lastIndexOf(prefix, 0) == 0;\n}\n\n/**\n * Expands placeholders in a given template string with values.\n *\n * Placeholders use ${key-name} syntax and are replaced with the value\n * returned from the given getter function.\n *\n * @param {string} template The template string to expand.\n * @param {function(string):*} getter Function used to retrieve a value for a\n *   placeholder. Returns values will be coerced into strings.\n * @param {number=} opt_maxIterations Number of times to expand the template.\n *   Defaults to 1, but should be set to a larger value your placeholder tokens\n *   can be expanded to other placeholder tokens. Take caution with large values\n *   as recursively expanding a string can be exponentially expensive.\n */\nexport function expandTemplate(template, getter, opt_maxIterations) {\n  const maxIterations = opt_maxIterations || 1;\n  for (let i = 0; i < maxIterations; i++) {\n    let matches = 0;\n    template = template.replace(/\\${([^}]*)}/g, (_a, b) => {\n      matches++;\n      return getter(b);\n    });\n    if (!matches) {\n      break;\n    }\n  }\n  return template;\n}\n\n/**\n * Hash function djb2a\n * This is intended to be a simple, fast hashing function using minimal code.\n * It does *not* have good cryptographic properties.\n * @param {string} str\n * @return {string} 32-bit unsigned hash of the string\n */\nexport function stringHash32(str) {\n  const {length} = str;\n  let hash = 5381;\n  for (let i = 0; i < length; i++) {\n    hash = hash * 33 ^ str.charCodeAt(i);\n  }\n  // Convert from 32-bit signed to unsigned.\n  return String(hash >>> 0);\n}\n","/**\n * Copyright 2015 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// Note: loaded by 3p system. Cannot rely on babel polyfills.\nimport {map} from './utils/object.js';\nimport {startsWith} from './string';\n\n\n/** @type {Object<string, string>} */\nlet propertyNameCache;\n\n/** @const {!Array<string>} */\nconst vendorPrefixes = ['Webkit', 'webkit', 'Moz', 'moz', 'ms', 'O', 'o'];\n\n\n/**\n * @export\n * @param {string} camelCase camel cased string\n * @return {string} title cased string\n */\nexport function camelCaseToTitleCase(camelCase) {\n  return camelCase.charAt(0).toUpperCase() + camelCase.slice(1);\n}\n\n/**\n * Checks the style if a prefixed version of a property exists and returns\n * it or returns an empty string.\n * @private\n * @param {!Object} style\n * @param {string} titleCase the title case version of a css property name\n * @return {string} the prefixed property name or null.\n */\nfunction getVendorJsPropertyName_(style, titleCase) {\n  for (let i = 0; i < vendorPrefixes.length; i++) {\n    const propertyName = vendorPrefixes[i] + titleCase;\n    if (style[propertyName] !== undefined) {\n      return propertyName;\n    }\n  }\n  return '';\n}\n\n/**\n * Returns the possibly prefixed JavaScript property name of a style property\n * (ex. WebkitTransitionDuration) given a camelCase'd version of the property\n * (ex. transitionDuration).\n * @export\n * @param {!Object} style\n * @param {string} camelCase the camel cased version of a css property name\n * @param {boolean=} opt_bypassCache bypass the memoized cache of property\n *   mapping\n * @return {string}\n */\nexport function getVendorJsPropertyName(style, camelCase, opt_bypassCache) {\n  if (startsWith(camelCase, '--')) {\n    // CSS vars are returned as is.\n    return camelCase;\n  }\n  if (!propertyNameCache) {\n    propertyNameCache = map();\n  }\n  let propertyName = propertyNameCache[camelCase];\n  if (!propertyName || opt_bypassCache) {\n    propertyName = camelCase;\n    if (style[camelCase] === undefined) {\n      const titleCase = camelCaseToTitleCase(camelCase);\n      const prefixedPropertyName = getVendorJsPropertyName_(style, titleCase);\n\n      if (style[prefixedPropertyName] !== undefined) {\n        propertyName = prefixedPropertyName;\n      }\n    }\n    if (!opt_bypassCache) {\n      propertyNameCache[camelCase] = propertyName;\n    }\n  }\n  return propertyName;\n}\n\n\n/**\n * Sets the CSS styles of the specified element with !important. The styles\n * are specified as a map from CSS property names to their values.\n * @param {!Element} element\n * @param {!Object<string, *>} styles\n */\nexport function setImportantStyles(element, styles) {\n  for (const k in styles) {\n    element.style.setProperty(\n        getVendorJsPropertyName(styles, k), styles[k].toString(), 'important');\n  }\n}\n\n\n/**\n * Sets the CSS style of the specified element with optional units, e.g. \"px\".\n * @param {?Element} element\n * @param {string} property\n * @param {*} value\n * @param {string=} opt_units\n * @param {boolean=} opt_bypassCache\n */\nexport function setStyle(element, property, value, opt_units, opt_bypassCache) {\n  const propertyName = getVendorJsPropertyName(element.style, property,\n      opt_bypassCache);\n  if (propertyName) {\n    element.style[propertyName] =\n      /** @type {string} */ (opt_units ? value + opt_units : value);\n  }\n}\n\n\n/**\n * Returns the value of the CSS style of the specified element.\n * @param {!Element} element\n * @param {string} property\n * @param {boolean=} opt_bypassCache\n * @return {*}\n */\nexport function getStyle(element, property, opt_bypassCache) {\n  const propertyName = getVendorJsPropertyName(element.style, property,\n      opt_bypassCache);\n  if (!propertyName) {\n    return undefined;\n  }\n  return element.style[propertyName];\n}\n\n\n/**\n * Sets the CSS styles of the specified element. The styles\n * a specified as a map from CSS property names to their values.\n * @param {!Element} element\n * @param {!Object<string, *>} styles\n */\nexport function setStyles(element, styles) {\n  for (const k in styles) {\n    setStyle(element, k, styles[k]);\n  }\n}\n\n\n/**\n * Shows or hides the specified element.\n * @param {!Element} element\n * @param {boolean=} opt_display\n */\nexport function toggle(element, opt_display) {\n  if (opt_display === undefined) {\n    opt_display = getStyle(element, 'display') == 'none';\n  }\n  setStyle(element, 'display', opt_display ? '' : 'none');\n}\n\n\n/**\n * Returns a pixel value.\n * @param {number} value\n * @return {string}\n */\nexport function px(value) {\n  return `${value}px`;\n}\n\n/**\n * Returns a degree value.\n * @param {number} value\n * @return {string}\n */\nexport function deg(value) {\n  return `${value}deg`;\n}\n\n/**\n * Returns a \"translateX\" for CSS \"transform\" property.\n * @param {number|string} value\n * @return {string}\n */\nexport function translateX(value) {\n  if (typeof value == 'string') {\n    return `translateX(${value})`;\n  }\n  return `translateX(${px(value)})`;\n}\n\n\n/**\n * Returns a \"translateX\" for CSS \"transform\" property.\n * @param {number|string} x\n * @param {(number|string)=} opt_y\n * @return {string}\n */\nexport function translate(x, opt_y) {\n  if (typeof x == 'number') {\n    x = px(x);\n  }\n  if (opt_y === undefined) {\n    return `translate(${x})`;\n  }\n  if (typeof opt_y == 'number') {\n    opt_y = px(opt_y);\n  }\n  return `translate(${x}, ${opt_y})`;\n}\n\n\n/**\n * Returns a \"scale\" for CSS \"transform\" property.\n * @param {number|string} value\n * @return {string}\n */\nexport function scale(value) {\n  return `scale(${value})`;\n}\n\n/**\n * Returns a \"rotate\" for CSS \"transform\" property.\n * @param {number|string} value\n * @return {string}\n */\nexport function rotate(value) {\n  if (typeof value == 'number') {\n    value = deg(value);\n  }\n  return `rotate(${value})`;\n}\n\n/**\n * Remove alpha value from a rgba color value.\n * Return the new color property with alpha equals if has the alpha value.\n * Caller needs to make sure the input color value is a valid rgba/rgb value\n * @param {string} rgbaColor\n * @return {string}\n */\nexport function removeAlphaFromColor(rgbaColor) {\n  return rgbaColor.replace(\n      /\\(([^,]+),([^,]+),([^,)]+),[^)]+\\)/g, '($1,$2,$3, 1)');\n}\n\n/**\n * Gets the computed style of the element. The helper is necessary to enforce\n * the possible `null` value returned by a buggy Firefox.\n *\n * @param {!Window} win\n * @param {!Element} el\n * @return {!Object<string, string>}\n */\nexport function computedStyle(win, el) {\n  const style = /** @type {?CSSStyleDeclaration} */(win.getComputedStyle(el));\n  return /** @type {!Object<string, string>} */(style) || map();\n}\n\n\n/**\n * Resets styles that were set dynamically (i.e. inline)\n * @param {!Element} element\n * @param {!Array<string>} properties\n */\nexport function resetStyles(element, properties) {\n  const styleObj = {};\n  properties.forEach(prop => {\n    styleObj[prop] = null;\n  });\n  setStyles(element, styleObj);\n}\n","/**\n * Copyright 2015 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n/**\n * Absolute time in milliseconds.\n * @typedef {number}\n */\nexport let timeDef;\n\n\n/**\n * Number between 0 and 1 that designates normalized time, as in \"from start to\n * end\".\n * @typedef {number}\n */\nexport let normtimeDef;\n","/**\n * Copyright 2015 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as st from './style';\nimport {getCurve} from './curve';\n\n\n\nexport const NOOP = function(unusedTime) {return null;};\n\n\n/**\n * Returns a transition that combines a number of other transitions and\n * invokes them all in parallel.\n * @param {!Array<!TransitionDef>} transitions\n * @return {!TransitionDef<void>}\n */\nexport function all(transitions) {\n  return (time, complete) => {\n    for (let i = 0; i < transitions.length; i++) {\n      const tr = transitions[i];\n      tr(time, complete);\n    }\n  };\n}\n\n\n/**\n * Returns a transition that combines the string result of other string-based\n * transitions such as transform and scale using the given opt_delimiter.\n * @param {!Array<!TransitionDef<string>>} transitions\n * @param {string=} opt_delimiter Defaults to a single whitespace.\n * @return {!TransitionDef<string>}\n */\nexport function concat(transitions, opt_delimiter = ' ') {\n  return (time, complete) => {\n    const results = [];\n    for (let i = 0; i < transitions.length; i++) {\n      const tr = transitions[i];\n      const result = tr(time, complete);\n      if (typeof result == 'string') {\n        results.push(result);\n      }\n    }\n    return results.join(opt_delimiter);\n  };\n}\n\n\n/**\n * Returns the specified transition with the time curved via specified curve\n * function.\n * @param {!TransitionDef<RESULT>} transition\n * @param {!./curve.CurveDef|string} curve\n * @return {!TransitionDef<RESULT>}\n * @template RESULT\n */\nexport function withCurve(transition, curve) {\n  /** @const {?./curve.CurveDef} */\n  const curveFn = getCurve(curve);\n  return (time, complete) => {\n    return transition(complete ? 1 : curveFn(time), complete);\n  };\n}\n\n\n/**\n * A transition that sets the CSS style of the specified element. The styles\n * a specified as a map from CSS property names to transition functions for\n * each of these properties.\n * @param {!Element} element\n * @param {!Object<string, !TransitionDef>} styles\n * @return {!TransitionDef<void>}\n */\nexport function setStyles(element, styles) {\n  return (time, complete) => {\n    for (const k in styles) {\n      st.setStyle(element, k, styles[k](time, complete));\n    }\n  };\n}\n\n\n/**\n * A basic numeric interpolation.\n * @param {number} start\n * @param {number} end\n * @return {!TransitionDef<number>}\n */\nexport function numeric(start, end) {\n  return time => {\n    return start + (end - start) * time;\n  };\n}\n\n\n/**\n * Spring numeric interpolation.\n * @param {number} start\n * @param {number} end\n * @param {number} extended\n * @param {number} threshold\n * @return {!TransitionDef<number>}\n */\nexport function spring(start, end, extended, threshold) {\n  if (end == extended) {\n    return time => {\n      return numeric(start, end)(time);\n    };\n  }\n  return time => {\n    if (time < threshold) {\n      return start + (extended - start) * (time / threshold);\n    }\n    return extended + (end - extended) * ((time - threshold) /\n        (1 - threshold));\n  };\n}\n\n\n/**\n * Adds \"px\" units.\n * @param {!TransitionDef<number>} transition\n * @return {!TransitionDef<string>}\n */\nexport function px(transition) {\n  return time => {\n    return transition(time) + 'px';\n  };\n}\n\n\n/**\n * A transition for \"translateX\" of CSS \"transform\" property.\n * @param {!TransitionDef<number|string>} transition\n * @return {!TransitionDef<string>}\n */\nexport function translateX(transition) {\n  return time => {\n    const res = transition(time);\n    if (typeof res == 'string') {\n      return `translateX(${res})`;\n    }\n    return `translateX(${res}px)`;\n  };\n}\n\n/**\n * A transition for \"translateY\" of CSS \"transform\" property.\n * @param {!TransitionDef<number|string>} transition\n * @return {!TransitionDef<string>}\n */\nexport function translateY(transition) {\n  return time => {\n    const res = transition(time);\n    if (typeof res == 'string') {\n      return `translateY(${res})`;\n    }\n    return `translateY(${res}px)`;\n  };\n}\n\n\n/**\n * A transition for \"translate(x, y)\" of CSS \"transform\" property.\n * @param {!TransitionDef<number|string>} transitionX\n * @param {!TransitionDef<number|string>|undefined} opt_transitionY\n * @return {!TransitionDef<string>}\n */\nexport function translate(transitionX, opt_transitionY) {\n  return time => {\n    let x = transitionX(time);\n    if (typeof x == 'number') {\n      x = st.px(x);\n    }\n    if (!opt_transitionY) {\n      return `translate(${x})`;\n    }\n\n    let y = opt_transitionY(time);\n    if (typeof y == 'number') {\n      y = st.px(y);\n    }\n    return `translate(${x},${y})`;\n  };\n}\n\n\n/**\n * A transition for \"scale\" of CSS \"transform\" property.\n * @param {!TransitionDef<number|string>} transition\n * @return {!TransitionDef<string>}\n */\nexport function scale(transition) {\n  return time => {\n    return `scale(${transition(time)})`;\n  };\n}\n","/**\n * Copyright 2015 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* @const */\nconst toString_ = Object.prototype.toString;\n\n/**\n * Returns the ECMA [[Class]] of a value\n * @param {*} value\n * @return {string}\n */\nfunction toString(value) {\n  return toString_.call(value);\n}\n\n/**\n * Determines if value is actually an Array.\n * @param {*} value\n * @return {boolean}\n */\nexport function isArray(value) {\n  return Array.isArray(value);\n}\n\n/**\n * Converts an array-like object to an array.\n * @param {?IArrayLike<T>|string} arrayLike\n * @return {!Array<T>}\n * @template T\n */\nexport function toArray(arrayLike) {\n  if (!arrayLike) {\n    return [];\n  }\n  const array = new Array(arrayLike.length);\n  for (let i = 0; i < arrayLike.length; i++) {\n    array[i] = arrayLike[i];\n  }\n  return array;\n}\n\n/**\n * Determines if value is actually an Object.\n * @param {*} value\n * @return {boolean}\n */\nexport function isObject(value) {\n  return toString(value) === '[object Object]';\n}\n\n/**\n * Determines if value is of number type and finite.\n * NaN and Infinity are not considered a finite number.\n * String numbers are not considered numbers.\n * @param {*} value\n * @return {boolean}\n */\nexport function isFiniteNumber(value) {\n  return (typeof value === 'number' && isFinite(value));\n}\n\n/**\n * Checks whether `s` is a valid value of `enumObj`.\n *\n * @param {!Object<T>} enumObj\n * @param {T} s\n * @return {boolean}\n * @template T\n */\nexport function isEnumValue(enumObj, s) {\n  for (const k in enumObj) {\n    if (enumObj[k] === s) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/**\n * Externs declare that access `defaultView` from `document` or\n * `ownerDocument` is of type `(Window|null)` but most of our parameter types\n * assume that it is never null. This is OK in practice as we ever only get\n * null on disconnected documents or old IE.\n * This helper function casts it into just a simple Window return type.\n *\n * @param {!Window|null} winOrNull\n * @return {!Window}\n */\nexport function toWin(winOrNull) {\n  return /** @type {!Window} */ (winOrNull);\n}\n\n","/**\n * Copyright 2017 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {tryDecodeUriComponent_} from './url-try-decode-uri-component';\n\nconst regex = /(?:^[#?]?|&)([^=&]+)(?:=([^&]*))?/g;\n\n/**\n * Parses the query string of an URL. This method returns a simple key/value\n * map. If there are duplicate keys the latest value is returned.\n *\n * DO NOT import the function from this file. Instead, import parseQueryString\n * from `src/url.js`.\n *\n * @param {string} queryString\n * @return {!JsonObject}\n */\nexport function parseQueryString_(queryString) {\n  const params = /** @type {!JsonObject} */ (Object.create(null));\n  if (!queryString) {\n    return params;\n  }\n\n  let match;\n  while ((match = regex.exec(queryString))) {\n    const name = tryDecodeUriComponent_(match[1], match[1]);\n    const value = match[2] ? tryDecodeUriComponent_(match[2], match[2]) : '';\n    params[name] = value;\n  }\n  return params;\n}\n","/**\n * Copyright 2017 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Tries to decode a URI component, falling back to opt_fallback (or an empty\n * string)\n *\n * DO NOT import the function from this file. Instead, import\n * tryDecodeUriComponent from `src/url.js`.\n *\n * @param {string} component\n * @param {string=} fallback\n * @return {string}\n */\nexport function tryDecodeUriComponent_(component, fallback = '') {\n  try {\n    return decodeURIComponent(component);\n  } catch (e) {\n    return fallback;\n  }\n}\n","/**\n * Copyright 2015 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {LruCache} from './utils/lru-cache';\nimport {dict} from './utils/object';\nimport {endsWith, startsWith} from './string';\nimport {getMode} from './mode';\nimport {isArray} from './types';\nimport {parseQueryString_} from './url-parse-query-string';\nimport {tryDecodeUriComponent_} from './url-try-decode-uri-component';\nimport {urls} from './config';\nimport {user} from './log';\n\n/**\n * @type {!JsonObject}\n */\nconst SERVING_TYPE_PREFIX = dict({\n  // No viewer\n  'c': true,\n  // In viewer\n  'v': true,\n  // Ad landing page\n  'a': true,\n  // Ad\n  'ad': true,\n});\n\n/**\n * Cached a-tag to avoid memory allocation during URL parsing.\n * @type {HTMLAnchorElement}\n */\nlet a;\n\n/**\n * We cached all parsed URLs. As of now there are no use cases\n * of AMP docs that would ever parse an actual large number of URLs,\n * but we often parse the same one over and over again.\n * @type {LruCache}\n */\nlet cache;\n\n/** @private @const Matches amp_js_* parameters in query string. */\nconst AMP_JS_PARAMS_REGEX = /[?&]amp_js[^&]*/;\n\n/** @private @const Matches amp_gsa parameters in query string. */\nconst AMP_GSA_PARAMS_REGEX = /[?&]amp_gsa[^&]*/;\n\n/** @private @const Matches amp_r parameters in query string. */\nconst AMP_R_PARAMS_REGEX = /[?&]amp_r[^&]*/;\n\n/** @private @const Matches usqp parameters from goog experiment in query string. */\nconst GOOGLE_EXPERIMENT_PARAMS_REGEX = /[?&]usqp[^&]*/;\n\nconst INVALID_PROTOCOLS = [\n  /*eslint no-script-url: 0*/ 'javascript:',\n  /*eslint no-script-url: 0*/ 'data:',\n  /*eslint no-script-url: 0*/ 'vbscript:',\n];\n\n/** @const {string} */\nexport const SOURCE_ORIGIN_PARAM = '__amp_source_origin';\n\n/**\n * Returns the correct origin for a given window.\n * @param {!Window} win\n * @return {string} origin\n */\nexport function getWinOrigin(win) {\n  return win.origin || parseUrlDeprecated(win.location.href).origin;\n}\n\n/**\n * Returns a Location-like object for the given URL. If it is relative,\n * the URL gets resolved.\n * Consider the returned object immutable. This is enforced during\n * testing by freezing the object.\n * @param {string} url\n * @param {boolean=} opt_nocache\n * @return {!Location}\n */\nexport function parseUrlDeprecated(url, opt_nocache) {\n  if (!a) {\n    a = /** @type {!HTMLAnchorElement} */ (self.document.createElement('a'));\n    cache = self.UrlCache || (self.UrlCache = new LruCache(100));\n  }\n\n  return parseUrlWithA(a, url, opt_nocache ? null : cache);\n}\n\n/**\n * Returns a Location-like object for the given URL. If it is relative,\n * the URL gets resolved.\n * Consider the returned object immutable. This is enforced during\n * testing by freezing the object.\n * @param {!HTMLAnchorElement} a\n * @param {string} url\n * @param {LruCache=} opt_cache\n * @return {!Location}\n * @restricted\n */\nexport function parseUrlWithA(a, url, opt_cache) {\n  if (opt_cache && opt_cache.has(url)) {\n    return opt_cache.get(url);\n  }\n\n  a.href = url;\n\n  // IE11 doesn't provide full URL components when parsing relative URLs.\n  // Assigning to itself again does the trick #3449.\n  if (!a.protocol) {\n    a.href = a.href;\n  }\n\n  const info = /** @type {!Location} */({\n    href: a.href,\n    protocol: a.protocol,\n    host: a.host,\n    hostname: a.hostname,\n    port: a.port == '0' ? '' : a.port,\n    pathname: a.pathname,\n    search: a.search,\n    hash: a.hash,\n    origin: null, // Set below.\n  });\n\n  // Some IE11 specific polyfills.\n  // 1) IE11 strips out the leading '/' in the pathname.\n  if (info.pathname[0] !== '/') {\n    info.pathname = '/' + info.pathname;\n  }\n\n  // 2) For URLs with implicit ports, IE11 parses to default ports while\n  // other browsers leave the port field empty.\n  if ((info.protocol == 'http:' && info.port == 80)\n      || (info.protocol == 'https:' && info.port == 443)) {\n    info.port = '';\n    info.host = info.hostname;\n  }\n\n  // For data URI a.origin is equal to the string 'null' which is not useful.\n  // We instead return the actual origin which is the full URL.\n  if (a.origin && a.origin != 'null') {\n    info.origin = a.origin;\n  } else if (info.protocol == 'data:' || !info.host) {\n    info.origin = info.href;\n  } else {\n    info.origin = info.protocol + '//' + info.host;\n  }\n\n  // Freeze during testing to avoid accidental mutation.\n  const frozen = (getMode().test && Object.freeze) ? Object.freeze(info) : info;\n\n  if (opt_cache) {\n    opt_cache.put(url, frozen);\n  }\n\n  return frozen;\n}\n\n/**\n * Appends the string just before the fragment part (or optionally\n * to the front of the query string) of the URL.\n * @param {string} url\n * @param {string} paramString\n * @param {boolean=} opt_addToFront\n * @return {string}\n */\nexport function appendEncodedParamStringToUrl(url, paramString,\n  opt_addToFront) {\n  if (!paramString) {\n    return url;\n  }\n  const mainAndFragment = url.split('#', 2);\n  const mainAndQuery = mainAndFragment[0].split('?', 2);\n\n  let newUrl = mainAndQuery[0] + (\n    mainAndQuery[1]\n      ? (opt_addToFront\n        ? `?${paramString}&${mainAndQuery[1]}`\n        : `?${mainAndQuery[1]}&${paramString}`)\n      : `?${paramString}`);\n  newUrl += mainAndFragment[1] ? `#${mainAndFragment[1]}` : '';\n  return newUrl;\n}\n/**\n * Appends a query string field and value to a url. `key` and `value`\n * will be ran through `encodeURIComponent` before appending.\n * @param {string} url\n * @param {string} key\n * @param {string} value\n * @param {boolean=} opt_addToFront\n * @return {string}\n */\nexport function addParamToUrl(url, key, value, opt_addToFront) {\n  const field = `${encodeURIComponent(key)}=${encodeURIComponent(value)}`;\n  return appendEncodedParamStringToUrl(url, field, opt_addToFront);\n}\n\n/**\n * Appends query string fields and values to a url. The `params` objects'\n * `key`s and `value`s will be transformed into query string keys/values.\n * @param {string} url\n * @param {!JsonObject<string, string|!Array<string>>} params\n * @return {string}\n */\nexport function addParamsToUrl(url, params) {\n  return appendEncodedParamStringToUrl(url, serializeQueryString(params));\n}\n\n/**\n * Serializes the passed parameter map into a query string with both keys\n * and values encoded.\n * @param {!JsonObject<string, string|!Array<string>>} params\n * @return {string}\n */\nexport function serializeQueryString(params) {\n  const s = [];\n  for (const k in params) {\n    const v = params[k];\n    if (v == null) {\n      continue;\n    } else if (isArray(v)) {\n      for (let i = 0; i < v.length; i++) {\n        const sv = /** @type {string} */ (v[i]);\n        s.push(`${encodeURIComponent(k)}=${encodeURIComponent(sv)}`);\n      }\n    } else {\n      const sv = /** @type {string} */ (v);\n      s.push(`${encodeURIComponent(k)}=${encodeURIComponent(sv)}`);\n    }\n  }\n  return s.join('&');\n}\n\n/**\n * Returns `true` if the URL is secure: either HTTPS or localhost (for testing).\n * @param {string|!Location} url\n * @return {boolean}\n */\nexport function isSecureUrlDeprecated(url) {\n  if (typeof url == 'string') {\n    url = parseUrlDeprecated(url);\n  }\n  return (url.protocol == 'https:' ||\n      url.hostname == 'localhost' ||\n      endsWith(url.hostname, '.localhost'));\n}\n\n/**\n * Asserts that a given url is HTTPS or protocol relative. It's a user-level\n * assert.\n *\n * Provides an exception for localhost.\n *\n * @param {?string|undefined} urlString\n * @param {!Element|string} elementContext Element where the url was found.\n * @param {string=} sourceName Used for error messages.\n * @return {string}\n */\nexport function assertHttpsUrl(\n  urlString, elementContext, sourceName = 'source') {\n  user().assert(urlString != null, '%s %s must be available',\n      elementContext, sourceName);\n  // (erwinm, #4560): type cast necessary until #4560 is fixed.\n  const theUrlString = /** @type {string} */ (urlString);\n  user().assert(isSecureUrlDeprecated(theUrlString) || /^(\\/\\/)/.test(theUrlString),\n      '%s %s must start with ' +\n      '\"https://\" or \"//\" or be relative and served from ' +\n      'either https or from localhost. Invalid value: %s',\n      elementContext, sourceName, theUrlString);\n  return theUrlString;\n}\n\n/**\n * Asserts that a given url is an absolute HTTP or HTTPS URL.\n * @param {string} urlString\n * @return {string}\n */\nexport function assertAbsoluteHttpOrHttpsUrl(urlString) {\n  user().assert(/^https?\\:/i.test(urlString),\n      'URL must start with \"http://\" or \"https://\". Invalid value: %s',\n      urlString);\n  return parseUrlDeprecated(urlString).href;\n}\n\n\n/**\n * Parses the query string of an URL. This method returns a simple key/value\n * map. If there are duplicate keys the latest value is returned.\n *\n * This function is implemented in a separate file to avoid a circular\n * dependency.\n *\n * @param {string} queryString\n * @return {!JsonObject}\n */\nexport function parseQueryString(queryString) {\n  return parseQueryString_(queryString);\n}\n\n/**\n * Returns the URL without fragment. If URL doesn't contain fragment, the same\n * string is returned.\n * @param {string} url\n * @return {string}\n */\nexport function removeFragment(url) {\n  const index = url.indexOf('#');\n  if (index == -1) {\n    return url;\n  }\n  return url.substring(0, index);\n}\n\n/**\n * Returns the fragment from the URL. If the URL doesn't contain fragment,\n * the empty string is returned.\n * @param {string} url\n * @return {string}\n */\nexport function getFragment(url) {\n  const index = url.indexOf('#');\n  if (index == -1) {\n    return '';\n  }\n  return url.substring(index);\n}\n\n/**\n * Returns whether the URL has the origin of a proxy.\n * @param {string|!Location} url URL of an AMP document.\n * @return {boolean}\n */\nexport function isProxyOrigin(url) {\n  if (typeof url == 'string') {\n    url = parseUrlDeprecated(url);\n  }\n  return urls.cdnProxyRegex.test(url.origin);\n}\n\n/**\n * For proxy-origin URLs, returns the serving type. Otherwise, returns null.\n * E.g., 'https://amp-com.cdn.ampproject.org/a/s/amp.com/amp_document.html'\n * returns 'a'.\n * @param {string|!Location} url URL of an AMP document.\n * @return {?string}\n */\nexport function getProxyServingType(url) {\n  if (typeof url == 'string') {\n    url = parseUrlDeprecated(url);\n  }\n  if (!isProxyOrigin(url)) {\n    return null;\n  }\n  const path = url.pathname.split('/', 2);\n  return path[1];\n}\n\n/**\n * Returns whether the URL origin is localhost.\n * @param {string|!Location} url URL of an AMP document.\n * @return {boolean}\n */\nexport function isLocalhostOrigin(url) {\n  if (typeof url == 'string') {\n    url = parseUrlDeprecated(url);\n  }\n  return urls.localhostRegex.test(url.origin);\n}\n\n/**\n * Returns whether the URL has valid protocol.\n * Deep link protocol is valid, but not javascript etc.\n * @param {string|!Location} url\n * @return {boolean}\n */\nexport function isProtocolValid(url) {\n  if (!url) {\n    return true;\n  }\n  if (typeof url == 'string') {\n    url = parseUrlDeprecated(url);\n  }\n  return !INVALID_PROTOCOLS.includes(url.protocol);\n}\n\n/**\n * Returns a URL without AMP JS parameters.\n * @param {string} url\n * @return {string}\n */\nexport function removeAmpJsParamsFromUrl(url) {\n  const parsed = parseUrlDeprecated(url);\n  const search = removeAmpJsParamsFromSearch(parsed.search);\n  return parsed.origin + parsed.pathname + search + parsed.hash;\n\n}\n\n/**\n * Returns a URL without a query string.\n * @param {string} url\n * @return {string}\n */\nexport function removeSearch(url) {\n  const index = url.indexOf('?');\n  if (index == -1) {\n    return url;\n  }\n  const fragment = getFragment(url);\n  return url.substring(0, index) + fragment;\n}\n\n/**\n * Removes parameters that start with amp js parameter pattern and returns the\n * new search string.\n * @param {string} urlSearch\n * @return {string}\n */\nfunction removeAmpJsParamsFromSearch(urlSearch) {\n  if (!urlSearch || urlSearch == '?') {\n    return '';\n  }\n  const search = urlSearch\n      .replace(AMP_JS_PARAMS_REGEX, '')\n      .replace(AMP_GSA_PARAMS_REGEX, '')\n      .replace(AMP_R_PARAMS_REGEX, '')\n      .replace(GOOGLE_EXPERIMENT_PARAMS_REGEX, '')\n      .replace(/^[?&]/, ''); // Removes first ? or &.\n  return search ? '?' + search : '';\n}\n\n/**\n * Returns the source URL of an AMP document for documents served\n * on a proxy origin or directly.\n * @param {string|!Location} url URL of an AMP document.\n * @return {string}\n */\nexport function getSourceUrl(url) {\n  if (typeof url == 'string') {\n    url = parseUrlDeprecated(url);\n  }\n\n  // Not a proxy URL - return the URL itself.\n  if (!isProxyOrigin(url)) {\n    return url.href;\n  }\n\n  // A proxy URL.\n  // Example path that is being matched here.\n  // https://cdn.ampproject.org/c/s/www.origin.com/foo/\n  // The /s/ is optional and signals a secure origin.\n  const path = url.pathname.split('/');\n  const prefix = path[1];\n  user().assert(SERVING_TYPE_PREFIX[prefix],\n      'Unknown path prefix in url %s', url.href);\n  const domainOrHttpsSignal = path[2];\n  const origin = domainOrHttpsSignal == 's'\n    ? 'https://' + decodeURIComponent(path[3])\n    : 'http://' + decodeURIComponent(domainOrHttpsSignal);\n  // Sanity test that what we found looks like a domain.\n  user().assert(origin.indexOf('.') > 0, 'Expected a . in origin %s', origin);\n  path.splice(1, domainOrHttpsSignal == 's' ? 3 : 2);\n  return origin + path.join('/') +\n      removeAmpJsParamsFromSearch(url.search) + (url.hash || '');\n}\n\n/**\n * Returns the source origin of an AMP document for documents served\n * on a proxy origin or directly.\n * @param {string|!Location} url URL of an AMP document.\n * @return {string} The source origin of the URL.\n */\nexport function getSourceOrigin(url) {\n  return parseUrlDeprecated(getSourceUrl(url)).origin;\n}\n\n/**\n * Returns absolute URL resolved based on the relative URL and the base.\n * @param {string} relativeUrlString\n * @param {string|!Location} baseUrl\n * @return {string}\n */\nexport function resolveRelativeUrl(relativeUrlString, baseUrl) {\n  if (typeof baseUrl == 'string') {\n    baseUrl = parseUrlDeprecated(baseUrl);\n  }\n  if (typeof URL == 'function') {\n    return new URL(relativeUrlString, baseUrl.href).toString();\n  }\n  return resolveRelativeUrlFallback_(relativeUrlString, baseUrl);\n}\n\n/**\n * Fallback for URL resolver when URL class is not available.\n * @param {string} relativeUrlString\n * @param {string|!Location} baseUrl\n * @return {string}\n * @private Visible for testing.\n */\nexport function resolveRelativeUrlFallback_(relativeUrlString, baseUrl) {\n  if (typeof baseUrl == 'string') {\n    baseUrl = parseUrlDeprecated(baseUrl);\n  }\n  relativeUrlString = relativeUrlString.replace(/\\\\/g, '/');\n  const relativeUrl = parseUrlDeprecated(relativeUrlString);\n\n  // Absolute URL.\n  if (startsWith(relativeUrlString.toLowerCase(), relativeUrl.protocol)) {\n    return relativeUrl.href;\n  }\n\n  // Protocol-relative URL.\n  if (startsWith(relativeUrlString, '//')) {\n    return baseUrl.protocol + relativeUrlString;\n  }\n\n  // Absolute path.\n  if (startsWith(relativeUrlString, '/')) {\n    return baseUrl.origin + relativeUrlString;\n  }\n\n  // Relative path.\n  return baseUrl.origin + baseUrl.pathname.replace(/\\/[^/]*$/, '/')\n      + relativeUrlString;\n}\n\n\n/**\n * Add \"__amp_source_origin\" query parameter to the URL.\n * @param {!Window} win\n * @param {string} url\n * @return {string}\n */\nexport function getCorsUrl(win, url) {\n  checkCorsUrl(url);\n  const sourceOrigin = getSourceOrigin(win.location.href);\n  return addParamToUrl(url, SOURCE_ORIGIN_PARAM, sourceOrigin);\n}\n\n\n/**\n * Checks if the url has __amp_source_origin and throws if it does.\n * @param {string} url\n */\nexport function checkCorsUrl(url) {\n  const parsedUrl = parseUrlDeprecated(url);\n  const query = parseQueryString(parsedUrl.search);\n  user().assert(!(SOURCE_ORIGIN_PARAM in query),\n      'Source origin is not allowed in %s', url);\n}\n\n/**\n * Tries to decode a URI component, falling back to opt_fallback (or an empty\n * string)\n *\n * @param {string} component\n * @param {string=} opt_fallback\n * @return {string}\n */\nexport function tryDecodeUriComponent(component, opt_fallback) {\n  return tryDecodeUriComponent_(component, opt_fallback);\n}\n","/**\n * Copyright 2016 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n/**\n * Compares if two arrays contains exactly same elements of same number\n * of same order.\n * Notice that it does NOT handle NaN case as expected\n *\n * @param {!Array<T>} arr1\n * @param {!Array<T>} arr2\n * @return {boolean}\n * @template T\n */\nexport function areEqualOrdered(arr1, arr2) {\n  if (arr1.length !== arr2.length) {\n    return false;\n  }\n\n  for (let i = 0; i < arr1.length; i++) {\n    if (arr1[i] !== arr2[i]) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\n/**\n * A bit like Array#filter, but removes elements that filter false from the\n * array. Returns the filtered items.\n *\n * @param {!Array<T>} array\n * @param {function(T, number, !Array<T>):boolean} filter\n * @return {!Array<T>}\n * @template T\n */\nexport function filterSplice(array, filter) {\n  const splice = [];\n  let index = 0;\n  for (let i = 0; i < array.length; i++) {\n    const item = array[i];\n    if (filter(item, i, array)) {\n      if (index < i) {\n        array[index] = item;\n      }\n      index++;\n    } else {\n      splice.push(item);\n    }\n  }\n\n  if (index < array.length) {\n    array.length = index;\n  }\n\n  return splice;\n}\n\n/**\n * Returns the index of the first element matching the predicate.\n * Like Array#findIndex.\n *\n * @param {!Array<T>} array\n * @param {function(T, number, !Array<T>):boolean} predicate\n * @return {number}\n * @template T\n */\nexport function findIndex(array, predicate) {\n  for (let i = 0; i < array.length; i++) {\n    if (predicate(array[i], i, array)) {\n      return i;\n    }\n  }\n  return -1;\n}\n\n/**\n * Converts the given iterator to an array.\n *\n * @param {!Iterator<T>} iterator\n * @return {Array<T>}\n * @template T\n */\nexport function fromIterator(iterator) {\n  const array = [];\n  for (let e = iterator.next(); !e.done; e = iterator.next()) {\n    array.push(e.value);\n  }\n  return array;\n}\n\n/**\n * Adds item to array if it is not already present.\n *\n * @param {Array<T>} array\n * @param {T} item\n * @template T\n */\nexport function pushIfNotExist(array, item) {\n  if (array.indexOf(item) < 0) {\n    array.push(item);\n  }\n}\n","/**\n * Copyright 2017 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @enum {number}\n */\nexport const KeyCodes = {\n  ENTER: 13,\n  ESCAPE: 27,\n  SPACE: 32,\n  LEFT_ARROW: 37,\n  UP_ARROW: 38,\n  RIGHT_ARROW: 39,\n  DOWN_ARROW: 40,\n};\n","/**\n * Copyright 2018 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {dev} from '../log';\n\n/** @const {string} */\nconst TAG = 'lru-cache';\n\n/**\n * @template T\n */\nexport class LruCache {\n  /**\n   * @param {number} capacity\n   */\n  constructor(capacity) {\n    /** @private @const {number} */\n    this.capacity_ = capacity;\n\n    /** @private {number} */\n    this.size_ = 0;\n\n    /**\n     * An incrementing counter to define the last access.\n     * @private {number}\n     */\n    this.access_ = 0;\n\n    /** @private {!Object<(number|string), {payload: T, access: number}>} */\n    this.cache_ = Object.create(null);\n  }\n\n  /**\n   * Returns whether key is cached.\n   *\n   * @param {number|string} key\n   * @return {boolean}\n   */\n  has(key) {\n    return !!this.cache_[key];\n  }\n\n  /**\n   * @param {number|string} key\n   * @return {T} The cached payload.\n   */\n  get(key) {\n    const cacheable = this.cache_[key];\n    if (cacheable) {\n      cacheable.access = ++this.access_;\n      return cacheable.payload;\n    }\n    return undefined;\n  }\n\n  /**\n   * @param {number|string} key\n   * @param {T} payload The payload to cache.\n   */\n  put(key, payload) {\n    if (!this.has(key)) {\n      this.size_++;\n    }\n    this.cache_[key] = {payload, access: this.access_};\n    this.evict_();\n  }\n\n  /**\n   * Evicts the oldest cache entry, if we've exceeded capacity.\n   */\n  evict_() {\n    if (this.size_ <= this.capacity_) {\n      return;\n    }\n\n    dev().warn(TAG, 'Trimming LRU cache');\n    const cache = this.cache_;\n    let oldest = this.access_ + 1;\n    let oldestKey;\n    for (const key in cache) {\n      const {access} = cache[key];\n      if (access < oldest) {\n        oldest = access;\n        oldestKey = key;\n      }\n    }\n\n    if (oldestKey !== undefined) {\n      delete cache[oldestKey];\n      this.size_--;\n    }\n  }\n}\n","/**\n * Copyright 2015 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {isObject} from '../types';\n\n/* @const */\nconst hasOwn_ = Object.prototype.hasOwnProperty;\n\n/**\n * Returns a map-like object.\n * If opt_initial is provided, copies its own properties into the\n * newly created object.\n * @param {T=} opt_initial This should typically be an object literal.\n * @return {T}\n * @template T\n */\nexport function map(opt_initial) {\n  const obj = Object.create(null);\n  if (opt_initial) {\n    Object.assign(obj, opt_initial);\n  }\n  return obj;\n}\n\n/**\n * Return an empty JsonObject or makes the passed in object literal\n * an JsonObject.\n * The JsonObject type is just a simple object that is at-dict.\n * See\n * https://github.com/google/closure-compiler/wiki/@struct-and-@dict-Annotations\n * for what a dict is type-wise.\n * The linter enforces that the argument is, in fact, at-dict like.\n * @param {!Object=} opt_initial\n * @return {!JsonObject}\n */\nexport function dict(opt_initial) {\n  // We do not copy. The linter enforces that the passed in object is a literal\n  // and thus the caller cannot have a reference to it.\n  return /** @type {!JsonObject} */ (opt_initial || {});\n}\n\n/**\n * Checks if the given key is a property in the map.\n *\n * @param {T}  obj a map like property.\n * @param {string}  key\n * @return {boolean}\n * @template T\n */\nexport function hasOwn(obj, key) {\n  return hasOwn_.call(obj, key);\n}\n\n/**\n * Returns obj[key] iff key is obj's own property (is not inherited).\n * Otherwise, returns undefined.\n *\n * @param {Object} obj\n * @param {string} key\n * @return {*}\n */\nexport function ownProperty(obj, key) {\n  if (hasOwn(obj, key)) {\n    return obj[key];\n  } else {\n    return undefined;\n  }\n}\n\n/**\n * Deep merges source into target.\n *\n * @param {!Object} target\n * @param {!Object} source\n * @param {number} depth The maximum merge depth. If exceeded, Object.assign\n *                       will be used instead.\n * @return {!Object}\n * @throws {Error} If source contains a circular reference.\n * Note: Only nested objects are deep-merged, primitives and arrays are not.\n */\nexport function deepMerge(target, source, depth = 10) {\n  // Keep track of seen objects to detect recursive references.\n  const seen = [];\n\n  /** @type {!Array<{t: !Object, s: !Object, d: number}>} */\n  const queue = [];\n  queue.push({t: target, s: source, d: 0});\n\n  // BFS to ensure objects don't have recursive references at shallower depths.\n  while (queue.length > 0) {\n    const {t, s, d} = queue.shift();\n    if (seen.includes(s)) {\n      throw new Error('Source object has a circular reference.');\n    }\n    seen.push(s);\n    if (t === s) {\n      continue;\n    }\n    if (d > depth) {\n      Object.assign(t, s);\n      continue;\n    }\n    Object.keys(s).forEach(key => {\n      const newValue = s[key];\n      // Perform a deep merge IFF both target and source have the same key\n      // whose corresponding values are objects.\n      if (hasOwn(t, key)) {\n        const oldValue = t[key];\n        if (isObject(newValue) && isObject(oldValue)) {\n          queue.push({t: oldValue, s: newValue, d: d + 1});\n          return;\n        }\n      }\n      t[key] = newValue;\n    });\n  }\n  return target;\n}\n\n/**\n * @param {!Object} o An object to remove properties from\n * @param {!Array<string>} props A list of properties to remove from the Object\n * @return {!Object} An object with the given properties removed\n */\nexport function omit(o, props) {\n  return Object.keys(o).reduce((acc, key) => {\n    if (!props.includes(key)) {\n      acc[key] = o[key];\n    }\n    return acc;\n  }, {});\n}\n","/**\n * Copyright 2016 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Returns a Deferred struct, which holds a pending promise and its associated\n * resolve and reject functions.\n *\n * This is preferred instead of creating a Promise instance to extract the\n * resolve/reject functions yourself:\n *\n * ```\n * // Avoid doing\n * let resolve;\n * const promise = new Promise(res => {\n *   resolve = res;\n * });\n *\n * // Good\n * const deferred = new Deferred();\n * const { promise, resolve } = deferred;\n * ```\n *\n * @template T\n */\nexport class Deferred {\n  /**\n   * Creates an instance of Deferred.\n   */\n  constructor() {\n    let resolve, reject;\n\n    /**\n     * @const {!Promise<T>}\n     */\n    this.promise = new /*OK*/Promise((res, rej) => {\n      resolve = res;\n      reject = rej;\n    });\n\n    /**\n     * @const {function(T=)}\n     */\n    this.resolve = resolve;\n\n    /**\n     * @const {function(*=)}\n     */\n    this.reject = reject;\n  }\n}\n\n/**\n * Creates a promise resolved to the return value of fn.\n * If fn sync throws, it will cause the promise to reject.\n *\n * @param {function():T} fn\n * @return {!Promise<T>}\n * @template T\n */\nexport function tryResolve(fn) {\n  return new Promise(resolve => {\n    resolve(fn());\n  });\n}\n\n/**\n * Returns a promise which resolves if a threshold amount of the given promises\n * resolve, and rejects otherwise.\n * @param {!Array<!Promise>} promises The array of promises to test.\n * @param {number} count The number of promises that must resolve for the\n *     returned promise to resolve.\n * @return {!Promise} A promise that resolves if any of the given promises\n *     resolve, and which rejects otherwise.\n */\nexport function some(promises, count = 1) {\n  return new Promise((resolve, reject) => {\n    count = Math.max(count, 0);\n    const extra = promises.length - count;\n    if (extra < 0) {\n      reject(new Error('not enough promises to resolve'));\n    }\n    if (promises.length == 0) {\n      resolve([]);\n    }\n    const values = [];\n    const reasons = [];\n\n    const onFulfilled = value => {\n      if (values.length < count) {\n        values.push(value);\n      }\n      if (values.length == count) {\n        resolve(values);\n      }\n    };\n    const onRejected = reason => {\n      if (reasons.length <= extra) {\n        reasons.push(reason);\n      }\n      if (reasons.length > extra) {\n        reject(reasons);\n      }\n    };\n    for (let i = 0; i < promises.length; i++) {\n      Promise.resolve(promises[i]).then(onFulfilled, onRejected);\n    }\n  });\n}\n\n/**\n * Resolves with the result of the last promise added.\n * @implements {IThenable}\n */\nexport class LastAddedResolver {\n  /**\n   * @param {!Array<!Promise>=} opt_promises\n   */\n  constructor(opt_promises) {\n    let resolve_, reject_;\n    /** @private @const {!Promise} */\n    this.promise_ = new Promise((resolve, reject) => {\n      resolve_ = resolve;\n      reject_ = reject;\n    });\n\n    /** @private */\n    this.resolve_ = resolve_;\n\n    /** @private */\n    this.reject_ = reject_;\n\n    /** @private */\n    this.count_ = 0;\n\n    if (opt_promises) {\n      for (let i = 0; i < opt_promises.length; i++) {\n        this.add(opt_promises[i]);\n      }\n    }\n  }\n\n  /**\n   * Add a promise to possibly be resolved.\n   * @param {!Promise} promise\n   * @return {!Promise}\n   */\n  add(promise) {\n    const countAtAdd = ++this.count_;\n    Promise.resolve(promise).then(result => {\n      if (this.count_ === countAtAdd) {\n        this.resolve_(result);\n      }\n    }, error => {\n      // Don't follow behavior of Promise.all and Promise.race error so that\n      // this will only reject when most recently added promise fails.\n      if (this.count_ === countAtAdd) {\n        this.reject_(error);\n      }\n    });\n    return this.promise_;\n  }\n\n  /** @override */\n  then(opt_resolve, opt_reject) {\n    return this.promise_.then(opt_resolve, opt_reject);\n  }\n}\n","/*! https://mths.be/cssescape v1.5.1 by @mathias | MIT license */\n\n\n/**\n * This regex consists of 4 matching capture groups and one (non-matching) fallback:\n *\n * - (\\0), catch the null terminator character so it may be replaced by UTF\n *   Replacement Char\n * - ^(-)$, catch a solitary dash char, so that it may be backslash escaped.\n *   This is a separate capture group so that the legal-chars (group 4) doesn't\n *   capture it first, since that group doesn't need to escape its dash.\n * - ([\\x01-\\x1f\\x7f]|^-?[0-9]), catch a UTF control char, or any leading\n *   number (with an optional leading dash). The control or the number (but not\n *   the leading dash) must be hex-escaped,.\n * - ([\\x80-\\uffff0-9a-zA-Z_-]+), catch legal-chars, with the exception of a\n *   solitary dash, which will already have matched in group 1.\n * - [^], finally, a catch-all that allows us to backslash escape the char.\n *\n * Together, this matches everything necessary for CSS.escape.\n */\nvar regex = /(\\0)|^(-)$|([\\x01-\\x1f\\x7f]|^-?[0-9])|([\\x80-\\uffff0-9a-zA-Z_-]+)|[^]/g;\n\nfunction escaper(match, nil, dash, hexEscape, chars) {\n  // Chars is the legal-chars (group 4) capture\n  if (chars) {\n    return chars;\n  }\n  // Nil is the null terminator (group 1) capture\n  if (nil) {\n    return '\\uFFFD';\n  }\n  // Both UTF control chars, and leading numbers (with optional leading dash)\n  // (group 3) must be backslash escaped with a trailing space.  Funnily, the\n  // leading dash must not be escaped, but the number. :shrug:\n  if (hexEscape) {\n    return match.slice(0, -1) + '\\\\' + match.slice(-1).charCodeAt(0).toString(16) + ' '\n  }\n  // Finally, the solitary dash and the catch-all chars require backslash\n  // escaping.\n  return '\\\\' + match;\n}\n\n/**\n * https://drafts.csswg.org/cssom/#serialize-an-identifier\n * @param {string} value\n * @return {string}\n */\nexport function cssEscape(value) {\n  return String(value).replace(regex, escaper);\n}\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}