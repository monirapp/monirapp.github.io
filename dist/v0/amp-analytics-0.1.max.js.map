{"version":3,"sources":["node_modules/browser-pack/_prelude.js","extensions/amp-analytics/0.1/activity-impl.js","extensions/amp-analytics/0.1/amp-analytics.js","extensions/amp-analytics/0.1/analytics-root.js","extensions/amp-analytics/0.1/batching-plugins.js","extensions/amp-analytics/0.1/config.js","extensions/amp-analytics/0.1/events.js","extensions/amp-analytics/0.1/iframe-transport-message-queue.js","extensions/amp-analytics/0.1/iframe-transport-vendors.js","extensions/amp-analytics/0.1/iframe-transport.js","extensions/amp-analytics/0.1/instrumentation.js","extensions/amp-analytics/0.1/requests.js","extensions/amp-analytics/0.1/resource-timing.js","extensions/amp-analytics/0.1/sandbox-vars-whitelist.js","extensions/amp-analytics/0.1/transport.js","extensions/amp-analytics/0.1/variables.js","extensions/amp-analytics/0.1/vendors.js","extensions/amp-analytics/0.1/visibility-manager.js","extensions/amp-analytics/0.1/visibility-model.js","node_modules/document-register-element/build/document-register-element.patched.js","node_modules/promise-pjs/promise.js","src/3p-frame-messaging.js","src/ad-helper.js","src/common-signals.js","src/config.js","src/cookies.js","src/document-ready.js","src/dom.js","src/element-service.js","src/event-helper-listen.js","src/event-helper.js","src/experiments.js","src/friendly-iframe-embed.js","src/iframe-helper.js","src/intersection-observer-polyfill.js","src/json.js","src/layout-rect.js","src/layout.js","src/log.js","src/mode-object.js","src/mode.js","src/observable.js","src/pixel.js","src/polyfills.js","src/polyfills/array-includes.js","src/polyfills/custom-elements.js","src/polyfills/document-contains.js","src/polyfills/domtokenlist-toggle.js","src/polyfills/math-sign.js","src/polyfills/object-assign.js","src/polyfills/promise.js","src/service.js","src/service/jank-meter.js","src/services.js","src/static-template.js","src/string.js","src/style.js","src/types.js","src/url-parse-query-string.js","src/url-try-decode-uri-component.js","src/url.js","src/utils/array.js","src/utils/base64.js","src/utils/bytes.js","src/utils/lru-cache.js","src/utils/object.js","src/utils/promise.js","src/utils/signals.js","src/video-interface.js","third_party/css-escape/css-escape.js"],"names":[],"mappings":"AAAA;;;;;;qjBCAA;;;;;;;;;;;;;;;;AAgBA;;;;;QAiHgB,gC,GAAA,gC;;AA5GhB;;AACA;;AACA;;AACA;;;;AAGA;;;;AAIA,IAAM,0BAA0B,CAAhC;;AAEA;;;AAGA,IAAM,oBAAoB;AACxB,UAAQ,QADgB;AAExB,YAAU;AAFc,CAA1B;;AAKA;;;;;;AAMA,IAAI,yBAAJ;;AAEA;;;;;;;AAOA,SAAS,sBAAT,CAAgC,aAAhC,EAA+C,IAA/C,EAAqD;AACnD,MAAI,kBAAkB,CAAtB;;AAEA,MAAI,cAAc,IAAd,KAAuB,kBAAkB,MAA7C,EAAqD;AACnD,sBAAkB,uBAAlB;AACD;;AAED,SAAO,KAAK,GAAL,CAAS,OAAO,cAAc,IAA9B,EAAoC,eAApC,CAAP;AACD;;IAEK,e;;AAEJ;;;AAGA,6BAAc;AAAA;;AACZ;AACA,SAAK,iBAAL,GAAyB,CAAzB;;AAEA;;;;AAIA,SAAK,kBAAL,GAA0B,SAA1B;AACD;;AAED;;;;;;;;yBAIK,a,EAAe;AAClB,UAAI,CAAC,KAAK,kBAAV,EAA8B;AAC5B,aAAK,kBAAL,GAA0B,aAA1B;AACD;;AAED,UAAI,KAAK,kBAAL,CAAwB,IAAxB,GAA+B,cAAc,IAAjD,EAAuD;AACrD,aAAK,iBAAL,IACI,uBAAuB,KAAK,kBAA5B,EAAgD,cAAc,IAA9D,CADJ;AAEA,aAAK,kBAAL,GAA0B,aAA1B;AACD;AACF;;AAED;;;;;;;;;wCAMoB,I,EAAM;AACxB,UAAI,mBAAmB,CAAvB;AACA,UAAI,KAAK,kBAAL,KAA4B,SAAhC,EAA2C;AACzC,2BAAmB,KAAK,iBAAL,GACf,uBAAuB,KAAK,kBAA5B,EAAgD,IAAhD,CADJ;AAED;AACD,aAAO,gBAAP;AACD;;;;;;AAKH;;;;;;;;AAMA,IAAM,qBAAqB,CACzB,WADyB,EACZ,SADY,EACD,WADC,EACY,SADZ,EACuB,OADvB,CAA3B;;AAIA;;;AAGO,SAAS,gCAAT,CAA0C,MAA1C,EAAkD;AACvD,6CAA6B,MAA7B,EAAqC,UAArC,EAAiD,QAAjD;AACD;;IAEY,Q,WAAA,Q;;AAEX;;;;;;;;;;;;;;;;;;;AAmBA,oBAAY,MAAZ,EAAoB;AAAA;;AAClB;AACA,SAAK,MAAL,GAAc,MAAd;;AAEA;AACA,SAAK,gBAAL,GAAwB,KAAK,WAAL,CAAiB,IAAjB,CAAsB,IAAtB,CAAxB;;AAEA;AACA,SAAK,oBAAL,GAA4B,KAAK,eAAL,CAAqB,IAArB,CAA0B,IAA1B,CAA5B;;AAEA;AACA,SAAK,4BAAL,GAAoC,KAAK,uBAAL,CAA6B,IAA7B,CAAkC,IAAlC,CAApC;;AAEA;;;;AAIA,SAAK,0BAAL,GAAkC;AAChC;;;AADgC,KAAlC;;AAMA;AACA,SAAK,cAAL,GAAsB,EAAtB;;AAEA;AACA,SAAK,eAAL,GAAuB,KAAvB;;AAEA;AACA,SAAK,eAAL,GAAuB,KAAvB;;AAEA;AACA,SAAK,gBAAL,GAAwB,IAAI,eAAJ,EAAxB;;AAEA;AACA,SAAK,OAAL,GAAe,mBAAS,YAAT,CAAsB,KAAK,MAA3B,CAAf;;AAEA;AACA,SAAK,SAAL,GAAiB,mBAAS,cAAT,CAAwB,KAAK,MAA7B,CAAjB;;AAEA,SAAK,OAAL,CAAa,gBAAb,GAAgC,IAAhC,CAAqC,KAAK,MAAL,CAAY,IAAZ,CAAiB,IAAjB,CAArC;AACD;;AAED;;;;;6BACS;AACP;AACA,WAAK,UAAL,GAAkB,KAAK,GAAL,EAAlB;AACA;AACA,WAAK,eAAL;AACA,WAAK,uBAAL;AACD;;AAED;;;;yCACqB;AACnB,UAAM,iBAAiB,KAAK,GAAL,KAAa,KAAK,UAAzC;AACA;AACA;AACA;AACA,aAAQ,iBAAiB,CAAjB,GAAqB,cAArB,GAAsC,CAA9C;AACD;;AAED;;;;;;;;kCAKc;AACZ,WAAK,eAAL,GAAuB,KAAvB;AACA,WAAK,eAAL,GAAuB,KAAvB;AACD;;AAED;;;;8CAC0B;AACxB,WAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,mBAAmB,MAAvC,EAA+C,GAA/C,EAAoD;AAClD,aAAK,cAAL,CAAoB,IAApB,CAAyB,yBAAO,KAAK,MAAL,CAAY,WAAZ,EAAP,EACrB,mBAAmB,CAAnB,CADqB,EACE,KAAK,oBADP,CAAzB;AAED;;AAED,WAAK,cAAL,CAAoB,IAApB,CACI,KAAK,OAAL,CAAa,mBAAb,CAAiC,KAAK,4BAAtC,CADJ;;AAGA;AACA;AACA;AACA,WAAK,SAAL,CAAe,QAAf,CAAwB,KAAK,oBAA7B;AACD;;AAED;;;;sCACkB;AAChB,UAAI,KAAK,eAAT,EAA0B;AACxB;AACD;AACD,WAAK,eAAL,GAAuB,IAAvB;AACA,WAAK,eAAL,GAAuB,KAAvB;;AAEA,WAAK,oBAAL,CAA0B,kBAAkB,MAA5C;AACD;;AAED;;;;sCACkB;AAChB,UAAI,KAAK,eAAT,EAA0B;AACxB;AACD;AACD,WAAK,eAAL,GAAuB,IAAvB;AACA,WAAK,eAAL,GAAuB,KAAvB;;AAEA,WAAK,oBAAL,CAA0B,kBAAkB,QAA5C;AACD;;AAED;;;;;;;yCAIqB,I,EAAM;AACzB,UAAM,iBAAiB,KAAK,kBAAL,EAAvB;AACA,UAAM,YAAY,KAAK,KAAL,CAAW,iBAAiB,IAA5B,CAAlB;AACA,UAAM,aAAa,OAAQ,iBAAiB,IAA5C;;AAEA;AACA,iBAAW,KAAK,gBAAhB,EAAkC,UAAlC;;AAEA,WAAK,gBAAL,CAAsB,IAAtB,CAA2B;AACzB,kBADyB;AAEzB,cAAM;AAFmB,OAA3B;AAID;;AAED;;;;8CAC0B;AACxB,UAAI,KAAK,OAAL,CAAa,SAAb,EAAJ,EAA8B;AAC5B,aAAK,eAAL;AACD,OAFD,MAEO;AACL,aAAK,eAAL;AACD;AACF;;AAED;;;;;;;gCAIY;AACV,WAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,KAAK,cAAL,CAAoB,MAAxC,EAAgD,GAAhD,EAAqD;AACnD,YAAM,eAAe,KAAK,cAAL,CAAoB,CAApB,CAArB;AACA;AACA;AACA,YAAI,OAAO,YAAP,KAAwB,UAA5B,EAAwC;AACtC;AACD;AACF;AACD,WAAK,cAAL,GAAsB,EAAtB;AACD;;AAED;;;;;;;+BAIW;AACT,WAAK,SAAL;AACD;;AAED;;;;;;;0CAIsB;AACpB,UAAM,oBAAoB,KAAK,KAAL,CAAW,KAAK,kBAAL,KAA4B,IAAvC,CAA1B;AACA,aAAO,KAAK,gBAAL,CAAsB,mBAAtB,CAA0C,iBAA1C,CAAP;AACD;;AAED;;;;;;;;;8CAM0B,I,EAAoB;AAAA,UAAd,KAAc,uEAAN,IAAM;;AAC5C,UAAI,CAAC,oBAAO,KAAK,0BAAZ,EAAwC,IAAxC,CAAL,EAAoD;AAClD,YAAI,KAAJ,EAAW;AACT,eAAK,0BAAL,CAAgC,IAAhC,IAAwC,KAAK,mBAAL,EAAxC;AACD;AACD,eAAO,KAAK,mBAAL,EAAP;AACD;AACD,UAAM,gCACJ,KAAK,0BAAL,CAAgC,IAAhC,CADF;AAEA,UAAI,UAAU,KAAd,EAAqB;AACnB,eAAO,KAAK,mBAAL,KAA6B,6BAApC;AACD;AACD,WAAK,0BAAL,CAAgC,IAAhC,IAAwC,KAAK,mBAAL,EAAxC;AACA,aAAO,KAAK,0BAAL,CAAgC,IAAhC,IACL,6BADF;AAED;;;;;;;;;;;;;;;;ACzUH;;AACA;;AACA;;AACA;;AAKA;;AACA;;AAIA;;AACA;;AAGA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AAEA;;AACA;;AACA;;;;;;+eA5CA;;;;;;;;;;;;;;;;AA8CA,IAAM,MAAM,eAAZ;;AAEA,IAAM,eAAe,EAArB,C,CAAyB;;AAEzB,IAAM,6BAA6B,CACjC,2BAAmB,OADc,EAEjC,2BAAmB,MAFc,CAAnC;;IAKa,Y,WAAA,Y;;;AAEX;AACA,wBAAY,OAAZ,EAAqB;AAAA;;AAGnB;AAHmB,4HACb,OADa;;AAInB,UAAK,eAAL,GAAuB,QAAQ,OAAR,EAAvB;;AAEA;;;;AAIA,UAAK,sBAAL,GAA8B,IAA9B;;AAEA;AACA,UAAK,UAAL,GAAkB,KAAlB;;AAEA;;;AAGA,UAAK,SAAL,GAAiB,EAAjB;;AAEA;;;AAGA,UAAK,OAAL,GAAe,mBAAf;;AAEA;AACA,UAAK,gBAAL,GAAwB,IAAxB;;AAEA;AACA,UAAK,eAAL,GAAuB,IAAvB;;AAEA;AACA,UAAK,gBAAL,GAAwB,mCAAmB,MAAK,GAAxB,CAAxB;;AAEA;AACA,UAAK,cAAL,GAAsB,mBAAS,SAAT,CAAmB,MAAK,GAAxB,CAAtB;;AAEA;AACA,UAAK,WAAL,GAAmB,IAAnB;;AAEA;AACA,UAAK,gBAAL,GAAwB,IAAxB;;AAEA;AACA,UAAK,SAAL,GAAiB,mBAAQ,MAAK,GAAb,EAAkB,OAAlB,IAA6B,QAA9C;;AAEA;;;;;AAKA,UAAK,+BAAL,GAAuC,KAAK,GAAL,KAAc,KAAK,IAA1D;AAnDmB;AAoDpB;;AAED;;;;;wCACoB;AAClB;AACA,aAAO,KAAK,SAAL,GAAiB,uBAAe,OAAhC,GAA0C,uBAAe,QAAhE;AACD;;AAED;;;;oCACgB;AACd,aAAO,IAAP;AACD;;AAED;;;;sCACkB,Y,EAAc;AAC9B,aAAO,IAAP;AACD;;AAED;;;;oCACgB;AAAA;;AACd,WAAK,UAAL,GAAkB,KAAK,OAAL,CAAa,YAAb,CAA0B,SAA1B,CAAlB;;AAEA,WAAK,OAAL,CAAa,YAAb,CAA0B,aAA1B,EAAyC,MAAzC;;AAEA,WAAK,sBAAL,GAA8B,KAAK,OAAL,CACzB,YADyB,CACZ,8BADY,CAA9B;;AAGA,UAAI,KAAK,sBAAL,IAA+B,IAAnC,EAAyC;AACvC,aAAK,eAAL,GACI,mBAAS,6BAAT,CAAuC,KAAK,OAA5C,EACK,IADL,CACU;AAAA,iBAAW,QAAQ,GAAR,CAAY,gBAAM,YAAN,CACzB,OAAK,sBADoB,CAAZ,CAAX;AAAA,SADV,CADJ;AAID;;AAED,UAAI,KAAK,OAAL,CAAa,YAAb,CAA0B,SAA1B,KAAwC,WAA5C,EAAyD;AACvD,aAAK,kBAAL;AACD;AACF;;AAED;;;;qCACiB;AACf;AACA;AACA,aAAO,KAAK,kBAAL,EAAP;AACD;;AAED;;;;uCACmB;AACjB,UAAI,KAAK,eAAT,EAA0B;AACxB,aAAK,eAAL,CAAqB,OAArB;AACA,aAAK,eAAL,GAAuB,IAAvB;AACD;AACD,WAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,KAAK,SAAL,CAAe,MAAnC,EAA2C,GAA3C,EAAgD;AAC9C,aAAK,SAAL,CAAe,CAAf,EAAkB,OAAlB;AACA,eAAO,KAAK,SAAL,CAAe,CAAf,CAAP;AACD;AACF;;AAED;;;;qCACiB;AACf,UAAI,KAAK,OAAL,CAAa,WAAb,KAA6B,KAAK,OAAL,CAAa,WAAb,EAA0B,QAA1B,CAAjC,EAAsE;AACpE,aAAK,oBAAL;AACD;AACF;;AAED;;;;uCACmB;AACjB,UAAI,mBAAS,YAAT,CAAsB,KAAK,SAAL,EAAtB,EAAwC,SAAxC,EAAJ,EAAyD;AACvD;AACA,eAAO,KAAP;AACD;;AAED;AACA,UAAI,KAAK,gBAAT,EAA2B;AACzB,aAAK,gBAAL,CAAsB,MAAtB;AACA,aAAK,gBAAL,GAAwB,IAAxB;AACD;AACD;AACD;;AAED;;;;;;;yCAIqB;AAAA;;AACnB,UAAI,KAAK,WAAT,EAAsB;AACpB,eAAO,KAAK,WAAZ;AACD;AACD,yBAAO,KAAK,OAAZ,EAAqB,KAArB;AACA,WAAK,WAAL,GACI,mBAAS,YAAT,CAAsB,KAAK,SAAL,EAAtB,EAAwC,gBAAxC;AACI;AADJ,OAEK,IAFL,CAEU;AAAA,eAAM,mBAAS,QAAT,CAAkB,OAAK,GAAvB,EAA4B,OAA5B,CAAoC,CAApC,CAAN;AAAA,OAFV,EAGK,IAHL,CAGU;AAAA,eAAM,OAAK,eAAX;AAAA,OAHV,EAIK,IAJL,CAIU;AAAA,eAAM,0DAAoC,OAAK,SAAL,EAApC,CAAN;AAAA,OAJV,EAKK,IALL,CAKU,2BAAmB;AACvB,eAAK,gBAAL,GAAwB,eAAxB;AACA,eAAO,4BAAoB,OAAK,OAAzB,EAAkC,UAAlC,EAAP;AACD,OARL,EASK,IATL,CASU,kBAAU;AACd,eAAK,OAAL,GAAe,MAAf;AACD,OAXL,EAYK,IAZL,CAYU,KAAK,iBAAL,CAAuB,IAAvB,CAA4B,IAA5B,CAZV,CADJ;AAcA,aAAO,KAAK,WAAZ;AACD;;AAED;;;;;;;;wCAKoB;AAAA;;AAClB,UAAI,KAAK,YAAL,EAAJ,EAAyB;AACvB;AACA,YAAM,OAAM,KAAK,QAAL,EAAZ;AACA,yBAAO,IAAP,CAAY,IAAZ,EAAiB,2CAAjB;AACA,eAAO,QAAQ,OAAR,EAAP;AACD;;AAED,WAAK,iBAAL;;AAEA,UAAI,CAAC,KAAK,OAAL,CAAa,UAAb,CAAL,EAA+B;AAC7B,YAAM,QAAM,KAAK,QAAL,EAAZ;AACA,aAAK,IAAL,GAAY,KAAZ,CAAkB,KAAlB,EAAuB,mCACnB,yCADJ;AAEA,eAAO,QAAQ,OAAR,EAAP;AACD;;AAED,WAAK,sBAAL,CAA4B,KAAK,OAAL,CAAa,gBAAb,CAA5B,EACI,KAAK,OAAL,CAAa,0BAAb,CADJ;;AAGA,WAAK,eAAL,GACI,KAAK,gBAAL,CAAsB,oBAAtB,CAA2C,KAAK,OAAhD,CADJ;;AAGA,UAAI,KAAK,OAAL,CAAa,WAAb,KAA6B,KAAK,OAAL,CAAa,WAAb,EAA0B,QAA1B,CAAjC,EAAsE;AACpE,aAAK,oBAAL;AACD;;AAED,UAAM,WAAW,EAAjB;AACA;AACA,WAAK,IAAM,CAAX,IAAgB,KAAK,OAAL,CAAa,UAAb,CAAhB,EAA0C;AACxC,YAAI,oBAAO,KAAK,OAAL,CAAa,UAAb,CAAP,EAAiC,CAAjC,CAAJ,EAAyC;AAAA;AACvC,gBAAM,UAAU,OAAK,OAAL,CAAa,UAAb,EAAyB,CAAzB,CAAhB;AACA,gBAAM,mBAAmB,OAAK,iBAAL,CACrB,EADqB,EACjB,OADiB,EACR,SADQ,EACG,IADH,CAAzB;AAEA,gBAAM,MAAM,OAAK,QAAL,EAAZ;AACA,gBAAI,CAAC,OAAL,EAAc;AACZ,qBAAK,IAAL,GAAY,KAAZ,CAAkB,GAAlB,EAAuB,+BAAvB,EAAwD,CAAxD;AACA;AACD;AACD,gBAAI,CAAC,QAAQ,IAAR,CAAD,IAAkB,CAAC,QAAQ,SAAR,CAAvB,EAA2C;AACzC,qBAAK,IAAL,GAAY,KAAZ,CAAkB,GAAlB,EAAuB,wBACnB,mDADJ;AAEA;AACD;AACD;AACA,gBAAI,OAAK,UAAT,EAAqB;AACnB,kBAAM,YAAY,QAAQ,IAAR,CAAlB;AACA,kBAAI,oDAAgC,SAAhC,KACA,CAAC,2BAA2B,QAA3B,CAAoC,SAApC,CADL,EACqD;AACnD,uBAAK,IAAL,GAAY,KAAZ,CAAkB,GAAlB,EAAuB,YACnB,8CADJ;AAEA;AACD;AACF;;AAED,mBAAK,sBAAL,CAA4B,QAAQ,gBAAR,CAA5B,EACI,OAAK,OAAL,CAAa,0BAAb,CADJ;AAEA,qBAAS,IAAT,CAAc,OAAK,YAAL,CAAkB,OAAlB,EAA2B,IAA3B,CAAgC,kBAAU;AACtD,kBAAI,CAAC,MAAL,EAAa;AACX;AACD;AACD;AACA,kBAAI,OAAK,UAAT,EAAqB;AACnB;AACA,oBAAI,CAAC,OAAK,OAAL,CAAa,aAAlB,EAAiC;AAC/B;AACA;AACD;AACD,wBAAQ,UAAR,IAAsB,OAAK,OAAL,CAAa,aAAb,CAA2B,OAAjD;AACA,wBAAQ,iBAAR,IAA6B,SAA7B;AACA,uBAAK,mBAAL,CAAyB,OAAzB;AACD,eATD,MASO,IAAI,QAAQ,UAAR,CAAJ,EAAyB;AAC9B;AACA,uBAAO,OAAK,gBAAL,CAAsB,cAAtB,CACH,QAAQ,UAAR,CADG,EACkB,gBADlB,EAEF,IAFE,CAEG,oBAAY;AAChB,0BAAQ,UAAR,IAAsB,QAAtB;AACA,yBAAK,mBAAL,CAAyB,OAAzB;AACD,iBALE,CAAP;AAMD,eARM,MAQA;AACL,uBAAK,mBAAL,CAAyB,OAAzB;AACD;AACF,aAzBa,CAAd;AA3BuC;;AAAA,mCAqBnC;AAgCL;AACF;AACD,aAAO,QAAQ,GAAR,CAAY,QAAZ,CAAP;AACD;;AAED;;;;;;;;;;;2CAQuB;AACrB,UAAI,KAAK,gBAAT,EAA2B;AACzB;AACD;AACD,WAAK,OAAL,CAAa,kDAA4B,KAAK,SAAL,GAAiB,GAA7C,CAAb,EAAgE,QAAhE;AACA,UAAM,kBAAkB,KAAK,qBAAL,EAAxB;;AAEA,WAAK,gBAAL,GAAwB;AACpB;AACA,WAAK,SAAL,GAAiB,KAAK,GAAtB,GAA4B,KAAK,SAAL,GAAiB,GAFzB,EAGpB,KAAK,OAAL,CAAa,YAAb,CAA0B,MAA1B,CAHoB,EAIpB,KAAK,OAAL,CAAa,WAAb,CAJoB,EAIO,eAJP,CAAxB;AAKD;;AAED;;;;;;;;;;;4BAQQ,G,EAAK,a,EAAe;AAC1B,WAAK,UAAL,CAAgB,OAAhB,CAAwB,GAAxB,EAA6B,aAA7B;AACD;;AAED;;;;;;;;;4CAMwB;AACtB,aAAO,iBAAO,YAAP,CACH,kCAAmB,KAAK,OAAxB,EAAiC,2BAAa,KAAK,GAAlB,CAAjC,CADG,EAEA,KAAK,QAAL,EAAH,wDACA,8CAHG,CAAP;AAID;;AAED;;;;;;;;;;wCAOoB,M,EAAQ;AAC1B,UAAI;AACF,aAAK,eAAL,CAAqB,UAArB,CACI,MADJ,EACY,KAAK,YAAL,CAAkB,IAAlB,CAAuB,IAAvB,EAA6B,MAA7B,CADZ;AAED,OAHD,CAGE,OAAO,CAAP,EAAU;AACV,YAAM,QAAM,KAAK,QAAL,EAAZ;AACA,YAAM,YAAY,OAAO,IAAP,CAAlB;AACA,+BAAa,KAAb,EAAkB,gCAAgC,SAAhC,GAA4C,GAA9D,EAAmE,CAAnE;AACD;AACF;;AAED;;;;;;;;;;;2CAQuB,M,EAAQ,U,EAAY;AACzC,UAAI,UAAU,UAAd,EAA0B;AACxB;AACA;AACA;AACA,YAAI,QAAQ,CAAZ;AACA,aAAK,IAAM,aAAX,IAA4B,UAA5B,EAAwC;AACtC,cAAI,EAAE,KAAF,GAAU,YAAd,EAA4B;AAC1B,gBAAM,QAAM,KAAK,QAAL,EAAZ;AACA,iBAAK,IAAL,GAAY,KAAZ,CAAkB,KAAlB,EACI,eAAe,YAAf,GAA8B,kCAA9B,GACA,oCAFJ;AAGA;AACD;;AAED,eAAK,IAAM,iBAAX,IAAgC,MAAhC,EAAwC;AACtC,gBAAM,SAAS,kBAAkB,OAAlB,CACX,aADW,EAEX,WAAW,aAAX,CAFW,CAAf;AAIA,gBAAI,qBAAqB,MAAzB,EAAiC;AAC/B,kBAAM,QAAQ,OAAO,iBAAP,CAAd;AACA,qBAAO,OAAO,iBAAP,CAAP;AACA,qBAAO,MAAP,IAAiB,KAAjB;AACD;AACF;AACF;AACF;AACF;;AAED;;;;;;mCAGe;AACb,UAAI,CAAC,KAAK,OAAL,CAAa,QAAb,CAAL,EAA6B;AAC3B,eAAO,KAAP;AACD;;AAED,UAAM,QAAQ,KAAK,OAAL,CAAa,QAAb,EAAuB,KAAvB,CAA6B,GAA7B,CAAd;AACA,UAAI,IAAI,KAAK,GAAb;AACA,WAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,MAAM,MAA1B,EAAkC,GAAlC,EAAuC;AACrC,YAAI,CAAC,CAAL,EAAQ;AACN,iBAAO,KAAP;AACD;AACD,YAAI,EAAE,MAAM,CAAN,CAAF,CAAJ;AACD;AACD;AACA;AACA;AACA,aAAO,GAAP;AACD;;AAED;;;;;;;;;;wCAOoB;AAAA;;AAClB,UAAI,CAAC,KAAK,OAAN,IAAiB,CAAC,KAAK,OAAL,CAAa,UAAb,CAAtB,EAAgD;AAC9C,YAAM,QAAM,KAAK,QAAL,EAAZ;AACA,aAAK,IAAL,GAAY,KAAZ,CAAkB,KAAlB,EAAuB,2CACnB,uCADJ;AAEA;AACD;;AAED,UAAI,KAAK,OAAL,CAAa,UAAb,CAAJ,EAA8B;AAC5B,aAAK,IAAM,CAAX,IAAgB,KAAK,OAAL,CAAa,UAAb,CAAhB,EAA0C;AACxC,cAAI,oBAAO,KAAK,OAAL,CAAa,UAAb,CAAP,EAAiC,CAAjC,CAAJ,EAAyC;AACvC,gBAAM,UAAU,KAAK,OAAL,CAAa,UAAb,EAAyB,CAAzB,CAAhB;AACA,gBAAI,CAAC,QAAQ,SAAR,CAAL,EAAyB;AACvB,mBAAK,IAAL,GAAY,KAAZ,CAAkB,GAAlB,EAAuB,6BAAvB;AACA,qBAAO,KAAK,OAAL,CAAa,UAAb,EAAyB,CAAzB,CAAP;AACD;AACF;AACF;;AAED;AACA;AACA;AACA,aAAK,IAAM,EAAX,IAAgB,KAAK,OAAL,CAAa,UAAb,CAAhB,EAA0C;AACxC,eAAK,OAAL,CAAa,UAAb,EAAyB,EAAzB,EAA4B,SAA5B,IACI,4BAAe,KAAK,OAAL,CAAa,UAAb,EAAyB,EAAzB,EAA4B,SAA5B,CAAf,EAAuD,eAAO;AAC5D,gBAAM,UAAU,OAAK,OAAL,CAAa,UAAb,EAAyB,GAAzB,CAAhB;AACA,mBAAQ,WAAW,QAAQ,SAAR,CAAZ,IAAmC,OAAO,GAAP,GAAa,GAAvD;AACD,WAHD,EAGG,CAHH,CADJ;AAKD;;AAED,YAAM,WAAW,EAAjB;AACA,aAAK,IAAM,GAAX,IAAgB,KAAK,OAAL,CAAa,UAAb,CAAhB,EAA0C;AACxC,cAAI,oBAAO,KAAK,OAAL,CAAa,UAAb,CAAP,EAAiC,GAAjC,CAAJ,EAAyC;AACvC,gBAAM,WAAU,KAAK,OAAL,CAAa,UAAb,EAAyB,GAAzB,CAAhB;AACA,qBAAS,GAAT,IAAc,6BACV,KAAK,OADK,EACI,QADJ,EACa,KAAK,UADlB,EAEV,KAAK,YAAL,CAAkB,IAAlB,CAAuB,IAAvB,CAFU,EAGV,KAAK,UAHK,CAAd;AAID;AACF;AACD,aAAK,SAAL,GAAiB,QAAjB;AACD;AACF;;AAED;;;;;;;;;;;iCAQa,O,EAAS,K,EAAO;AAC3B,UAAM,WAAW,oBAAQ,QAAQ,SAAR,CAAR,IACb,QAAQ,SAAR,CADa,GACQ,CAAC,QAAQ,SAAR,CAAD,CADzB;;AAGA,WAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,SAAS,MAA7B,EAAqC,GAArC,EAA0C;AACxC,YAAM,cAAc,SAAS,CAAT,CAApB;AACA,aAAK,sBAAL,CAA4B,WAA5B,EAAyC,OAAzC,EAAkD,KAAlD;AACD;AACF;;AAED;;;;;;;;;;;2CAQuB,W,EAAa,O,EAAS,K,EAAO;AAAA;;AAClD,UAAI,CAAC,KAAK,OAAL,CAAa,aAAb,CAA2B,WAAhC,EAA6C;AAC3C,YAAM,QAAM,KAAK,QAAL,EAAZ;AACA,wBAAM,IAAN,CAAW,KAAX,EAAgB,mCAAhB,EAAqD,QAAQ,IAAR,CAArD;AACD;;AAED,UAAM,UAAU,KAAK,SAAL,CAAe,WAAf,CAAhB;;AAEA,UAAI,CAAC,OAAL,EAAc;AACZ,YAAM,QAAM,KAAK,QAAL,EAAZ;AACA,aAAK,IAAL,GAAY,KAAZ,CAAkB,KAAlB,EAAuB,oCACnB,aADJ,EACmB,QAAQ,SAAR,CADnB;AAEA;AACD;;AAED,WAAK,oBAAL,CAA0B,OAA1B,EAAmC,KAAnC,EAA0C,IAA1C,CAA+C,mBAAW;AACxD,YAAI,CAAC,OAAL,EAAc;AACZ;AACD;AACD,eAAK,qBAAL,CAA2B,OAA3B,EAAoC,OAApC,EAA6C,KAA7C;AACD,OALD;AAMD;;AAED;;;;;;;;;gDAM4B,O,EAAS,gB,EAAkB;AACrD,UAAM,kBAAkB,EAAxB;AACA,UAAM,qBAAqB,QAAQ,oBAAR,CAA3B;AACA,UAAI,kBAAJ,EAAwB;AACtB;AACA;AACA,YAAI,CAAC,mBAAmB,MAAnB,CAAD,IACA,KAAK,GAAL,KAAa,KAAK,+BADtB,EACuD;AACrD,cAAM,UAAU,iBAAhB;AACA,cAAM,eAAe,gBAArB;AACA,0BAAgB,OAAhB,IACI,6CAAwB,KAAK,GAA7B,EAAkC,kBAAlC,CADJ;AAEA,2BAAiB,IAAjB,CAAsB,YAAtB,IAAsC,OAAtC;AACD;AACF;AACD,aAAO,eAAP;AACD;;AAED;;;;;;;;;0CAMsB,O,EAAS,O,EAAS,K,EAAO;AAC7C,WAAK,OAAL,CAAa,MAAb,EAAqB,cAArB;AACA,UAAM,mBAAmB,KAAK,iBAAL,CAAuB,KAAvB,EAA8B,OAA9B,CAAzB;AACA,UAAM,kBACF,KAAK,2BAAL,CAAiC,OAAjC,EAA0C,gBAA1C,CADJ;AAEA,cAAQ,IAAR,CACI,KAAK,OAAL,CAAa,gBAAb,CADJ,EACoC,OADpC,EAC6C,gBAD7C,EAEI,eAFJ;AAGD;;AAED;;;;;;;;;iCAMa,O,EAAS;AAAA;;AACpB;AACA,UAAM,OAAO,QAAQ,YAAR,CAAb;AACA,UAAM,UAAU,QAAQ,OAAR,CAAgB,IAAhB,CAAhB;AACA,UAAM,MAAM,KAAK,QAAL,EAAZ;AACA,UAAI,CAAC,IAAL,EAAW;AACT,eAAO,OAAP;AACD;AACD,UAAM,WAAW,KAAK,UAAL,CAAjB;AACA,UAAI,CAAC,QAAL,EAAe;AACb,aAAK,IAAL,GAAY,KAAZ,CAAkB,GAAlB,EAAuB,yBAAvB;AACA,eAAO,OAAP;AACD;AACD,UAAM,YAAY,WAAW,KAAK,WAAL,CAAX,CAAlB,CAboB,CAa6B;AACjD,UAAI,aAAa,CAAb,IAAkB,aAAa,GAAnC,EAAwC;AACtC,YAAM,mBAAmB,KAAK,iBAAL,CAAuB,EAAvB,EAA2B,OAA3B,CAAzB;AACA,eAAO,KAAK,4BAAL,CAAkC,QAAlC,EAA4C,gBAA5C,EACF,IADE,CACG;AAAA,iBAAO,OAAK,cAAL,CAAoB,OAApB,CAA4B,GAA5B,CAAP;AAAA,SADH,EAEF,IAFE,CAEG;AAAA,iBAAU,SAAS,GAAT,GAAe,SAAzB;AAAA,SAFH,CAAP;AAGD;AACD,wBAAO,MAAM,KAAb,CAAmB,GAAnB,EAAwB,iCAAxB;AACA,aAAO,OAAP;AACD;;AAED;;;;;;;;;;;yCAQqB,O,EAAS,K,EAAO;AACnC,UAAM,mBAAmB,KAAK,iBAAL,CAAuB,KAAvB,EAA8B,OAA9B,CAAzB;AACA,UAAM,oBACF,KAAK,iBAAL,CAAuB,KAAK,OAAL,CAAa,SAAb,CAAvB,EAAgD,gBAAhD,CADJ;AAEA,UAAM,wBACF,KAAK,iBAAL,CAAuB,QAAQ,SAAR,CAAvB,EAA2C,gBAA3C,CADJ;;AAGA,aAAO,QAAQ,GAAR,CAAY,CAAC,iBAAD,EAAoB,qBAApB,CAAZ,EACF,IADE,CACG,mBAAW;AACf,wBAAM,MAAN,CAAa,QAAQ,MAAR,KAAmB,CAAhC;AACA,eAAO,QAAQ,CAAR,KAAc,QAAQ,CAAR,CAArB;AACD,OAJE,CAAP;AAKD;;AAED;;;;;;;;;;;;;sCAUkB,I,EAAM,gB,EAAkB;AACxC;AACA,UAAI,SAAS,SAAb,EAAwB;AACtB,eAAO,QAAQ,OAAR,CAAgB,IAAhB,CAAP;AACD;;AAED,aAAO,KAAK,4BAAL,CAAkC,IAAlC,EAAwC,gBAAxC,EACF,IADE,CACG,eAAO;AACX,eAAO,QAAQ,EAAR,IAAc,QAAQ,GAAtB,IAA6B,QAAQ,OAArC,IACH,QAAQ,MADL,IACe,QAAQ,KADvB,IACgC,QAAQ,WAD/C;AAED,OAJE,CAAP;AAKD;;AAED;;;;;;;;;;;iDAQ6B,I,EAAM,gB,EAAkB;AAAA;;AACnD,aAAO,KAAK,gBAAL,CAAsB,cAAtB,CAAqC,IAArC,EAA2C,gBAA3C,EACF,IADE,CACG;AAAA,eAAO,mBAAS,qBAAT,CACT,OAAK,OADI,EACK,cADL,CACoB,GADpB,CAAP;AAAA,OADH,CAAP;AAGD;;AAED;;;;;;;;iCAKa,O,EAAS,O,EAAS;AAC7B,UAAI,CAAC,OAAL,EAAc;AACZ,YAAM,QAAM,KAAK,QAAL,EAAZ;AACA,aAAK,IAAL,GAAY,KAAZ,CAAkB,KAAlB,EAAuB,mCAAvB;AACA;AACD;AACD,UAAI,QAAQ,YAAR,CAAJ,EAA2B;AACzB,yBAAO,MAAP,CAAc,QAAQ,IAAR,KAAiB,SAA/B,EACI,qDADJ;AAEA,+CAAuB,KAAK,GAA5B,EAAiC,OAAjC;AACD,OAJD,MAIO,IAAI,KAAK,OAAL,CAAa,WAAb,KACP,KAAK,OAAL,CAAa,WAAb,EAA0B,QAA1B,CADG,EACkC;AACvC,yBAAO,MAAP,CAAc,KAAK,gBAAnB,EACI,4CADJ;AAEA,aAAK,gBAAL,CAAsB,WAAtB,CAAkC,OAAlC;AACD,OALM,MAKA;AACL,oCAAY,KAAK,GAAjB,EAAsB,OAAtB,EAA+B,KAAK,OAAL,CAAa,WAAb,KAA6B,EAA5D;AACD;AACF;;AAED;;;;;;;;+BAKW;AACT,aAAO,mBACF,KAAK,OAAL,CAAa,YAAb,CAA0B,IAA1B,KAAmC,cADjC,CAAP;AAED;;AAED;;;;;;;;;;sCAOkB,O,EAAS,O,EAAS,c,EAAgB,Y,EAAc;AAChE,UAAM,OAAO,kBAAb;AACA,gCAAa,KAAK,OAAL,CAAa,MAAb,CAAb,EAAmC,IAAnC;AACA,gCAAa,QAAQ,MAAR,CAAb,EAA8B,IAA9B;AACA,gCAAa,QAAQ,MAAR,CAAb,EAA8B,IAA9B;AACA,aAAO,gCAAqB,IAArB,EAA2B,cAA3B,EAA2C,YAA3C,CAAP;AACD;;;;EAhpB+B,IAAI,W;;AAmpBtC,IAAI,SAAJ,CAAc,GAAd,EAAmB,KAAnB,EAA0B,eAAO;AAC/B;AACA,MAAI,qBAAJ,CACI,+BADJ;AAEA,MAAI,qBAAJ,CAA0B,UAA1B;AACA,yCAAuB,IAAI,GAA3B;AACA;AACA,MAAI,eAAJ,CAAoB,GAApB,EAAyB,YAAzB;AACD,CARD;;;;;;;;qjBC1sBA;;;;;;;;;;;;;;;;AAgBA;;AACA;;AAIA;;AAKA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;;;;;AAEA,IAAM,MAAM,eAAZ;;AAGA;;;;;;;;;;;IAUa,a,WAAA,a;AACX;;;;AAIA,yBAAY,MAAZ,EAAoB,MAApB,EAA4B;AAAA;;AAC1B;AACA,SAAK,MAAL,GAAc,MAAd;;AAEA;AACA,SAAK,MAAL,GAAc,MAAd;;AAEA;AACA,SAAK,SAAL,GAAiB,kBAAjB;;AAEA;AACA,SAAK,kBAAL,GAA0B,IAA1B;AACD;;AAED;;;;;8BACU;AACR,WAAK,IAAM,CAAX,IAAgB,KAAK,SAArB,EAAgC;AAC9B,aAAK,SAAL,CAAe,CAAf,EAAkB,OAAlB;AACA,eAAO,KAAK,SAAL,CAAe,CAAf,CAAP;AACD;AACD,UAAI,KAAK,kBAAT,EAA6B;AAC3B,aAAK,kBAAL,CAAwB,OAAxB;AACD;AACF;;AAED;;;;;;;;8BAKU,CAAE;;AAEZ;;;;;;;;;8BAMU,CAAE;;AAEZ;;;;;;;gCAIY;AACV,aAAO,mBAAS,YAAT,CAAsB,KAAK,MAA3B,CAAP;AACD;;AAED;;;;;;;;qCAKiB;AACf,UAAM,OAAO,KAAK,OAAL,EAAb;AACA,aAAO,gBAAM,aAAN,CAAoB,KAAK,eAAL,IAAwB,KAAK,IAA7B,IAAqC,IAAzD,CAAP;AACD;;AAED;;;;;;;;;qCAMiB,CAAE;;AAEnB;;;;;;;;;8BAMU,CAAE;;AAEZ;;;;;;;;;6BAMS,I,EAAM;AACb,aAAO,KAAK,OAAL,GAAe,QAAf,CAAwB,IAAxB,CAAP;AACD;;AAED;;;;;;;;;;mCAOe,Q,EAAU,CAAE;;AAE3B;;;;;;;;;;2CAOuB,I,EAAM,S,EAAW;AACtC,UAAM,iBAAiB,UAAU,IAAV,CAAvB;AACA,UAAI,cAAJ,EAAoB;AAClB,eAAO,KAAK,UAAL,CAAgB,IAAhB,EAAsB,cAAtB,CAAP;AACD;AACD,aAAO,IAAP;AACD;;AAED;;;;;;;;;;;+BAQW,I,EAAM,K,EAAO;AACtB,UAAI,UAAU,KAAK,SAAL,CAAe,IAAf,CAAd;AACA,UAAI,CAAC,OAAL,EAAc;AACZ,kBAAU,IAAI,KAAJ,CAAU,IAAV,CAAV;AACA,aAAK,SAAL,CAAe,IAAf,IAAuB,OAAvB;AACD;AACD,aAAO,OAAP;AACD;;AAED;;;;;;;;uCAKmB,I,EAAM;AACvB,aAAO,KAAK,SAAL,CAAe,IAAf,KAAwB,IAA/B;AACD;;AAED;;;;;;;;;;;;;+BAUW,O,EAAS,Q,EAAkC;AAAA;;AAAA,UAAxB,eAAwB,uEAAN,IAAM;;AACpD;AACA;AACA,UAAI,YAAY,OAAhB,EAAyB;AACvB,eAAO,yBAAW;AAAA,iBAAM,MAAK,cAAL,EAAN;AAAA,SAAX,CAAP;AACD;AACD,UAAI,YAAY,OAAhB,EAAyB;AACvB,eAAO,IAAI,OAAJ,CAAY,mBAAW;AAC5B,kBAAQ,iBAAO,aAAP,CACJ,MAAK,cAAL,EADI,gBAC+B,QAD/B,iBAAR;AAED,SAHM,CAAP;AAID;;AAED;AACA,aAAO,KAAK,MAAL,CAAY,SAAZ,GAAwB,IAAxB,CAA6B,YAAM;AACxC,YAAI,cAAJ;AACA,YAAI,SAAS,IAAb;AACA;AACA,YAAI;AACF,cAAI,mBAAmB,OAAvB,EAAgC;AAC9B,oBAAQ,8BAAoB,OAApB,EAA6B,QAA7B,CAAR;AACD,WAFD,MAEO,IAAI,mBAAmB,SAAvB,EAAkC;AACvC,oBAAQ,4BAAkB,OAAlB,EAA2B,QAA3B,CAAR;AACD,WAFM,MAEA;AACL,oBAAQ,MAAK,OAAL,GAAe,aAAf,CAA6B,QAA7B,CAAR;AACD;AACF,SARD,CAQE,OAAO,CAAP,EAAU;AACV,2BAAO,MAAP,CAAc,KAAd,8BAA+C,QAA/C;AACD;;AAED;AACA;AACA,YAAI,SAAS,MAAK,QAAL,CAAc,KAAd,CAAb,EAAmC;AACjC,mBAAS,KAAT;AACD;AACD,eAAO,iBAAO,aAAP,CACH,MADG,gBACiB,QADjB,iBAAP;AAED,OAvBM,CAAP;AAwBD;;AAED;;;;;;;;;;;;;kCAUc,O,EAAS,Q,EAAU,e,EAAiB;AAChD,aAAO,KAAK,UAAL,CAAgB,OAAhB,EAAyB,QAAzB,EAAmC,eAAnC,EAAoD,IAApD,CAAyD,mBAAW;AACzE,yBAAO,MAAP,CACI,QAAQ,SAAR,CAAkB,QAAlB,CAA2B,mBAA3B,CADJ,EAEI,+CAFJ,EAEqD,QAFrD;AAGA,eAAO,OAAP;AACD,OALM,CAAP;AAMD;;AAED;;;;;;;;;;;;;;;;4CAcE,Q,EAAU,O,EAAS,Q,EAAkC;AAAA;;AAAA,UAAxB,eAAwB,uEAAN,IAAM;;AACrD,aAAO,iBAAS;AACd,YAAI,YAAY,OAAhB,EAAyB;AACvB;AACA;AACA;AACD;;AAED;AACA,YAAM,cAAc,OAAK,cAAL,EAApB;AACA,YAAM,cAAe,YAAY,GAAjC;AACA,YAAM,eAAgB,YAAY,OAAlC;AAVc,YAWT,MAXS,GAWC,KAXD,CAWT,MAXS;;AAYd,eAAO,MAAP,EAAe;;AAEb;AACA,cAAI,CAAC,OAAK,QAAL,CAAc,MAAd,CAAL,EAA4B;AAC1B;AACD;AACD;AACA,cAAI,mBAAmB,OAAnB,IACA,CAAC,YADD,IACiB,CAAC,QAAQ,QAAR,CAAiB,MAAjB,CADtB,EACgD;AAC9C;AACD;AACD;AACA,cAAI,mBAAmB,SAAnB,IAAgC,CAAC,OAAO,QAAP,CAAgB,OAAhB,CAArC,EAA+D;AAC7D;AACA,qBAAS,OAAO,aAAhB;AACA;AACD;;AAED;AACA,cAAI,eACC,gBAAgB,UAAU,WAD3B,IAEA,gBAAgB,MAAhB,EAAwB,QAAxB,CAFJ,EAEuC;AACrC,qBAAS,MAAT,EAAiB,KAAjB;AACA;AACA;AACA;AACD;;AAED,mBAAS,OAAO,aAAhB;AACD;AACF,OA1CD;AA2CD;;AAED;;;;;;;;;oCAMgB,CAAE;;AAElB;;;;;;;;;2CAMuB;AACrB,UAAI,CAAC,KAAK,kBAAV,EAA8B;AAC5B,aAAK,kBAAL,GAA0B,KAAK,uBAAL,EAA1B;AACD;AACD,aAAO,KAAK,kBAAZ;AACD;;AAED;;;;;;;;8CAK0B,CAAE;;;;;;AAI9B;;;;;IAGa,mB,WAAA,mB;;;AACX;;;AAGA,+BAAY,MAAZ,EAAoB;AAAA;;AAAA,qIACZ,MADY,EACJ,YAAa,IADT;AAEnB;;AAED;;;;;8BACU;AACR,aAAO,QAAP;AACD;;AAED;;;;8BACU;AACR,aAAO,KAAK,MAAL,CAAY,WAAZ,EAAP;AACD;;AAED;;;;qCACiB;AACf;AACA,aAAO,IAAP;AACD;;AAED;;;;8BACU;AACR,aAAO,KAAK,MAAL,CAAY,OAAZ,EAAP;AACD;;AAED;;;;mCACe,E,EAAI;AACjB,aAAO,KAAK,MAAL,CAAY,cAAZ,CAA2B,EAA3B,CAAP;AACD;;AAED;;;;oCACgB;AACd,UAAM,WAAW,mBAAS,cAAT,CAAwB,KAAK,MAA7B,CAAjB;AACA,UAAI,aAAJ;AACA,UAAI,mBAAQ,KAAK,MAAL,CAAY,GAApB,EAAyB,OAAzB,IAAoC,QAAxC,EAAkD;AAChD;AACA;AACA;AACA;AACA;AACA;AACA,eAAO,SAAS,aAAT,CAAuB,KAAK,cAAL,EAAvB,CAAP;AACD,OARD,MAQO;AACL,YAAM,OAAO,SAAS,OAAT,EAAb;AACA,eAAO,gCAAe,CAAf,EAAkB,CAAlB,EAAqB,KAAK,KAA1B,EAAiC,KAAK,MAAtC,CAAP;AACD;AACD,aAAO,6CAAmB,KAAK,MAAxB,EAAgC,KAAK,MAAL,CAAY,GAA5C,EAAiD,IAAjD,CAAP;AACD;;AAED;;;;8CAC0B;AACxB,aAAO,+CAA4B,KAAK,MAAjC,CAAP;AACD;;;;EAxDsC,a;;AA4DzC;;;;;IAGa,kB,WAAA,kB;;;AACX;;;;;AAKA,8BAAY,MAAZ,EAAoB,KAApB,EAA2B,MAA3B,EAAmC;AAAA;;AAEjC;AAFiC,yIAC3B,MAD2B,EACnB,MADmB;;AAGjC,WAAK,KAAL,GAAa,KAAb;AAHiC;AAIlC;;AAED;;;;;8BACU;AACR,aAAO,OAAP;AACD;;AAED;;;;8BACU;AACR,aAAO,KAAK,KAAL,CAAW,GAAX,CAAe,QAAtB;AACD;;AAED;;;;qCACiB;AACf,aAAO,KAAK,KAAL,CAAW,MAAlB;AACD;;AAED;;;;8BACU;AACR,aAAO,KAAK,KAAL,CAAW,OAAX,EAAP;AACD;;AAED;;;;mCACe,E,EAAI;AACjB,aAAO,KAAK,KAAL,CAAW,GAAX,CAAe,QAAf,CAAwB,cAAxB,CAAuC,EAAvC,CAAP;AACD;;AAED;;;;oCACgB;AACd,aAAO,KAAK,KAAL,CAAW,aAAX,EAAP;AACD;;AAED;;;;8CAC0B;AACxB,aAAO,iDACH,KAAK,MAAL,CAAY,oBAAZ,EADG,EAEH,KAAK,KAFF,CAAP;AAGD;;;;EA/CqC,a;;AAmDxC;;;;;;;AAKA,SAAS,eAAT,CAAyB,EAAzB,EAA6B,QAA7B,EAAuC;AACrC,MAAI;AACF,WAAO,kBAAQ,EAAR,EAAY,QAAZ,CAAP;AACD,GAFD,CAEE,OAAO,CAAP,EAAU;AACV,qBAAO,KAAP,CAAa,GAAb,EAAkB,qBAAlB,EAAyC,QAAzC,EAAmD,CAAnD;AACA,WAAO,KAAP;AACD;AACF;;;;;;;;ACzcD;;AAEA;;;;;AAKO,IAAI,kDAAJ;;AAEP;;;;;;AAzBA;;;;;;;;;;;;;;;;AA+BO,IAAM,4DAA0B;AACrC,YAAU;AAD2B,CAAhC;;AAKP;;;;;;;;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;AAKA,SAAS,IAAT,CAAc,uBAAd,EAAuC,6BAAvC,EAAsE;AACpE,MAAI,qBAAU,QAAV,IAAsB,qBAAU,IAApC,EAA0C;AACxC,WAAO,cAAP;AACD;AACD,QAAM,IAAI,KAAJ,CAAU,wCAAV,CAAN;AACD;;;;;;;;qjBC9DD;;;;;;;;;;;;;;;;QAoSgB,Y,GAAA,Y;QA2CA,mB,GAAA,mB;;AA/ThB;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;AAGA,IAAM,MAAM,kBAAZ;;IAEa,e,WAAA,e;;AAEX;;;AAGA,2BAAY,OAAZ,EAAqB;AAAA;;AAEnB;AACA,SAAK,QAAL,GAAgB,OAAhB;;AAEA;AACA,SAAK,IAAL,GAAY,IAAZ;;AAEA;;;;AAIA,SAAK,iBAAL;;AAEA;;;AAGA,SAAK,OAAL,GAAe,mBAAf;;AAEA;;;AAGA,SAAK,aAAL,GAAqB,mBAArB;;AAEA;AACA,SAAK,UAAL,GAAkB,KAAlB;AACD;;AAED;;;;;;;iCAGa;AAAA;;AACX,WAAK,IAAL,GAAY,KAAK,QAAL,CAAc,aAAd,CAA4B,WAAxC;AACA,WAAK,UAAL,GAAkB,KAAK,QAAL,CAAc,YAAd,CAA2B,SAA3B,CAAlB;;AAEA,aAAO,KAAK,kBAAL,GACF,IADE,CACG,KAAK,eAAL,CAAqB,IAArB,CAA0B,IAA1B,CADH,EAEF,IAFE,CAEG;AAAA,eAAM,MAAK,OAAX;AAAA,OAFH,CAAP;AAGD;;AAED;;;;;;;;;;sCAOkB;AAAA;;AAChB,UAAM,oBAAoB,KAAK,kBAAL,GAA0B,KAA1B,CAA1B;;AAEA,UAAM,SAAS,kBAAK,EAAL,CAAf;AACA,UAAM,eAAe,KAAK,uBAAL,EAArB;AACA,WAAK,kBAAL,CAAwB,YAAxB;AACA,mBAAa,YAAb,EAA2B,MAA3B;AACA,mBAAa,KAAK,aAAlB,EAAiC,MAAjC;;AAEA,UAAI,CAAC,iBAAD,IAAsB,KAAK,UAA/B,EAA2C;AACzC,aAAK,OAAL,GAAe,KAAK,aAAL,CAAmB,MAAnB,CAAf;AACA;AACA,eAAO,QAAQ,OAAR,EAAP;AACD;;AAED,+BAAe,iBAAf,EAAkC,KAAK,QAAvC;AACA,UAAM,MAAM,KAAK,QAAL,EAAZ;AACA,sBAAM,IAAN,CAAW,GAAX,EAAgB,kBAAhB,EAAoC,iBAApC;;AAEA,UAAM,cAAc;AAClB,gBAAQ,MADU;AAElB,cAAM,MAFY;AAGlB,wCAAgC;AAHd,OAApB;AAKA,UAAI,KAAK,QAAL,CAAc,YAAd,CAA2B,kBAA3B,CAAJ,EAAoD;AAClD,oBAAY,WAAZ,GAA0B,KAAK,QAAL,CAAc,YAAd,CAA2B,kBAA3B,CAA1B;AACD;AACD,aAAO,mBAAS,qBAAT,CAA+B,KAAK,QAApC,EACF,cADE,CACa,iBADb,EAEF,IAFE,CAEG,uBAAe;AACnB,eAAO,mBAAS,MAAT,CAAgB,kBAAM,OAAK,IAAX,CAAhB,EAAkC,SAAlC,CACH,WADG,EACU,WADV,CAAP;AAED,OALE,EAMF,IANE,CAMG;AAAA,eAAO,IAAI,IAAJ,EAAP;AAAA,OANH,EAOF,IAPE,CAOG,qBAAa;AACjB,eAAK,OAAL,GAAe,OAAK,aAAL,CAAmB,SAAnB,CAAf;AACA,wBAAM,IAAN,CAAW,GAAX,EAAgB,0BAAhB,EAA4C,iBAA5C;AACD,OAVE,EAUA,eAAO;AACR,yBAAO,KAAP,CAAa,GAAb,EACI,iCADJ,EACuC,iBADvC,EAC0D,GAD1D;AAED,OAbE,CAAP;AAcD;;AAED;;;;;;;;;yCAMqB;AAAA;;AACnB,UAAI,kBAAkB,KAAK,QAAL,CAAc,YAAd,CAA2B,QAA3B,CAAtB;AACA,UAAI,CAAC,eAAD,IAAoB,KAAK,UAA7B,EAAyC;AACvC,eAAO,QAAQ,OAAR,EAAP;AACD;AACD,+BAAe,eAAf,EAAgC,KAAK,QAArC;AACA,UAAM,MAAM,KAAK,QAAL,EAAZ;AACA,sBAAM,IAAN,CAAW,GAAX,EAAgB,wBAAhB,EAA0C,eAA1C;AACA,UAAM,cAAc;AAClB,wCAAgC;AADd,OAApB;AAGA,UAAI,KAAK,QAAL,CAAc,YAAd,CAA2B,kBAA3B,CAAJ,EAAoD;AAClD,oBAAY,WAAZ,GAA0B,KAAK,QAAL,CAAc,YAAd,CAA2B,kBAA3B,CAA1B;AACD;AACD,aAAO,mBAAS,qBAAT,CAA+B,KAAK,QAApC,EACF,cADE,CACa,eADb,EAEF,IAFE,CAEG,uBAAe;AACnB,0BAAkB,WAAlB;AACA,eAAO,mBAAS,MAAT,CAAgB,kBAAM,OAAK,IAAX,CAAhB,EAAkC,SAAlC,CACH,eADG,EACc,WADd,CAAP;AAED,OANE,EAOF,IAPE,CAOG;AAAA,eAAO,IAAI,IAAJ,EAAP;AAAA,OAPH,EAQF,IARE,CAQG,qBAAa;AACjB,eAAK,aAAL,GAAqB,SAArB;AACA,wBAAM,IAAN,CAAW,GAAX,EAAgB,sBAAhB,EAAwC,eAAxC;AACD,OAXE,EAWA,eAAO;AACR,yBAAO,KAAP,CAAa,GAAb,EACI,+BADJ,EACqC,eADrC,EACsD,GADtD;AAED,OAdE,CAAP;AAeD;;AAED;;;;;;;;;;;;;;;;kCAac,e,EAAiB;AAC7B;AACA,UAAM,SAAS,kBAAK;AAClB,gBAAQ;AACN,0BAAgB;AADV;AADU,OAAL,CAAf;AAKA,UAAM,gBAAgB,KAAK,iBAAL,CAAuB,SAAvB,KAAqC,EAA3D;AACA,mBAAa,oBAAoB,aAApB,CAAb,EAAiD,MAAjD;AACA,mBAAa,oBAAoB,KAAK,cAAL,EAApB,CAAb,EAAyD,MAAzD;AACI,sBAAiB,IADrB;AAEA,mBAAa,oBAAoB,eAApB,CAAb,EAAmD,MAAnD;AACA,aAAO,MAAP;AACD;;AAED;;;;;;;yCAIqB;AACnB,aAAO,KAAK,cAAL,GAAsB,gBAAtB,KAA2C,EAAlD;AACD;;AAED;;;;;;;qCAIiB;AACf,UAAM,OAAO,KAAK,QAAL,CAAc,YAAd,CAA2B,MAA3B,CAAb;AACA,aAAO,KAAK,iBAAL,CAAuB,IAAvB,KAAgC,EAAvC;AACD;;AAED;;;;;;;8CAI0B;AACxB,UAAI,KAAK,QAAL,CAAc,MAAlB,EAA0B;AACxB;AACA,eAAO,KAAK,QAAL,CAAc,MAArB;AACD;AACD,UAAI,eAAe,EAAnB;AACA,UAAM,MAAM,KAAK,QAAL,EAAZ;AACA,UAAI;AAAA,YACK,QADL,GACiB,KAAK,QADtB,CACK,QADL;;AAEF,YAAI,SAAS,MAAT,IAAmB,CAAvB,EAA0B;AACxB,cAAM,QAAQ,SAAS,CAAT,CAAd;AACA,cAAI,0BAAgB,KAAhB,CAAJ,EAA4B;AAC1B,2BAAe,qBAAU,SAAS,CAAT,EAAY,WAAtB,CAAf;AACD,WAFD,MAEO;AACL,6BAAO,KAAP,CAAa,GAAb,EAAkB,iCACd,uDADJ;AAED;AACF,SARD,MAQO,IAAI,SAAS,MAAT,GAAkB,CAAtB,EAAyB;AAC9B,2BAAO,KAAP,CAAa,GAAb,EAAkB,oCACd,kBADJ;AAED;AACF,OAdD,CAeA,OAAO,EAAP,EAAW;AACT,yBAAO,KAAP,CAAa,GAAb,EAAkB,mCACd,uCADJ,EAC6C,EAD7C;AAED;AACD,aAAO,2BAA4B;AAAnC;AACD;;AAED;;;;;;;uCAImB,Y,EAAc;AAC/B,UAAM,OAAO,KAAK,QAAL,CAAc,YAAd,CAA2B,MAA3B,CAAb;AACA,UAAI,KAAK,iBAAL,CAAuB,IAAvB,CAAJ,EAAkC;AAChC;AACA;AACA,YAAI,aAAa,WAAb,KAA6B,KAAK,aAAL,CAAmB,WAAnB,CAAjC,EAAkE;AAChE,cAAM,OAAM,KAAK,QAAL,EAAZ;AACA,2BAAO,KAAP,CAAa,IAAb,EAAkB,wCACd,qCADJ;AAED;AACF;;AAED;AACA,UAAI,aAAa,WAAb,KAA6B,aAAa,WAAb,EAA0B,QAA1B,CAAjC,EAAsE;AACpE,yBAAO,KAAP,CAAa,GAAb,EAAkB,uCACd,0BADJ;AAEA,YAAI,CAAC,qBAAU,QAAX,IAAuB,qBAAU,IAArC,EAA2C;AACzC,uBAAa,WAAb,EAA0B,QAA1B,IAAsC,SAAtC;AACD;AACF;;AAED,UAAI,KAAK,aAAL,CAAmB,WAAnB,KACA,KAAK,aAAL,CAAmB,WAAnB,EAAgC,QAAhC,CADJ,EAC+C;AAC7C,yBAAO,KAAP,CAAa,GAAb,EAAkB,uCACd,0BADJ;AAEA,aAAK,aAAL,CAAmB,WAAnB,EAAgC,QAAhC,IAA4C,SAA5C;AACD;AACF;;AAED;;;;;;;;+BAKW;AACT,aAAO,mBACF,KAAK,QAAL,CAAc,YAAd,CAA2B,IAA3B,KAAoC,cADlC,CAAP;AAED;;;;;;AAIH;;;;;;;;;;AAQO,SAAS,YAAT,CAAsB,IAAtB,EAA4B,EAA5B,EAAgC,oBAAhC,EAAsD;AAC3D,MAAI,OAAO,IAAP,IAAe,OAAO,SAA1B,EAAqC;AACnC,SAAK,EAAL;AACD;;AAED;AACA;AACA;AACA,mBAAO,MAAP,CAAc,wBACP,CAAC,IADM,IACE,CAAC,KAAK,QAAL,CADH,IAEP,KAAK,QAAL,KAAkB,kBAFzB,EAGA,qDAHA;;AAKA,OAAK,IAAM,QAAX,IAAuB,IAAvB,EAA6B;AAC3B,qBAAO,MAAP,CAAc,wBAAwB,YAAY,YAAlD,EACI,uDADJ;AAEA;AACA,QAAI,oBAAO,IAAP,EAAa,QAAb,CAAJ,EAA4B;AAC1B,UAAI,oBAAQ,KAAK,QAAL,CAAR,CAAJ,EAA6B;AAC3B,YAAI,CAAC,oBAAQ,GAAG,QAAH,CAAR,CAAL,EAA4B;AAC1B,aAAG,QAAH,IAAe,EAAf;AACD;AACD,WAAG,QAAH,IAAe,aAAa,KAAK,QAAL,CAAb,EAA6B,GAAG,QAAH,CAA7B,EACX,oBADW,CAAf;AAED,OAND,MAMO,IAAI,qBAAS,KAAK,QAAL,CAAT,CAAJ,EAA8B;AACnC,YAAI,CAAC,qBAAS,GAAG,QAAH,CAAT,CAAL,EAA6B;AAC3B,aAAG,QAAH,IAAe,EAAf;AACD;AACD,WAAG,QAAH,IAAe,aAAa,KAAK,QAAL,CAAb,EAA6B,GAAG,QAAH,CAA7B,EACX,oBADW,CAAf;AAED,OANM,MAMA;AACL,WAAG,QAAH,IAAe,KAAK,QAAL,CAAf;AACD;AACF;AACF;AACD,SAAO,EAAP;AACD;;AAED;;;;;AAKO,SAAS,mBAAT,CAA6B,MAA7B,EAAqC;AAC1C,MAAI,CAAC,OAAO,UAAP,CAAL,EAAyB;AACvB,WAAO,MAAP;AACD;AACD,OAAK,IAAM,CAAX,IAAgB,OAAO,UAAP,CAAhB,EAAoC;AAClC,QAAI,oBAAO,OAAO,UAAP,CAAP,EAA2B,CAA3B,CAAJ,EAAmC;AACjC,aAAO,UAAP,EAAmB,CAAnB,IAAwB,iBAAiB,OAAO,UAAP,EAAmB,CAAnB,CAAjB,CAAxB;AACD;AACF;AACD,SAAO,MAAP;AACD;;AAED;;;;AAIA,SAAS,gBAAT,CAA0B,OAA1B,EAAmC;AACjC,MAAI,qBAAS,OAAT,CAAJ,EAAuB;AACrB,WAAO,OAAP;AACD;AACD,SAAO;AACL,eAAW;AADN,GAAP;AAGD;;;;;;;;;;qjBCtWD;;;;;;;;;;;;;;;;QA4HgB,iB,GAAA,iB;QAeA,4B,GAAA,4B;;AA3HhB;;AACA;;AACA;;AAKA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;;;;;AAEA,IAAM,6BAA6B,GAAnC;AACA,IAAM,mCAAmC,IAAzC;AACA,IAAM,8BAA8B,WAApC;AACA,IAAM,cAAc,SAAd,WAAc,GAAW,CAAE,CAAjC;AACA,IAAM,MAAM,kBAAZ;;AAEA;;;;;AAKO,IAAM,kDAAqB;AAChC,WAAS,SADuB;AAEhC,SAAO,OAFyB;AAGhC,SAAO,OAHyB;AAIhC,UAAQ,QAJwB;AAKhC,UAAQ;AALwB,CAA3B;;AAQP,IAAM,6BAA6B,CAAC,QAAD,EAAW,OAAX,CAAnC;;AAEA;;;;;;;;AAQA,IAAM,eAAe,OAAO,MAAP,CAAc;AACjC,WAAS;AACP,UAAM,OADC;AAEP,gBAAY,2BAA2B,MAA3B,CAAkC,CAAC,OAAD,CAAlC,CAFL;AAGP;AACA,WAAO,eAAS,IAAT,EAAe;AAAE,aAAO,IAAI,iBAAJ,CAAsB,IAAtB,CAAP;AAAqC;AAJtD,GADwB;AAOjC,YAAU;AACR,UAAM,QADE;AAER,gBAAY,2BAA2B,MAA3B,CAAkC,CAAC,OAAD,CAAlC,CAFJ;AAGR,WAAO,eAAS,IAAT,EAAe;AAAE,aAAO,IAAI,kBAAJ,CAAuB,IAAvB,CAAP;AAAsC;AAHtD,GAPuB;AAYjC,kBAAgB;AACd,UAAM,cADQ;AAEd,gBAAY,2BAA2B,MAA3B,CAAkC,CAAC,OAAD,EAAU,SAAV,CAAlC,CAFE;AAGd,WAAO,eAAS,IAAT,EAAe;AAAE,aAAO,IAAI,aAAJ,CAAkB,IAAlB,CAAP;AAAiC;AAH3C,GAZiB;AAiBjC,cAAY;AACV,UAAM,UADI;AAEV,gBAAY,2BAA2B,MAA3B,CAAkC,CAAC,OAAD,EAAU,SAAV,CAAlC,CAFF;AAGV,WAAO,eAAS,IAAT,EAAe;AAAE,aAAO,IAAI,cAAJ,CAAmB,IAAnB,CAAP;AAAkC;AAHhD,GAjBqB;AAsBjC,WAAS;AACP,UAAM,OADC;AAEP,gBAAY,0BAFL;AAGP,WAAO,eAAS,IAAT,EAAe;AAAE,aAAO,IAAI,iBAAJ,CAAsB,IAAtB,CAAP;AAAqC;AAHtD,GAtBwB;AA2BjC,aAAW;AACT,UAAM,SADG;AAET,gBAAY,2BAA2B,MAA3B,CAAkC,CAAC,OAAD,CAAlC,CAFH;AAGT,WAAO,eAAS,IAAT,EAAe;AAAE,aAAO,IAAI,iBAAJ,CAAsB,IAAtB,CAAP;AAAqC;AAHpD,GA3BsB;AAgCjC,YAAU;AACR,UAAM,SADE,EACS;AACjB,gBAAY,2BAA2B,MAA3B,CAAkC,CAAC,OAAD,CAAlC,CAFJ;AAGR,WAAO,eAAS,IAAT,EAAe;AAAE,aAAO,IAAI,iBAAJ,CAAsB,IAAtB,CAAP;AAAqC;AAHrD,GAhCuB;AAqCjC,WAAS;AACP,UAAM,OADC;AAEP,gBAAY,2BAA2B,MAA3B,CAAkC,CAAC,OAAD,CAAlC,CAFL;AAGP,WAAO,eAAS,IAAT,EAAe;AAAE,aAAO,IAAI,iBAAJ,CAAsB,IAAtB,CAAP;AAAqC;AAHtD;AArCwB,CAAd,CAArB;;AA4CA;;;;AAIA,SAAS,kBAAT,CAA4B,WAA5B,EAAyC;AACvC,SAAO,wBAAW,WAAX,EAAwB,OAAxB,CAAP;AACD;;AAED;;;;AAIA,SAAS,qBAAT,CAA+B,WAA/B,EAA4C;AAC1C,SAAO,CAAC,CAAC,aAAa,WAAb,CAAF,IACH,wBAAY,kBAAZ,EAAgC,WAAhC,CADJ;AAED;;AAED;;;;AAIO,SAAS,iBAAT,CAA2B,SAA3B,EAAsC;AAC3C,MAAI,mBAAmB,SAAnB,CAAJ,EAAmC;AACjC,WAAO,OAAP;AACD;AACD,MAAI,CAAC,sBAAsB,SAAtB,CAAL,EAAuC;AACrC,WAAO,QAAP;AACD;AACD,SAAO,oBAAO,YAAP,EAAqB,SAArB,IACL,aAAa,SAAb,EAAwB,IADnB,GAC0B,SADjC;AAED;;AAED;;;;AAIO,SAAS,4BAAT,CAAsC,UAAtC,EAAkD;AACvD,MAAM,WAAW,EAAjB;AACA,SAAO,IAAP,CAAY,YAAZ,EAA0B,OAA1B,CAAkC,eAAO;AACvC,QAAI,oBAAO,YAAP,EAAqB,GAArB,KACA,aAAa,GAAb,EAAkB,UAAlB,CAA6B,OAA7B,CAAqC,UAArC,KAAoD,CAAC,CADzD,EAC4D;AAC1D,eAAS,GAAT,IAAgB,aAAa,GAAb,EAAkB,KAAlC;AACD;AACF,GALD,EAKG,IALH;AAMA,SAAO,QAAP;AACD;;AAED;;;;IAGM,gB;;;;;;;;AACJ;;;;kCAIc,e,EAAiB,CAAE;;AAEjC;;;;;;;;qCAKiB,e,EAAiB,a,EAAe,CAAE;;;;;;AAGrD;;;;;IAGa,c;AACX;;;;;QADW,c,GAMX,wBAAY,MAAZ,EAAoB,IAApB,EAA0B,QAA1B,EAAoC;AAAA;;AAClC;AACA,OAAK,MAAL,GAAc,MAAd;AACA;AACA,OAAK,IAAL,GAAY,IAAZ;AACA;AACA,OAAK,IAAL,GAAY,YAAY,OAAO,MAAP,CAAc,IAAd,CAAxB;AACD,C;;AAIH;;;;;;;;;;IAQa,Y,WAAA,Y;AACX;;;AAGA,wBAAY,IAAZ,EAAkB;AAAA;;AAChB;AACA,SAAK,IAAL,GAAY,IAAZ;AACD;;AAED;;;;;8BACU,CAAE;;AAEZ;;;;;;;;;;;wBAQI,a,EAAe,e,EAAiB,Y,EAAc,c,EAAgB,CAAE;;;;;;AAItE;;;;;IAGa,kB,WAAA,kB;;;AACX;;;AAGA,8BAAY,IAAZ,EAAkB;AAAA;;AAGhB;AAHgB,wIACV,IADU;;AAIhB,UAAK,YAAL,GAAoB,EAApB;;AAEA;;;;;AAKA,UAAK,OAAL,GAAe,EAAf;;AAEA;;;;;;;AAOA,UAAK,cAAL,GAAsB,EAAtB;;AAEA;AACA;AACA,eAAW,YAAM;AACf,YAAK,OAAL,GAAe,SAAf;AACD,KAFD,EAEG,KAFH;AAxBgB;AA2BjB;;AAED;;;;;8BACU;AACR,WAAK,OAAL,GAAe,SAAf;AACA,WAAK,cAAL,GAAsB,SAAtB;AACA,WAAK,IAAM,CAAX,IAAgB,KAAK,YAArB,EAAmC;AACjC,aAAK,YAAL,CAAkB,CAAlB,EAAqB,SAArB;AACD;AACF;;AAED;;;;wBACI,O,EAAS,S,EAAW,M,EAAQ,Q,EAAU;AAAA;;AACxC,UAAI,WAAW,OAAO,UAAP,CAAf;AACA,UAAI,CAAC,QAAL,EAAe;AACb,mBAAW,OAAX;AACD;AACD,UAAM,kBAAkB,OAAO,iBAAP,KAA6B,IAArD;;AAEA,UAAM,cACF,KAAK,IAAL,CAAU,UAAV,CAAqB,OAArB,EAA8B,QAA9B,EAAwC,eAAxC,CADJ;;AAGA,UAAM,iBAAiB,wBAAW,SAAX,EAAsB,UAAtB,CAAvB;;AAEA;AACA,UAAM,SAAS,iBACb,KAAK,cAAL,IAAuB,KAAK,cAAL,CAAoB,SAApB,CADV,GAEb,KAAK,OAAL,IAAgB,KAAK,OAAL,CAAa,SAAb,CAFlB;;AAIA,UAAI,MAAJ,EAAY;AACV,YAAM,eAAe,OAAO,MAA5B;AACA,oBAAY,IAAZ,CAAiB,kBAAU;AACzB,qBAAW,YAAM;AACf,iBAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,YAApB,EAAkC,GAAlC,EAAuC;AACrC,kBAAM,QAAQ,OAAO,CAAP,CAAd;AACA,kBAAI,OAAO,QAAP,CAAgB,MAAM,MAAtB,CAAJ,EAAmC;AACjC,yBAAS,KAAT;AACD;AACF;AACD,gBAAI,cAAJ,EAAoB;AAClB;AACA;AACA,qBAAK,cAAL,CAAoB,SAApB,IAAiC,SAAjC;AACD;AACF,WAZD,EAYG,CAZH;AAaD,SAdD;AAeD;;AAED,UAAI,cAAc,KAAK,YAAL,CAAkB,SAAlB,CAAlB;AACA,UAAI,CAAC,WAAL,EAAkB;AAChB,sBAAc,4BAAd;AACA,aAAK,YAAL,CAAkB,SAAlB,IAA+B,WAA/B;AACD;;AAED,aAAO,KAAK,YAAL,CAAkB,SAAlB,EAA6B,GAA7B,CAAiC,iBAAS;AAC/C;AACA,oBAAY,IAAZ,CAAiB,kBAAU;AACzB,cAAI,OAAO,QAAP,CAAgB,MAAM,MAAtB,CAAJ,EAAmC;AACjC,qBAAS,KAAT;AACD;AACF,SAJD;AAKD,OAPM,CAAP;AAQD;;AAED;;;;;;;4BAIQ,K,EAAO;AACb,UAAM,YAAY,MAAM,IAAxB;AACA,UAAM,iBAAiB,wBAAW,SAAX,EAAsB,UAAtB,CAAvB;AACA,UAAM,cAAc,KAAK,YAAL,CAAkB,SAAlB,CAApB;;AAEA;AACA,UAAI,WAAJ,EAAiB;AACf,oBAAY,IAAZ,CAAiB,KAAjB;AACA,YAAI,cAAJ,EAAoB;AAClB;AACA;AACD;AACF;;AAED;AACA,UAAI,cAAJ,EAAoB;AAClB,aAAK,cAAL,CAAoB,SAApB,IAAiC,KAAK,cAAL,CAAoB,SAApB,KAAkC,EAAnE;AACA,aAAK,cAAL,CAAoB,SAApB,EAA+B,IAA/B,CAAoC,KAApC;AACD,OAHD,MAGO;AACL;AACA,YAAI,KAAK,OAAT,EAAkB;AAChB,eAAK,OAAL,CAAa,SAAb,IAA0B,KAAK,OAAL,CAAa,SAAb,KAA2B,EAArD;AACA,eAAK,OAAL,CAAa,SAAb,EAAwB,IAAxB,CAA6B,KAA7B;AACD;AACF;AACF;;;;EA5HqC,Y;;AAgIxC;;;;;IAGa,iB,WAAA,iB;;;AACX;;;AAGA,6BAAY,IAAZ,EAAkB;AAAA;;AAGhB;AAHgB,uIACV,IADU;;AAIhB,WAAK,gBAAL,GAAwB,4BAAxB;;AAEA;AACA,WAAK,aAAL,GAAqB,OAAK,gBAAL,CAAsB,IAAtB,CAA2B,IAA3B,CAAgC,OAAK,gBAArC,CAArB;AACA,WAAK,IAAL,CAAU,OAAV,GAAoB,gBAApB,CAAqC,OAArC,EAA8C,OAAK,aAAnD;AARgB;AASjB;;AAED;;;;;8BACU;AACR,WAAK,IAAL,CAAU,OAAV,GAAoB,mBAApB,CAAwC,OAAxC,EAAiD,KAAK,aAAtD;AACA,WAAK,gBAAL,CAAsB,SAAtB;AACD;;AAED;;;;wBACI,O,EAAS,S,EAAW,M,EAAQ,Q,EAAU;AACxC,UAAM,WAAW,iBAAO,MAAP,CAAc,OAAO,UAAP,CAAd,EACb,4CADa,CAAjB;AAEA,UAAM,kBAAkB,OAAO,iBAAP,KAA6B,IAArD;AACA,aAAO,KAAK,gBAAL,CAAsB,GAAtB,CAA0B,KAAK,IAAL,CAAU,uBAAV,CAC7B,KAAK,YAAL,CAAkB,IAAlB,CAAuB,IAAvB,EAA6B,QAA7B,CAD6B,EAE5B,QAAQ,aAAR,IAAyB,OAFG,EAG7B,QAH6B,EAI7B,eAJ6B,CAA1B,CAAP;AAKD;;AAED;;;;;;;;;iCAMa,Q,EAAU,M,EAAQ,W,EAAa;AAC1C,UAAM,SAAS,sCACX,MADW;AAEX,gCAA2B,SAFhB,EAGX,2BAHW,CAAf;AAIA,eAAS,IAAI,cAAJ,CAAmB,MAAnB,EAA2B,OAA3B,EAAoC,MAApC,CAAT;AACD;;;;EA7CoC,Y;;AAiDvC;;;;;;IAIa,a,WAAA,a;;;AACX;;;AAGA,yBAAY,IAAZ,EAAkB;AAAA;;AAAA,yHACV,IADU;AAEjB;;AAED;;;;;8BACU,CACT;;AAED;;;;wBACI,O,EAAS,S,EAAW,M,EAAQ,Q,EAAU;AAAA;;AACxC,UAAI,eAAJ;AACA,UAAI,uBAAJ;AACA,UAAM,WAAW,OAAO,UAAP,KAAsB,OAAvC;AACA,UAAI,YAAY,OAAZ,IAAuB,YAAY,OAAvC,EAAgD;AAC9C;AACA,iBAAS,KAAK,IAAL,CAAU,cAAV,EAAT;AACA,yBAAiB,KAAK,aAAL,CAAmB,SAAnB,CAAjB;AACD,OAJD,MAIO;AACL;AACA;AACA,YAAM,kBAAkB,OAAO,iBAAP,CAAxB;AACA,yBAAiB,KAAK,IAAL,CAAU,aAAV,CACZ,QAAQ,aAAR,IAAyB,OADb,EAEb,QAFa,EAGb,eAHa,EAIf,IAJe,CAIV,mBAAW;AAChB,mBAAS,OAAT;AACA,iBAAO,OAAK,gBAAL,CAAsB,SAAtB,EAAiC,MAAjC,CAAP;AACD,SAPgB,CAAjB;AAQD;;AAED;AACA,qBAAe,IAAf,CAAoB,YAAM;AACxB,iBAAS,IAAI,cAAJ,CAAmB,MAAnB,EAA2B,SAA3B,CAAT;AACD,OAFD;AAGA,aAAO,WAAP;AACD;;AAED;;;;kCACc,S,EAAW;AACvB,aAAO,KAAK,IAAL,CAAU,OAAV,GAAoB,UAApB,CAA+B,SAA/B,CAAP;AACD;;AAED;;;;qCACiB,S,EAAW,O,EAAS;AACnC,UAAI,OAAO,QAAQ,OAAf,IAA0B,UAA9B,EAA0C;AACxC,eAAO,QAAQ,OAAR,EAAP;AACD;AACD,aAAO,QAAQ,OAAR,GAAkB,UAAlB,CAA6B,SAA7B,CAAP;AACD;;;;EArDgC,Y;;AAwDnC;;;;;;IAIa,c,WAAA,c;;;AACX;;;AAGA,0BAAY,IAAZ,EAAkB;AAAA;;AAAA,2HACV,IADU;AAEjB;;AAED;;;;;8BACU,CACT;;AAED;;;;wBACI,O,EAAS,S,EAAW,M,EAAQ,Q,EAAU;AAAA;;AACxC,UAAI,eAAJ;AACA,UAAI,gBAAJ;AACA,UAAM,WAAW,OAAO,UAAP,KAAsB,OAAvC;AACA,UAAI,YAAY,OAAZ,IAAuB,YAAY,OAAvC,EAAgD;AAC9C;AACA,iBAAS,KAAK,IAAL,CAAU,cAAV,EAAT;AACA,kBAAU,KAAK,aAAL,EAAV;AACD,OAJD,MAIO;AACL;AACA;AACA,YAAM,kBAAkB,OAAO,iBAAP,CAAxB;AACA,kBAAU,KAAK,IAAL,CAAU,aAAV,CACL,QAAQ,aAAR,IAAyB,OADpB,EAEN,QAFM,EAGN,eAHM,EAIR,IAJQ,CAIH,mBAAW;AAChB,mBAAS,OAAT;AACA,iBAAO,OAAK,gBAAL,CAAsB,UAAtB,EAAkC,MAAlC,CAAP;AACD,SAPS,CAAV;AAQD;AACD;AACA,cAAQ,IAAR,CAAa,YAAM;AACjB,iBAAS,IAAI,cAAJ,CAAmB,MAAnB,EAA2B,SAA3B,CAAT;AACD,OAFD;AAGA,aAAO,WAAP;AACD;;AAED;;;;oCACgB;AACd,aAAO,KAAK,IAAL,CAAU,aAAV,EAAP;AACD;;AAED;;;;qCACiB,e,EAAiB,O,EAAS;AACzC,UAAI,OAAO,QAAQ,OAAf,IAA0B,UAA9B,EAA0C;AACxC,eAAO,QAAQ,OAAR,EAAP;AACD;AACD,UAAM,UAAU,QAAQ,OAAR,EAAhB;AACA,aAAO,QAAQ,IAAR,CAAa,CAClB,QAAQ,UAAR,CAAmB,6BAAc,QAAjC,CADkB,EAElB,QAAQ,UAAR,CAAmB,6BAAc,QAAjC,CAFkB,CAAb,CAAP;AAID;;;;EAxDiC,Y;;AA4DpC;;;;;IAGM,iB;AACJ;;;;;;;AAOA,6BAAY,SAAZ,EAAuB,gBAAvB,EAAyC,eAAzC,EAA0D;AAAA;;AACxD;AACA,SAAK,WAAL,GAAmB,SAAnB;;AAEA,qBAAO,MAAP,CAAc,cAAc,SAA5B,EACI,uCADJ;AAEA;AACA,SAAK,eAAL,GAAuB,OAAO,UAAU,UAAV,CAAP,KAAiC,CAAxD;AACA,qBAAO,MAAP,CAAc,KAAK,eAAL,IAAwB,0BAAtC,EACI,kCADJ;;AAGA;AACA,SAAK,eAAL,GAAuB,oBAAoB,SAApB,GACrB,OAAO,UAAU,gBAAV,CAAP,CADqB,GACiB,gCADxC;AAEA,qBAAO,MAAP,CAAc,KAAK,eAAL,GAAuB,CAArC,EAAwC,kCAAxC;;AAEA;AACA,SAAK,eAAL,GAAuB,oBAAoB,SAA3C;;AAEA;AACA,SAAK,cAAL,GAAsB,eAAe,SAAf,GACpB,QAAQ,UAAU,WAAV,CAAR,CADoB,GACc,IADpC;;AAGA;AACA,SAAK,iBAAL,GAAyB,IAAzB;;AAEA;AACA,SAAK,cAAL,GAAsB,IAAtB;;AAEA;AACA,SAAK,aAAL,GAAqB,IAArB;;AAEA;AACA,SAAK,aAAL,GAAqB,oBAAoB,IAAzC;;AAEA;AACA,SAAK,YAAL,GAAoB,mBAAmB,IAAvC;;AAEA;AACA,SAAK,UAAL,GAAkB,SAAlB,CAvCwD,CAuC3B;;AAE7B;AACA,SAAK,gBAAL,GAAwB,SAAxB,CA1CwD,CA0CrB;AACpC;;AAED;;;;;;;yBAGK,U,EAAY;AACf,UAAI,CAAC,KAAK,aAAV,EAAyB;AACvB;AACA;AACD,OAHD,MAGO;AACL;AACA,aAAK,eAAL;AACD;AACF;;AAED;;;;;;8BAGU;AACR,WAAK,gBAAL;AACA,WAAK,iBAAL;AACD;;AAED;;;;sCACkB;AAChB,UAAI,KAAK,aAAT,EAAwB;AACtB,aAAK,cAAL,GAAsB,KAAK,aAAL,EAAtB;AACD;AACF;;AAED;;;;wCACoB;AAClB,UAAI,KAAK,cAAT,EAAyB;AACvB,aAAK,cAAL;AACA,aAAK,cAAL,GAAsB,IAAtB;AACD;AACF;;AAED;;;;qCACiB;AACf,UAAI,KAAK,YAAT,EAAuB;AACrB,YAAI;AACF,eAAK,aAAL,GAAqB,KAAK,YAAL,EAArB;AACD,SAFD,CAEE,OAAO,CAAP,EAAU;AACV,eAAK,OAAL,GADU,CACM;AAChB,gBAAM,CAAN;AACD;AACF;AACF;;AAED;;;;uCACmB;AACjB,UAAI,KAAK,aAAT,EAAwB;AACtB,aAAK,aAAL;AACA,aAAK,aAAL,GAAqB,IAArB;AACD;AACF;;AAED;;;;gCACY;AACV,aAAO,CAAC,CAAC,KAAK,WAAd;AACD;;AAED;;;;;;;;0CAKsB,G,EAAK,a,EAAe,e,EAAiB;AACzD,UAAI,KAAK,SAAL,EAAJ,EAAsB;AACpB;AACD;AACD,WAAK,UAAL,GAAkB,KAAK,GAAL,EAAlB;AACA,WAAK,gBAAL,GAAwB,SAAxB;AACA,WAAK,iBAAL,GAAyB,aAAzB;AACA,WAAK,WAAL,GAAmB,IAAI,WAAJ,CAAgB,YAAM;AACvC;AACD,OAFkB,EAEhB,KAAK,eAAL,GAAuB,IAFP,CAAnB;;AAIA;AACA,UAAI,CAAC,KAAK,YAAN,IAAuB,KAAK,YAAL,IAAqB,KAAK,eAArD,EAAuE;AACrE,YAAI,UAAJ,CAAe,YAAM;AACnB;AACD,SAFD,EAEG,KAAK,eAAL,GAAuB,IAF1B;AAGD;;AAED,WAAK,iBAAL;AACA,UAAI,KAAK,cAAT,EAAyB;AACvB;AACD;AACD,WAAK,cAAL;AACD;;AAED;;;;;;;+BAIW,G,EAAK;AACd,UAAI,CAAC,KAAK,SAAL,EAAL,EAAuB;AACrB;AACD;AACD,WAAK,iBAAL;AACA,WAAK,iBAAL,GAAyB,IAAzB;AACA,UAAI,aAAJ,CAAkB,KAAK,WAAvB;AACA,WAAK,WAAL,GAAmB,SAAnB;AACA,WAAK,gBAAL,GAAwB,SAAxB;AACA,WAAK,gBAAL;AACA,WAAK,eAAL;AACD;;AAED;;;;yCACqB;AACnB,UAAI,KAAK,UAAT,EAAqB;AACnB,eAAO,KAAK,GAAL,MAAc,KAAK,gBAAL,IAAyB,KAAK,UAA5C,CAAP;AACD;AACD,aAAO,CAAP;AACD;;AAED;;;;mCACe;AACb,UAAI,gBAAgB,CAApB;AACA,UAAI,KAAK,SAAL,EAAJ,EAAsB;AACpB,wBAAgB,KAAK,kBAAL,EAAhB;AACA,aAAK,gBAAL,GAAwB,KAAK,GAAL,EAAxB;AACD;AACD,aAAO;AACL,yBAAiB,aADZ;AAEL,sBAAc,KAAK,UAAL,IAAmB;AAF5B,OAAP;AAID;;;;;;AAIH;;;;;IAGa,iB,WAAA,iB;;;AACX;;;AAGA,6BAAY,IAAZ,EAAkB;AAAA;;AAEhB;AAFgB,uIACV,IADU;;AAGhB,WAAK,SAAL,GAAiB,EAAjB;;AAEA;AACA,WAAK,gBAAL,GAAwB,CAAxB;AANgB;AAOjB;;AAED;;;;;;;;0CAIsB;AACpB,aAAO,8BAA+B,OAAO,IAAP,CAAY,KAAK,SAAjB;AAAtC;AACD;;AAED;;;;8BACU;AAAA;;AACR,WAAK,mBAAL,GAA2B,OAA3B,CAAmC,mBAAW;AAC5C,eAAK,cAAL,CAAoB,OAApB;AACD,OAFD;AAGD;;AAED;;;;wBACI,O,EAAS,S,EAAW,M,EAAQ,Q,EAAU;AAAA;;AACxC,UAAM,YAAY,OAAO,WAAP,CAAlB;AACA,uBAAO,MAAP,CAAc,aAAa,QAAO,SAAP,yCAAO,SAAP,MAAoB,QAA/C,EACI,yBADJ;AAEA,UAAM,aAAa,eAAe,SAAf,GAA2B,UAAU,WAAV,CAA3B,GAAoD,IAAvE;AACA,uBAAO,MAAP,CAAc,CAAC,UAAD,IAAe,QAAO,UAAP,yCAAO,UAAP,MAAqB,QAAlD,EACI,+BADJ;AAEA,UAAM,YAAY,cAAc,SAAd,GAA0B,UAAU,UAAV,CAA1B,GAAkD,IAApE;AACA,uBAAO,MAAP,CAAe,CAAC,UAAD,IAAe,CAAC,SAAjB,IAA+B,QAAO,SAAP,yCAAO,SAAP,MAAoB,QAAjE,EACI,8BADJ;;AAGA,UAAM,UAAU,KAAK,gBAAL,EAAhB;AACA,UAAI,qBAAJ;AACA,UAAI,oBAAJ;AACA,UAAI,UAAJ,EAAgB;AACd,YAAM,eAAe,KAAK,WAAL,CAAiB,UAAjB,CAArB;AACA,yBAAO,MAAP,CAAc,YAAd,EAA4B,0BAA5B;AACA,uBAAe,aAAa,GAAb,CAAiB,IAAjB,CAAsB,YAAtB,EAAoC,OAApC,EACX,WAAW,IAAX,CADW,EACO,UADP,EAEX,KAAK,kBAAL,CAAwB,IAAxB,CAA6B,IAA7B,EAAmC,OAAnC,EAA4C,SAA5C,EAAuD,QAAvD,CAFW,CAAf;AAGD;AACD,UAAI,SAAJ,EAAe;AACb,YAAM,cAAc,KAAK,WAAL,CAAiB,SAAjB,CAApB;AACA,yBAAO,MAAP,CAAc,WAAd,EAA2B,yBAA3B;AACA,sBAAc,YAAY,GAAZ,CAAgB,IAAhB,CAAqB,WAArB,EAAkC,OAAlC,EACV,UAAU,IAAV,CADU,EACO,SADP,EAEV,KAAK,kBAAL,CAAwB,IAAxB,CAA6B,IAA7B,EAAmC,OAAnC,EAA4C,SAA5C,EAAuD,QAAvD,CAFU,CAAd;AAGD;;AAED,UAAM,eAAe,IAAI,iBAAJ,CACjB,SADiB,EACN,YADM,EACQ,WADR,CAArB;AAEA,WAAK,SAAL,CAAe,OAAf,IAA0B,YAA1B;;AAEA,mBAAa,IAAb,CACI,KAAK,WAAL,CAAiB,IAAjB,CAAsB,IAAtB,EAA4B,OAA5B,EAAqC,SAArC,EAAgD,QAAhD,CADJ;AAEA,aAAO,YAAM;AACX,gBAAK,cAAL,CAAoB,OAApB;AACD,OAFD;AAGD;;AAED;;;;;;;uCAImB;AACjB,aAAO,EAAE,KAAK,gBAAd;AACD;;AAED;;;;;;;;gCAKY,M,EAAQ;AAClB,UAAM,YAAY,iBAAO,YAAP,CAAoB,OAAO,IAAP,CAApB,CAAlB;AACA,UAAM,aAAa,kBAAkB,SAAlB,CAAnB;;AAEA,aAAO,KAAK,IAAL,CAAU,sBAAV,CACH,UADG,EACS,6BAA6B,OAA7B,CADT,CAAP;AAED;;AAED;;;;;;;;;;;;uCASmB,O,EAAS,S,EAAW,Q,EAAU;AAC/C,UAAM,eAAe,KAAK,SAAL,CAAe,OAAf,CAArB;AACA,UAAI,CAAC,YAAL,EAAmB;AACjB;AACD;AACD,UAAI,aAAa,SAAb,EAAJ,EAA8B;AAC5B,aAAK,UAAL,CAAgB,OAAhB;AACD,OAFD,MAEO;AACL,aAAK,WAAL,CAAiB,OAAjB,EAA0B,SAA1B,EAAqC,QAArC;AACD;AACF;;AAED;;;;;;;;;gCAMY,O,EAAS,S,EAAW,Q,EAAU;AAAA;;AACxC,UAAM,eAAe,KAAK,SAAL,CAAe,OAAf,CAArB;AACA,UAAM,gBAAgB,SAAhB,aAAgB,GAAM;AAC1B,iBAAS,QAAK,YAAL,CAAkB,OAAlB,EAA2B,SAA3B,CAAT;AACD,OAFD;AAGA,mBAAa,qBAAb,CAAmC,KAAK,IAAL,CAAU,MAAV,CAAiB,GAApD,EAAyD,aAAzD,EACI,KAAK,cAAL,CAAoB,IAApB,CAAyB,IAAzB,EAA+B,OAA/B,CADJ;AAED;;AAED;;;;;;;+BAIW,O,EAAS;AAClB,WAAK,SAAL,CAAe,OAAf,EAAwB,UAAxB,CAAmC,KAAK,IAAL,CAAU,MAAV,CAAiB,GAApD;AACD;;AAED;;;;;;;;;iCAMa,O,EAAS,S,EAAW;AAC/B,aAAO,IAAI,cAAJ,CAAmB,KAAK,IAAL,CAAU,cAAV,EAAnB,EAA+C,SAA/C,EACH,KAAK,SAAL,CAAe,OAAf,EAAwB,YAAxB,EADG,CAAP;AAED;;AAED;;;;;;;mCAIe,O,EAAS;AACtB,UAAI,KAAK,SAAL,CAAe,OAAf,CAAJ,EAA6B;AAC3B,aAAK,UAAL,CAAgB,OAAhB;AACA,aAAK,SAAL,CAAe,OAAf,EAAwB,OAAxB;AACA,eAAO,KAAK,SAAL,CAAe,OAAf,CAAP;AACD;AACF;;;;EA3JoC,Y;;AA+JvC;;;;;IAGa,iB,WAAA,iB;;;AACX;;;AAGA,6BAAY,IAAZ,EAAkB;AAAA;;AAGhB;AAHgB,wIACV,IADU;;AAIhB,YAAK,kBAAL,GAA0B,4BAA1B;;AAEA;AACA,YAAK,eAAL,GACI,QAAK,kBAAL,CAAwB,IAAxB,CAA6B,IAA7B,CAAkC,QAAK,kBAAvC,CADJ;;AAGA,WAAO,IAAP,uCAAkC,OAAlC,CAA0C,eAAO;AAC/C,cAAK,IAAL,CAAU,OAAV,GAAoB,gBAApB,CACI,qCAAqB,GAArB,CADJ,EAC+B,QAAK,eADpC;AAED,KAHD;AAVgB;AAcjB;;AAED;;;;;8BACU;AAAA;;AACR,UAAM,OAAO,KAAK,IAAL,CAAU,OAAV,EAAb;AACA,aAAO,IAAP,uCAAkC,OAAlC,CAA0C,eAAO;AAC/C,aAAK,mBAAL,CAAyB,qCAAqB,GAArB,CAAzB,EAAoD,QAAK,eAAzD;AACD,OAFD;AAGA,WAAK,eAAL,GAAuB,IAAvB;AACA,WAAK,kBAAL,GAA0B,IAA1B;AACD;;AAED;;;;wBACI,O,EAAS,S,EAAW,M,EAAQ,Q,EAAU;AACxC,UAAM,YAAY,OAAO,WAAP,KAAuB,EAAzC;AACA,UAAM,WAAW,OAAO,UAAP,KAAsB,UAAU,UAAV,CAAvC;AACA,UAAM,kBAAkB,OAAO,iBAAP,KAA6B,IAArD;AACA,UAAM,cACF,KAAK,IAAL,CAAU,UAAV,CAAqB,OAArB,EAA8B,QAA9B,EAAwC,eAAxC,CADJ;;AAGA,UAAM,0BAA0B,UAAU,4BAAV,CAAhC;AACA,UAAM,kBAAkB,UAAU,kBAAV,CAAxB;AACA,UAAM,WAAW,UAAU,UAAV,CAAjB;AACA,UAAM,KAAK,OAAO,IAAP,CAAX;;AAEA,UAAI,kBAAkB,CAAtB;;AAEA,aAAO,KAAK,kBAAL,CAAwB,GAAxB,CAA4B,iBAAS;AAAA,YACnC,IADmC,GAC3B,KAD2B,CACnC,IADmC;;AAE1C,YAAM,gBAAiB,SAAS,qCAAqB,eAArD;AACA,YAAM,iBACF,gBAAgB,qCAAqB,OAArC,GAA+C,IADnD;AAEA,YAAM,UAAU,wCAA0C,0BAAQ,KAAR,CAA1D;;AAEA,YAAI,mBAAmB,EAAvB,EAA2B;AACzB;AACD;;AAED,YAAI,mBAAmB,qCAAqB,cAAxC,IAA0D,CAAC,QAA/D,EAAyE;AACvE,2BAAO,KAAP,CAAa,GAAb,EAAkB,iDACd,qBADJ;AAEA;AACD;;AAED,YAAI,mBAAmB,qCAAqB,cAA5C,EAA4D;AAC1D;AACA,cAAI,kBAAkB,QAAlB,KAA+B,CAAnC,EAAsC;AACpC;AACD;AACF;;AAED,YAAI,iBAAiB,CAAC,uBAAtB,EAA+C;AAC7C;AACD;;AAED,YAAI,mBAAmB,QAAQ,OAAR,MAAqB,8BAAc,YAA1D,EAAwE;AACtE;AACD;;AAED,YAAM,KAAK,gBAAM,aAAN,CAAoB,MAAM,MAA1B,EACP,6CADO,CAAX;AAEA,oBAAY,IAAZ,CAAiB,kBAAU;AACzB,cAAI,OAAO,QAAP,CAAgB,EAAhB,CAAJ,EAAyB;AACvB,qBAAS,IAAI,cAAJ,CAAmB,MAAnB,EAA2B,cAA3B,EAA2C,OAA3C,CAAT;AACD;AACF,SAJD;AAKD,OAvCM,CAAP;AAwCD;;;;EArFoC,Y;;AAyFvC;;;;;IAGa,iB,WAAA,iB;;;AACX;;;AAGA,6BAAY,IAAZ,EAAkB;AAAA;;AAGhB;AAHgB,wIACV,IADU;;AAIhB,YAAK,gBAAL,GAAwB,EAAxB;AAJgB;AAKjB;;AAED;;;;;8BACU,CACT;;AAED;;;;wBACI,O,EAAS,S,EAAW,M,EAAQ,Q,EAAU;AAAA;;AACxC,UAAM,iBAAiB,OAAO,gBAAP,KAA4B,EAAnD;AACA,UAAM,WAAW,OAAO,UAAP,KAAsB,eAAe,UAAf,CAAvC;AACA,UAAM,cAAc,eAAe,SAAf,CAApB;AACA,UAAM,oBAAoB,KAAK,IAAL,CAAU,oBAAV,EAA1B;AACA;AACA,UAAI,+BAA+B,IAAnC;AACA,UAAI,aAAa,QAAjB,EAA2B;AACzB,uCAA+B,KAAK,yBAAL,CAA+B,IAA/B,CAAoC,IAApC,CAA/B;AACD;;AAED;AACA,UAAI,CAAC,QAAD,IAAa,YAAY,OAAzB,IAAoC,YAAY,OAApD,EAA6D;AAC3D;AACA;AACA,eAAO,kBAAkB,UAAlB,CACH,cADG,EAEH,KAAK,eAAL,CAAqB,WAArB,EAAkC,QAAlC,CAFG,EAGH,4BAHG,EAIH,KAAK,QAAL,CAAc,IAAd,CACI,IADJ,EACU,SADV,EACqB,QADrB,EAC+B,KAAK,IAAL,CAAU,cAAV,EAD/B,CAJG,CAAP;AAMD;;AAED;AACA;AACA,UAAM,kBAAkB,OAAO,iBAAP,KAClB,eAAe,iBAAf,CADN;AAEA,UAAM,kBAAkB,KAAK,IAAL,CAAU,aAAV,CACnB,QAAQ,aAAR,IAAyB,OADN,EAEpB,QAFoB,EAGpB,eAHoB,EAItB,IAJsB,CAIjB,mBAAW;AAChB,eAAO,kBAAkB,aAAlB,CACH,OADG,EAEH,cAFG,EAGH,QAAK,eAAL,CAAqB,WAArB,EAAkC,QAAlC,EAA4C,OAA5C,CAHG,EAIH,4BAJG,EAKH,QAAK,QAAL,CAAc,IAAd,CAAmB,OAAnB,EAAyB,SAAzB,EAAoC,QAApC,EAA8C,OAA9C,CALG,CAAP;AAMD,OAXuB,CAAxB;AAYA,aAAO,YAAW;AAChB,wBAAgB,IAAhB,CAAqB,oBAAY;AAC/B;AACD,SAFD;AAGD,OAJD;AAKD;;AAED;;;;;;gDAG4B;AAC1B,UAAM,SAAS,KAAK,IAAL,CAAU,SAAV,EAAf;;AAEA,UAAI,CAAC,OAAO,SAAP,EAAL,EAAyB;AACvB,eAAO,QAAQ,OAAR,EAAP;AACD;;AAED,aAAO,IAAI,OAAJ,CAAY,mBAAW;AAC5B,eAAO,mBAAP,CAA2B,YAAM;AAC/B,cAAI,CAAC,OAAO,SAAP,EAAL,EAAyB;AACvB;AACD;AACF,SAJD;AAKD,OANM,CAAP;AAOD;;AAED;;;;;;;;;;oCAOgB,W,EAAa,Q,EAAU,W,EAAa;AAClD,UAAI,CAAC,WAAL,EAAkB;AAChB;AACA,YAAI,CAAC,QAAL,EAAe;AACb;AACA,iBAAO,IAAP;AACD,SAHD,MAGO;AACL;AACA,wBAAc,UAAd;AACD;AACF;;AAED,UAAM,mBAAmB,6BAA6B,SAA7B,CAAzB;AACA,uBAAO,MAAP,CAAc,eAAe,MAAf,IACV,iBAAiB,WAAjB,MAAkC,SADtC,EAEA,gCAFA,EAEkC,WAFlC;;AAIA,UAAM,iBAAiB,KAAK,gBAAL,CAAsB,WAAtB,KACnB,KAAK,IAAL,CAAU,sBAAV,CAAiC,WAAjC,EAA8C,gBAA9C,CADJ;AAEA,UAAI,cAAJ,EAAoB;AAClB,aAAK,gBAAL,CAAsB,WAAtB,IAAqC,cAArC;AACD,OAFD,MAEO;AACL,eAAO,IAAP;AACD;;AAED;AACA,aAAO,cACL,eAAe,gBAAf,CAAgC,WAAhC,EAA6C,WAA7C,CADK,GAEH,eAAe,aAAf,CAA6B,WAA7B,CAFJ;AAGD;;AAED;;;;;;;;;;6BAOS,S,EAAW,Q,EAAU,M,EAAQ,K,EAAO;AAC3C,UAAM,OAAO,sCACT,MADS;AAET,gCAA2B,SAFlB,EAGT,2BAHS,CAAb;AAIA,WAAK,IAAM,GAAX,IAAkB,IAAlB,EAAwB;AACtB,cAAM,GAAN,IAAa,KAAK,GAAL,CAAb;AACD;AACD,eAAS,IAAI,cAAJ,CAAmB,MAAnB,EAA2B,SAA3B,EAAsC,KAAtC,CAAT;AACD;;;;EAvIoC,Y;;;;;;;;qjBC38BvC;;;;;;;;;;;;;;;;AAgBA;;AACA;;AACA;;;;AAEA;AACA,IAAM,OAAO,2CAAb;;AAEA;AACA,IAAM,kBAAkB,GAAxB;;AAEA;;;;IAGa,2B,WAAA,2B;AACX;;;;;;AAMA,uCAAY,GAAZ,EAAiB,KAAjB,EAAwB;AAAA;;AAAA;;AAEtB;AACA,SAAK,MAAL,GAAc,KAAd;;AAEA;AACA,SAAK,QAAL,GAAgB,KAAhB;;AAEA;;;;AAIA,SAAK,cAAL,GAAsB,EAAtB;;AAEA;AACA,SAAK,eAAL,GAAuB,kCAAoB,KAAK,MAAzB,EACnB,6BAAY,4BADO,EAEnB,IAFmB,EAGnB,YAAM;AACJ,YAAK,UAAL;AACD,KALkB,CAAvB;AAMD;;AAED;;;;;;;;;8BAKU;AACR,aAAO,KAAK,QAAZ;AACD;;AAED;;;;;;;;iCAKa;AACX,WAAK,QAAL,GAAgB,IAAhB;AACA,WAAK,WAAL;AACD;;AAED;;;;;;;;gCAKY;AACV,aAAO,KAAK,cAAL,CAAoB,MAA3B;AACD;;AAED;;;;;;;;;4BAMQ,K,EAAO;AACb,sBAAM,MAAN,CAAa,SAAS,MAAM,UAAf,IAA6B,MAAM,OAAhD,EACI,iDACA,MAAM,UAFV;AAGA,WAAK,cAAL,CAAoB,IAApB,CAAyB,KAAzB;AACA,UAAI,KAAK,SAAL,MAAoB,eAAxB,EAAyC;AACvC,wBAAM,IAAN,CAAW,IAAX,EAAiB,yCACb,MAAM,UADV;AAEA,aAAK,cAAL,CAAoB,KAApB;AACD;AACD,WAAK,WAAL;AACD;;AAED;;;;;;;kCAIc;AACZ,UAAI,KAAK,OAAL,MAAkB,KAAK,SAAL,EAAtB,EAAwC;AACtC,aAAK,eAAL,CAAqB,IAArB,CAA0B,6BAAY,uBAAtC;AACI;AACC,UAAC,QAAQ,KAAK,cAAd,EAFL;AAGA,aAAK,cAAL,GAAsB,EAAtB;AACD;AACF;;;;;;;;;;ACrHH;;;;;;;;;;;;;;;;AAgBA;;;;;;;;;;AAUO,IAAM,oBAAoB,0BAApB,4BAAgD;AAC3D,QAAM,uDADqD;AAE3D,UAAQ;AAFmD,CAAtD;;;;;;;;qjBC1BP;;;;;;;;;;;;;;;;QA8CgB,2B,GAAA,2B;;AA9BhB;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;AAEA;AACA,IAAM,OAAO,+BAAb;;AAEA;AACA,IAAM,gCAAgC,CAAtC;;AAEA;;;;;;AAMO,IAAI,sCAAJ;;AAEP;;;;;;;AAOO,SAAS,2BAAT,CAAqC,MAArC,EAA6C,gBAA7C,EAA+D;AACpE,MAAI,CAAC,qBAAU,QAAV,IAAsB,qBAAU,IAAjC,KAA0C,CAAC,gBAA3C,IACA,OAAO,MADP,IACiB,OAAO,MAAP,CAAc,QADnC,EAC6C;AAC3C,QAAM,MAAM,OAAO,MAAP,CAAc,QAA1B;AACA,WAAU,IAAI,QAAd,UAA2B,IAAI,IAA/B;AACD;AACD,SAAO,aAAK,UAAL,GACH,yDADJ;AAED;;AAED;;;;IAGa,e,WAAA,e;AACX;;;;;;;;AAQA,2BAAY,MAAZ,EAAoB,IAApB,EAA0B,MAA1B,EAAkC,EAAlC,EAAsC;AAAA;;AACpC;AACA,SAAK,OAAL,GAAe,MAAf;;AAEA;AACA,SAAK,KAAL,GAAa,IAAb;;AAEA;AACA,SAAK,WAAL,GAAmB,EAAnB;;AAEA,oBAAM,MAAN,CAAa,UAAU,OAAO,QAAP,CAAvB,EACI,wCADJ;AAEA,SAAK,SAAL,GAAiB,OAAO,QAAP,CAAjB;;AAEA;AACA,SAAK,aAAL,GAAqB,CAArB;;AAEA,SAAK,wBAAL;AACD;;AAED;;;;;;;6BAGS;AACP,sBAAgB,2BAAhB,CAA4C,KAAK,OAAL,CAAa,QAAzD,EACI,KAAK,KADT;AAED;;AAED;;;;;;;+CAI2B;AACzB,UAAI,kBAAJ;AACA,UAAI,gBAAgB,oBAAhB,CAAqC,KAAK,KAA1C,CAAJ,EAAsD;AACpD,oBAAY,gBAAgB,YAAhB,CAA6B,KAAK,KAAlC,CAAZ;AACA,UAAG,UAAU,UAAb;AACD,OAHD,MAGO;AACL,oBAAY,KAAK,uBAAL,EAAZ;AACA,aAAK,OAAL,CAAa,QAAb,CAAsB,IAAtB,CAA2B,WAA3B,CAAuC,UAAU,KAAjD;AACA,aAAK,0BAAL;AACD;AACD,sBAAM,MAAN,CAAa,SAAb,EAAwB,kCAAxB;AACD;;AAED;;;;;;;;8CAK0B;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAM,WAAW,gBAAgB,eAAhB,EAAjB;AACA,UAAM,YAAY,KAAK,SAAL,EAAe,yBAA2B;AAC1D,mBAAW,4BAA4B,KAAK,OAAjC,CAD+C;AAE1D,0BAF0D;AAG1D,cAAM,KAAK;AAH+C,OAA1C,CAAlB;AAKA,UAAM,QAAQ,sCAA4B,KAAK,OAAL,CAAa,QAAzC,EAAmD,QAAnD;AACV,gCAA4B;AAC1B,iBAAS,iCADiB;AAE1B,cAAM,SAFoB;AAG1B,gCAAwB;AAHE,OADlB,CAAd;AAMA,YAAM,QAAN,GAAiB,QAAjB;AACA,4BAAU,KAAV,EAAiB;AACf,iBAAS;AADM,OAAjB;AAGA,YAAM,GAAN,GAAY,KAAK,SAAjB;AACA,UAAM,YAAY,yBAA2B;AAC3C,oBAD2C;AAE3C,oBAAY,CAF+B;AAG3C,eAAO,6DAAgC,KAAK,OAArC;AACH;AACC,aAFE;AAHoC,OAA7C;AAOA,sBAAgB,mBAAhB,CAAoC,KAAK,KAAzC,IAAkD,SAAlD;AACA,aAAO,SAAP;AACD;;AAED;;;;;;;;;;;;iDAS6B;AAAA;;AAC3B,UAAI,CAAC,uCAAuB,KAAK,OAA5B,CAAL,EAA2C;AACzC;AACD;AACD;AACA,sBAAgB,qBAAhB,CAAsC,KAAK,KAA3C,IACI,IAAI,KAAK,OAAL,CAAa,mBAAjB,CAAqC,qBAAa;AAChD,YAAI,CAAC,SAAL,EAAgB;AACd;AACD;AACD,kBAAU,UAAV,GAAuB,OAAvB,CAA+B,iBAAS;AACtC,cAAI,SAAS,MAAM,WAAN,KAAsB,UAA/B,IACD,MAAM,MAAN,KAAiB,yBADhB,IAEF,MAAM,WAFR,EAEqB;AACnB,kBAAM,WAAN,CAAkB,OAAlB,CAA0B,kBAAU;AAClC,kBAAI,MAAK,SAAL,IAAkB,OAAO,YAAzB,IACA,EAAE,MAAK,aAAP,GAAuB,6BAAvB,IAAwD,CAD5D,EAC+D;AAC7D,iCAAO,KAAP,CAAa,IAAb,2BAA0C,MAAK,KAA/C;AACD;AACF,aALD;AAMD;AACF,SAXD;AAYD,OAhBD,CADJ;AAkBA,sBAAgB,qBAAhB,CAAsC,KAAK,KAA3C,EAAkD,OAAlD,CAA0D;AACxD,oBAAY,CAAC,UAAD;AAD4C,OAA1D;AAGD;;AAED;;;;;;;;;;;;;AA6CA;;;;;;gCAMY,K,EAAO;AACjB,UAAM,YAAY,gBAAgB,YAAhB,CAA6B,KAAK,KAAlC,CAAlB;AACA,sBAAM,MAAN,CAAa,SAAb,EAAwB,8CAAxB;AACA,sBAAM,MAAN,CAAa,UAAU,KAAvB,EACI,8CAA8C,KAAK,KAAnD,GACA,kBADA,GACqB,KAAK,WAF9B;AAGA,gBAAU,KAAV,CAAgB,OAAhB;AACI;;;AAGC,QAAC,YAAY,KAAK,WAAlB,EAA+B,SAAS,KAAxC,EAJL;AAKD;;AAED;;;;;;;;;;;AAmBA;;;;oCAIgB;AACd,aAAO,KAAK,WAAZ;AACD;;AAED;;;;;;;8BAIU;AACR,aAAO,KAAK,KAAZ;AACD;;;gDAzFkC,M,EAAQ,I,EAAM;AAC/C,UAAM,YAAY,gBAAgB,YAAhB,CAA6B,IAA7B,CAAlB;AACA,sBAAM,MAAN,CAAa,aAAa,UAAU,KAAvB,IAAgC,UAAU,UAAvD,EACI,gBAAgB,IAAhB,GAAuB,iCAAvB,GACA,yBAFJ;AAGA,UAAI,EAAG,UAAU,UAAjB,EAA8B;AAC5B;AACA;AACD;AACD,aAAO,IAAP,CAAY,WAAZ,CAAwB,UAAU,KAAlC;AACA,aAAO,gBAAgB,mBAAhB,CAAoC,IAApC,CAAP;AACA,UAAI,gBAAgB,qBAAhB,CAAsC,IAAtC,CAAJ,EAAiD;AAC/C,wBAAgB,qBAAhB,CAAsC,IAAtC,EAA4C,UAA5C;AACA,wBAAgB,qBAAhB,CAAsC,IAAtC,IAA8C,IAA9C;AACD;AACF;;AAED;;;;;;;;;yCAM4B,I,EAAM;AAChC,aAAO,oBAAO,gBAAgB,mBAAvB,EAA4C,IAA5C,CAAP;AACD;;AAED;;;;;;;;;sCAMyB;AACvB,aAAO,OAAO,EAAG,gBAAgB,OAA1B,CAAP;AACD;;;iCA2BmB,I,EAAM;AACxB,aAAO,gBAAgB,mBAAhB,CAAoC,IAApC,CAAP;AACD;;AAED;;;;;;;;8CAKiC;AAC/B,sBAAgB,mBAAhB,GAAsC,EAAtC;AACD;;;;;;AAmBH;;;AACA,gBAAgB,mBAAhB,GAAsC,EAAtC;;AAEA;AACA,gBAAgB,OAAhB,GAA0B,CAA1B;;AAEA;AACA,gBAAgB,qBAAhB,GAAwC,EAAxC;;;;;;;;qjBChTA;;;;;;;;;;;;;;;;QA8ZgB,mC,GAAA,mC;QASA,sC,GAAA,sC;;AAvZhB;;AAIA;;AAOA;;AACA;;AACA;;AACA;;AAGA;;AAMA;;;;AAEA,IAAM,2BAA2B,CAAjC;AACA,IAAM,wBAAwB,0BAA9B;AACA,IAAM,wBAAwB,wBAA9B;AACA,IAAM,OAAO,eAAb;;AAIA;AACA,IAAM,MAAM,2BAAZ;;AAGA;;;;AAIA,IAAM,mBAAmB,CACvB,2BAAmB,OADI,EAEvB,2BAAmB,KAFI,EAGvB,2BAAmB,KAHI,EAIvB,2BAAmB,MAJI,CAAzB;;AAQA;;;;;;IAKa,sB,WAAA,sB;AACX;;;AAGA,kCAAY,MAAZ,EAAoB;AAAA;;AAClB;AACA,SAAK,MAAL,GAAc,MAAd;;AAEA;AACA,SAAK,WAAL,GAAmB,uCAAwB,KAAK,MAA7B,CAAnB;;AAEA;AACA,SAAK,SAAL,GAAiB,mBAAS,cAAT,CAAwB,KAAK,MAA7B,CAAjB;;AAEA;AACA,SAAK,wBAAL,GAAgC,KAAhC;;AAEA;;AAEA,SAAK,iBAAL,GAAyB,4BAAzB;AACD;;AAED;;;;;8BACU;AACR,WAAK,WAAL,CAAiB,OAAjB;AACD;;AAED;;;;;;;qCAIiB,O,EAAS;AACxB,aAAO,KAAK,SAAL,CAAe,OAAf,CAAP;AACD;;AAED;;;;;;;yCAIqB,gB,EAAkB;AACrC,UAAM,OAAO,KAAK,SAAL,CAAe,gBAAf,CAAb;AACA,aAAO,IAAI,cAAJ,CAAmB,IAAnB,EAAyB,gBAAzB,EAA2C,IAA3C,CAAP;AACD;;AAED;;;;;;;;;;0CAOsB,M,EAAQ,S,EAAW,Q,EAAU;AACjD;AACA,UAAM,QAAQ,2BAAmB,MAAnB,EAA2B,SAA3B,EAAsC,QAAtC,CAAd;AACA,UAAM,OAAO,KAAK,SAAL,CAAe,MAAf,CAAb;AACA,UAAM,UAAU,kCACd,KAAK,UAAL,CAAgB,QAAhB,6BADF;AAEA,cAAQ,OAAR,CAAgB,KAAhB;AACD;;AAED;;;;;;;8BAIU,O,EAAS;AAAA;;AACjB;AACA,UAAM,QAAQ,0CAA4B,OAA5B,EAAqC,KAAK,MAAL,CAAY,GAAjD,CAAd;AACA,UAAI,KAAJ,EAAW;AACT,YAAM,QAAQ,yDAA+B,KAA/B,CAAd;AACA,YAAI,KAAJ,EAAW;AACT,cAAM,eAAe,KAArB;AACA,iBAAO,KAAK,gBAAL,CAAsB,KAAtB,EAA6B,YAAM;AACxC,mBAAO,sCAAuB,MAAK,MAA5B,EAAoC,YAApC,EACH,MAAK,WADF,CAAP;AAED,WAHM,CAAP;AAID;AACF;;AAED;AACA,aAAO,KAAK,WAAZ;AACD;;AAED;;;;;;;;qCAKiB,M,EAAQ,O,EAAS;AAChC,UAAI,OAAO,8CAAgD,OAAO,IAAP,CAA3D;AACA,UAAI,CAAC,IAAL,EAAW;AACT,eAAO,SAAP;AACA,eAAO,IAAP,IAAe,IAAf;AACD;AACD,aAAO,IAAP;AACD;;AAED;;;;;;;;;;;;qCASiB,M,EAAQ,Q,EAAU,gB,EAAkB;AACnD,UAAM,YAAY,OAAO,IAAP,CAAlB;AACA,UAAI,CAAC,KAAK,iBAAL,CAAuB,SAAvB,EAAkC,gBAAlC,CAAL,EAA0D;AACxD,yBAAO,KAAP,CAAa,GAAb,EAAkB,mBAAmB,SAAnB,GAA+B,WAA/B,GAChB,uBADF;AAEA;AACD;AACD,UAAI,cAAc,2BAAmB,MAArC,EAA6C;AAC3C,YAAI,CAAC,OAAO,YAAP,CAAL,EAA2B;AACzB,2BAAO,KAAP,CAAa,GAAb,EAAkB,uCAAlB;AACA;AACD;AACD,aAAK,sBAAL,CAA4B,OAAO,YAAP,CAA5B,EAAkD,QAAlD;;AAEA;AACA,YAAM,OAAO,KAAK,SAAL,CAAe,OAAf,EAAb;AACA,aAAK,SAAL,CAAe;AACb,eAAK,KAAK,SAAL,CAAe,YAAf,EADQ;AAEb,gBAAM,KAAK,SAAL,CAAe,aAAf,EAFO;AAGb,iBAAO,KAAK,KAHC;AAIb,kBAAQ,KAAK,MAJA;AAKb,uBAAa,KALA;AAMb,oBAAU,CANG,CAMA;AANA,SAAf;AAQD;AACF;;AAED;;;;;;;;;qCAMiB,I,EAAM,Q,EAAU;AAC/B;AACA,aAAO,2BACH,KAAK,WAAL,CAAiB,cAAjB,EADG,EACgC,IADhC,EACsC,QADtC,CAAP;AAED;;AAED;;;;;;;8BAIU,C,EAAG;AACX,WAAK,iBAAL,CAAuB,IAAvB,CAA4B,CAA5B;AACD;;AAED;;;;;;;;;;2CAOuB,M,EAAQ,Q,EAAU;AAAA;;AACvC,UAAI,CAAC,MAAM,OAAN,CAAc,OAAO,oBAAP,CAAd,CAAD,IACA,CAAC,MAAM,OAAN,CAAc,OAAO,sBAAP,CAAd,CADL,EACoD;AAClD,yBAAO,KAAP,CAAa,GAAb,EAAkB,4CACd,kBADJ;AAEA;AACD;;AAED;AACA,UAAI,CAAC,KAAK,wBAAV,EAAoC;AAClC,aAAK,wBAAL,GAAgC,IAAhC;AACA,aAAK,SAAL,CAAe,SAAf,CAAyB,KAAK,SAAL,CAAe,IAAf,CAAoB,IAApB,CAAzB;AACD;;AAED;;;;;;;AAOA,UAAM,sBAAsB,SAAtB,mBAAsB,CAAC,MAAD,EAAS,SAAT,EAAoB,OAApB,EAAgC;AAC1D,YAAI,CAAC,SAAL,EAAgB;AACd;AACD;AACD;AACA;AACA,aAAK,IAAM,CAAX,IAAgB,MAAhB,EAAwB;AACtB,cAAI,CAAC,oBAAO,MAAP,EAAe,CAAf,CAAL,EAAwB;AACtB;AACD;AACD,cAAM,QAAQ,SAAS,CAAT,EAAY,EAAZ,CAAd;AACA,cAAI,QAAQ,SAAR,IAAqB,OAAO,KAAP,CAAzB,EAAwC;AACtC;AACD;AACD,iBAAO,KAAP,IAAgB,IAAhB;AACA,cAAM,OAAO,OAAO,MAAP,CAAc,IAAd,CAAb;AACA,eAAK,OAAL,IAAgB,CAAhB;AACA,mBAAS,OAAK,gBAAL,CAAsB,2BAAmB,MAAzC,EAAiD,IAAjD,CAAT;AACD;AACF,OAnBD;;AAqBA,UAAM,UAAU,KAAK,oBAAL,CAA0B,OAAO,oBAAP,CAA1B,CAAhB;AACA,UAAM,UAAU,KAAK,oBAAL,CAA0B,OAAO,sBAAP,CAA1B,CAAhB;AACA,WAAK,iBAAL,CAAuB,GAAvB,CAA2B,aAAK;AAC9B;AACA;AACA,4BAAoB,OAApB,EACI,CAAC,EAAE,GAAF,GAAQ,EAAE,MAAX,IAAqB,GAArB,GAA2B,OAAK,SAAL,CAAe,eAAf,EAD/B,EAEI,qBAFJ;AAGA,4BAAoB,OAApB,EACI,CAAC,EAAE,IAAF,GAAS,EAAE,KAAZ,IAAqB,GAArB,GAA2B,OAAK,SAAL,CAAe,cAAf,EAD/B,EAEI,qBAFJ;AAGD,OATD;AAUD;;AAED;;;;;;;;;;;;;yCAUqB,M,EAAQ;AAC3B,UAAM,SAAS,EAAf;AACA,UAAI,CAAC,MAAD,IAAW,CAAC,MAAM,OAAN,CAAc,MAAd,CAAhB,EAAuC;AACrC,eAAO,MAAP;AACD;;AAED,WAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,OAAO,MAA3B,EAAmC,GAAnC,EAAwC;AACtC,YAAI,QAAQ,OAAO,CAAP,CAAZ;AACA,YAAI,OAAO,KAAP,KAAiB,QAAjB,IAA6B,CAAC,SAAS,KAAT,CAAlC,EAAmD;AACjD,2BAAO,KAAP,CAAa,GAAb,EAAkB,2CAAlB;AACA,iBAAO,MAAP;AACD;;AAED,gBAAQ,KAAK,GAAL,CAAS,KAAK,KAAL,CAAW,QAAQ,wBAAnB,IACb,wBADI,EACsB,GADtB,CAAR;AAEA,eAAO,KAAP,IAAgB,KAAhB;AACD;AACD,aAAO,MAAP;AACD;;AAED;;;;;;;;;;;sCAQkB,W,EAAa,O,EAAS;AACtC,UAAI,QAAQ,aAAR,CAAsB,WAAtB,IAAqC,KAAK,MAAL,CAAY,GAArD,EAA0D;AACxD,eAAO,iBAAiB,QAAjB,CAA0B,WAA1B,CAAP;AACD;AACD,aAAO,IAAP;AACD;;;;;;AAIH;;;;;;;;IAMa,c,WAAA,c;AACX;;;;;AAKA,0BAAY,IAAZ,EAAkB,gBAAlB,EAAoC,OAApC,EAA6C;AAAA;;AAC3C;;AAEA;AACA,SAAK,KAAL,GAAa,IAAb;AACA;AACA,SAAK,iBAAL,GAAyB,gBAAzB;AACA;AACA,SAAK,QAAL,GAAgB,OAAhB;;AAEA;AACA,SAAK,UAAL,GAAkB,EAAlB;AACD;;AAED;;;;;8BACU;AACR,WAAK,UAAL,CAAgB,OAAhB,CAAwB,oBAAY;AAClC;AACD,OAFD;AAGD;;AAED;;;;;;;;;;;;;+BAUW,M,EAAQ,O,EAAS;AAC1B,UAAM,YAAY,gBAAM,YAAN,CAAmB,OAAO,IAAP,CAAnB,CAAlB;AACA,UAAM,aAAa,+BAAkB,SAAlB,CAAnB;AACA,UAAM,mBAAmB,0CAA6B,KAAK,KAAL,CAAW,OAAX,EAA7B,CAAzB;;AAEA,UAAI,KAAK,yBAAL,CAA+B,UAA/B,CAAJ,EAAgD;AAC9C;AACA;AACA,aAAK,QAAL,CAAc,gBAAd,CAA+B,MAA/B,EAAuC,OAAvC,EAAgD,KAAK,iBAArD;AACA;AACD;;AAED,UAAM,UAAU,KAAK,KAAL,CAAW,sBAAX,CACZ,UADY,EACA,gBADA,CAAhB;AAEA,uBAAO,MAAP,CAAc,CAAC,CAAC,OAAhB,EACI,4CADJ,EACkD,SADlD,EAEI,KAAK,KAAL,CAAW,OAAX,EAFJ;AAGA,UAAM,WAAW,QAAQ,GAAR,CAAY,KAAK,iBAAjB,EAAoC,SAApC,EAA+C,MAA/C,EACb,OADa,CAAjB;AAEA,WAAK,UAAL,CAAgB,IAAhB,CAAqB,QAArB;AACD;;AAED;;;;;;;8CAI0B,W,EAAa;AACrC,aAAO,eAAe,QAAtB;AACD;;;;;;AAIH;;;;;;;;;;AAQO,SAAS,mCAAT,CAA6C,eAA7C,EAA8D;AACnE,SAAO,gDACL,sCAAwB,eAAxB,EAAyC,+BAAzC;AADF;AAED;;AAED;;;;AAIO,SAAS,sCAAT,CAAgD,eAAhD,EAAiE;AACtE,6CACI,eADJ,EACqB,+BADrB,EACsD,sBADtD;AAEA,SAAO,+BAAiB,eAAjB,EAAkC,+BAAlC,CAAP;AACD;;;;;;;;qjBC3aD;;;;;;;;;;;;;;;;AAgBA;;AACA;;AAIA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;AAIA,IAAM,MAAM,eAAZ;;AAEA,IAAM,qBAAqB,GAA3B;;IAEa,c,WAAA,c;AACX;;;;;;;AAOA,0BAAY,mBAAZ,EAAiC,OAAjC,EAA0C,UAA1C,EAAsD,OAAtD,EAA+D,SAA/D,EAA0E;AAAA;;AAExE;AACA,SAAK,GAAL,GAAW,oBAAoB,SAApB,GAAgC,GAA3C;;AAEA;AACA,SAAK,OAAL,GAAe,gBAAM,MAAN,CAAa,QAAQ,SAAR,CAAb,CAAf;;AAEA;AACA,SAAK,cAAL,GAAsB,QAAQ,eAAR,CAAtB,CATwE,CASxB;;AAEhD;AACA,SAAK,aAAL,GAAqB,OAAO,QAAQ,cAAR,CAAP,KAAmC,IAAxD,CAZwE,CAYV;;AAE9D;AACA,SAAK,qBAAL,GAA6B,IAA7B;;AAEA;AACA,SAAK,cAAL,GAAsB,QAAQ,aAAR,CAAtB;;AAEA,qBAAO,MAAP,CAAe,KAAK,cAAL,GAAsB,KAAK,cAA3B,GAA4C,IAA3D,EACI,mEADJ;;AAGA;AACA,SAAK,eAAL,GAAuB,KAAK,cAAL,GACnB,iBAAO,MAAP,CAAc,yCAAwB,KAAK,cAA7B,CAAd,iDAC+C,KAAK,cADpD,CADmB,GAGnB,IAHJ;;AAKA;AACA,SAAK,gBAAL,GAAwB,mCAAmB,KAAK,GAAxB,CAAxB;;AAEA;AACA,SAAK,sBAAL,GACE,mBAAS,qBAAT,CAA+B,mBAA/B,CADF;;AAGA;AACA,SAAK,eAAL,GAAuB,IAAvB;;AAEA;AACA,SAAK,uBAAL,GAA+B,IAA/B;;AAEA;AACA,SAAK,sBAAL,GAA8B,EAA9B;;AAEA;AACA,SAAK,qBAAL,GAA6B,EAA7B;;AAEA;AACA,SAAK,WAAL,GAAmB,UAAnB;;AAEA;AACA,SAAK,QAAL,GAAgB,OAAhB;;AAEA;AACA,SAAK,UAAL,GAAkB,2DAAqC,SAAvD;;AAEA;AACA,SAAK,uBAAL,GAA+B,IAA/B;;AAEA;AACA,SAAK,sBAAL,GAA8B,IAA9B;;AAEA;AACA,SAAK,cAAL,GAAsB,IAAtB;;AAEA;AACA,SAAK,YAAL,GAAoB,IAApB;;AAEA;AACA,SAAK,UAAL,GAAkB,CAAlB;;AAEA,SAAK,iBAAL;AACA,SAAK,kBAAL;AACD;;AAED;;;;;;;;;;;;;;yBAUK,Y,EAAc,O,EAAS,e,EAAiB,e,EAAiB;AAAA;;AAC5D,UAAM,cAAc,QAAQ,WAAR,CAApB;;AAEA,UAAM,cACD,QAAQ,WAAR,MAAyB,IAA1B,IAAoC,CAAC,KAAK,cAD9C;AAEA,UAAI,CAAC,KAAK,cAAN,IAAwB,CAAC,WAA7B,EAA0C;AACxC;AACA;AACD;;AAED,WAAK,UAAL;AACA,WAAK,YAAL,GAAoB,OAApB;AACA,UAAM,gBAAgB,QAAQ,gBAAR,CAAtB;;AAEA,UAAM,SAAS,KAAK,gBAAL,CAAsB,SAAtB,EAAf;AACA,UAAM,WAAW,OAAO,MAAP,CAAc,EAAd,EAAkB,eAAlB,EAAmC,MAAnC,CAAjB;;AAEA,UAAI,CAAC,KAAK,eAAV,EAA2B;AACzB,wBAAgB,SAAhB,CAA0B,gBAA1B;AACA,aAAK,uBAAL,GACI,KAAK,gBAAL,CAAsB,cAAtB,CAAqC,KAAK,OAA1C,EAAmD,eAAnD,CADJ;AAEA,aAAK,eAAL,GAAuB,KAAK,uBAAL,CAA6B,IAA7B,CAAkC,mBAAW;AAClE,iBAAO,MAAK,sBAAL,CAA4B,cAA5B,CACH,OADG,EACM,QADN,EACgB,MAAK,UADrB,CAAP;AAED,SAHsB,CAAvB;AAID;;AAED,UAAM,wBAAwB,KAAK,qBAAL,CAC1B,YAD0B,EACZ,aADY,EACG,eADH,EAEzB,IAFyB,CAEpB,gCAAwB;AAC5B;AACA;AACA,YAAM,4BACF,MAAK,wBAAL,CAA8B,oBAA9B,CADJ;AAEA,eAAO,MAAK,sBAAL,CAA4B,cAA5B,CACH,yBADG,EACwB,QADxB,EACkC,MAAK,UADvC,CAAP;AAED,OATyB,CAA9B;;AAWA,UAAI,KAAK,eAAT,EAA0B;AACxB,YAAM,eAAe,kBAAK;AACxB,qBAAW,QAAQ,IAAR,CADa;AAExB,uBAAa,KAAK,GAAL,CAAS,IAAT,CAAc,GAAd,EAFW;AAGxB,4BAAkB;AAHM,SAAL,CAArB;AAKA,aAAK,qBAAL,CAA2B,IAA3B,CAAgC,sBAAsB,IAAtB,CAA2B,eAAO;AAChE,uBAAa,gBAAb,IACQ,2BAAiB,GAAjB,CADR;AAEA,iBAAO,YAAP;AACD,SAJ+B,CAAhC;AAKD;;AAED,WAAK,sBAAL,CAA4B,IAA5B,CAAiC,qBAAjC;AACA,WAAK,QAAL,CAAc,WAAd;AACD;;AAED;;;;;;8BAGU;AACR,WAAK,MAAL;;AAEA;AACA,UAAI,KAAK,uBAAT,EAAkC;AAChC,aAAK,GAAL,CAAS,YAAT,CAAsB,KAAK,uBAA3B;AACA,aAAK,uBAAL,GAA+B,IAA/B;AACD;;AAED,UAAI,KAAK,sBAAT,EAAiC;AAC/B,aAAK,GAAL,CAAS,YAAT,CAAsB,KAAK,sBAA3B;AACA,aAAK,sBAAL,GAA8B,IAA9B;AACD;AACF;;AAED;;;;;;;;6BAKS,W,EAAa;AACpB,UAAI,KAAK,UAAL,IAAmB,CAAvB,EAA0B;AACxB;AACA;AACD;;AAED,UAAI,WAAJ,EAAiB;AACf;AACA,aAAK,KAAL;AACA;AACD;AACF;;AAED;;;;;;;4BAIQ;AAAA;;AAAA,UAEoB,qBAFpB,GAMF,IANE,CAEJ,sBAFI;AAAA,UAGqB,sBAHrB,GAMF,IANE,CAGJ,uBAHI;AAAA,UAIa,cAJb,GAMF,IANE,CAIJ,eAJI;AAAA,UAKmB,oBALnB,GAMF,IANE,CAKJ,qBALI;;AAON,UAAM,cAAc,0BAA4B,KAAK,YAArD;AACA,WAAK,MAAL;;AAEA,6BAAuB,IAAvB,CAA4B,kBAAU;AACpC,eAAK,WAAL,CAAiB,GAAjB,CAAqB,MAArB,EAA6B,IAA7B;AACA,uBAAe,IAAf,CAAoB,mBAAW;AAC7B,cAAI,0BAAJ;AACA,cAAI,OAAK,eAAT,EAA0B;AACxB,gCACI,OAAK,uBAAL,CAA6B,OAA7B,EAAsC,oBAAtC,CADJ;AAED,WAHD,MAGO;AACL,gCACI,OAAK,2BAAL,CAAiC,OAAjC,EAA0C,qBAA1C,CADJ;AAED;AACD,4BAAkB,IAAlB,CAAuB,sBAAc;AACnC,mBAAK,QAAL,CAAc,UAAd,EAA0B,WAA1B;AACD,WAFD;AAGD,SAZD;AAaD,OAfD;AAgBD;;AAED;;;;;;;;gDAK4B,O,EAAS,wB,EAA0B;AAC7D,aAAO,QAAQ,GAAR,CAAY,wBAAZ,EAAsC,IAAtC,CAA2C,qBAAa;AAC7D,iCAAa,SAAb,EAAwB,gBAAQ;AAAC,iBAAO,CAAC,CAAC,IAAT;AAAe,SAAhD;AACA,YAAM,oBAAoB,UAAU,IAAV,CAAe,GAAf,CAA1B;AACA,YAAI,mBAAJ;AACA,YAAI,QAAQ,OAAR,CAAgB,mBAAhB,KAAwC,CAA5C,EAA+C;AAC7C,uBAAa,QAAQ,OAAR,CAAgB,mBAAhB,EAAqC,iBAArC,CAAb;AACD,SAFD,MAEO;AACL,uBAAa,wCAA8B,OAA9B,EAAuC,iBAAvC,CAAb;AACD;AACD,eAAO,UAAP;AACD,OAVM,CAAP;AAWD;;AAED;;;;;;;;4CAKwB,O,EAAS,oB,EAAsB;AAAA;;AACrD,sBAAM,MAAN,CAAa,KAAK,eAAL,IACT,OAAO,KAAK,eAAZ,IAA+B,UADnC,EAC+C,uBAC3C,8DAFJ;;AAIA,aAAO,QAAQ,GAAR,CAAY,oBAAZ,EAAkC,IAAlC,CAAuC,yBAAiB;AAC7D,YAAI;AACF,iBAAO,OAAK,eAAL,CAAqB,OAArB,EAA8B,aAA9B,CAAP;AACD,SAFD,CAEE,OAAO,CAAP,EAAU;AACV,0BAAM,KAAN,CAAY,GAAZ,mCACmC,OAAK,cADxC,EAC0D,CAD1D;AAEA,iBAAO,EAAP;AACD;AACF,OARM,CAAP;AASD;;AAED;;;;;;;6BAIS;AACP,WAAK,UAAL,GAAkB,CAAlB;AACA,WAAK,eAAL,GAAuB,IAAvB;AACA,WAAK,uBAAL,GAA+B,IAA/B;AACA,WAAK,sBAAL,GAA8B,EAA9B;AACA,WAAK,qBAAL,GAA6B,EAA7B;AACA,WAAK,YAAL,GAAoB,IAApB;AACD;;AAED;;;;;;;;;;;0CAQsB,Y,EAAc,a,EAAe,e,EAAiB;AAAA;;AAClE,UAAM,kBAAkB,EAAxB;AACA,UAAM,SAAS,kBAAf;AACA;AACA;AACA,UAAM,SAAS,gCACX,gBAAgB,IADL,EAEX,gBAAgB,UAFL,EAGX,IAHW,CAGN,cAHM,CAAf;AAIA;AACA,UAAI,gBAAgB,aAApB,EAAmC;AACjC,eAAO,MAAP,CAAc,MAAd,EAAsB,YAAtB,EAAoC,aAApC;;AADiC,mCAEtB,CAFsB;AAG/B,cAAI,OAAO,OAAO,CAAP,CAAP,IAAoB,QAAxB,EAAkC;AAChC,4BAAgB,IAAhB,CACI,OAAK,gBAAL,CAAsB,cAAtB,CAAqC,OAAO,CAAP,CAArC,EAAgD,MAAhD,EACK,IADL,CACU,iBAAS;AAAE,qBAAO,CAAP,IAAY,KAAZ;AAAoB,aADzC,CADJ;AAGD;AAP8B;;AAEjC,aAAK,IAAM,CAAX,IAAgB,MAAhB,EAAwB;AAAA,gBAAb,CAAa;AAMvB;AACF;AACD,aAAO,QAAQ,GAAR,CAAY,eAAZ,EAA6B,IAA7B,CAAkC,YAAM;AAC7C,eAAO,MAAP;AACD,OAFM,CAAP;AAGD;;AAED;;;;;;;;6CAKyB,M,EAAQ;AAC/B,UAAM,IAAI,EAAV;AACA,WAAK,IAAM,CAAX,IAAgB,MAAhB,EAAwB;AACtB,YAAM,IAAI,OAAO,CAAP,CAAV;AACA,YAAI,KAAK,IAAT,EAAe;AACb;AACD,SAFD,MAEO;AACL,cAAM,KAAK,KAAK,gBAAL,CAAsB,UAAtB,CAAiC,CAAjC,EAAoC,CAApC,CAAX;AACA,YAAE,IAAF,CAAU,mBAAmB,CAAnB,CAAV,SAAmC,EAAnC;AACD;AACF;AACD,aAAO,EAAE,IAAF,CAAO,GAAP,CAAP;AACD;;AAED;;;;;;yCAGqB;AACnB,UAAI,CAAC,KAAK,cAAV,EAA0B;AACxB;AACD;;AAED,WAAK,cAAL,GAAsB,oBAAQ,KAAK,cAAb,IACpB,KAAK,cADe,GACE,CAAC,KAAK,cAAN,CADxB;;AAGA,WAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,KAAK,cAAL,CAAoB,MAAxC,EAAgD,GAAhD,EAAqD;AACnD,YAAI,WAAW,KAAK,cAAL,CAAoB,CAApB,CAAf;AACA,yBAAO,MAAP,CAAc,2BAAe,QAAf,CAAd,EACI,kCAAgC,KAAK,cAArC,GACA,2BAFJ;AAGA,mBAAW,OAAO,QAAP,IAAmB,IAA9B;AACA,yBAAO,MAAP,CAAc,YAAY,kBAA1B,EACI,kCAAgC,KAAK,cAArC,oDACuC,kBADvC,SADJ;AAGA,aAAK,cAAL,CAAoB,CAApB,IAAyB,QAAzB;AACD;;AAED,WAAK,qBAAL,GAA6B,CAA7B;;AAEA,WAAK,qBAAL;AACD;;AAED;;;;;;wCAGoB;AAAA;;AAClB,UAAI,KAAK,aAAT,EAAwB;AACtB,aAAK,sBAAL,GAA8B,KAAK,GAAL,CAAS,UAAT,CAAoB,YAAM;AACtD;AACA,iBAAK,QAAL,CAAc,IAAd;AACA,iBAAK,cAAL,GAAsB,KAAtB;AACA;AACA,cAAI,OAAK,uBAAT,EAAkC;AAChC,mBAAK,GAAL,CAAS,YAAT,CAAsB,OAAK,uBAA3B;AACA,mBAAK,uBAAL,GAA+B,IAA/B;AACD;AACF,SAT6B,EAS3B,KAAK,aAAL,GAAqB,IATM,CAA9B;AAUD;AACF;;AAED;;;;;;4CAGwB;AAAA;;AACtB,sBAAM,MAAN,CAAa,KAAK,qBAAL,IAA8B,IAA3C,EACI,gDADJ;AAEA,UAAM,WAAW,KAAK,qBAAL,GAA6B,KAAK,cAAL,CAAoB,MAAjD,GACf,KAAK,cAAL,CAAoB,KAAK,qBAAL,EAApB,CADe,GAEf,KAAK,cAAL,CAAoB,KAAK,cAAL,CAAoB,MAApB,GAA6B,CAAjD,CAFF;;AAIA,WAAK,uBAAL,GAA+B,KAAK,GAAL,CAAS,UAAT,CAAoB,YAAM;AACvD,eAAK,QAAL,CAAc,IAAd;AACA,eAAK,qBAAL;AACD,OAH8B,EAG5B,QAH4B,CAA/B;AAID;;;;;;;;;;QC5Ja,uB,GAAA,uB;;AArPhB;;AACA;;AACA;;AACA;;AACA;;AAEA;;;;;;;;;;;;;;;;AAgBA,IAAI,kCAAJ;;AAEA;;;;;;;;;;;;AAxCA;;;;;;;;;;;;;;;;AAoDA,IAAI,+BAAJ;;AAEA;;;;;;AAMA,IAAM,8BAA8B,GAApC;;AAEA;;;;;;;AAOA,SAAS,WAAT,CAAqB,EAArB,EAAyB;AACvB,SAAO,IAAI,OAAJ,CAAY,mBAAW;AAC5B,eAAW;AAAA,aAAM,QAAQ,IAAR,CAAN;AAAA,KAAX;AACD,GAFM,CAAP;AAGD;;AAED;;;;;AAKA,SAAS,0BAAT,CAAoC,IAApC,EAA0C;AACxC,MAAI,CAAC,qBAAS,KAAK,WAAL,CAAT,CAAL,EAAkC;AAChC,qBAAO,IAAP,CAAY,WAAZ,EAAyB,8CAAzB;AACA,WAAO,KAAP;AACD;AACD,MAAI,CAAC,KAAK,UAAL,CAAD,IAAqB,CAAC,KAAK,UAAL,EAAiB,OAAjB,CAAtB,IACA,CAAC,KAAK,UAAL,EAAiB,OAAjB,CADL,EACgC;AAC9B,qBAAO,IAAP,CACI,WADJ,EAEI,kEAFJ;AAGA,WAAO,KAAP;AACD;AACD,MAAI,KAAK,UAAL,EAAiB,MAAjB,IAA2B,CAA3B,IAAgC,KAAK,UAAL,EAAiB,MAAjB,IAA2B,EAA/D,EAAmE;AACjE,qBAAO,IAAP,CACI,WADJ,EAEI,gEAFJ;AAGA,WAAO,KAAP;AACD;AACD,MAAI,KAAK,eAAL,KAAyB,IAAzB,IACA,OAAO,KAAK,eAAL,CAAP,IAAgC,QADpC,EAC8C;AAC5C,qBAAO,IAAP,CACI,WADJ,EACiB,sDADjB;AAEA,WAAO,KAAP;AACD;AACD,SAAO,IAAP;AACD;;AAED;;;;;AAKA,SAAS,wBAAT,CAAkC,GAAlC,EAAuC;AACrC,SAAO,kDACL,IAAI,WAAJ,CAAgB,gBAAhB,CAAiC,UAAjC;AADF;AAED;;AAED;;;;;;;;AAQA,SAAS,uBAAT,CAAiC,KAAjC,EAAwC,IAAxC,EAA8C,MAA9C,EAAsD;AACpD,MAAM,OAAO;AACX;AACA;AACA;AACA,WAAO,IAJI;AAKX,iBAAa,OAAO,MAAM,SAAb,CALF;AAMX,oBAAgB,OAAO,MAAM,WAAb,EAA0B,MAAM,aAAhC,CANL;AAOX,wBAAoB,OAAO,MAAM,eAAb,EAA8B,MAAM,iBAApC,CAPT;AAQX,sBAAkB,OAAO,MAAM,UAAb,EAAyB,MAAM,YAA/B,CARP;AASX,0BAAsB,OAAO,MAAM,aAAb,EAA4B,MAAM,YAAlC,CATX;AAUX,2BAAuB,OAAO,MAAM,WAAb,EAA0B,MAAM,aAAhC,CAVZ;AAWX,oBAAgB,OAAO,MAAM,YAAN,IAAsB,CAA7B,CAXL;AAYX,uBAAmB,OAAO,MAAM,eAAN,IAAyB,CAAhC,CAZR;AAaX,uBAAmB,OAAO,MAAM,eAAN,IAAyB,CAAhC,CAbR;AAcX,gBAAY,OAAO,MAAM,QAAb,CAdD;AAeX,qBAAiB,MAAM;AAfZ,GAAb;AAiBA,SAAO,gCAAqB,IAArB,EAA2B,CAA3B,CAA6B,oBAA7B,CAAP;AACD;;AAED;;;;;;;;AAQA,SAAS,YAAT,CAAsB,KAAtB,EAA6B,eAA7B,EAA8C;AAC5C,MAAM,MAAM,6BAAmB,MAAM,IAAzB,CAAZ;AACA,OAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,gBAAgB,MAApC,EAA4C,EAAE,CAA9C,EAAiD;AAAA,6BACd,gBAAgB,CAAhB,CADc;AAAA,QACxC,WADwC,sBACxC,WADwC;AAAA,QAC3B,SAD2B,sBAC3B,SAD2B;;AAE/C,QAAI,CAAC,YAAY,IAAZ,CAAiB,IAAI,IAArB,CAAL,EAAiC;AAC/B;AACD;AACD,QAAM,QAAQ,sBACV,SADU,EAEV;AAAA,aAAO,IAAI,WAAJ,CAAgB,IAAhB,CAAqB,IAAI,QAAzB,KACH,IAAI,YAAJ,CAAiB,IAAjB,CAAsB,IAAI,MAA1B,CADJ;AAAA,KAFU,CAAd;AAIA,QAAI,SAAS,CAAC,CAAd,EAAiB;AACf,aAAO,UAAU,KAAV,EAAiB,IAAxB;AACD;AACF;AACD,SAAO,IAAP,CAf4C,CAe/B;AACd;;AAED;;;;;;;;;AASA,SAAS,gBAAT,CAA0B,YAA1B,EAAwC;AACtC,MAAM,SAAS,EAAf;AACA,OAAK,IAAM,IAAX,IAAmB,YAAnB,EAAiC;AAC/B,QAAM,OAAO,aAAa,IAAb,EAAmB,MAAnB,KAA8B,EAA3C;AACA,QAAM,OAAO,aAAa,IAAb,EAAmB,MAAnB,KAA8B,EAA3C;AACA,QAAM,QAAQ,aAAa,IAAb,EAAmB,OAAnB,KAA+B,EAA7C;AACA,QAAM,UAAU;AACd,gBADc;AAEd,mBAAa,IAAI,MAAJ,CAAW,IAAX,CAFC;AAGd,oBAAc,IAAI,MAAJ,CAAW,KAAX;AAHA,KAAhB;AAKA,QAAI,OAAO,IAAP,CAAJ,EAAkB;AAChB,aAAO,IAAP,EAAa,SAAb,CAAuB,IAAvB,CAA4B,OAA5B;AACD,KAFD,MAEO;AACL,aAAO,IAAP,IAAe;AACb,qBAAa,IAAI,MAAJ,CAAW,IAAX,CADA;AAEb,mBAAW,CAAC,OAAD;AAFE,OAAf;AAID;AACF;AACD,MAAM,cAAc,EAApB;AACA,OAAK,IAAM,KAAX,IAAmB,MAAnB,EAA2B;AACzB,gBAAY,IAAZ,CAAiB,OAAO,KAAP,CAAjB;AACD;AACD,SAAO,WAAP;AACD;;AAED;;;;;;;;AAQA,SAAS,aAAT,CAAuB,OAAvB,EAAgC,YAAhC,EAA8C;AAC5C;AACA;AACA,MAAM,SAAS,iBAAiB,YAAjB,CAAf;AACA,MAAM,UAAU,EAAhB;AACA,UAAQ,OAAR,CAAgB,iBAAS;AACvB,QAAM,OAAO,aAAa,KAAb,EAAoB,MAApB,CAAb;AACA,QAAI,IAAJ,EAAU;AACR,cAAQ,IAAR,CAAa,EAAC,YAAD,EAAQ,UAAR,EAAb;AACD;AACF,GALD;AAMA,SAAO,OAAP;AACD;;AAED;;;;;;;;AAQA,SAAS,SAAT,CAAmB,OAAnB,EAA4B,kBAA5B,EAAgD,GAAhD,EAAqD;AACnD,MAAM,YAAY,mBAAmB,WAAnB,CAAlB;AACA,MAAM,WAAW,mBAAmB,UAAnB,CAAjB;;AAEA,MAAM,kBAAkB,mCAAmB,GAAnB,CAAxB;AACA,MAAM,SAAS,SAAT,MAAS,CAAC,GAAD;AAAA,QAAM,UAAN,uEAAmB,CAAnB;AAAA,WACb,KAAK,KAAL,CAAW,MAAM,UAAjB,EAA6B,QAA7B,CAAsC,SAAS,MAAT,KAAoB,EAA1D,CADa;AAAA,GAAf;;AAGA,MAAM,WACF,cAAc,OAAd,EAAuB,SAAvB,EACK,GADL,CACS;AAAA,QAAE,KAAF,QAAE,KAAF;AAAA,QAAS,IAAT,QAAS,IAAT;AAAA,WAAmB,wBAAwB,KAAxB,EAA+B,IAA/B,EAAqC,MAArC,CAAnB;AAAA,GADT,EAEK,GAFL,CAGQ;AAAA,WACE,gBAAgB,cAAhB,CAA+B,SAAS,OAAT,CAA/B,EAAkD,SAAlD,CADF;AAAA,GAHR,CADJ;AAMA,SAAO,QAAQ,GAAR,CAAY,QAAZ,EAAsB,IAAtB,CAA2B;AAAA,WAAQ,KAAK,IAAL,CAAU,SAAS,OAAT,CAAV,CAAR;AAAA,GAA3B,CAAP;AACD;;AAED;;;;;;AAMO,SAAS,uBAAT,CAAiC,GAAjC,EAAsC,kBAAtC,EAA0D;AAC/D;AACA;AACA,MAAI,mBAAmB,MAAnB,KAA8B,CAAC,IAAI,WAAnC,IAAkD,CAAC,IAAI,WAAJ,CAAgB,GAAnE,IACA,CAAC,IAAI,WAAJ,CAAgB,gBADjB,IAEA,CAAC,2BAA2B,kBAA3B,CAFL,EAEqD;AACnD,uBAAmB,MAAnB,IAA6B,IAA7B;AACA,WAAO,QAAQ,OAAR,CAAgB,EAAhB,CAAP;AACD;AACD,MAAI,UAAU,yBAAyB,GAAzB,CAAd;AACA,MAAI,QAAQ,MAAR,IAAkB,2BAAtB,EAAmD;AACjD;AACA;AACA,uBAAmB,MAAnB,IAA6B,IAA7B;AACD;;AAED,MAAM,gBAAgB,mBAAmB,eAAnB,KAAuC,CAA7D;AACA;AACA;AACA,qBAAmB,eAAnB,IACI,KAAK,GAAL,CAAS,aAAT,EAAwB,IAAI,WAAJ,CAAgB,GAAhB,EAAxB,CADJ;;AAGA;AACA,YAAU,QAAQ,MAAR,CAAe;AAAA,WAAK,EAAE,SAAF,GAAc,EAAE,QAAhB,IAA4B,aAAjC;AAAA,GAAf,CAAV;AACA,MAAI,CAAC,QAAQ,MAAb,EAAqB;AACnB,WAAO,QAAQ,OAAR,CAAgB,EAAhB,CAAP;AACD;AACD;AACA,SAAO,YAAY;AAAA,WAAM,UAAU,OAAV,EAAmB,kBAAnB,EAAuC,GAAvC,CAAN;AAAA,GAAZ,CAAP;AACD;;;;;;AClSD;;;;;;;;;;;;;;;;AAgBA;;;;AAIO,IAAM,0DAAyB;AACpC,YAAU,IAD0B;AAEpC,mBAAiB,IAFmB;AAGpC,oBAAkB,IAHkB;AAIpC,wBAAsB,IAJc;AAKpC,oBAAkB,IALkB;AAMpC,gBAAc,IANsB;AAOpC,iBAAe,IAPqB;AAQpC,qBAAmB,IARiB;AASpC,gBAAc,IATsB;AAUpC,iBAAe,IAVqB;AAWpC,qBAAmB,IAXiB;AAYpC,iBAAe,IAZqB;AAapC,eAAa,IAbuB;AAcpC,cAAY,IAdwB;AAepC,mBAAiB,IAfmB;AAgBpC,qBAAmB,IAhBiB;AAiBpC,oBAAkB,IAjBkB;AAkBpC,kBAAgB,IAlBoB;AAmBpC,mBAAiB,IAnBmB;AAoBpC,6BAA2B,IApBS;AAqBpC,4BAA0B,IArBU;AAsBpC,wBAAsB,IAtBc;AAuBpC,sBAAoB,IAvBgB;AAwBpC,sBAAoB,IAxBgB;AAyBpC,iBAAe,IAzBqB;AA0BpC,sBAAoB,IA1BgB;AA2BpC,gBAAc,IA3BsB;AA4BpC,4BAA0B,IA5BU;AA6BpC,0BAAwB,IA7BY;AA8BpC,uBAAqB;AA9Be,CAA/B;;;;;;;;;;8QCpBP;;;;;;;;;;;;;;;;QAoCgB,W,GAAA,W;QA8GA,sB,GAAA,sB;;AAlIhB;;AACA;;AAKA;;AACA;;AACA;;AACA;;AACA;;;;AAEA;AACA,IAAM,OAAO,yBAAb;;AAEA;;;;;AAKO,SAAS,WAAT,CAAqB,GAArB,EAA0B,OAA1B,EAAmC,gBAAnC,EAAqD;AAC1D,2BAAe,OAAf,EAAwB,uBAAxB;AACA,yBAAa,OAAb;;AAEA,MAAM,iBAAiB,iBAAiB,gBAAjB,CAAvB;;AAEA,MAAI,mBAAmB,aAAvB,EAAsC;AACpC,qBAAiB,QAAjB,IAA6B,KAA7B;AACA,qBAAiB,SAAjB,IAA8B,KAA9B;AACD;;AAED,MAAI,iBAAiB,QAAjB,KACA,UAAU,sBAAV,CAAiC,GAAjC,EAAsC,OAAtC,CADJ,EACoD;AAClD;AACD;AACD,MAAI,iBAAiB,SAAjB,KACA,UAAU,mBAAV,CAA8B,GAA9B,EAAmC,OAAnC,CADJ,EACiD;AAC/C;AACD;AACD,MAAM,QAAQ,iBAAiB,OAAjB,CAAd;AACA,MAAI,KAAJ,EAAW;AACT,QAAM,mBAAoB,QAAO,KAAP,yCAAO,KAAP,MAAgB,QAAhB,IACtB,MAAM,kBAAN,CADJ;AAEA,cAAU,qBAAV,CACI,GADJ,EACS,OADT,EACkB,gBADlB,EACoC,+BAAiC,cADrE;AAEA;AACD;AACD,mBAAO,IAAP,CAAY,IAAZ,EAAkB,wBAAlB,EAA4C,OAA5C,EAAqD,gBAArD;AACD;;AAED;;;;IAGa,S,WAAA,S;;;;;;;;;AAEX;;;;;;0CAM6B,G,EAAK,O,EAAS,gB,EAAkB,c,EAAgB;AAC3E,UAAM,QAAQ,wBAAY,GAAZ,EAAiB,OAAjB,EAA0B,cAA1B,CAAd;AACA,oCAAY,KAAZ,EAAmB,IAAnB,CAAwB,YAAM;AAC5B,wBAAM,IAAN,CAAW,IAAX,EAAiB,oBAAjB,EAAuC,OAAvC;AACD,OAFD,EAEG,KAFH,CAES,YAAM;AACb,YAAI,CAAC,gBAAL,EAAuB;AACrB,2BAAO,IAAP,CAAY,IAAZ,EAAkB,kDACd,SADJ,EACe,OADf;AAED;AACF,OAPD;AAQD;;AAED;;;;;;;;2CAK8B,G,EAAK,O,EAAS;AAC1C,UAAI,CAAC,IAAI,SAAJ,CAAc,UAAnB,EAA+B;AAC7B,eAAO,KAAP;AACD;AACD,UAAM,SAAS,IAAI,SAAJ,CAAc,UAAd,CAAyB,OAAzB,EAAkC,EAAlC,CAAf;AACA,UAAI,MAAJ,EAAY;AACV,wBAAM,IAAN,CAAW,IAAX,EAAiB,qBAAjB,EAAwC,OAAxC;AACD;AACD,aAAO,MAAP;AACD;;AAED;;;;;;;;wCAK2B,G,EAAK,O,EAAS;AACvC,UAAI,CAAC,IAAI,cAAT,EAAyB;AACvB,eAAO,KAAP;AACD;AACD;AACA,UAAM,MAAM,IAAI,IAAI,cAAR,EAAZ;AACA,UAAI,EAAE,qBAAqB,GAAvB,CAAJ,EAAiC;AAC/B,eAAO,KAAP,CAD+B,CACjB;AACf;AACD,UAAI,IAAJ,CAAS,MAAT,EAAiB,OAAjB,EAA0B,IAA1B;AACA,UAAI,eAAJ,GAAsB,IAAtB;;AAEA;AACA,UAAI,gBAAJ,CAAqB,cAArB,EAAqC,YAArC;;AAEA,UAAI,kBAAJ,GAAyB,YAAM;AAC7B,YAAI,IAAI,UAAJ,IAAkB,CAAtB,EAAyB;AACvB,0BAAM,IAAN,CAAW,IAAX,EAAiB,kBAAjB,EAAqC,OAArC;AACD;AACF,OAJD;;AAMA,UAAI,IAAJ,CAAS,EAAT;AACA,aAAO,IAAP;AACD;;;;;;AAGH;;;;;;;;;;;;AAUO,SAAS,sBAAT,CAAgC,GAAhC,EAAqC,OAArC,EAA8C;AACnD,2BAAe,OAAf,EAAwB,uBAAxB;AACA;AACA,MAAM,SAAS,IAAI,QAAJ,CAAa,aAAb,CAA2B,QAA3B,CAAf;AACA,uBAAS,MAAT,EAAiB,SAAjB,EAA4B,MAA5B;AACA,SAAO,MAAP,GAAgB,OAAO,OAAP,GAAiB,YAAM;AACrC,uBAAS,QAAT,CAAkB,GAAlB,EAAuB,KAAvB,CAA6B,YAAM;AACjC,8BAAc,MAAd;AACD,KAFD,EAEG,IAFH;AAGD,GAJD;AAKA,mBAAO,MAAP,CACI,6BAAmB,OAAnB,EAA4B,MAA5B,IACE,6BAAmB,IAAI,QAAJ,CAAa,IAAhC,EAAsC,MAF5C,EAGI,uEACA,qCADA,GAEA,oEALJ;AAMA,SAAO,YAAP,CAAoB,eAApB,EAAqC,EAArC;AACA,SAAO,YAAP,CAAoB,SAApB,EAA+B,iCAA/B;AACA,SAAO,GAAP,GAAa,OAAb;AACA,MAAI,QAAJ,CAAa,IAAb,CAAkB,WAAlB,CAA8B,MAA9B;AACA,SAAO,MAAP;AACD;;;;;;;;qjBCvKD;;;;;;;;;;;;;;;;AAqBA;AACA;;;QA4PgB,sB,GAAA,sB;QAQA,kB,GAAA,kB;;AA1QhB;;AACA;;AACA;;AACA;;AACA;;AAGA;;;;AAEA;AACA,IAAM,MAAM,qBAAZ;;AAEA;AACA,IAAM,uBAAuB,gCAA7B;;AAEA;AACA,IAAI,4BAAJ;;AAEA;;;;;;;IAMa,gB,WAAA,gB;AACX;;;;;AAKA,4BAAY,IAAZ,EAAkB,cAAlB,EAAkC,YAAlC,EAAgD;AAAA;;AAC9C;AACA,SAAK,IAAL,GAAY,IAAZ;AACA;AACA,SAAK,UAAL,GAAkB,mBAAmB,SAAnB,GAA+B,CAA/B,GAAmC,cAArD;AACA;AACA,SAAK,QAAL,GAAgB,CAAC,CAAC,YAAlB;AACA,SAAK,UAAL,GAAkB,EAAlB;AACD;;AAED;;;;;;;;;8BAKU,G,EAAK;AACb,WAAK,UAAL,CAAgB,GAAhB,IAAuB,IAAvB;AACD;;;;;;AAKH;;;;;;;;AAMA,SAAS,WAAT,CAAqB,GAArB,EAA0B,CAA1B,EAA6B,KAA7B,EAAoC;AAClC,MAAM,QAAQ,OAAO,CAAP,CAAd;AADkC,MAE7B,MAF6B,GAEnB,GAFmB,CAE7B,MAF6B;;AAGlC,mBAAO,MAAP,CAAc,2BAAe,KAAf,CAAd,EACI,iBAAiB,KAAjB,GAAyB,oCAD7B;AAEA,MAAI,KAAJ,EAAW;AACT,aAAS,OAAO,KAAP,CAAT;AACA,qBAAO,MAAP,CAAc,2BAAe,MAAf,CAAd,EACI,YAAY,MAAZ,GAAqB,qCADzB;AAED;;AAED,SAAO,IAAI,MAAJ,CAAW,KAAX,EAAkB,MAAlB,CAAP;AACD;;AAED;;;;;AAKA,SAAS,YAAT,CAAsB,KAAtB,EAA6B,YAA7B,EAA2C;AACzC,MAAI,CAAC,KAAD,IAAU,CAAC,MAAM,MAArB,EAA6B;AAC3B,WAAO,iBAAO,YAAP,CAAoB,YAApB,CAAP;AACD;AACD,SAAO,KAAP;AACD;;AAED;;;;;;AAMA,SAAS,YAAT,CAAsB,MAAtB,EAA8B,YAA9B,EAA4C,aAA5C,EAA2D;AACzD,MAAI,CAAC,YAAL,EAAmB;AACjB,qBAAO,IAAP,CAAY,GAAZ,EAAiB,+CAAjB;AACD;AACD,MAAI,CAAC,aAAL,EAAoB;AAClB,oBAAgB,EAAhB;AACD;AACD,MAAM,QAAQ,IAAI,MAAJ,CAAW,YAAX,EAAyB,GAAzB,CAAd;AACA,SAAO,OAAO,OAAP,CAAe,KAAf,EAAsB,aAAtB,CAAP;AACD;;AAGD;;;;;IAIa,e,WAAA,e;AACX;;;AAGA,2BAAY,MAAZ,EAAoB;AAAA;;AAElB;AACA,SAAK,IAAL,GAAY,MAAZ;;AAEA;AACA,SAAK,OAAL,GAAe,EAAf;;AAEA,SAAK,SAAL,CAAe,UAAf,EAA2B,YAA3B;AACA,SAAK,SAAL,CAAe,SAAf,EAA0B,WAA1B;AACA,SAAK,SAAL,CAAe,OAAf,EAAwB;AAAA,aAAS,MAAM,IAAN,EAAT;AAAA,KAAxB;AACA,SAAK,SAAL,CAAe,OAAf,EAAwB;AAAA,aAAS,KAAK,SAAL,CAAe,KAAf,CAAT;AAAA,KAAxB;AACA,SAAK,SAAL,CAAe,cAAf,EAA+B;AAAA,aAAS,MAAM,WAAN,EAAT;AAAA,KAA/B;AACA,SAAK,SAAL,CAAe,cAAf,EAA+B;AAAA,aAAS,MAAM,WAAN,EAAT;AAAA,KAA/B;AACA,SAAK,SAAL,CAAe,MAAf,EAAuB;AAAA,aAAS,OAAO,CAAC,KAAR,CAAT;AAAA,KAAvB;AACA,SAAK,SAAL,CAAe,SAAf,EAA0B;AAAA,aAAS,qCAA0B,KAA1B,CAAT;AAAA,KAA1B;AACA,SAAK,SAAL,CAAe,OAAf,EAAwB,KAAK,UAAL,CAAgB,IAAhB,CAAqB,IAArB,CAAxB;AACA,SAAK,SAAL,CAAe,KAAf,EACI,UAAC,KAAD,EAAQ,SAAR,EAAmB,SAAnB;AAAA,aAAiC,QAAQ,SAAR,GAAoB,SAArD;AAAA,KADJ;AAEA,SAAK,SAAL,CAAe,UAAf,EAA2B,YAA3B;AACD;;AAED;;;;;;;gCAGY;AACV,UAAM,kBAAkB,KAAK,IAAL,IAAa,iCAAe,KAAK,IAApB,EACjC,oBADiC,CAArC;AAEA,aAAO,kBAAkB,KAAK,OAAvB,GAAiC,EAAxC;AACD;;AAED;;;;;;;8BAIU,I,EAAM,K,EAAO;AACrB,sBAAM,MAAN,CAAa,CAAC,KAAK,OAAL,CAAa,IAAb,CAAd,EAAkC,YAAY,IAAZ,GAC5B,uBADN;AAEA,WAAK,OAAL,CAAa,IAAb,IAAqB,KAArB;AACD;;AAED;;;;;;;;mCAKe,Q,EAAU,O,EAAS;AAAA;;AAChC,UAAI,QAAQ,UAAR,GAAqB,CAAzB,EAA4B;AAC1B,yBAAO,KAAP,CAAa,GAAb,EAAkB,sDACd,qDADJ;AAEA,eAAO,QAAQ,OAAR,CAAgB,QAAhB,CAAP;AACD;;AAED,UAAM,sBAAsB,EAA5B;AACA,UAAI,cAAc,SAAS,OAAT,CAAiB,cAAjB,EAAiC,UAAC,KAAD,EAAQ,GAAR,EAAgB;AACjE,YAAI,CAAC,GAAL,EAAU;AACR,iBAAO,QAAQ,OAAR,CAAgB,EAAhB,CAAP;AACD;;AAHgE,4BAKzC,MAAK,YAAL,CAAkB,GAAlB,CALyC;AAAA,YAK1D,IAL0D,iBAK1D,IAL0D;AAAA,YAKpD,OALoD,iBAKpD,OALoD;;AAMjE,YAAI,QAAQ,UAAR,CAAmB,IAAnB,CAAJ,EAA8B;AAC5B;AACA,iBAAO,KAAP;AACD;;AAED,YAAM,MAAM,QAAQ,IAAR,CAAa,IAAb,KAAsB,IAAtB,GAA6B,QAAQ,IAAR,CAAa,IAAb,CAA7B,GAAkD,EAA9D;;AAEA,YAAI,UAAJ;AACA,YAAI,OAAO,GAAP,IAAc,QAAlB,EAA4B;AAC1B;AACA,cAAI,MAAK,cAAL,CAAoB,GAApB,EACA,IAAI,gBAAJ,CAAqB,QAAQ,IAA7B,EAAmC,QAAQ,UAAR,GAAqB,CAAxD,EACI,IADJ,CACS,cADT,CADA,CAAJ;AAGD,SALD,MAKO;AACL;AACA,cAAI,QAAQ,OAAR,CAAgB,GAAhB,CAAJ;AACD;;AAED,YAAI,EAAE,IAAF,CAAO,yBAAiB;AAC1B;AACA,cAAM,MAAM,QAAQ,QAAR,GACR,aADQ,GAER,MAAK,UAAL,CAAgB,IAAhB,EAAsB,aAAtB,CAFJ;AAGA,iBAAO,MAAM,MAAM,OAAZ,GAAsB,GAA7B;AACD,SANG,EAOC,IAPD,CAOM,wBAAgB;AACtB;AACE,wBAAc,YAAY,OAAZ,CAAoB,KAApB,EAA2B,YAA3B,CAAd;AACD,SAVD,CAAJ;;AAYA;AACA,4BAAoB,IAApB,CAAyB,CAAzB;;AAEA;AACA,eAAO,KAAP;AACD,OAzCiB,CAAlB;;AA2CA;AACA,aAAO,QAAQ,GAAR,CAAY,mBAAZ,EAAiC,IAAjC,CAAsC;AAAA,eAAM,WAAN;AAAA,OAAtC,CAAP;AACD;;AAED;;;;;;;;;;iCAOa,G,EAAK;AAChB,UAAI,CAAC,GAAL,EAAU;AACR,eAAO,EAAC,MAAM,EAAP,EAAW,SAAS,EAApB,EAAP;AACD;AACD,UAAM,QAAQ,IAAI,KAAJ,CAAU,oBAAV,CAAd;AACA,uBAAO,MAAP,CAAc,KAAd,EAAqB,yCAAyC,GAA9D;AACA,aAAO,EAAC,MAAM,MAAM,CAAN,KAAY,MAAM,CAAN,CAAnB,EAA6B,SAAS,MAAM,CAAN,KAAY,EAAlD,EAAP;AACD;;AAED;;;;;;;;+BAKW,U,EAAY,G,EAAK;AAC1B,UAAI,OAAO,IAAX,EAAiB;AACf,eAAO,EAAP;AACD;;AAED,UAAI,oBAAQ,GAAR,CAAJ,EAAkB;AAChB,eAAO,IAAI,GAAJ,CAAQ,KAAK,UAAL,CAAgB,IAAhB,CAAqB,IAArB,EAA2B,UAA3B,CAAR,EAAgD,IAAhD,CAAqD,GAArD,CAAP;AACD;AACD;;AAR0B,2BASF,KAAK,YAAL,CAAkB,OAAO,GAAP,CAAlB,CATE;AAAA,UASnB,IATmB,kBASnB,IATmB;AAAA,UASb,OATa,kBASb,OATa;;AAU1B,aAAO,mBAAmB,IAAnB,IAA2B,OAAlC;AACD;;AAED;;;;;;;+BAIW,K,EAAO;AAChB,aAAO,mBAAS,SAAT,CAAmB,KAAK,IAAxB,EAA8B,YAA9B,CAA2C,KAA3C,CAAP;AACD;;;;;;AAIH;;;;;AAGO,SAAS,sBAAT,CAAgC,GAAhC,EAAqC;AAC1C,uCAAuB,GAAvB,EAA4B,yBAA5B,EAAuD,eAAvD;AACD;;AAED;;;;AAIO,SAAS,kBAAT,CAA4B,GAA5B,EAAiC;AACtC,SAAO,yBAAW,GAAX,EAAgB,yBAAhB,CAAP;AACD;;;;;;;;AC5QD;;AACA;;AAEA;;;AAnBA;;;;;;;;;;;;;;;;AAsBO,IAAM,mBAAmB,0BAAnB,2BAA+C;;AAE1D;AACA,aAAW;AACT,iBAAa,EAAC,UAAU,IAAX,EAAiB,WAAW,IAA5B,EAAkC,SAAS,IAA3C,EADJ;AAET,YAAQ;AACN,wBAAkB,kBADZ;AAEN,qBAAe,eAFT,EAE0B;AAChC,mBAAa,aAHP,EAGsB;AAC5B,yBAAmB,uBAJb,EAIsC;AAC5C,oBAAc,aALR;AAMN,wBAAkB,iBANZ;AAON,mBAAa,YAPP;AAQN,gBAAU,SARJ;AASN,kBAAY,WATN;AAUN,oBAAc,aAVR;AAWN,wBAAkB,iBAXZ;AAYN,kBAAY,UAZN;AAaN,+BAAyB,yBAbnB;AAcN,8BAAwB,wBAdlB;AAeN,yBAAmB,kBAfb;AAgBN,yBAAmB,kBAhBb;AAiBN,uBAAiB,gBAjBX;AAkBN,2BAAqB,oBAlBf;AAmBN,uBAAiB,gBAnBX;AAoBN,sBAAgB,eApBV;AAqBN,kBAAY,WArBN;AAsBN,yBAAmB,mBAtBb;AAuBN,iBAAW,SAvBL;AAwBN,yBAAmB,kBAxBb;AAyBN,0BAAoB,mBAzBd;AA0BN,0BAAoB,oBA1Bd;AA2BN,4BAAsB,sBA3BhB;AA4BN,0BAAoB,mBA5Bd;AA6BN,8BAAwB,wBA7BlB;AA8BN,4BAAsB,sBA9BhB;AA+BN,uBAAiB,gBA/BX;AAgCN,yBAAmB,mBAhCb;AAiCN,kBAAY,WAjCN;AAkCN,gCAA0B,0BAlCpB;AAmCN,0BAAoB,oBAnCd;AAoCN,mBAAa,YApCP;AAqCN,iBAAW,UArCL;AAsCN,0BAAoB,oBAtCd;AAuCN,sBAAgB,gBAvCV;AAwCN,oBAAc,cAxCR;AAyCN,oBAAc,aAzCR;AA0CN,gBAAU,QA1CJ;AA2CN,sBAAgB,eA3CV;AA4CN,0BAAoB,oBA5Cd;AA6CN,sBAAgB,eA7CV;AA8CN,qBAAe,cA9CT;AA+CN,sBAAgB,eA/CV;AAgDN,oBAAc,aAhDR;AAiDN,mBAAa,YAjDP;AAkDN,qBAAe,cAlDT;AAmDN,4BAAsB,sBAnDhB;AAoDN,mBAAa,YApDP;AAqDN,oBAAc,aArDR;AAsDN,wBAAkB,iBAtDZ;AAuDN,oBAAc,aAvDR;AAwDN,wBAAkB,kBAxDZ;AAyDN,mBAAa,WAzDP;AA0DN,kBAAY,UA1DN;AA2DN,sBAAgB,eA3DV;AA4DN,eAAS,OA5DH;AA6DN,0BAAoB,oBA7Dd;AA8DN,mBAAa,YA9DP;AA+DN,gBAAU,QA/DJ;AAgEN,wBAAkB,iBAhEZ;AAiEN,uBAAiB;AAjEX;AAFC,GAH+C;AAyE1D,gBAAc;AACZ,YAAQ;AACN,wBAAkB,uCADZ;AAEN,mBAAa,UAFP;AAGN,gBAAU;AAHJ,KADI;AAMZ,iBAAa,EAAC,UAAU,IAAX,EAAiB,WAAW,IAA5B,EAAkC,SAAS,KAA3C,EAND;AAOZ,gBAAY;AACV,cAAQ,6EADE;AAEV,sBAAgB,YACd,6BADc,GAEd,eAFc,GAGd,SAHc,GAId,sBAJc,GAKd,2BALc,GAMd,gBARQ;AASV,kBAAY,oBACV,kBAVQ;AAWV,eAAS,oBACP;AAZQ,KAPA;AAqBZ,gBAAY;AACV,yBAAmB;AACjB,cAAM,SADW;AAEjB,mBAAW;AAFM;AADT;AArBA,GAzE4C;;AAsG1D,kBAAgB;AACd,YAAQ;AACN,gBAAU,KADJ;AAEN,mBAAa,UAFP;AAGN,eAAS,OAHH;AAIN,oBAAc;AAJR,KADM;AAOd,iBAAa,EAAC,UAAU,KAAX,EAAkB,WAAW,KAA7B,EAAoC,SAAS,IAA7C,EAPC;AAQd,gBAAY;AACV,cAAQ,8BADE;AAEV,cAAQ,kBAFE;AAGV,kBAAY,6CACV,OADU,GAEV,QAFU,GAGV,iBAHU,GAIV,sBAJU,GAKV,4BALU,GAMV,4CANU,GAOV,4BAPU,GAQV,iBAXQ;AAYV,eAAS,sCACP,iBADO,GAEP;AAdQ,KARE;AAwBd,gBAAY;AACV,yBAAmB;AACjB,cAAM,SADW;AAEjB,mBAAW;AAFM;AADT;AAxBE,GAtG0C;;AAsI1D,kBAAgB;AACd,gBAAY;AACV,cAAQ,uEADE;AAEV,kBAAY,kCACV,8DADU,GAEV,gEAFU,GAGV,mEAHU,GAIV,oDAJU,GAKV,yDALU,GAMV,kDANU,GAOV;AATQ,KADE;AAYd,YAAQ;AACN,mBAAa,EADP;AAEN,gBAAU,EAFJ;AAGN,qBAAe;AAHT,KAZM;AAiBd,gBAAY;AACV,uBAAiB;AACf,cAAM,SADS;AAEf,mBAAW;AAFI;AADP,KAjBE;AAuBd,iBAAa;AACX,iBAAW,KADA;AAEX,gBAAU,KAFC;AAGX,eAAS;AAHE;AAvBC,GAtI0C;;AAoK1D,gBAAc;AACZ,iBAAa,EAAC,UAAU,KAAX,EAAkB,WAAW,KAA7B,EAAoC,SAAS,IAA7C,EADD;AAEZ,gBAAY;AACV,cAAQ,qKADE;AAEV,gBAAU,uDAFA;AAGV,kBAAY,aACV,aADU,GAEV,uBALQ;AAMV,eAAS,aACP,kBADO,GAEP,oBAFO,GAGP,aAHO,GAIP,oBAJO,GAKP;AAXQ;AAFA,GApK4C;;AAqL1D,oBAAkB;AAChB,YAAQ;AACN,gBAAU,EADJ;AAEN,2BAAqB,EAFf;AAGN,mBAAa,EAHP;AAIN,oBAAc;AAJR,KADQ;AAOhB,gBAAY;AACV,cAAQ,+BACR,oBADQ,GAER,yCAFQ,GAGR,kBAHQ,GAIR,YAJQ,GAKR,SALQ,GAMR,yBANQ,GAOR,qBAPQ,GAQR,oBARQ,GASR,4BAVU;AAWV,kBAAY,mDAXF;AAYV,eAAS;AAZC,KAPI;AAqBhB,gBAAY;AACV,yBAAmB;AACjB,cAAM,SADW;AAEjB,mBAAW;AAFM;AADT,KArBI;AA2BhB,iBAAa;AACX,gBAAU,KADC;AAEX,iBAAW,KAFA;AAGX,eAAS;AAHE;AA3BG,GArLwC;;AAuN1D,oBAAkB;AAChB,gBAAY;AACV,cAAQ,sBADE;AAEV,cAAQ,oBACJ,oDAHM;AAIV,kBAAY,cAJF;AAKV,eAAS,sCACL;AANM,KADI;AAShB,iBAAa;AACX,gBAAU,KADC;AAEX,iBAAW,KAFA;AAGX,eAAS;AAHE;AATG,GAvNwC;;AAuO1D,UAAQ;AACN,YAAQ;AACN,qBAAe,QADT;AAEN,kBAAY,EAFN;AAGN,qBAAe;AAHT,KADF;AAMN,gBAAY;AACV,cAAQ,qCADE;AAEV,cAAQ,mBACN,mBADM,GAEN,mBAFM,GAGJ,gBAHI,GAIJ,mBAJI,GAKJ,iCALI,GAMN,mCANM,GAON,QAPM,GAQN,kBARM,GASN,qBAXQ;AAYV,kBAAY,YACV,YADU,GAEV,iBAFU,GAGV,oBAHU,GAIV,wBAJU,GAKV,yBALU,GAMV,kBANU,GAOV,iBAPU,GAQV,oCARU,GASV,oCATU,GAUV,sDAVU,GAWV,+BAvBQ;AAwBV,kBAAY,YACV;AAzBQ,KANN;AAiCN,gBAAY;AACV,kBAAY;AACV,cAAM,SADI;AAEV,mBAAW;AAFD,OADF;AAKV,kBAAY;AACV,cAAM,OADI;AAEV,qBAAa;AACX,sBAAY,EADD;AAEX,4BAAkB;AAFP,SAFH;AAMV,mBAAW;AAND;AALF,KAjCN;AA+CN,iBAAa;AACX,gBAAU,KADC;AAEX,iBAAW,KAFA;AAGX,eAAS;AAHE;AA/CP,GAvOkD;;AA6R1D,YAAU;AACR,YAAQ;AACT,qBAAe,SADN;AAEN,mBAAa,EAFP;AAGN,iBAAW,EAHL;AAIN,aAAO,EAJD;AAKT,cAAQ;AALC,KADA;AAQR,gBAAY;AACV,cAAQ,8BADE;AAEV,cAAQ,6BAFE;AAGV,kBAAY,kBAHF;AAIb,eAAS,0CACP;AALW,KARJ;AAeR,sBAAkB;AAChB,oBAAc,cADE;AAEhB,cAAQ,YAFQ;AAGhB,cAAQ,SAHQ;AAIhB,aAAO,QAJS;AAKhB,cAAQ,GALQ;AAMhB,cAAQ,kCANQ;AAOhB,cAAQ,EAPQ;AAQhB,cAAQ,4BARQ;AAShB,kBAAY,qBATI;AAUhB,cAAQ,cAVQ;AAWhB,iBAAW,cAXK;AAYhB,cAAQ,UAZQ;AAahB,cAAQ,oCAbQ;AAchB,aAAO,gCAdS;AAehB,WAAK,YAfW;AAgBhB,cAAQ,eAhBQ;AAiBhB,gBAAU,WAjBM;AAkBhB,YAAM,cAlBU;AAmBhB,WAAK;AAnBW,KAfV;AAoCR,gBAAY;AACV,kBAAY;AACV,cAAM,SADI;AAEV,mBAAW;AAFD;AADF,KApCJ;AA0CR,iBAAa;AACX,gBAAU,KADC;AAEX,iBAAW,KAFA;AAGX,eAAS;AAHE;AA1CL,GA7RgD;;AA8U1D,eAAa;AACX,gBAAY;AACV,cAAQ,4BADE;AAEV,oBAAc,uBACZ,qBADY,GAEZ,qBAFY,GAGZ,qBAHY,GAIZ,WAJY,GAKZ,iBALY,GAMZ,gBANY,GAOZ,aAPY,GAQZ,oBARY,GASZ,oBATY,GAUZ,QAVY,GAWZ,iBAXY,GAYZ,oBAZY,GAaZ,iBAbY,GAcZ,MAdY,GAeZ,MAfY,GAgBZ,MAhBY,GAiBZ,wBAjBY,GAkBZ,wBAlBY,GAmBZ,kCAnBY,GAoBZ,oBApBY,GAqBZ,aArBY,GAsBZ,iBAtBY,GAuBZ,iBAvBY,GAwBZ,KA1BQ;AA2BV,oBAAc,IA3BJ;AA4BV,kBAAY,mCA5BF;AA6BV,qBAAe;AA7BL,KADD;AAgCX,gBAAY;AACV,uBAAiB;AACf,cAAM,OADS;AAEf,qBAAa;AACX,sBAAY,EADD;AAEX,4BAAkB;AAFP,SAFE;AAMf,mBAAW,UANI;AAOf,gBAAQ;AACN,uBAAa;AADP;AAPO,OADP;AAYV,0BAAoB;AAClB,cAAM,OADY;AAElB,oBAAY,GAFM;AAGlB,mBAAW,aAHO;AAIlB,gBAAQ;AACN,uBAAa;AADP;AAJU;AAZV,KAhCD;AAqDX,iBAAa;AACX,gBAAU,KADC;AAEX,iBAAW,KAFA;AAGX,eAAS;AAHE;AArDF,GA9U6C;;AA0Y1D,YAAU;AACR,YAAQ;AACN,iBAAW;AADL,KADA;AAIR,gBAAY;AACV,cAAQ,qCACN,oBAFQ;AAGV,oBAAc,0BACZ,aAJQ;AAKV,kBAAY,aACV,qCADU,GAEV,0BAFU,GAGV,WAHU,GAIV,gBAJU,GAKV,wBALU,GAMV,gBANU,GAOV,eAZQ;AAaV,kBAAY,aACV,WADU,GAEV;AAfQ,KAJJ;AAqBR,gBAAY;AACV,yBAAmB;AACjB,cAAM,SADW;AAEjB,mBAAW;AAFM,OADT;AAKV,kBAAY;AACV,cAAM,OADI;AAEV,qBAAa;AACX,sBAAY,EADD;AAEX,4BAAkB;AAFP,SAFH;AAMV,mBAAW;AAND;AALF,KArBJ;AAmCR,iBAAa;AACX,gBAAU,KADC;AAEX,iBAAW,KAFA;AAGX,eAAS;AAHE;AAnCL,GA1YgD;;AAob1D,kBAAgB;AACd,gBAAY;AACV,cAAQ,0BADE;AAEV,cAAQ,iBAFE;AAGV,kBAAY,sBACV,gBADU,GAEV,2BAFU,GAGV,sBAHU,GAIV,cAJU,GAKV,gBALU,GAMV,aANU,GAOV,oBAPU,GAQV,oBARU,GASV,kBATU,GAUV,qBAVU,GAWV,mBAXU,GAYV,0BAZU,GAaV,yBAbU,GAcV,sBAdU,GAeV,mBAfU,GAgBV;AAnBQ,KADE;AAsBd,gBAAY;AACV,yBAAmB;AACjB,cAAM,SADW;AAEjB,mBAAW;AAFM;AADT,KAtBE;AA4Bd,iBAAa;AACX,gBAAU,KADC;AAEX,iBAAW,KAFA;AAGX,eAAS;AAHE;AA5BC,GApb0C;;AAud1D,cAAY;AACV,YAAQ;AACN,YAAM;AADA,KADE;AAIV,gBAAY;AACV,cAAQ,kCADE;AAEV,cAAQ,YAFE;AAGV,kBAAY,gBACV,WADU,GAEV,sBAFU,GAGV,4BAHU,GAIV,eAJU,GAKV,cALU,GAMV,qBANU,GAOV,yBAPU,GAQV;AAXQ,KAJF;AAiBV,gBAAY;AACV,yBAAmB;AACjB,cAAM,SADW;AAEjB,mBAAW;AAFM;AADT,KAjBF;AAuBV,iBAAa;AACX,gBAAU,KADC;AAEX,iBAAW,KAFA;AAGX,eAAS;AAHE;AAvBH,GAvd8C;;AAqf1D,YAAU;AACR,gBAAY;AACV,cAAQ,gCADE;AAEV,cAAQ,sBAFE;AAGV,kBAAY,+DACR,yDADQ,GAER,sDAFQ,GAGR,gDAHQ,GAIR;AAPM,KADJ;AAUR,gBAAY;AACV,yBAAmB;AACjB,cAAM,SADW;AAEjB,mBAAW;AAFM;AADT,KAVJ;AAgBR,iBAAa;AACX,gBAAU,KADC;AAEX,iBAAW,KAFA;AAGX,eAAS;AAHE;AAhBL,GArfgD;;AA4gB1D,eAAa;AACX,gBAAY;AACV,kBAAY,+EADF;AAEV,kBAAY,yBACV,aADU,GAEV,MAFU,GAGV,kEAHU,GAIhB,kEAJgB,GAKhB,0DALgB,GAMhB,6CANgB,GAOV,oBAPU,GAQV,6BARU,GASV,uBATU,GAUV,iBAVU,GAWV,oBAXU,GAYV,qBAZU,GAaV,qBAbU,GAcV,sBAdU,GAeV,gBAfU,GAgBV,gCAhBU,GAiBV,8CAjBU,GAkBV,4CAlBU,GAmBV,2CAnBU,GAoBV,kDApBU,GAqBV,gDArBU,GAsBV,6CAtBU,GAuBV,2CAvBU,GAwBV,sDAxBU,GAyBV,6CAzBU,GA0BV,8CA1BU,GA2BV,4CA3BU,GA4BV,2CA5BU,GA6BV,+CA7BU,GA8BV,2DA9BU,GA+BV,yDA/BU,GAgCV,4CAhCU,GAiCV,+CAjCU,GAkCV,8CAlCU,GAmCV,aAnCU,GAoCV;AAtCQ,KADD;AAyCX,gBAAY;AACV,uBAAiB;AACf,cAAM,SADS;AAEf,mBAAW;AAFI;AADP,KAzCD;AA+CX,iBAAa;AACX,gBAAU,KADC;AAEX,iBAAW,KAFA;AAGX,eAAS;AAHE,KA/CF;AAoDX,YAAQ;AACN,aAAO,QADD;AAEN,kBAAY,OAFN;AAGN,gBAAU,EAHJ;AAIN,qBAAe,oBAJT;AAKN,cAAQ,KALF;AAMN,mBAAa;AANP;AApDG,GA5gB6C;;AA0kB1D,uBAAqB;AACnB,YAAQ;AACN,uBAAiB,EADX;AAEN,0BAAoB;AAFd,KADW;AAKnB,gBAAY;AACV,cAAQ,0BADE;AAEV,oBAAc,iBACZ,8BADY,GAEZ,0BAJQ;AAKV,kBAAY,+BACV,yBADU,GAEV,mBAFU,GAGV,oCAHU,GAIV,wBATQ;AAUV,gBAAU,iCACR,qBADQ,GAER,mBAZQ;AAaV,cAAQ,iCACN,oCAdQ;AAeV,qBAAe,iCACb;AAhBQ,KALO;AAuBnB,iBAAa;AACX,gBAAU,KADC;AAEX,iBAAW,KAFA;AAGX,eAAS;AAHE;AAvBM,GA1kBqC;;AAwmB1D,mBAAiB;AACf,YAAQ;AACN,iBAAW;AADL,KADO;AAIf,gBAAY;AACV,cAAQ,0BADE;AAEV,cAAQ,uBAFE;AAGV,kBAAY,yBACR,eAJM;AAKV,eAAS,6BACL,eADK,GAEL,mCAPM;AAQV,0BAAoB,4BAChB,eADgB,GAEhB,qBAFgB,GAGhB,2BAHgB,GAIhB,mCAJgB,GAKhB,mCALgB,GAMhB,iCAdM;AAeV,qBAAe,uBACX,eADW,GAEX,qBAFW,GAGX,2BAHW,GAIX,2CAJW,GAKX,iCALW,GAMX,qCArBM;AAsBV,wBAAkB,0BACd,eADc,GAEd,qBAFc,GAGd,2BAHc,GAId,mCAJc,GAKd,mCALc,GAMd,iCA5BM;AA6BV,4BAAsB,8BAClB,eADkB,GAElB,qBAFkB,GAGlB,2BAHkB,GAIlB,mCAJkB,GAKlB,2CALkB,GAMlB,iCAnCM;AAoCV,+BAAyB,iCACrB,eADqB,GAErB,qBAFqB,GAGrB,2BAHqB,GAIrB,mCAJqB,GAKrB,2CALqB,GAMrB,6BANqB,GAOrB,iCA3CM;AA4CV,6BAAuB,+BACnB,eADmB,GAEnB,qBAFmB,GAGnB,2BAHmB,GAInB,2CAJmB,GAKnB,iCAjDM;AAkDV,uBAAiB,yBACb,eADa,GAEb,qBAFa,GAGb,2BAHa,GAIb,mCAJa,GAKb,mCALa,GAMb,iCANa,GAOb,6BAzDM;AA0DV,mBAAa,qBACT,eADS,GAET,qBAFS,GAGT,2BAHS,GAIT,mCAJS,GAKT,2CA/DM;AAgEV,mCAA6B,qCACzB,eADyB,GAEzB,qBAFyB,GAGzB,2BAHyB,GAIzB,mCAJyB,GAKzB;AArEM,KAJG;AA2Ef,gBAAY;AACV,uBAAiB;AACf,cAAM,SADS;AAEf,mBAAW;AAFI;AADP;AA3EG,GAxmByC;;AA2rB1D,YAAU;AACR,gBAAY;AACV,cAAQ,8QADE;AAEV,kBAAY,wBAFF;AAGV,eAAS;AAHC,KADJ;AAMR,gBAAY;AACV,yBAAmB;AACjB,cAAM,SADW;AAEjB,mBAAW;AAFM;AADT,KANJ;AAYR,iBAAa;AACX,gBAAU,KADC;AAEX,iBAAW,KAFA;AAGX,eAAS;AAHE;AAZL,GA3rBgD;;AA8sB1D,mBAAiB,EAAE;AACjB,gBAAY;AACV,2BAAqB,qDADX;AAEV,4BACI,mEAHM;AAIV,uBAAiB,4BACb,UADa,GACA;AACb,uCAFa,GAGb,mBAHa,GAIb,mBAJa,GAKb,0BALa,GAMb,oBANa,GAOb,gCAPa,GAQb,QARa,GASb,UATa,GAUb,yCAVa,GAWb,6DAXa,GAYb,2BAZa,GAab,mBAba,GAcb,gBAda,GAeb,kBAnBM;AAoBV,2BAAqB,oCACjB,4CADiB,GAEjB,8BAFiB,GAGjB,gCAvBM;AAwBV,oBAAc,2DAxBJ;AAyBV,qBAAe;AAzBL,KADG;AA4Bf,iBAAa;AACX,gBAAU,KADC;AAEX,iBAAW,KAFA;AAGX,eAAS;AAHE;AA5BE,GA9sByC;;AAivB1D,UAAQ;AACN,sBAAkB;AAChB,aAAO;AADS,KADZ;AAIN,YAAQ;AACN,oBAAc,GADR;AAEN,0BAAoB,YAFd;AAGN,kBAAY,iCAHN;AAIN,oBAAc,KAJR;AAKN,qBAAe,KALT;AAMN,oBAAc;AANR,KAJF;AAYN,gBAAY;AACV,gBAAU,kCADA;AAEV,sBACI,SACC,QADD,GAEC,mBAFD,GAGC,iBAHD,GAIC,qBAJD,GAKC,cALD,GAMC,oCAND,GAOC,kBAPD,GAQC,oBARD,GASC,yBATD,GAUC,yBAVD,GAWC,yBAXD,GAYC,wBAZD,GAaC,uBAhBK;AAiBV,sBACI,sBACC,aAnBK;AAoBV,0BACK,iBACA,gBADA,GAEA,iBAFA,GAGA,MAxBK;AAyBV,oBACI,wCACC,qBADD,GAEC,iBA5BK;AA6BV,uBACI,sCACC,qBADD,GAEC,iBAhCK;AAiCV,iBACI,uCACC,UADD,GAEC,MAFD,GAGC,iBArCK;AAsCV,kBACI,uCACC,OADD,GAEC,sBAFD,GAGC,0BAHD,GAIC,wBAJD,GAKC,sBALD,GAMC,4BAND,GAOC,0BAPD,GAQC,yBARD,GASC,2BATD,GAUC,iBAjDK;AAkDV,iBACI,uCACC,cADD,GAEC,mBAFD,GAGC,iBAtDK;AAuDV,4BACI,qDAxDM;AAyDV,6BACI,mEA1DM;AA2DV,wBACI,sBACC,UADD,GACc;AACb,iCAFD,GAGC,mBAHD,GAIC,mBAJD,GAKC,0BALD,GAMC,oBAND,GAOC,gCAPD,GAQC,QARD,GASC,UATD,GAUC,yCAVD,GAWC,6DAXD,GAYC,2BAZD,GAaC,mBAbD,GAcC,gBAdD,GAeC,kBA3EK;AA4EV,sBAAgB,wCA5EN;AA6EV,uBAAiB,yCA7EP;AA8EV,gBAAU;AA9EA,KAZN;AA4FN,iBAAa;AACX,gBAAU,KADC;AAEX,iBAAW,KAFA;AAGX,eAAS;AAHE;AA5FP,GAjvBkD;;AAo1B1D,qBAAmB;AACjB,YAAQ;AACN,oBAAc,GADR;AAEN,0BAAoB,YAFd;AAGN,kBAAY,iCAHN;AAIN,oBAAc,KAJR;AAKN,qBAAe,KALT;AAMN,oBAAc;AANR,KADS;AASjB,gBAAY;AACV,cAAQ,kCADE;AAEV,oBAAc,SACV,QADU,GAEV,mBAFU,GAGV,iBAHU,GAIV,qBAJU,GAKV,cALU,GAMV,oCANU,GAOV,sBAPU,GAQV,kBARU,GASV,iBATU,GAUV,yBAVU,GAWV,yBAXU,GAYV,yBAZU,GAaV,wBAbU,GAcV,uBAhBM;AAiBV,oBAAc,sBACV,aAlBM;AAmBV,kBAAY,qCACR,aADQ,GAER,gBAFQ,GAGR,MAHQ,GAIR,eAvBM;AAwBV,eAAS,mCACL,UADK,GAEL,OAFK,GAGL,sBAHK,GAIL,oBAJK,GAKL,mBALK,GAML,kBANK,GAOL,eA/BM;AAgCV,gBAAU,mCACN,WADM,GAEN,OAFM,GAGN,qBAHM,GAIN,sBAJM,GAKN,oBALM,GAMN,eAtCM;AAuCV,gBAAU,mCACN,yBADM,GAEN,OAFM,GAGN,sBAHM,GAIN,0BAJM,GAKN,wBALM,GAMN,sBANM,GAON,4BAPM,GAQN,0BARM,GASN,yBATM,GAUN,2BAVM,GAWN,eAlDM;AAmDV,eAAS,mCACL,cADK,GAEL,mBAFK,GAGL;AAtDM,KATK;AAiEjB,gBAAY;AACV,2BAAqB;AACnB,cAAM,SADa;AAEnB,mBAAW,QAFQ;AAGnB,sBAAc;AACZ,sBAAY,aADA;AAEZ,uBAAa;AAFD,SAHK;AAOnB,gBAAQ;AACN,+BAAqB;AADf;AAPW,OADX;AAYV,uBAAiB;AACf,cAAM,SADS;AAEf,mBAAW,QAFI;AAGf,mBAAW,sBAHI;AAIf,gBAAQ;AACN,+BAAqB;AADf;AAJO;AAZP,KAjEK;AAsFjB,gCAA4B;AAC1B,mBAAa,IADa;AAE1B,gBAAU;AAFgB,KAtFX;AA0FjB,cAAU;AA1FO,GAp1BuC;;AAi7B1D,YAAU;AACR,gBAAY;AACV,kBAAY;AADF,KADJ;AAIR,gBAAY;AACV,wBAAkB;AAChB,cAAM,SADU;AAEhB,mBAAW;AAFK;AADR,KAJJ;AAUR,iBAAa;AACX,gBAAU,KADC;AAEX,iBAAW,KAFA;AAGX,eAAS;AAHE;AAVL,GAj7BgD;;AAk8B1D,mBAAiB;AACf,gBAAY;AACV,cAAQ,gCADE;AAEV,oBAAc,qBACZ,2BADY,GAEZ,SAFY,GAGZ,0BAHY,GAIZ,oBAJY,GAKZ,iCALY,GAMZ,gBARQ;AASV,kBAAY,aACV,eADU,GAEV,QAXQ;AAYV,oBAAc,aACZ,eADY,GAEZ,QAFY,GAGZ,cAHY,GAIV,aAJU,GAKV,yBALU,GAMV,iBANU,GAOV,cAPU,GAQV,WARU,GASV;AArBM,KADG;AAwBf,iBAAa;AACX,gBAAU,IADC;AAEX,iBAAW,KAFA;AAGX,eAAS;AAHE;AAxBE,GAl8ByC;;AAi+B1D,iBAAe;AACb,gBAAY;AACV,cAAQ,8BADE;AAEV,kBAAY,uBACV,aADU,GAEV,mBAFU,GAGV,yBAHU,GAIV,eAJU,GAKV,eALU,GAMV,cANU,GAOV,cAPU,GAQV,wBARU,GASV,sBATU,GAUV,qBAVU,GAWV,SAXU,GAYV,MAZU,GAaV,8BAbU,GAcV;AAhBQ,KADC;AAmBb,gBAAY;AACV,uBAAiB;AACf,cAAM,SADS;AAEf,mBAAW;AAFI;AADP,KAnBC;AAyBb,iBAAa;AACX,gBAAU,KADC;AAEX,iBAAW,KAFA;AAGX,eAAS;AAHE;AAzBA,GAj+B2C;;AAigC1D,mBAAiB;AACf,YAAQ;AACN,gBAAU,0BADJ;AAEN,aAAO,YAFD;AAGN,oBAAc,YAHR;AAIN,kBAAY;AAJN,KADO;AAOf,gBAAY;AACV,cAAQ,mBADE;AAEV,kBAAY,6BACV,2BADU,GAEV,cAFU,GAGV,oBAHU,GAIV;AANQ,KAPG;AAef,gBAAY;AACV,uBAAiB;AACf,cAAM,SADS;AAEf,mBAAW;AAFI;AADP,KAfG;AAqBf,iBAAa;AACX,gBAAU,KADC;AAEX,iBAAW,KAFA;AAGX,eAAS;AAHE;AArBE,GAjgCyC;;AA6hC1D,cAAY;AACV,gBAAY;AACV,cAAQ,uDADE;AAEV,qBAAe,kCAFL;AAGV,gBAAU,yCACA,2BAJA;AAKV,gBAAU,yDALA;AAMV,kBAAY,cANF;AAOV,eAAS,wBAPC;AAQV,YAAM,eARI;AASV,YAAM,eATI;AAUV,YAAM,eAVI;AAWV,YAAM;AAXI,KADF;AAcV,YAAQ;AACN,qBAAe;AADT,KAdE;AAiBV,gBAAY;AACV,qBAAe;AACb,cAAM,cADO;AAEb,mBAAW;AAFE,OADL;AAKV,uBAAiB;AACf,cAAM,SADS;AAEf,mBAAW;AAFI,OALP;AASV,qBAAe;AACb,cAAM,QADO;AAEb,sBAAc;AACZ,gCAAsB,CACpB,CADoB;AADV,SAFD;AAOb,mBAAW;AAPE,OATL;AAkBV,qBAAe;AACb,cAAM,QADO;AAEb,sBAAc;AACZ,gCAAsB,CACpB,EADoB;AADV,SAFD;AAOb,mBAAW;AAPE,OAlBL;AA2BV,qBAAe;AACb,cAAM,QADO;AAEb,sBAAc;AACZ,gCAAsB,CACpB,EADoB;AADV,SAFD;AAOb,mBAAW;AAPE,OA3BL;AAoCV,qBAAe;AACb,cAAM,QADO;AAEb,sBAAc;AACZ,gCAAsB,CACpB,EADoB;AADV,SAFD;AAOb,mBAAW;AAPE,OApCL;AA6CV,mBAAa;AACX,cAAM,OADK;AAEX,qBAAa;AACX,sBAAY,CADD;AAEX,4BAAkB,GAFP;AAGX,uBAAa;AAHF,SAFF;AAOX,mBAAW;AAPA;AA7CH;AAjBF,GA7hC8C;;AAumC1D,aAAW;AACT,iBAAa,EAAC,UAAU,IAAX,EAAiB,WAAW,IAA5B,EAAkC,SAAS,KAA3C,EADJ;AAET,gBAAY;AACV,kBAAY,2DADF;AAEV,mBAAa,wDACX,aAHQ;AAIV,sBAAgB,uDAJN;AAKV,mBAAa,4DACX,iBANQ;AAOV,iBAAW,sBAPD;AAQV,gBAAU,+BARA;AASV,iBAAW,oDATD;AAUV,qBAAe,oDACf,wBAXU;AAYV,mBAAa,CACX,+DADW,EAEX,mDAFW,EAGX,uBAHW,EAIX,wDAJW,EAKX,sDALW,EAMX,sEANW,EAOX,IAPW,CAON,KAPM,CAZH;AAoBV,kBAAY,CACV,yCADU,EAEV,6CAFU,EAGV,2DAHU,EAIV,+DAJU,EAKV,mEALU,EAMV,2CANU,EAOV,6DAPU,EAQV,oBARU,EASV,IATU,CASL,KATK,CApBF;AA8BV,iBAAW,0BA9BD;AA+BV,gBAAU,cA/BA;AAgCV,mBAAa;AAhCH,KAFH;AAoCT,gBAAY;AACV,kBAAY;AACV,cAAM,SADI;AAEV,mBAAW;AAFD;AADF;AApCH,GAvmC+C;;AAmpC1D,YAAU;AACR,YAAQ;AACN,qBAAe,mBADT;AAEN,sBAAgB;AAFV,KADA;AAKR,gBAAY;AACV,eAAS,yCADC;AAEV,qBAAe,CACb,4BADa,EAEb,sDAFa,EAGb,8BAHa,EAIb,qCAJa,EAKb,kCALa,EAMb,yCANa,EAOb,4CAPa,EAQb,4CARa,EASb,IATa,CASR,KATQ,CAFL;AAYV,qBAAe,oBACb,sBADa,GAEb,+BAFa,GAGb,cAHa,GAIb,iCAhBQ;AAiBV,kBAAY,4DACV,6CADU,GAEV,gDAnBQ;AAoBV,kBAAY,yDApBF;AAqBV,kBAAY,4DACV,8DAtBQ;AAuBV,iBAAW,4DACT,qDADS,GAET;AAzBQ,KALJ;AAgCR,gBAAY;AACV,qBAAe;AACb,cAAM,SADO;AAEb,mBAAW,CAAC,UAAD,EAAa,UAAb,EAAyB,SAAzB;AAFE,OADL;AAKV,kBAAY;AACV,cAAM,UADI;AAEV,mBAAW;AAFD;AALF,KAhCJ;AA0CR,iBAAa;AACX,gBAAU,IADC;AAEX,iBAAW,KAFA;AAGX,eAAS;AAHE;AA1CL,GAnpCgD;;AAosC1D,eAAa;AACX,YAAQ;AACN,mBAAa,SADP;AAEN,eAAS,KAFH;AAGN,sBAAgB;AAHV,KADG;AAMX,gBAAY;AACV,cAAQ,8BADE;AAEV,sBAAgB,qBAFN;AAGV,oBAAc,qBACV,yBADU,GAEV,kCAFU,GAGV,oCAHU,GAIV,8BAJU,GAKV,gCALU,GAMV,+BANU,GAOV,gCAPU,GAQV,8BARU,GASV,gCATU,GAUV,kBAVU,GAWV,eAXU,GAYV,iBAZU,GAaV,kBAhBM;AAiBV,kBAAY,4BACR,gBADQ,GAER,qBAFQ,GAGR,kBAHQ,GAIR,eAJQ,GAKR,eAtBM;AAuBV,eAAS,4BACL,cADK,GAEL,iBAFK,GAGL;AA1BM,KAND;AAkCX,iBAAa;AACX,gBAAU,KADC;AAEX,iBAAW,KAFA;AAGX,eAAS;AAHE;AAlCF,GApsC6C;;AA6uC1D,cAAY;AACV,gBAAY;AACV,kBAAY,yCACV,2BADU,GAEV,sBAFU,GAGV,+BAHU,GAIV,kCAJU,GAKR,wCALQ,GAMV,oDANU,GAOV,8CAPU,GAQV,4CARU,GASV,kDATU,GAUV,8CAVU,GAWV,oDAXU,GAYV,gDAZU,GAaV,gDAbU,GAcV,4CAdU,GAeV,4CAfU,GAgBV,gDAhBU,GAiBV,wDAjBU,GAkBV,oDAlBU,GAmBV,0DAnBU,GAoBV,sDApBU,GAqBV,kDArBU,GAsBV,8CAtBU,GAuBV,6DAvBU,GAwBV,yBAxBU,GAyBV,2BAzBU,GA0BV;AA3BQ,KADF;AA8BV,YAAQ;AACN,gBAAU,iBADJ;AAEN,eAAS,EAFH;AAGN,oBAAc;AAHR,KA9BE;AAmCV,gBAAY;AACV,uBAAiB;AACf,cAAM,UADS;AAEf,mBAAW;AAFI;AADP;AAnCF,GA7uC8C;;AAwxC1D,aAAW;AACT,YAAQ;AACN,mBAAa,yBADP;AAEN,gBAAU;AAFJ,KADC;AAKT,gBAAY;AACV,iBAAW,2LADD;AAEV,kBAAY;AAFF,KALH;AAST,gBAAY;AACV,iBAAW;AACT,cAAM,SADG;AAET,mBAAW,CAAC,SAAD,EAAY,UAAZ;AAFF,OADD;AAKV,gBAAU;AACR,cAAM,QADE;AAER,mBAAW;AAFH,OALA;AASV,kBAAY;AACV,cAAM,OADI;AAEV,qBAAa;AACX,sBAAY,EADD;AAEX,4BAAkB,KAFP;AAGX,uBAAa;AAHF,SAFH;AAOV,mBAAW;AAPD;AATF,KATH;AA4BT,iBAAa;AACX,gBAAU,KADC;AAEX,iBAAW,KAFA;AAGX,eAAS,IAHE;AAIX,wBAAkB;AAJP;AA5BJ,GAxxC+C;;AA4zC1D,6BAA2B;AACzB,iBAAa;AACX,gBAAU,KADC;AAEX,iBAAW,KAFA;AAGX,eAAS;AAHE,KADY;AAMzB,YAAQ;AACN,eAAS,EADH;AAEN,gBAAU;AAFJ,KANiB;AAUzB,gBAAY;AACV,cAAQ,qBADE;AAEV,oBAAc,OAFJ;AAGV,kBAAY;AAHF,KAVa;AAezB,gBAAY;AACV,yBAAmB;AACjB,cAAM,SADW;AAEjB,mBAAW;AAFM;AADT;AAfa,GA5zC+B;;AAm1C1D,gBAAc;AACZ,iBAAa,EAAC,UAAU,KAAX,EAAkB,WAAW,KAA7B,EAAoC,SAAS,IAA7C,EADD;AAEZ,gBAAY;AACV,kBAAY;AADF,KAFA;AAKZ,gBAAY;AACV,kBAAY;AACV,cAAM,SADI;AAEV,mBAAW;AAFD;AADF;AALA,GAn1C4C;;AAg2C1D,UAAQ;AACN,iBAAa,EAAC,UAAU,KAAX,EAAkB,WAAW,KAA7B,EAAoC,SAAS,IAA7C,EADP;AAEN,gBAAY;AACV,kBAAY,kBACV,QADU,GAEV,WAFU,GAGV,wBAHU,GAIV;AALQ,KAFN;AASN,gBAAY;AACV,kBAAY;AACV,cAAM,SADI;AAEV,mBAAW;AAFD;AADF;AATN,GAh2CkD;AAg3C1D,aAAW;AACT,gBAAY;AACV,cAAQ,+BADE;AAEV,oBAAc,sBACZ,oBADY,GAEZ,mBAFY,GAGZ,mBAHY,GAIZ,6BAJY,GAKZ,0CALY,GAMV,qDANU,GAOV,sBAPU,GAQZ,iBARY,GASZ,oBATY,GAUZ,qCAZQ;AAaV,kBAAY,+BAbF;AAcV,mBAAa,mCACb;AAfU,KADH;AAkBT,gBAAY;AACV,yBAAmB;AACjB,cAAM,SADW;AAEjB,mBAAW;AAFM,OADT;AAKV,0BAAoB;AAClB,cAAM,OADY;AAElB,mBAAW,6CAFO;AAGlB,qBAAa;AACX,sBAAY,EADD;AAEX,4BAAkB;AAFP,SAHK;AAOlB,mBAAW;AAPO;AALV,KAlBH;AAiCT,iBAAa;AACX,gBAAU,KADC;AAEX,iBAAW,KAFA;AAGX,eAAS;AAHE;AAjCJ,GAh3C+C;;AAw5C1D,WAAS;AACP,gBAAY;AACV,cAAQ,6BADE;AAEV,oBAAc,SAFJ;AAGV,oBAAc,+CACZ,sCAJQ;AAKV,kBAAY,yDACV,gEADU,GAEV,oEAFU,GAGV,gEAHU,GAIV;AATQ;AADL,GAx5CiD;;AAs6C1D,aAAW;AACT,gBAAY;AACV,cAAQ,6BADE;AAEV,oBAAc,wBACV,aADU,GAEV,kBAFU,GAGV,mBAHU,GAIV,eAJU,GAKV,mBALU,GAMV,0BANU,GAOV,kCAPU,GAQV,kBARU,GASV,YATU,GAUV,2BAVU,GAWV,QAXU,GAYV,iBAdM;AAeV,kBAAY;AAfF,KADH;AAkBT,gBAAY;AACV,yBAAmB;AACjB,cAAM,SADW;AAEjB,mBAAW;AAFM;AADT,KAlBH;AAwBT,iBAAa;AACX,gBAAU,KADC;AAEX,iBAAW,KAFA;AAGX,eAAS;AAHE;AAxBJ,GAt6C+C;;AAq8C1D,eAAa;AACX,YAAQ;AACN,gBAAU;AADJ,KADG;AAIX,gBAAY;AACV,cAAQ,oCADE;AAEV,kBAAY,qDACV,kDADU,GAEV,wDAFU,GAGV;AALQ,KAJD;AAWX,gBAAY;AACV,yBAAmB;AACjB,cAAM,SADW;AAEjB,mBAAW;AAFM;AADT,KAXD;AAiBX,iBAAa;AACX,gBAAU,KADC;AAEX,iBAAW,KAFA;AAGX,eAAS;AAHE;AAjBF,GAr8C6C;;AA69C1D,oBAAkB;AAChB,iBAAa,EAAC,WAAW,KAAZ,EAAmB,UAAU,KAA7B,EAAoC,SAAS,IAA7C,EADG;AAEhB,YAAQ;AACN,kBAAY,OADN;AAEN,cAAQ,EAFF;AAGN,sBAAgB,EAHV;AAIN,kBAAY,GAJN;AAKN,iBAAW,EALL;AAMN,kBAAY;AANN,KAFQ;AAUhB,gBAAY;AACV,qBAAe,4CADL;AAEV;AACA,oBAAc,mCACV,QADU,GAEV,wBAFU,GAGV,uBAHU,GAIV,iBAJU,GAKV,wBALU,GAMV,8BANU,GAOV,6BAPU,GAQV,wBARU,GASV,QATU,GAUV,mCAbM;AAcV,kBAAY,6CAdF;AAeV,eAAS;AAfC;AAVI,GA79CwC;;AA0/C1D,iCAA+B;AAC7B,gBAAY;AACV,kBAAY;AACV,cAAM,SADI;AAEV,mBAAW;AAFD;AADF;AADiB,GA1/C2B;;AAmgD1D,eAAa;AACX,YAAQ;AACN,YAAM,IADA;AAEN,YAAM;AAFA,KADG;AAKX,iBAAa,EAAC,UAAU,KAAX,EAAkB,WAAW,KAA7B,EAAoC,SAAS,IAA7C,EALF;AAMX,gBAAY;AACV,kBAAY,oBACV,WADU,GAEV,WAFU,GAGV,WAHU,GAIV,WAJU,GAKV,wBALU,GAMV;AAPQ,KAND;AAeX,gBAAY;AACV,kBAAY;AACV,cAAM,SADI;AAEV,mBAAW;AAFD;AADF;AAfD,GAngD6C;AAyhD1D,iBAAe;AACb,YAAQ;AACN,aAAO,EADD;AAEN,sBAAgB,EAFV;AAGN,iBAAW,EAHL;AAIN,kBAAY,EAJN;AAKN,cAAQ;AALF,KADK;AAQb,gBAAY;AACV,cAAQ,8BADE;AAEV,oBAAc,aACZ,aADY,GAEZ,iBAFY,GAGZ,sBAHY,GAIZ,uBAJY,GAKZ,qBALY,GAMZ,yBANY,GAOZ,eAPY,GAQZ,+BARY,GASZ,wBATY,GAUZ,iCAVY,GAWZ,0BAXY,GAYZ,2BAZY,GAaZ,qCAfQ;AAgBV,iBAAW,yBAhBD;AAiBV,eAAS,4BACP,SADO,GAEP;AAnBQ,KARC;AA6Bb,gBAAY;AACV,iBAAW;AACT,cAAM,SADG;AAET,mBAAW;AAFF,OADD;AAKV,eAAS;AACP,cAAM,OADC;AAEP,qBAAa;AACX,sBAAY,CADD;AAEX,4BAAkB;AAFP,SAFN;AAMP,mBAAW;AANJ;AALC;AA7BC,GAzhD2C;;AAskD1D,aAAW;AACT,iBAAa;AACX,gBAAU,KADC;AAEX,iBAAW,KAFA;AAGX,eAAS;AAHE,KADJ;AAMT,YAAQ;AACN,qBAAe;AADT,KANC;AAST,gBAAY;AACV,cAAQ,iCADE;AAEV,cAAQ,0BACN,2BADM,GAEN,6BAFM,GAGN,oCAHM,GAIN,qCAJM,GAKN,mCALM,GAMN,4CANM,GAON,8BAPM,GAQN,sCARM,GASN,wCAXQ;AAYV,cAAQ,kCAZE;AAaV,eAAS;AAbC,KATH;AAwBT,gBAAY;AACV,cAAQ;AACN,cAAM,SADA;AAEN,mBAAW;AAFL;AADE;AAxBH,GAtkD+C;;AAsmD1D,eAAa;AACX,iBAAa;AACX,gBAAU,KADC;AAEX,iBAAW,KAFA;AAGX,eAAS;AAHE,KADF;AAMX,gBAAY;AACV,cAAQ,gDADE;AAEV,iBAAW,uBACA,kBADA,GAEA,cAFA,GAGA,kBAHA,GAIA,4BAJA,GAKA,qCALA,GAMA,4BANA,GAOA,2BAPA,GAQA,sBARA,GASA,gBATA,GAUA,sBAZD;AAaV,iBAAW,mBACA,sBAdD;AAeV,kBAAY,SAfF;AAgBV,iBAAW,uBAhBD;AAiBV,kBAAY,8BAjBF;AAkBV,eAAS,+BAlBC;AAmBV,cAAQ;AAnBE,KAND;AA2BX,gBAAY;AACV,kBAAY;AACV,cAAM,SADI;AAEV,mBAAW;AAFD;AADF;AA3BD,GAtmD6C;;AAyoD1D,cAAY;AACV,YAAQ;AACN,cAAQ;AADF,KADE;AAIV,gBAAY;AACV,mBAAa,SADH;AAEV,oBAAc,kEACV,sDADU,GAEV,oDAFU,GAGV,+CAHU,GAIV,eAJU,GAKV,mEALU,GAMV,uCARM;AASV,kBAAY,oBATF;AAUV,qBAAe,wBACX,0DADW,GAEX,yDAFW,GAGX;AAbM,KAJF;AAmBV,iBAAa;AACX,gBAAU,KADC;AAEX,iBAAW,KAFA;AAGX,eAAS;AAHE;AAnBH,GAzoD8C;;AAmqD1D,YAAU;AACR,YAAQ;AACN,aAAO,EADD;AAEN,aAAO,cAFD;AAGN,cAAQ,iBAHF;AAIN,iBAAW;AAJL,KADA;AAOR,gBAAY;AACV,cAAQ,2BADE;AAEV,cAAQ,4BACY,aADZ,GAEY,eAFZ,GAGY,eAHZ,GAIY,eAJZ,GAKY,SAPV;AAQV,kBAAY,kBACA,cADA,GAEA,gBAVF;AAWV,qBAAe,uCACA,6BADA,GAEA,oCAbL;AAcV,mBAAa,iBACA,yBADA,GAEA,wBAFA,GAGA,wBAHA,GAIA;AAlBH,KAPJ;AA2BR,gBAAY;AACV,uBAAiB;AACf,cAAM,SADS;AAEf,mBAAW;AAFI;AADP,KA3BJ;AAiCR,iBAAa;AACX,gBAAU,KADC;AAEX,iBAAW,KAFA;AAGX,eAAS;AAHE;AAjCL,GAnqDgD;;AA2sD1D,kBAAgB;AACd,YAAQ;AACN,cAAQ,qBADF;AAEN,kBAAY,EAFN;AAGN,kBAAY,EAHN;AAIN,eAAS;AAJH,KADM;AAOd,gBAAY;AACV,cAAQ,+CADE;AAEV,oBAAc,6BACZ,4BADY,GAEZ,8BAFY,GAGZ,8BAHY,GAIZ,+BAJY,GAKZ,8BALY,GAMZ,2CANY,GAOZ,+DAPY,GAQZ,iBARY,GASZ,oBATY,GAUZ,2BAVY,GAWZ,sBAXY,GAYZ,sBAZY,GAaZ,gCAbY,GAcZ,cAhBQ;AAiBV,kBAAY,gCAjBF;AAkBV,eAAS;AAlBC;AAPE,GA3sD0C;;AAwuD1D,cAAY;AACV,gBAAY;AACV,kBAAY,sCADF;AAEV,yBAAmB,2BACjB,uDADiB,GAEjB,oDAFiB,GAGjB,oCAHiB,GAIjB,qDANQ;AAOV,yBAAmB,kBAPT;AAQV,uBAAiB,2BACf,8CADe,GAEf,8CAFe,GAGf,8CAHe,GAIf,8CAJe,GAKf,0BAbQ;AAcV,wBAAkB,0BAChB,4CADgB,GAEhB,4CAFgB,GAGhB,4CAHgB,GAIhB,4CAJgB,GAKhB,yBAnBQ;AAoBV,kBAAY,kDACV,qCArBQ;AAsBV,yBAAmB,6BACjB,kDADiB,GAEjB,kDAxBQ;AAyBV,eAAS,mDACP;AA1BQ,KADF;AA6BV,iBAAa;AACX,gBAAU,KADC;AAEX,iBAAW,KAFA;AAGX,eAAS;AAHE;AA7BH,GAxuD8C;;AA4wD1D,iBAAe;AACb,YAAQ;AACN,oBAAc,iBADR;AAEN,mBAAa,UAFP;AAGN,mBAAa,OAHP;AAIN,gBAAU;AAJJ,KADK;AAOb,gBAAY;AACV,kBAAY,sCADF;AAEV,oBAAc,2BACZ,uDAHQ;AAIV,oBAAc,0BACZ,sCADY,GAEZ,qDANQ;AAOV,yBAAmB,wCAPT;AAQV,yBAAmB,wBART;AASV,kBAAY,oDACV,0CAVQ;AAWV,eAAS,mDACP,sCAZQ;AAaV,gBAAU,mDACR,oDAdQ;AAeV,qBAAe,0CACb,kBAhBQ;AAiBV,qBAAe,wCACb,uDAlBQ;AAmBV,mBAAa,sCAnBH;AAoBV,oBAAc,uCApBJ;AAqBV,uBAAiB,qCArBP;AAsBV,oBAAc;AAtBJ,KAPC;AA+Bb,gCAA4B;AAC1B,uBAAiB,IADS;AAE1B,sBAAgB,IAFU;AAG1B,yBAAmB,IAHO;AAI1B,0BAAoB,IAJM;AAK1B,4BAAsB,IALI;AAM1B,qBAAe,IANW;AAO1B,2BAAqB,IAPK;AAQ1B,uBAAiB;AARS,KA/Bf;AAyCb,iBAAa;AACX,gBAAU,KADC;AAEX,iBAAW,KAFA;AAGX,eAAS;AAHE;AAzCA,GA5wD2C;;AA4zD1D,YAAU;AACR,gBAAY;AACV,mBAAa,2BACX,YADW,GAEX,iBAFW,GAGX,aAHW,GAIX,eAJW,GAKX,sBALW,GAMX,gCANW,GAOX,qBAPW,GAQX,sBARW,GASX,qDATW,GAUX,oDAVW,GAWX,sDAXW,GAYX,yBAZW,GAaX,iCAbW,GAcX,0CAdW,GAeX,wCAfW,GAgBX,uCAhBW,GAiBX,qCAjBW,GAkBX,4CAlBW,GAmBX,2CAnBW,GAoBX,uCApBW,GAqBX,gDArBW,GAsBX,sCAtBW,GAuBX,uCAvBW,GAwBX,wCAxBW,GAyBX,8CAzBW,GA0BX,6CA1BW,GA2BX,yCA3BW,GA4BX,uCA5BW,GA6BX,yCA7BW,GA8BX,+DA9BW,GA+BX,8DA/BW,GAgCX,uCAhCW,GAiCX,0CAjCW,GAkCX,yCAlCW,GAmCX,MAnCW,GAoCX,qBApCW,GAqCX,iBArCW,GAsCX,qBAtCW,GAuCX,yBAvCW,GAwCX;AAzCQ,KADJ;;AA6CR,gBAAY;AACV,mBAAa;AACX,cAAM,SADK;AAEX,mBAAW;AAFA;AADH,KA7CJ;;AAoDR,iBAAa;AACX,gBAAU,KADC;AAEX,iBAAW,KAFA;AAGX,eAAS;AAHE,KApDL;;AA0DR,gCAA4B;AAC1B,iBAAW,MADe;AAE1B,oBAAc,MAFY;AAG1B,2BAAqB,OAHK;AAI1B,wBAAkB;AAJQ;AA1DpB,GA5zDgD;;AA83D1D,eAAa;AACX,YAAQ;AACN,YAAM,EADA;AAEN,iBAAW,eAFL;AAGN,eAAS,OAHH;AAIN,iBAAW,EAJL;AAKN,iBAAW,KALL;AAMN,cAAQ,EANF;AAON,cAAQ,WAPF;AAQN,eAAS;AARH,KADG;AAWX,gBAAY;AACV,cAAQ,iBADE;AAEV,kBAAY,sBACF,wBADE,GAEF,eAFE,GAGF,eAHE,GAIF,YAJE,GAKF,eALE,GAMF,cANE,GAOF,SAPE,GAQF,eAVA;AAWV,kBAAY,uBACF,2BADE,GAEF,yBAFE,GAGF,qBAHE,GAIF,eAJE,GAKF,eALE,GAMF,YANE,GAOF,eAPE,GAQF,SARE,GASF,eApBA;AAqBV,cAAQ,sBACE,wBADF,GAEE,eAFF,GAGE,eAHF,GAIE,aAJF,GAKE,eALF,GAME,YANF,GAOE,eAPF,GAQE,SARF,GASE;AA9BA,KAXD;AA2CX,gBAAY;AACV,kBAAY;AACV,cAAM,SADI;AAEV,mBAAW;AAFD,OADF;AAKV,kBAAY;AACV,cAAM,SADI;AAEV,mBAAW;AAFD,OALF;AASV,cAAQ;AACN,cAAM,OADA;AAEN,qBAAa;AACX,sBAAY,EADD;AAEX,4BAAkB;AAFP,SAFP;AAMN,mBAAW;;AANL;AATE,KA3CD;AA8DX,iBAAa;AACX,gBAAU,KADC;AAEX,iBAAW,KAFA;AAGX,eAAS;AAHE;AA9DF,GA93D6C;AAk8D1D,WAAS;AACP,YAAQ;AACN,kBAAY;AADN,KADD;AAIP,gBAAY;AACV,cAAQ,6BACN,qBADM,GAEN,8BAFM,GAGN,iCAHM,GAIN,6BAJM,GAKN,2BALM,GAMN,uCANM,GAON,qCAPM,GAQN,sBARM,GASN,4BATM,GAUN,0BAVM,GAWN,mDAZQ;AAaV,kBAAY,sEAbF;AAcV,gBAAU;AAdA;AAJL,GAl8DiD;AAu9D1D,oBAAkB;AAChB,gBAAY;AACV,cAAQ,8BADE;AAEV,cAAQ,yDAFE;AAGV,kBAAY,aACF,SADE,GAEF,SAFE,GAGF,aAHE,GAIF,WAJE,GAKF,aALE,GAMF,gBANE,GAOF,aAPE,GAQF,kBARE,GASF,0BATE,GAUF,aAVE,GAWF,QAXE,GAYF,OAZE,GAaF,aAbE,GAcF,eAdE,GAeF,OAfE,GAgBF,aAhBE,GAiBF,kBAjBE,GAkBF,yBAlBE,GAmBF,iBAnBE,GAoBF,kBApBE,GAqBF,4BArBE,GAsBF;AAzBA,KADI;AA4BhB,gBAAY;AACV,yBAAmB;AACjB,cAAM,SADW;AAEjB,mBAAW;AAFM;AADT;AA5BI,GAv9DwC;;AA2/D1D,eAAa;AACX,iBAAa;AACX,gBAAU,KADC;AAEX,iBAAW,KAFA;AAGX,eAAS;AAHE,KADF;AAMX,YAAQ;AACN,aAAO,cADD;AAEN,kBAAY;AAFN,KANG;AAUX,gBAAY;AACV,kBAAY,oDADF;AAEV,mBAAa,uDACA,4BAHH;AAIV,mBAAa,wCACA,uDALH;AAMV,iBAAW,0BAND;AAOV,uBAAiB,0CACA,mCADA,GAEA,wCAFA,GAGA,0CAHA,GAIA,+CAJA,GAKA;AAZP,KAVD;AAwBX,gBAAY;AACV,kBAAY;AACV,cAAM,SADI;AAEV,mBAAW;AAFD;AADF;AAxBD,GA3/D6C;;AA2hE1D,UAAQ;AACN,YAAQ;AACN,iBAAW;AADL,KADF;AAIN,gBAAY;AACV,cAAQ,KAAK,SAAL,EAAe,0BAA4B;AACjD,gBAAQ,MADyC;AAEjD,iBAAS,UAFwC;AAGjD,eAAO,QAH0C;AAIjD,oBAAY,aAJqC;AAKjD,kBAAU,WALuC;AAMjD,cAAM,OAN2C;AAOjD,mBAAW;AACT,iBAAO,4BADE;AAET,oBAAU;AAFD,SAPsC;AAWjD,oBAAY;AACV,iCAAuB,mBADb;AAEV,4BAAkB,cAFR;AAGV,2BAAiB,kBAHP;AAIV,+BAAqB,sBAJX;AAKV,2BAAiB,kBALP;AAMV,0BAAgB,iBANN;AAOV,6BAAmB,oBAPT;AAQV,8BAAoB,qBARV;AASV,8BAAoB,qBATV;AAUV,uBAAa,cAVH;AAWV,wBAAc,eAXJ;AAYV,4BAAkB,mBAZR;AAaV,wBAAc,eAbJ;AAcV,mBAAS,UAdC;AAeV,oBAAU;AAfA,SAXqC;AA4BjD,kBAAU;AACR,mCAAyB,0BADjB;AAER,kCAAwB,yBAFhB;AAGR,6BAAmB,oBAHX;AAIR,8BAAoB,qBAJZ;AAKR,0BAAgB,iBALR;AAMR,yBAAe,gBANP;AAOR,0BAAgB,iBAPR;AAQR,yBAAe,gBARP;AASR,wBAAc,eATN;AAUR,uBAAa,cAVL;AAWR,sBAAY,aAXJ;AAYR,uBAAa,cAZL;AAaR,4BAAkB,mBAbV;AAcR,2BAAiB;AAdT,SA5BuC;AA4CjD,wBAAgB,iBA5CiC;AA6CjD,qBAAa;AA7CoC,OAA3C,CADE;AAgDV,gBAAU,KAAK,SAAL,EAAe,0BAA4B;AACnD,gBAAQ,QAD2C;AAEnD,iBAAS,UAF0C;AAGnD,eAAO,QAH4C;AAInD,wBAAgB,iBAJmC;AAKnD,qBAAa;AALsC,OAA3C,CAhDA;AAuDV,eAAS,KAAK,SAAL,EAAe,0BAA4B;AAClD,gBAAQ,OAD0C;AAElD,iBAAS,UAFyC;AAGlD,eAAO,QAH2C;AAIlD,wBAAgB,iBAJkC;AAKlD,qBAAa;AALqC,OAA3C,CAvDC;AA8DV,qBAAe,KAAK,SAAL,EAAe,0BAA4B;AACxD,gBAAQ,aADgD;AAExD,iBAAS,UAF+C;AAGxD,eAAO,QAHiD;AAIxD,2BAAmB,oBAJqC;AAKxD,4BAAoB,qBALoC;AAMxD,6BAAqB,sBANmC;AAOxD,gCAAwB,yBAPgC;AAQxD,gCAAwB,yBARgC;AASxD,aAAK,aATmD;AAUxD,aAAK,aAVmD;AAWxD,kBAAU,kBAX8C;AAYxD,iBAAS,iBAZ+C;AAaxD,0BAAkB,mBAbsC;AAcxD,yBAAiB,kBAduC;AAexD,mBAAW,YAf6C;AAgBxD,qBAAa,cAhB2C;AAiBxD,wBAAgB;AAjBwC,OAA3C,CA9DL;AAiFV,gBAAU,KAAK,SAAL,EAAe,0BAA4B;AACnD,gBAAQ,QAD2C;AAEnD,iBAAS,UAF0C;AAGnD,kBAAU,kBAHyC;AAInD,iBAAS,iBAJ0C;AAKnD,aAAK,aAL8C;AAMnD,aAAK,aAN8C;AAOnD,wBAAgB;AAPmC,OAA3C;AAjFA,KAJN;AA+FN,gBAAY;AACV,cAAQ;AACN,cAAM,UADA;AAEN,mBAAW;AAFL,OADE;AAKV,gBAAU;AACR,cAAM,YADE;AAER,oBAAY,YAFJ;AAGR,mBAAW;AAHH,OALA;AAUV,eAAS;AACP,cAAM,OADC;AAEP,oBAAY,YAFL;AAGP,mBAAW;AAHJ,OAVC;AAeV,qBAAe;AACb,cAAM,SADO;AAEb,oBAAY,YAFC;AAGb,mBAAW,aAHE;AAIb,0BAAkB;AAChB,oBAAU,IADM;AAEhB,yCAA+B,CAC7B,CAAC,CAAD,EAAG,CAAH,CAD6B,EACvB,CAAC,CAAD,EAAG,CAAH,CADuB,EACjB,CAAC,CAAD,EAAG,EAAH,CADiB,EACV,CAAC,EAAD,EAAI,EAAJ,CADU,EACF,CAAC,EAAD,EAAI,EAAJ,CADE,EACM,CAAC,EAAD,EAAI,EAAJ,CADN,EAE7B,CAAC,EAAD,EAAI,EAAJ,CAF6B,EAErB,CAAC,EAAD,EAAI,EAAJ,CAFqB,EAEb,CAAC,EAAD,EAAI,EAAJ,CAFa,EAEL,CAAC,EAAD,EAAI,EAAJ,CAFK,EAEG,CAAC,EAAD,EAAI,EAAJ,CAFH,EAG7B,CAAC,EAAD,EAAI,EAAJ,CAH6B,EAGrB,CAAC,EAAD,EAAI,EAAJ,CAHqB,EAGb,CAAC,EAAD,EAAI,EAAJ,CAHa,EAGL,CAAC,EAAD,EAAI,EAAJ,CAHK,EAGG,CAAC,EAAD,EAAI,EAAJ,CAHH,EAI7B,CAAC,EAAD,EAAI,EAAJ,CAJ6B,EAIrB,CAAC,EAAD,EAAI,EAAJ,CAJqB,EAIb,CAAC,EAAD,EAAI,EAAJ,CAJa,EAIL,CAAC,EAAD,EAAI,EAAJ,CAJK,EAIG,CAAC,EAAD,EAAI,GAAJ,CAJH,EAIY,CAAC,GAAD,EAAK,GAAL,CAJZ;AAFf;AAJL,OAfL;AA6BV,gBAAU;AACR,cAAM,SADE;AAER,oBAAY,OAFJ;AAGR,mBAAW,QAHH;AAIR,0BAAkB;AAChB,oBAAU,IADM;AAEhB,yCAA+B,CAAC,CAAC,CAAD,EAAG,CAAH,CAAD;AAFf;AAJV;AA7BA;AA/FN,GA3hEkD;;AAmqE1D,QAAM;AAnqEoD,CAArD;;AAuqEP,iBAAiB,WAAjB,EAA8B,UAA9B,EAA0C,UAA1C,EAAsD;AACtD,yBAA0B,MAD1B,IACoC,IADpC;;AAGA,iBAAiB,6BAAjB,EACK,UADL,EACiB,UADjB,EAC6B;AACzB,yBAA0B,MAF9B,IAEwC,IAFxC;;AAIA,iBAAiB,MAAjB,EAAyB,UAAzB,EAAqC,UAArC,EAAiD;AACjD,yBAA0B,MAD1B,IACoC,IADpC;;AAGA,2BAA2B,gBAA3B;;AAEA;;;;;;AAMA,SAAS,0BAAT,CAAoC,MAApC,EAA4C,qBAA5C,EAAmE;AACjE,OAAK,IAAM,MAAX,IAAqB,qBAArB,EAA4C;AAC1C,QAAI,oBAAO,qBAAP,EAA8B,MAA9B,CAAJ,EAA2C;AACzC,UAAM,MAAM,sBAAsB,MAAtB,CAAZ;AACA,aAAO,MAAP,EAAe,WAAf,IACI,OAAO,MAAP,CAAc,EAAd,EAAkB,OAAO,MAAP,EAAe,WAAf,CAAlB,EAA+C,EAAC,UAAU,GAAX,EAA/C,CADJ;AAED;AACF;AACF;;;;;;;;;;qjBCvtED;;;;;;;;;;;;;;;;AAgBA;;AAKA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;;;;;AAEA,IAAM,MAAM,oBAAZ;;AAEA,IAAM,qBAAqB,cAA3B;;AAEA;AACA,IAAI,sBAAsB,CAA1B;;AAGA;;;;AAIA,SAAS,YAAT,CAAsB,OAAtB,EAA+B;AAC7B,MAAI,KAAK,QAAQ,kBAAR,CAAT;AACA,MAAI,CAAC,EAAL,EAAS;AACP,SAAK,EAAE,mBAAP;AACA,YAAQ,kBAAR,IAA8B,EAA9B;AACD;AACD,SAAO,EAAP;AACD;;AAGD;;;;;;;;IAOa,iB,WAAA,iB;AACX;;;;AAIA,6BAAY,MAAZ,EAAoB,MAApB,EAA4B;AAAA;;AAC1B;AACA,SAAK,MAAL,GAAc,MAAd;;AAEA;AACA,SAAK,MAAL,GAAc,MAAd;;AAEA;AACA,SAAK,UAAL,GAAkB,mBAAS,eAAT,CAAyB,MAAzB,CAAlB;;AAEA;AACA,SAAK,eAAL,GAAuB,CAAvB;;AAEA;AACA,SAAK,OAAL,GAAe,EAAf;;AAEA;AACA,SAAK,SAAL,GAAiB,IAAjB;;AAEA;AACA,SAAK,YAAL,GAAoB,EAApB;;AAEA,QAAI,KAAK,MAAT,EAAiB;AACf,WAAK,MAAL,CAAY,SAAZ,CAAsB,IAAtB;AACD;AACF;;AAED;;;;;;;;8BAIU,K,EAAO;AACf,UAAI,CAAC,KAAK,SAAV,EAAqB;AACnB,aAAK,SAAL,GAAiB,EAAjB;AACD;AACD,WAAK,SAAL,CAAe,IAAf,CAAoB,KAApB;AACD;;AAED;;;;;;;iCAIa,K,EAAO;AAClB,UAAI,KAAK,SAAT,EAAoB;AAClB,YAAM,QAAQ,KAAK,SAAL,CAAe,OAAf,CAAuB,KAAvB,CAAd;AACA,YAAI,SAAS,CAAC,CAAd,EAAiB;AACf,eAAK,SAAL,CAAe,MAAf,CAAsB,KAAtB,EAA6B,CAA7B;AACD;AACF;AACF;;AAED;;;;8BACU;AACR;AACA,WAAK,iBAAL,CAAuB,CAAvB;;AAEA;AACA,WAAK,IAAI,IAAI,KAAK,OAAL,CAAa,MAAb,GAAsB,CAAnC,EAAsC,KAAK,CAA3C,EAA8C,GAA9C,EAAmD;AACjD,aAAK,OAAL,CAAa,CAAb,EAAgB,OAAhB;AACD;;AAED;AACA,WAAK,YAAL,CAAkB,OAAlB,CAA0B,uBAAe;AACvC;AACD,OAFD;AAGA,WAAK,YAAL,CAAkB,MAAlB,GAA2B,CAA3B;;AAEA,UAAI,KAAK,MAAT,EAAiB;AACf,aAAK,MAAL,CAAY,YAAZ,CAAyB,IAAzB;AACD;AACD,UAAI,KAAK,SAAT,EAAoB;AAClB,aAAK,IAAI,KAAI,CAAb,EAAgB,KAAI,KAAK,SAAL,CAAe,MAAnC,EAA2C,IAA3C,EAAgD;AAC9C,eAAK,SAAL,CAAe,EAAf,EAAkB,OAAlB;AACD;AACF;AACF;;AAED;;;;;;gCAGY,O,EAAS;AACnB,WAAK,YAAL,CAAkB,IAAlB,CAAuB,OAAvB;AACD;;AAED;;;;;;;;mCAKe,CAAE;;AAEjB;;;;;;;;qCAKiB,CAAE;;AAEnB;;;;;;;;4CAKwB,CAAE;;AAE1B;;;;;;;;uCAKmB,CAAE;;AAErB;;;;;;wCAGoB;AAClB,UAAI,CAAC,KAAK,MAAV,EAAkB;AAChB,eAAO,KAAK,eAAZ;AACD;AACD,aAAO,KAAK,MAAL,CAAY,iBAAZ,KAAkC,CAAlC,GAAsC,KAAK,eAA3C,GAA6D,CAApE;AACD;;AAED;;;;;;sCAGkB,U,EAAY;AAC5B,WAAK,eAAL,GAAuB,UAAvB;AACA,WAAK,aAAL;AACA,UAAI,KAAK,SAAT,EAAoB;AAClB,aAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,KAAK,SAAL,CAAe,MAAnC,EAA2C,GAA3C,EAAgD;AAC9C,eAAK,SAAL,CAAe,CAAf,EAAkB,aAAlB;AACD;AACF;AACF;;AAED;;;;oCACgB;AACd,WAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,KAAK,OAAL,CAAa,MAAjC,EAAyC,GAAzC,EAA8C;AAC5C,aAAK,OAAL,CAAa,CAAb,EAAgB,MAAhB;AACD;AACF;;AAED;;;;;;;;;;;;;+BAUW,I,EAAM,Y,EAAc,uB,EAAyB,Q,EAAU;AAChE,UAAM,iBAAiB,KAAK,iBAAL,CAAuB,IAAvB,CAA4B,IAA5B,CAAvB;AACA,aAAO,KAAK,qBAAL,CAA2B,cAA3B,EAA2C,IAA3C,EAAiD,YAAjD,EACH,uBADG,EACsB,QADtB,CAAP;AAED;;AAED;;;;;;;;;;;;;;kCAYE,O,EAAS,I,EAAM,Y,EAAc,uB,EAAyB,Q,EAAU;AAChE,UAAM,iBAAiB,KAAK,oBAAL,CAA0B,IAA1B,CAA+B,IAA/B,EAAqC,OAArC,CAAvB;AACA,aAAO,KAAK,qBAAL,CAA2B,cAA3B,EAA2C,IAA3C,EAAiD,YAAjD,EACH,uBADG,EACsB,QADtB,EACgC,OADhC,CAAP;AAED;;AAED;;;;;;;;;;;;;0CAUsB,c,EAAgB,I,EACpC,Y,EAAc,uB,EAAyB,Q,EAAU,W,EAAa;AAC9D,UAAI,KAAK,6BAAL,KACA,KAAK,sBAAL,KAAgC,SADhC,IAEA,KAAK,sBAAL,KAAgC,SAFpC,EAE+C;AAC7C,YAAM,cAAc,EAApB;AACA,YAAM,SAAS,KAAK,6BAAL,CAAf;AACA,YAAI,CAAC,MAAD,IAAW,CAAC,oBAAQ,MAAR,CAAhB,EAAiC;AAC/B,2BAAO,KAAP,CAAa,GAAb,EAAkB,qCAAlB;AACA,iBAAO,YAAM,CAAE,CAAf;AACD;AACD,aAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,OAAO,MAA3B,EAAmC,GAAnC,EAAwC;AACtC,cAAM,WAAW,OAAO,CAAP,CAAjB;AACA,cAAI,CAAC,oBAAQ,QAAR,CAAD,IAAsB,SAAS,MAAT,IAAmB,CAA7C,EAAgD;AAC9C,6BAAO,KAAP,CAAa,GAAb,EACI,mDADJ;AAEA;AACD;AACD,cAAI,CAAC,2BAAe,SAAS,CAAT,CAAf,CAAD,IAAgC,CAAC,2BAAe,SAAS,CAAT,CAAf,CAArC,EAAkE;AAChE;AACA,6BAAO,KAAP,CAAa,GAAb,EACI,uDADJ;AAEA;AACD;AACD,cAAM,MAAM,OAAO,SAAS,CAAT,CAAP,CAAZ;AACA,cAAM,MAAM,OAAO,SAAS,CAAT,CAAP,CAAZ;AACA;AACA;AACA;AACA;AACA;AACA,cAAI,MAAM,CAAN,IAAW,MAAM,GAAjB,IAAwB,MAAM,GAA9B,IACC,OAAO,GAAP,IAAc,OAAO,GAArB,IAA4B,OAAO,CADxC,EAC4C;AAC1C,6BAAO,KAAP,CAAa,GAAb,EACI,yDADJ;AAEA;AACD;AACD,cAAM,UAAU,IAAhB;AACA,kBAAQ,sBAAR,IAAkC,GAAlC;AACA,kBAAQ,sBAAR,IAAkC,GAAlC;AACA,cAAM,SAAQ,qCAAoB,OAApB,EAA6B,cAA7B,CAAd;AACA,sBAAY,IAAZ,CAAiB,KAAK,OAAL,CAAa,MAAb,EAAoB,IAApB,EAA0B,YAA1B,EACb,uBADa,EACY,QADZ,EACsB,WADtB,CAAjB;AAED;AACD,eAAO,YAAM;AACX,sBAAY,OAAZ,CAAoB;AAAA,mBAAc,YAAd;AAAA,WAApB;AACD,SAFD;AAGD;;AAED,UAAM,QAAQ,qCAAoB,IAApB,EAA0B,cAA1B,CAAd;AACA,aAAO,KAAK,OAAL,CAAa,KAAb,EAAoB,IAApB,EAA0B,YAA1B,EACH,uBADG,EACsB,QADtB,EACgC,WADhC,CAAP;AAED;;AAED;;;;;;;;;;;;;4BAUQ,K,EAAO,I,EACb,Y,EAAc,uB,EAAyB,Q,EAAU,W,EAAa;AAAA;;AAC9D;AACA,UAAI,YAAJ,EAAkB;AAChB,cAAM,QAAN,CAAe,KAAf;AACA,qBAAa,IAAb,CAAkB,YAAM;AACtB,gBAAM,QAAN,CAAe,IAAf;AACD,SAFD;AAGD;;AAED,UAAI,uBAAJ,EAA6B;AAC3B,cAAM,cAAN,CAAqB,uBAArB;AACD;;AAED;AACA,YAAM,cAAN,CAAqB,YAAM;AACzB,YAAM,YAAY,MAAK,YAAL,EAAlB;AACA,YAAM,QAAQ,MAAM,QAAN,CAAe,SAAf,CAAd;;AAEA;AACA,cAAM,cAAN,IAAwB,MAAK,cAAL,KAAwB,CAAxB,GAA4B,CAApD;AACA,cAAM,qBAAN,IAA+B,MAAK,qBAAL,KAA+B,CAA/B,GAAmC,CAAlE;AACA,cAAM,WAAN,IAAqB,KAAK,GAAL,KAAa,SAAlC;;AAEA;AACA,YAAI,kBAAJ;AACA,YAAI,WAAJ,EAAiB;AACf,cAAM,WACF,MAAK,UAAL,CAAgB,6BAAhB,CAA8C,WAA9C,CADJ;AAEA,sBACI,WACE,SAAS,YAAT,EADF,GAEE,mBAAS,cAAT,CAAwB,MAAK,MAA7B,EAAqC,aAArC,CAAmD,WAAnD,CAHN;AAIA,cAAM,oBAAoB,MAAK,oBAAL,CAA0B,WAA1B,CAA1B;AACA,cAAM,mBAAmB,MAAK,0BAAL,CAAgC,WAAhC,CAAzB;AACA,iBAAO,MAAP,CAAc,KAAd,EAAqB;AACnB,iCAAqB,iBADF;AAEnB,gCAAoB,KAAK,SAAL,CAAe,gBAAf;AAFD,WAArB;AAKD,SAdD,MAcO;AACL,sBAAY,MAAK,gBAAL,EAAZ;AACD;AACD,cAAM,YAAN;;AAEA,YAAI,SAAJ,EAAe;AACb,iBAAO,MAAP,CAAc,KAAd,EAAqB;AACnB,wBAAY,UAAU,IADH;AAEnB,wBAAY,UAAU,GAFH;AAGnB,4BAAgB,UAAU,KAHP;AAInB,6BAAiB,UAAU;AAJR,WAArB;AAMD;AACD,iBAAS,KAAT;AACD,OAvCD;;AAyCA,WAAK,OAAL,CAAa,IAAb,CAAkB,KAAlB;AACA,YAAM,WAAN,CAAkB,YAAM;AACtB,YAAM,QAAQ,MAAK,OAAL,CAAa,OAAb,CAAqB,KAArB,CAAd;AACA,YAAI,SAAS,CAAC,CAAd,EAAiB;AACf,gBAAK,OAAL,CAAa,MAAb,CAAoB,KAApB,EAA2B,CAA3B;AACD;AACF,OALD;;AAOA;AACA,UAAI,WAAJ,EAAiB;AACf;AACA;AACA;AACA;AACA,cAAM,WAAN,CAAkB,KAAK,OAAL,CAAa,WAAb,EAA0B;AAAA,iBAAM,MAAM,MAAN,EAAN;AAAA,SAA1B,CAAlB;AACD;;AAED;AACA,YAAM,MAAN;AACA,aAAO,YAAW;AAChB,cAAM,OAAN;AACD,OAFD;AAGD;;AAED;;;;;;;;;;;4BAQQ,a,EAAe,c,EAAgB,CAAE;;AAEzC;;;;;;;;yCAKqB,a,EAAe,CAAE;;AAEtC;;;;;;;;+CAK2B,a,EAAe,CAAE;;;;;;AAI9C;;;;;;IAIa,uB,WAAA,uB;;;AACX;;;AAGA,mCAAY,MAAZ,EAAoB;AAAA;;AAGlB;AAHkB,mJACZ,YAAa,IADD,EACO,MADP;;AAIlB,WAAK,OAAL,GAAe,mBAAS,YAAT,CAAsB,MAAtB,CAAf;;AAEA;AACA,WAAK,SAAL,GAAiB,mBAAS,cAAT,CAAwB,MAAxB,CAAjB;;AAEA;AACA,WAAK,aAAL,GAAqB,CAAC,OAAK,OAAL,CAAa,SAAb,EAAtB;;AAEA;AACA,WAAK,oBAAL,GAA4B,OAAK,cAAL,EAA5B;;AAEA;;;;;;;;AAQA,WAAK,gBAAL,GAAwB,kBAAxB;;AAEA;AACA,WAAK,qBAAL,GAA6B,IAA7B;;AAEA,QAAI,mBAAQ,OAAK,MAAL,CAAY,GAApB,EAAyB,OAAzB,IAAoC,QAAxC,EAAkD;AAChD;AACA,UAAM,OAAO,OAAK,MAAL,CAAY,WAAZ,EAAb;AACA,UAAM,cAAc,gBAAM,aAAN,CAChB,KAAK,eAAL,IAAwB,KAAK,IAA7B,IAAqC,IADrB,CAApB;AAEA,aAAK,WAAL,CAAiB,OAAK,OAAL,CACb,WADa,EAEb,OAAK,iBAAL,CAAuB,IAAvB,QAFa,CAAjB;AAGD,KARD,MAQO;AACL;AACA,aAAK,iBAAL,CAAuB,OAAK,OAAL,CAAa,SAAb,KAA2B,CAA3B,GAA+B,CAAtD;AACA,aAAK,WAAL,CAAiB,OAAK,OAAL,CAAa,mBAAb,CAAiC,YAAM;AACtD,YAAM,YAAY,OAAK,OAAL,CAAa,SAAb,EAAlB;AACA,YAAI,CAAC,SAAL,EAAgB;AACd,iBAAK,aAAL,GAAqB,IAArB;AACD;AACD,eAAK,iBAAL,CAAuB,YAAY,CAAZ,GAAgB,CAAvC;AACD,OANgB,CAAjB;AAOD;AA9CiB;AA+CnB;;AAED;;;;;8BACU;AACR;AACA,UAAI,KAAK,qBAAT,EAAgC;AAC9B,aAAK,qBAAL,CAA2B,UAA3B;AACA,aAAK,qBAAL,GAA6B,IAA7B;AACD;AACF;;AAED;;;;mCACe;AACb,aAAO,gBAAM,YAAN,CAAmB,KAAK,OAAL,CAAa,mBAAb,EAAnB,CAAP;AACD;;AAED;;;;qCACiB;AACf,aAAO,KAAK,aAAZ;AACD;;AAED;;;;4CACwB;AACtB,aAAO,KAAK,oBAAZ;AACD;;AAED;;;;uCACmB;AACjB;AACA,UAAM,OAAO,KAAK,MAAL,CAAY,WAAZ,EAAb;AACA,UAAM,cAAc,gBAAM,aAAN,CAChB,KAAK,eAAL,IAAwB,KAAK,IAA7B,IAAqC,IADrB,CAApB;AAEA,aAAO,KAAK,SAAL,CAAe,aAAf,CAA6B,WAA7B,CAAP;AACD;;AAED;;;;4BACQ,O,EAAS,Q,EAAU;AAAA;;AACzB,WAAK,2BAAL,CAAiC,OAAjC;;AAEA,UAAM,KAAK,aAAa,OAAb,CAAX;AACA,UAAI,iBAAiB,KAAK,gBAAL,CAAsB,EAAtB,CAArB;AACA,UAAI,CAAC,cAAL,EAAqB;AACnB,yBAAiB;AACf,0BADe;AAEf,6BAAmB,CAFJ;AAGf,4BAAkB,IAHH;AAIf,qBAAW;AAJI,SAAjB;AAMA,aAAK,gBAAL,CAAsB,EAAtB,IAA4B,cAA5B;AACD,OARD,MAQO,IAAI,eAAe,iBAAf,GAAmC,CAAvC,EAA0C;AAC/C;AACA,iBAAS,eAAe,iBAAxB;AACD;AACD,qBAAe,SAAf,CAAyB,IAAzB,CAA8B,QAA9B;AACA,WAAK,wBAAL,GAAgC,OAAhC,CAAwC,OAAxC;AACA,aAAO,YAAM;AACX,YAAM,iBAAiB,OAAK,gBAAL,CAAsB,EAAtB,CAAvB;AACA,YAAI,cAAJ,EAAoB;AAClB,cAAM,QAAQ,eAAe,SAAf,CAAyB,OAAzB,CAAiC,QAAjC,CAAd;AACA,cAAI,SAAS,CAAC,CAAd,EAAiB;AACf,2BAAe,SAAf,CAAyB,MAAzB,CAAgC,KAAhC,EAAuC,CAAvC;AACD;AACD,cAAI,eAAe,SAAf,CAAyB,MAAzB,IAAmC,CAAvC,EAA0C;AACxC,mBAAK,qBAAL,CAA2B,SAA3B,CAAqC,OAArC;AACA,mBAAO,OAAK,gBAAL,CAAsB,EAAtB,CAAP;AACD;AACF;AACF,OAZD;AAaD;;AAED;;;;yCACqB,O,EAAS;AAC5B,UAAI,KAAK,iBAAL,MAA4B,CAAhC,EAAmC;AACjC,eAAO,CAAP;AACD;AACD,UAAM,KAAK,aAAa,OAAb,CAAX;AACA,UAAM,iBAAiB,KAAK,gBAAL,CAAsB,EAAtB,CAAvB;AACA,aAAQ,kBAAkB,eAAe,iBAAlC,IAAwD,CAA/D;AACD;;AAED;;;;;;;;;+CAM2B,O,EAAS;AAClC,UAAI,KAAK,oBAAL,CAA0B,OAA1B,KAAsC,CAA1C,EAA6C;AAC3C,eAAO,IAAP;AACD;AACD,UAAM,KAAK,aAAa,OAAb,CAAX;AACA,UAAM,iBAAiB,KAAK,gBAAL,CAAsB,EAAtB,CAAvB;AACA,UAAI,cAAJ,EAAoB;AAClB,eAAO,2BAA4B,eAAe;AAAlD;AACD;AACD,aAAO,IAAP;AACD;;AAED;;;;;;;+CAI2B;AACzB,UAAI,CAAC,KAAK,qBAAV,EAAiC;AAC/B,aAAK,qBAAL,GAA6B,KAAK,2BAAL,EAA7B;AACD;AACD,aAAO,KAAK,qBAAZ;AACD;;AAED;;;;;;;kDAI8B;AAAA;;AAC5B;AAD4B,UAErB,GAFqB,GAEd,KAAK,MAFS,CAErB,GAFqB;;AAG5B,UAAI,uEAAoC,GAApC,CAAJ,EAA8C;AAC5C,eAAO,IAAI,IAAI,oBAAR,CACH,KAAK,sBAAL,CAA4B,IAA5B,CAAiC,IAAjC,CADG,EAEH,EAAC,0DAAD,EAFG,CAAP;AAGD;;AAED;AACA,UAAM,+BAA+B,+DACjC,KAAK,sBAAL,CAA4B,IAA5B,CAAiC,IAAjC,CADiC,EAEjC,EAAC,0DAAD,EAFiC,CAArC;AAGA,UAAM,SAAS,SAAT,MAAS,GAAM;AACnB,qCAA6B,IAA7B,CAAkC,OAAK,SAAL,CAAe,OAAf,EAAlC;AACD,OAFD;AAGA,WAAK,WAAL,CAAiB,KAAK,SAAL,CAAe,QAAf,CAAwB,MAAxB,CAAjB;AACA,WAAK,WAAL,CAAiB,KAAK,SAAL,CAAe,SAAf,CAAyB,MAAzB,CAAjB;AACA;AACA,iBAAW,MAAX;AACA,aAAO,4BAAP;AACD;;AAED;;;;;;;gDAI4B,O,EAAS;AAAA;;AAAA,UAC5B,GAD4B,GACrB,KAAK,MADgB,CAC5B,GAD4B;;AAEnC,UAAI,uEAAoC,GAApC,CAAJ,EAA8C;AAC5C;AACD;;AAED;AACA,UAAI,OAAO,QAAQ,YAAf,IAA+B,UAAnC,EAA+C;AAC7C;AACD;AACD,cAAQ,YAAR,GAAuB,YAAM;AAC3B,eAAO,OAAK,SAAL,CAAe,aAAf,CAA6B,OAA7B,CAAP;AACD,OAFD;AAGA,cAAQ,QAAR,GAAmB;AAAA,eAAM,IAAN;AAAA,OAAnB;AACD;;AAED;;;;;;;2CAIuB,O,EAAS;AAAA;;AAC9B,cAAQ,OAAR,CAAgB,kBAAU;AACxB,YAAI,eAAe,OAAO,gBAA1B;AACA;AACA;AACA,uBAAe,gCAAe,OAAO,aAAa,IAApB,CAAf,EACX,OAAO,aAAa,GAApB,CADW,EAEX,OAAO,aAAa,KAApB,CAFW,EAGX,OAAO,aAAa,MAApB,CAHW,CAAf;AAIA,eAAK,qBAAL,CACI,OAAO,MADX,EAEI,OAAO,iBAFX,EAGI,YAHJ;AAID,OAZD;AAaD;;AAED;;;;;;;;;0CAMsB,M,EAAQ,iB,EAAmB,gB,EAAkB;AACjE,0BAAoB,KAAK,GAAL,CAAS,KAAK,GAAL,CAAS,iBAAT,EAA4B,CAA5B,CAAT,EAAyC,CAAzC,CAApB;AACA,UAAM,KAAK,aAAa,MAAb,CAAX;AACA,UAAM,iBAAiB,KAAK,gBAAL,CAAsB,EAAtB,CAAvB;AACA,UAAI,cAAJ,EAAoB;AAClB,uBAAe,iBAAf,GAAmC,iBAAnC;AACA,uBAAe,gBAAf,GAAkC,gBAAlC;AACA,aAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,eAAe,SAAf,CAAyB,MAA7C,EAAqD,GAArD,EAA0D;AACxD,yBAAe,SAAf,CAAyB,CAAzB,EAA4B,iBAA5B;AACD;AACF;AACF;;;;EApP0C,iB;;AAwP7C;;;;;;IAIa,yB,WAAA,yB;;;AACX;;;;AAIA,qCAAY,MAAZ,EAAoB,KAApB,EAA2B;AAAA;;AAGzB;AAHyB,uJACnB,MADmB,EACX,OAAO,MADI;;AAIzB,WAAK,KAAL,GAAa,KAAb;;AAEA;AACA,WAAK,oBAAL,GAA4B,OAAK,MAAL,CAAY,cAAZ,EAA5B;;AAEA,WAAK,WAAL,CAAiB,OAAK,MAAL,CAAY,OAAZ,CACb,gBAAM,aAAN,CAAoB,MAAM,IAA1B,CADa,EAEb,OAAK,iBAAL,CAAuB,IAAvB,QAFa,CAAjB;AATyB;AAY1B;;AAED;;;;;mCACe;AACb,aAAO,KAAK,KAAL,CAAW,YAAX,EAAP;AACD;;AAED;;;;qCACiB;AACf,aAAO,KAAK,MAAL,CAAY,cAAZ,EAAP;AACD;;AAED;;;;4CACwB;AACtB,aAAO,KAAK,oBAAZ;AACD;;AAED;;;;;;;;;;;;;;;;uCAamB;AACjB,UAAM,cAAc,gBAAM,aAAN,CAAoB,KAAK,KAAL,CAAW,MAA/B,CAApB;AACA,aAAO,mBAAS,cAAT,CAAwB,KAAK,MAA7B,EAAqC,aAArC,CAAmD,WAAnD,CAAP;AACD;;AAED;;;;4BACQ,O,EAAS,Q,EAAU;AACzB,aAAO,KAAK,MAAL,CAAY,OAAZ,CAAoB,OAApB,EAA6B,QAA7B,CAAP;AACD;;AAED;;;;yCACqB,O,EAAS;AAC5B,UAAI,KAAK,iBAAL,MAA4B,CAAhC,EAAmC;AACjC,eAAO,CAAP;AACD;AACD,aAAO,KAAK,MAAL,CAAY,oBAAZ,CAAiC,OAAjC,CAAP;AACD;;AAED;;;;;;;+CAI2B,O,EAAS;AAClC,UAAI,KAAK,iBAAL,MAA4B,CAAhC,EAAmC;AACjC,eAAO,IAAP;AACD;AACD,aAAO,KAAK,MAAL,CAAY,0BAAZ,CAAuC,OAAvC,CAAP;AACD;;;;EA1E4C,iB;;;;;;;;qjBCnqB/C;;;;;;;;;;;;;;;;AAgBA;;AACA;;AACA;;;;AAEA;;;;;IAKa,e,WAAA,e;AACX;;;;AAIA,2BAAY,IAAZ,EAAkB,cAAlB,EAAkC;AAAA;;AAAA;;AAChC;AACA,SAAK,eAAL,GAAuB,cAAvB;;AAEA;;;;;;;;;;;AAWA,SAAK,KAAL,GAAa;AACX,4BAAsB,OAAO,KAAK,sBAAL,CAAP,IAAuC,GAAvC,IAA8C,CADzD;AAEX,4BAAsB,OAAO,KAAK,sBAAL,CAAP,IAAuC,GAAvC,IAA8C,CAFzD;AAGX,oBAAc,OAAO,KAAK,cAAL,CAAP,KAAgC,CAHnC;AAIX,oBAAc,OAAO,KAAK,cAAL,CAAP,KAAgC,QAJnC;AAKX,yBAAmB,OAAO,KAAK,mBAAL,CAAP,KAAqC,CAL7C;AAMX,yBAAmB,OAAO,KAAK,mBAAL,CAAP,KAAqC;AAN7C,KAAb;AAQA;AACA;AACA,QAAI,OAAO,KAAK,sBAAL,CAAP,EAAqC,IAArC,OAAgD,GAApD,EAAyD;AACvD,WAAK,KAAL,CAAW,oBAAX,GAAkC,CAAlC;AACD;;AAED;AACA,SAAK,OAAL,GAAe,KAAK,QAAL,MAAmB,IAAlC;;AAEA;AACA,SAAK,oBAAL,GAA4B,4BAA5B;;AAEA,QAAM,WAAW,uBAAjB;;AAEA;AACA,SAAK,aAAL,GAAqB,SAAS,OAA9B;;AAEA;AACA,SAAK,cAAL,GAAsB,SAAS,OAA/B;;AAEA,SAAK,aAAL,CAAmB,IAAnB,CAAwB,YAAM;AAC5B,YAAK,oBAAL,CAA0B,IAA1B;AACD,KAFD;;AAIA;AACA,SAAK,YAAL,GAAoB,EAApB;;AAEA;AACA,SAAK,YAAL,GAAoB,KAAK,GAAL,EAApB;;AAEA;AACA,SAAK,MAAL,GAAc,IAAd;;AAEA;AACA,SAAK,YAAL,GAAoB,IAApB;;AAEA;AACA,SAAK,yBAAL,GAAiC,IAAjC;;AAEA;AACA,SAAK,yBAAL,GAAiC,IAAjC;;AAEA;AACA,SAAK,kBAAL,GAA0B,KAA1B;;AAEA;AACA,SAAK,sBAAL,GAA8B,KAA9B;;AAEA;AACA,SAAK,eAAL,GAAuB,CAAvB;;AAEA;AACA,SAAK,yBAAL,GAAiC,CAAjC;;AAEA;AACA,SAAK,iBAAL,GAAyB,CAAzB;;AAEA;AACA,SAAK,cAAL,GAAsB,CAAtB;;AAEA;AACA,SAAK,aAAL,GAAqB,CAArB;;AAEA;AACA,SAAK,iBAAL,GAAyB,CAAzB;;AAEA;AACA,SAAK,gBAAL,GAAwB,CAAxB;;AAEA;AACA,SAAK,mBAAL,GAA2B,CAA3B;;AAEA;AACA,SAAK,qBAAL,GAA6B,CAA7B;;AAEA;AACA,SAAK,qBAAL,GAA6B,CAA7B;;AAEA;AACA,SAAK,sBAAL,GAA8B,CAA9B;;AAEA;AACA,SAAK,YAAL,GAAoB,KAApB;;AAEA;AACA,SAAK,iBAAL,GAAyB,IAAzB;AACD;;AAED;;;;;;;;;;;;6BAQS;AAAA;;AACP,sBAAM,MAAN,CAAa,CAAC,KAAK,cAAnB,EACI,8DADJ;AAEA,UAAM,WAAW,uBAAjB;AACA,WAAK,aAAL,GAAqB,SAAS,OAA9B;AACA,WAAK,cAAL,GAAsB,SAAS,OAA/B;;AAEA,WAAK,aAAL,CAAmB,IAAnB,CAAwB,YAAM;AAC5B,eAAK,oBAAL,CAA0B,IAA1B;AACD,OAFD;AAGA,WAAK,iBAAL,GAAyB,IAAzB;AACA,WAAK,sBAAL,GAA8B,KAA9B;AACA,WAAK,kBAAL,GAA0B,KAA1B;AACA,WAAK,eAAL,GAAuB,CAAvB;AACA,WAAK,yBAAL,GAAiC,CAAjC;AACA,WAAK,iBAAL,GAAyB,CAAzB;AACA,WAAK,iBAAL,GAAyB,CAAzB;AACA,WAAK,cAAL,GAAsB,CAAtB;AACA,WAAK,aAAL,GAAqB,CAArB;AACA,WAAK,gBAAL,GAAwB,CAAxB;AACA,WAAK,qBAAL,GAA6B,CAA7B;AACA,WAAK,qBAAL,GAA6B,CAA7B;AACA,WAAK,sBAAL,GAA8B,CAA9B;AACA,WAAK,YAAL,GAAoB,KAApB;AACD;;AAED;;;;;;mCAGe;AACb,UAAI,CAAC,KAAK,OAAV,EAAmB;AACjB,aAAK,OAAL;AACD;AACF;;AAED;;;;8BACU;AACR,UAAI,KAAK,yBAAT,EAAoC;AAClC,qBAAa,KAAK,yBAAlB;AACA,aAAK,yBAAL,GAAiC,IAAjC;AACD;AACD,UAAI,KAAK,iBAAT,EAA4B;AAC1B,qBAAa,KAAK,iBAAlB;AACA,aAAK,iBAAL,GAAyB,IAAzB;AACD;AACD,WAAK,YAAL,CAAkB,OAAlB,CAA0B,uBAAe;AACvC;AACD,OAFD;AAGA,WAAK,YAAL,CAAkB,MAAlB,GAA2B,CAA3B;AACA,WAAK,cAAL,GAAsB,IAAtB;AACA,UAAI,KAAK,oBAAT,EAA+B;AAC7B,aAAK,oBAAL,CAA0B,SAA1B;AACA,aAAK,oBAAL,GAA4B,IAA5B;AACD;AACF;;AAED;;;;;;;;gCAKY,O,EAAS;AACnB,WAAK,YAAL,CAAkB,IAAlB,CAAuB,OAAvB;AACD;;AAED;;;;;;;;mCAKe,O,EAAS;AACtB,UAAI,KAAK,oBAAT,EAA+B;AAC7B,aAAK,oBAAL,CAA0B,GAA1B,CAA8B,OAA9B;AACD;AACD,UAAI,KAAK,aAAL,IAAsB,CAAC,KAAK,cAAhC,EAAgD;AAC9C;AACA;AACD;AACF;;AAED;;;;;;;;;6BAMS,K,EAAO;AACd,WAAK,MAAL,GAAc,KAAd;AACA,WAAK,MAAL;AACD;;AAED;;;;;;;;mCAKe,Q,EAAU;AACvB,WAAK,YAAL,GAAoB,KAApB;AACA,WAAK,yBAAL,GAAiC,QAAjC;AACD;;AAED;;;;;;;qCAIiB;AACf,aAAO,KAAK,MAAL,GAAc,KAAK,eAAL,EAAd,GAAuC,CAA9C;AACD;;AAED;;;;;;6BAGS;AACP,WAAK,OAAL,CAAa,KAAK,cAAL,EAAb;AACD;;AAED;;;;;;;;6BAKS,S,EAAW;AAClB,aAAO;AACL;AACA,uBAAe,SAAS,KAAK,cAAd,EAA8B,SAA9B,CAFV;AAGL,sBAAc,SAAS,KAAK,aAAd,EAA6B,SAA7B,CAHT;AAIL,yBAAiB,SAAS,KAAK,gBAAd,EAAgC,SAAhC,CAJZ;AAKL,0BAAkB,SAAS,KAAK,iBAAd,EAAiC,SAAjC,CALb;;AAOL;AACA,kCAA0B,KAAK,yBAR1B;AASL,0BAAkB,KAAK,iBATlB;;AAWL;AACA,4BAAoB,KAAK,mBAAL,GAA2B,GAA3B,IAAkC,CAZjD;AAaL,8BAAsB,KAAK,qBAAL,GAA6B,GAb9C;AAcL,8BAAsB,KAAK,qBAAL,GAA6B;AAd9C,OAAP;AAgBD;;AAED;;;;;;;4BAIQ,U,EAAY;AAAA;;AAClB;AACA,UAAI,KAAK,YAAT,EAAuB;AACrB,YAAI,CAAC,KAAK,kBAAL,CAAwB,UAAxB,CAAL,EAA0C;AACxC;AACA,eAAK,MAAL;AACD;AACD;AACD;AACD,UAAI,CAAC,KAAK,cAAV,EAA0B;AACxB;AACD;AACD,UAAM,gBAAgB,KAAK,eAAL,CAAqB,UAArB,CAAtB;AACA,UAAI,aAAJ,EAAmB;AACjB,YAAI,KAAK,yBAAT,EAAoC;AAClC,uBAAa,KAAK,yBAAlB;AACA,eAAK,yBAAL,GAAiC,IAAjC;AACD;AACD,YAAI,KAAK,YAAT,EAAuB;AACrB;AACA,eAAK,cAAL;AACA,eAAK,cAAL,GAAsB,IAAtB;AACA,cAAI,KAAK,OAAT,EAAkB;AAChB,iBAAK,YAAL,GAAoB,IAApB;AACA,iBAAK,eAAL,GAAuB,CAAvB;AACD;AACF,SARD,MAQO,IAAI,KAAK,yBAAT,EAAoC;AACzC;AACA,cAAM,qBAAqB,KAAK,yBAAL,EAA3B;AACA,eAAK,yBAAL,GAAiC,IAAjC;AACA,6BAAmB,IAAnB,CAAwB,YAAM;AAC5B,mBAAK,YAAL,GAAoB,IAApB;AACA;AACA;AACA,mBAAK,MAAL;AACD,WALD;AAMD;AACF,OAxBD,MAwBO,IAAI,KAAK,kBAAL,IAA2B,CAAC,KAAK,yBAArC,EAAgE;AACrE;AACA,YAAM,aAAa,KAAK,kBAAL,EAAnB;AACA,YAAI,aAAa,CAAjB,EAAoB;AAClB,eAAK,yBAAL,GAAiC,WAAW,YAAM;AAChD,mBAAK,yBAAL,GAAiC,IAAjC;AACA,mBAAK,MAAL;AACD,WAHgC,EAG9B,UAH8B,CAAjC;AAID;AACF,OATM,MASA,IAAI,CAAC,KAAK,kBAAN,IAA4B,KAAK,yBAArC,EAAgE;AACrE,qBAAa,KAAK,yBAAlB;AACA,aAAK,yBAAL,GAAiC,IAAjC;AACD;AACF;;AAED;;;;;;;;uCAKmB,U,EAAY;AAC7B,sBAAM,MAAN,CAAa,cAAc,CAAd,IAAmB,cAAc,CAA9C,EACI,8BADJ,EACoC,UADpC;AAEA;AACA;AACA,UAAI,KAAK,KAAL,CAAW,oBAAX,IAAmC,CAAvC,EAA0C;AACxC,eAAO,cAAc,CAArB;AACD;AACD;AACA;AACA,UAAI,KAAK,KAAL,CAAW,oBAAX,IAAmC,CAAvC,EAA0C;AACxC,eAAO,cAAc,CAArB;AACD;AACD,aAAO,aAAa,KAAK,KAAL,CAAW,oBAAxB,IACH,cAAc,KAAK,KAAL,CAAW,oBAD7B;AAED;;AAED;;;;;;;;oCAKgB,U,EAAY;AAC1B,sBAAM,MAAN,CAAa,cAAc,CAAd,IAAmB,cAAc,CAA9C,EACI,8BADJ,EACoC,UADpC;AAEA,UAAM,MAAM,KAAK,GAAL,EAAZ;;AAEA,UAAI,aAAa,CAAjB,EAAoB;AAClB,aAAK,cAAL,GAAsB,KAAK,cAAL,IAAuB,GAA7C;AACA,aAAK,aAAL,GAAqB,GAArB;AACA;AACA;AACA,YAAI,CAAC,KAAK,mBAAN,IAA8B,MAAM,KAAK,YAAZ,GAA4B,GAA7D,EAAkE;AAChE,eAAK,mBAAL,GAA2B,UAA3B;AACD;AACF;;AAED,UAAM,wBAAwB,KAAK,kBAAnC;AACA,UAAM,sBACF,KAAK,sBAAL,GAA8B,MAAM,KAAK,sBAAzC,GAAkE,CADtE;AAEA,WAAK,kBAAL,GAA0B,KAAK,kBAAL,CAAwB,UAAxB,CAA1B;AACA,UAAI,KAAK,kBAAT,EAA6B;AAC3B,aAAK,sBAAL,GAA8B,IAA9B;AACA,YAAI,qBAAJ,EAA2B;AACzB;AACA,eAAK,iBAAL,IAA0B,mBAA1B;AACA,eAAK,eAAL,IAAwB,mBAAxB;AACA,eAAK,yBAAL,GACI,KAAK,GAAL,CAAS,KAAK,yBAAd,EAAyC,KAAK,eAA9C,CADJ;AAED,SAND,MAMO;AACL;AACA,0BAAM,MAAN,CAAa,CAAC,KAAK,sBAAnB;AACA,eAAK,iBAAL,GAAyB,KAAK,iBAAL,IAA0B,GAAnD;AACD;AACD,aAAK,sBAAL,GAA8B,GAA9B;AACA,aAAK,qBAAL,GACI,KAAK,qBAAL,GAA6B,CAA7B,GACE,KAAK,GAAL,CAAS,KAAK,qBAAd,EAAqC,UAArC,CADF,GAEE,UAHN;AAIA,aAAK,qBAAL,GACI,KAAK,GAAL,CAAS,KAAK,qBAAd,EAAqC,UAArC,CADJ;AAEA,aAAK,gBAAL,GAAwB,GAAxB;AACD,OArBD,MAqBO,IAAI,qBAAJ,EAA2B;AAChC;AACA,wBAAM,MAAN,CAAa,KAAK,sBAAL,GAA8B,CAA3C;;AAEA,aAAK,yBAAL,GAAiC,KAAK,GAAL,CAC7B,KAAK,yBADwB,EAE7B,KAAK,eAAL,GAAuB,mBAFM,CAAjC;;AAIA;AACA,aAAK,sBAAL,GAA8B,CAA9B;AACA,aAAK,iBAAL,IAA0B,mBAA1B;AACA,aAAK,eAAL,GAAuB,CAAvB,CAXgC,CAWN;AAC1B,aAAK,gBAAL,GAAwB,GAAxB;AACD;;AAED,aAAO,KAAK,sBAAL,IACF,KAAK,iBAAL,IAA0B,KAAK,KAAL,CAAW,YADnC,IAEF,KAAK,iBAAL,IAA0B,KAAK,KAAL,CAAW,YAFnC,IAGF,KAAK,yBAAL,IAAkC,KAAK,KAAL,CAAW,iBAH3C,IAIF,KAAK,yBAAL,IAAkC,KAAK,KAAL,CAAW,iBAJlD;AAKD;;AAED;;;;;;;;;yCAMqB;AACnB,UAAM,wBAAwB,KAAK,GAAL,CAC1B,KAAK,KAAL,CAAW,iBAAX,GAA+B,KAAK,eADV,EAC2B,CAD3B,CAA9B;AAEA,UAAM,mBAAmB,KAAK,GAAL,CACrB,KAAK,KAAL,CAAW,YAAX,GAA0B,KAAK,iBADV,EAC6B,CAD7B,CAAzB;AAEA,UAAM,cAAc,KAAK,GAAL,CAAS,qBAAT,EAAgC,gBAAhC,CAApB;AACA,aAAO,KAAK,GAAL,CACH,WADG,EAEH,yBAAyB,QAFtB,EAGH,oBAAoB,QAHjB,CAAP;AAID;;;;;;AAIH;;;;;;;;AAMA,SAAS,QAAT,CAAkB,IAAlB,EAAwB,QAAxB,EAAkC;AAChC,SAAO,QAAQ,QAAR,GAAmB,OAAO,QAA1B,GAAqC,CAA5C;AACD;;;AC9cnzbgB,M,GAAA,M;QAeA,gB,GAAA,gB;QAiBA,kB,GAAA,kB;QAoBA,Y,GAAA,Y;;AA9GhB;;AACA;;AACA;;AACA;;AAGA;AAtBA;;;;;;;;;;;;;;;;AAuBA,IAAM,qBAAqB,MAA3B;AACO,IAAM,gCAAY;AACvB,sBAAoB,SADG;AAEvB,sBAAoB,WAFG;AAGvB,oBAAkB,SAHK;AAIvB,oBAAkB;AAJK,CAAlB;;AAOP;AACO,IAAM,oCAAc;AACzB;AACA,oBAAkB,kBAFO;AAGzB,eAAa,aAHY;AAIzB,sBAAoB,oBAJK;AAKzB,iBAAe,eALU;AAMzB,sBAAoB,oBANK;AAOzB,gBAAc,cAPW;AAQzB,cAAY,YARa;AASzB,sBAAoB,oBATK;AAUzB,qBAAmB,mBAVM;AAWzB,cAAY,YAXa;AAYzB,YAAU,UAZe;AAazB,qBAAmB,mBAbM;;AAezB;AACA,sBAAoB,oBAhBK;AAiBzB,+BAA6B,6BAjBJ;AAkBzB,6BAA2B,2BAlBF;AAmBzB,sCAAoC,oCAnBX;;AAqBzB;AACA,kBAAgB,gBAtBS;AAuBzB,YAAU,UAvBe;;AAyBzB;AACA,gCAA8B,8BA1BL;AA2BzB,2BAAyB,yBA3BA;AA4BzB,6BAA2B,2BA5BF;;AA8BzB;AACA,wBAAsB;AA/BG,CAApB;;AAkCP;;;;;;;;AAQO,SAAS,MAAT,CAAgB,OAAhB,EAAyB,SAAzB,EAAoC,QAApC,EAA8C,mBAA9C,EAAmE;AACxE,SAAO,qDACH,OADG,EACM,SADN,EACiB,QADjB,EAC2B,mBAD3B,CAAP;AAED;;AAGD;;;;;;;;;AASO,SAAS,gBAAT,CAA0B,IAA1B,EAAgC,QAAhC,EACc;AAAA,MAD4B,IAC5B,uEADmC,mBACnC;AAAA,MAAnB,UAAmB,uEAAN,IAAM;;AACnB;AACA,MAAM,UAAU,IAAhB;AACA,UAAQ,MAAR,IAAkB,IAAlB;AACA,UAAQ,UAAR,IAAsB,QAAtB;AACA,SAAO,sBAAsB,cAAc,EAApC,IAA0C,KAAK,SAAL,CAAe,OAAf,CAAjD;AACD;;AAGD;;;;;;;AAOO,SAAS,kBAAT,CAA4B,OAA5B,EAAqC;AAC1C,MAAI,CAAC,aAAa,OAAb,CAAL,EAA4B;AAC1B,WAAO,IAAP;AACD;AACD,MAAM,WAAW,QAAQ,OAAR,CAAgB,GAAhB,CAAjB;AACA,kBAAM,MAAN,CAAa,YAAY,CAAC,CAA1B,EAA6B,oBAA7B,EAAmD,OAAnD;AACA,MAAI;AACF,WAAO,qBAAU,QAAQ,MAAR,CAAe,QAAf,CAAV,CAAP;AACD,GAFD,CAEE,OAAO,CAAP,EAAU;AACV,oBAAM,KAAN,CAAY,WAAZ,EAAyB,8BAA8B,OAAvD,EAAgE,CAAhE;AACA,WAAO,IAAP;AACD;AACF;;AAGD;;;;;AAKO,SAAS,YAAT,CAAsB,OAAtB,EAA+B;AACpC,SAAQ,OAAO,OAAP,IAAkB,QAAlB,IACJ,QAAQ,OAAR,CAAgB,kBAAhB,KAAuC,CADnC,IAEJ,QAAQ,OAAR,CAAgB,GAAhB,KAAwB,CAAC,CAF7B;AAGD;;AAED;AACO,IAAI,4DAAJ;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;QC1FgB,mB,GAAA,mB;QA2BA,c,GAAA,c;QAsBA,kB,GAAA,kB;;AAxFhB;;AACA;;AACA;;AAEA,IAAM,oBAAoB,qBAA1B;;AAEA;;;;AAtBA;;;;;;;;;;;;;;;;AA0BA,IAAM,aAAa;AACjB,0BAAwB,IADP;AAEjB,kBAAgB,IAFC;AAGjB,mBAAiB,IAHA;AAIjB,0BAAwB;AAJP,CAAnB;;AAOA;;;;;;;AAOA,SAAS,eAAT,CAAyB,EAAzB,EAA6B,GAA7B,EAAkC;AAAA,uBACb,0BAAc,GAAd,EAAmB,EAAnB,CADa;AAAA,MACzB,QADyB,kBACzB,QADyB;AAEhC;;;AACA,SAAO,YAAY,OAAZ,IAAuB,YAAY,QAA1C;AACD;;AAED;;;;;;;;;AASO,SAAS,mBAAT,CAA6B,OAA7B,EAAsC,GAAtC,EAA2C;AAChD,MAAI,mBAAmB,KAAvB;AACA,MAAI,aAAa,CAAjB;AACA,MAAI,KAAK,OAAT;AACA,KAAG;AACD,QAAI,WAAW,GAAG,OAAd,CAAJ,EAA4B;AAC1B;AACA;AACA;AACA,yBAAmB,KAAnB;AACD,KALD,MAKO,IAAI,gBAAgB,gBAAM,aAAN,CAAoB,EAApB,CAAhB,EAAyC,GAAzC,CAAJ,EAAmD;AACxD;AACA;AACA;AACA,yBAAmB,IAAnB;AACD;AACD,SAAK,GAAG,aAAR;AACD,GAbD,QAaS,MAAM,GAAG,OAAH,IAAc,MAb7B;AAcA,SAAO,CAAC,gBAAD,IAAqB,cAAc,CAA1C;AACD;;AAED;;;;;;AAMO,SAAS,cAAT,CAAwB,OAAxB,EAAiC;AACtC,MAAI,QAAQ,iBAAR,MAA+B,SAAnC,EAA8C;AAC5C,QAAI,KAAK,QAAQ,aAAjB;AACA,WAAO,MAAM,GAAG,OAAH,IAAc,MAA3B,EAAmC;AACjC,UAAI,WAAW,GAAG,OAAd,CAAJ,EAA4B;AAC1B,eAAO,QAAQ,iBAAR,IAA6B,GAAG,OAAvC;AACD;AACD,WAAK,GAAG,aAAR;AACD;AACD,YAAQ,iBAAR,IAA6B,IAA7B;AACD;AACD,SAAO,QAAQ,iBAAR,CAAP;AACD;;AAED;;;;;;;;AAQO,SAAS,kBAAT,CAA4B,IAA5B,EAAkC,MAAlC,EAA0C;AAC/C,MAAI;AACF,QAAM,cAAc,0CAA4B,IAA5B,EAAkC,MAAlC,EAA0C,aAA9D;AACA,QAAI,YAAY,QAAZ,IAAwB,QAA5B,EAAsC;AACpC,aAAO,OAAO,YAAY,aAAZ,EAAP,CAAP;AACD;AACF,GALD,CAKE,OAAO,CAAP,EAAU,CACX;AACD;AACA;AACA;AACA;AACA,SAAO,IAAP;AACD;;;;;;ACrHD;;;;;;;;;;;;;;;;AAiBA;;;;AAIO,IAAM,wCAAgB;;AAE3B;;;AAGA,SAAO,OALoB;;AAO3B;;;AAGA,YAAU,UAViB;;AAY3B;;;AAGA,YAAU,UAfiB;;AAiB3B;;;AAGA,cAAY,YApBe;;AAsB3B;;;AAGA,gBAAc,cAzBa;;AA2B3B;;;AAGA,UAAQ;AA9BmB,CAAtB;;;;;;ACrBP;;;;;;;;;;;;;;;;AAgBA;;;;;;;AAOA,IAAM,MAAM,KAAK,UAAL,IAAmB,EAA/B;;AAEA,IAAM,uBAAuB,OAAO,IAAI,sBAAJ,CAAP,IAAsC,QAAtC,GAC3B,IAAI,MAAJ,CAAW,IAAI,sBAAJ,CAAX,CAD2B,GACe,IAAI,sBAAJ,CAD5C;;AAGA,IAAM,gBAAgB,OAAO,IAAI,eAAJ,CAAP,IAA+B,QAA/B,GACpB,IAAI,MAAJ,CAAW,IAAI,eAAJ,CAAX,CADoB,GACe,IAAI,eAAJ,CADrC;;AAGA;AACO,IAAM,sBAAO;AAClB,cAAY,IAAI,eAAJ,KAAwB,2BADlB;AAElB,uBAAqB,IAAI,qBAAJ,KAA8B,gBAFjC;AAGlB,wBAAsB,wBAAwB,0BAH5B;AAIlB,OAAK,IAAI,QAAJ,KAAiB,4BAJJ;AAKlB;;;AAGA,iBAAe,iBACX,qDATc;AAUlB,kBAAgB,+BAVE;AAWlB,kBAAgB,IAAI,mBAAJ,KACZ,2CAZc;AAalB,YAAU,IAAI,UAAJ,KAAmB;AAbX,CAAb;;AAgBA,IAAM,0BAAS;AACpB;AADoB,CAAf;;;;;;QCZS,S,GAAA,S;QAyDA,S,GAAA,S;;AA7EhB;;AACA;;AAKA;;AAGA;;;;;;;;;;;AAWO,SAAS,SAAT,CAAmB,GAAnB,EAAwB,IAAxB,EAA8B;AACnC,MAAM,eAAe,6BAA6B,GAA7B,CAArB;AACA,MAAI,CAAC,YAAL,EAAmB;AACjB,WAAO,IAAP;AACD;AACD,MAAM,UAAU,aAAa,KAAb,CAAmB,GAAnB,CAAhB;AACA,OAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,QAAQ,MAA5B,EAAoC,GAApC,EAAyC;AACvC,QAAM,SAAS,QAAQ,CAAR,EAAW,IAAX,EAAf;AACA,QAAM,KAAK,OAAO,OAAP,CAAe,GAAf,CAAX;AACA,QAAI,MAAM,CAAC,CAAX,EAAc;AACZ;AACD;AACD,QAAI,gCAAsB,OAAO,SAAP,CAAiB,CAAjB,EAAoB,EAApB,EAAwB,IAAxB,EAAtB,KAAyD,IAA7D,EAAmE;AACjE,UAAM,QAAQ,OAAO,SAAP,CAAiB,KAAK,CAAtB,EAAyB,IAAzB,EAAd;AACA,aAAO,gCAAsB,KAAtB,EAA6B,KAA7B,CAAP;AACD;AACF;AACD,SAAO,IAAP;AACD;;AAED;;;;;;;AAxDA;;;;;;;;;;;;;;;;AA+DA,SAAS,4BAAT,CAAsC,GAAtC,EAA2C;AACzC,MAAI;AACF,WAAO,IAAI,QAAJ,CAAa,MAApB;AACD,GAFD,CAEE,OAAO,CAAP,EAAU;AACV;AACA;AACA;AACA,WAAO,EAAP;AACD;AACF;;AAED;;;;;;;;;;;;;;;;;;;AAmBO,SAAS,SAAT,CAAmB,GAAnB,EAAwB,IAAxB,EAA8B,KAA9B,EAAqC,cAArC,EAAqD,WAArD,EAAkE;AACvE,8BAA4B,GAA5B,EAAiC,WAAjC,EAA8C,IAA9C;AACA,MAAI,eAAe,YAAY,sBAA/B,EAAuD;AACrD,QAAM,QAAQ,IAAI,QAAJ,CAAa,QAAb,CAAsB,KAAtB,CAA4B,GAA5B,CAAd;AACA,QAAI,UAAS,MAAM,MAAM,MAAN,GAAe,CAArB,CAAb;AACA,SAAK,IAAI,IAAI,MAAM,MAAN,GAAe,CAA5B,EAA+B,KAAK,CAApC,EAAuC,GAAvC,EAA4C;AAC1C,gBAAS,MAAM,CAAN,IAAW,GAAX,GAAiB,OAA1B;AACA,mBAAa,GAAb,EAAkB,IAAlB,EAAwB,KAAxB,EAA+B,cAA/B,EAA+C,OAA/C;AACA,UAAI,UAAU,GAAV,EAAe,IAAf,KAAwB,KAA5B,EAAmC;AACjC;AACD;AACF;AACF;AACD,MAAI,SAAS,SAAb;AACA,MAAI,eAAe,YAAY,MAA/B,EAAuC;AACrC,aAAS,YAAY,MAArB;AACD;AACD,eAAa,GAAb,EAAkB,IAAlB,EAAwB,KAAxB,EAA+B,cAA/B,EAA+C,MAA/C;AACD;;AAED;;;;;;;;;AASA,SAAS,YAAT,CAAsB,GAAtB,EAA2B,IAA3B,EAAiC,KAAjC,EAAwC,cAAxC,EAAwD,MAAxD,EAAgE;AAC9D;AACA;AACA,MAAI,UAAU,gBAAd,EAAgC;AAC9B;AACA,YAAQ,QAAR;AACA,qBAAiB,CAAjB;AACD;AACD,MAAM,SAAS,mBAAmB,IAAnB,IAA2B,GAA3B,GACX,mBAAmB,KAAnB,CADW,GAEX,UAFW,IAGV,SAAS,cAAc,MAAvB,GAAgC,EAHtB,IAIX,YAJW,GAII,IAAI,IAAJ,CAAS,cAAT,EAAyB,WAAzB,EAJnB;AAKA,MAAI;AACF,QAAI,QAAJ,CAAa,MAAb,GAAsB,MAAtB;AACD,GAFD,CAEE,OAAO,MAAP,EAAe;AACf;AACA;AACA;AACD;AACF;;AAED;;;;;;;;AAQA,SAAS,2BAAT,CAAqC,GAArC,EAA0C,OAA1C,EAAmD,IAAnD,EAAyD;AACvD,MAAI,WAAW,QAAQ,kBAAvB,EAA2C;AACzC;AACD;AACD,MAAI,wBAAc,IAAI,QAAJ,CAAa,IAA3B,CAAJ,EAAsC;AACpC,UAAM,IAAI,KAAJ,CAAU,yDACV,IADA,CAAN;AAED;;AAED,MAAM,UAAU,6BAAmB,IAAI,QAAJ,CAAa,IAAhC,EAAsC,QAAtC,CAA+C,WAA/C,EAAhB;AACA,MAAM,QAAQ,6BAAmB,aAAK,GAAxB,EAA6B,QAA7B,CAAsC,WAAtC,EAAd;AACA,MAAI,WAAW,KAAX,IAAoB,sBAAS,OAAT,EAAkB,MAAM,KAAxB,CAAxB,EAAwD;AACtD,UAAM,IAAI,KAAJ,CAAU,wDACV,qBADU,GACc,IADxB,CAAN;AAED;AACF;;;;;;QCjJe,e,GAAA,e;QAkBA,e,GAAA,e;QAiCA,iB,GAAA,iB;QAWA,oB,GAAA,oB;AApFhB;;;;;;;;;;;;;;;;AAiBA;;;;;AAKO,SAAS,eAAT,CAAyB,GAAzB,EAA8B;AACnC,SAAO,IAAI,UAAJ,IAAkB,SAAlB,IAA+B,IAAI,UAAJ,IAAkB,eAAxD;AACD;;AAED;;;;;AAKA,SAAS,kBAAT,CAA4B,GAA5B,EAAiC;AAC/B,SAAO,IAAI,UAAJ,IAAkB,UAAzB;AACD;;AAED;;;;;AAKO,SAAS,eAAT,CAAyB,GAAzB,EAA8B,QAA9B,EAAwC;AAC7C,kBAAgB,GAAhB,EAAqB,eAArB,EAAsC,QAAtC;AACD;;AAED;;;;;;AAMA,SAAS,eAAT,CAAyB,GAAzB,EAA8B,OAA9B,EAAuC,QAAvC,EAAiD;AAC/C,MAAI,QAAQ,QAAQ,GAAR,CAAZ;AACA,MAAI,KAAJ,EAAW;AACT,aAAS,GAAT;AACD,GAFD,MAEO;AACL,QAAM,gBAAgB,SAAhB,aAAgB,GAAM;AAC1B,UAAI,QAAQ,GAAR,CAAJ,EAAkB;AAChB,YAAI,CAAC,KAAL,EAAY;AACV,kBAAQ,IAAR;AACA,mBAAS,GAAT;AACD;AACD,YAAI,mBAAJ,CAAwB,kBAAxB,EAA4C,aAA5C;AACD;AACF,KARD;AASA,QAAI,gBAAJ,CAAqB,kBAArB,EAAyC,aAAzC;AACD;AACF;;AAED;;;;;AAKO,SAAS,iBAAT,CAA2B,GAA3B,EAAgC;AACrC,SAAO,IAAI,OAAJ,CAAY,mBAAW;AAC5B,oBAAgB,GAAhB,EAAqB,OAArB;AACD,GAFM,CAAP;AAGD;;AAED;;;;;AAKO,SAAS,oBAAT,CAA8B,GAA9B,EAAmC;AACxC,SAAO,IAAI,OAAJ,CAAY,mBAAW;AAC5B,oBAAgB,GAAhB,EAAqB,kBAArB,EAAyC,OAAzC;AACD,GAFM,CAAP;AAGD;;;;;;;QCxCe,Y,GAAA,Y;QAkCA,mB,GAAA,mB;QAaA,W,GAAA,W;QAUA,kB,GAAA,kB;QAWA,a,GAAA,a;QAWA,c,GAAA,c;QAcA,Y,GAAA,Y;QAeA,oB,GAAA,oB;QAWA,sB,GAAA,sB;QAcA,2B,GAAA,2B;QAWA,e,GAAA,e;QAwBA,W,GAAA,W;QAkBA,O,GAAA,O;QAiBA,W,GAAA,W;QAiBA,Y,GAAA,Y;QAgBA,iB,GAAA,iB;QAgBA,O,GAAA,O;QAkBA,Y,GAAA,Y;QAkBA,Y,GAAA,Y;QAiBA,a,GAAA,a;QAkBA,gB,GAAA,gB;QAiBA,U,GAAA,U;QAqBA,mC,GAAA,mC;QA6BA,kB,GAAA,kB;QAWA,sB,GAAA,sB;QAaA,mB,GAAA,mB;QAWA,iB,GAAA,iB;QAWA,kB,GAAA,kB;QAYA,mB,GAAA,mB;QAwBA,sB,GAAA,sB;QA0BA,2B,GAAA,2B;QAyBA,0B,GAAA,0B;QAkBA,gB,GAAA,gB;QAkBA,qB,GAAA,qB;QAgBA,oB,GAAA,oB;QAoBA,a,GAAA,a;QAmBA,gB,GAAA,gB;QAuBA,e,GAAA,e;QAUA,iB,GAAA,iB;QAUA,K,GAAA,K;QAgBA,sB,GAAA,sB;QAYA,oB,GAAA,oB;QAYA,U,GAAA,U;QAoBA,Q,GAAA,Q;QAaA,S,GAAA,S;QASA,Y,GAAA,Y;QAeA,2B,GAAA,2B;QAuBA,e,GAAA,e;QAqBA,c,GAAA,c;QAoCA,mB,GAAA,mB;QAyBA,S,GAAA,S;;AA33BhB;;AACA;;AACA;;AACA;;AACA;;AACA;;AArBA;;;;;;;;;;;;;;;;AAuBA,IAAM,oBAAoB;AACxB,OAAK,OADmB;AAExB,OAAK,MAFmB;AAGxB,OAAK,MAHmB;AAIxB,OAAK,QAJmB;AAKxB,OAAK,QALmB;AAMxB,OAAK;AANmB,CAA1B;AAQA,IAAM,oBAAoB,gBAA1B;;AAEA;AACO,IAAM,8EACT,eADG;;AAGP;AACO,IAAM,gFACT,eADG;;AAGP;;;;;;;AAOO,SAAS,YAAT,CAAsB,MAAtB,EAA8B,SAA9B,EAAyC,QAAzC,EAAmD;AACxD,MAAI,UAAU,MAAV,CAAJ,EAAuB;AACrB;AACA;AACD;AACD;AACA,MAAM,MAAM,kBAAM,OAAO,aAAP,CAAqB,WAA3B,CAAZ;AACA,MAAI,IAAI,gBAAR,EAA0B;AACxB;AACA,QAAM,WAAW,IAAI,IAAI,gBAAR,CAAyB,YAAM;AAC9C,UAAI,UAAU,MAAV,CAAJ,EAAuB;AACrB,iBAAS,UAAT;AACA;AACD;AACF,KALgB,CAAjB;AAMA,aAAS,OAAT,CAAiB,MAAjB,EAAyB,EAAC,WAAW,IAAZ,EAAzB;AACD,GATD,MASO;AACL;AACA,QAAM,WAAW,IAAI,WAAJ,CAAgB,YAAM;AACrC,UAAI,UAAU,MAAV,CAAJ,EAAuB;AACrB,YAAI,aAAJ,CAAkB,QAAlB;AACA;AACD;AACF,KALgB,EAKd,kBAAmB,CALL,CAAjB;AAMD;AACF;;AAED;;;;;;;AAOO,SAAS,mBAAT,CAA6B,MAA7B,EAAqC,SAArC,EAAgD;AACrD,SAAO,IAAI,OAAJ,CAAY,mBAAW;AAC5B,iBAAa,MAAb,EAAqB,SAArB,EAAgC,OAAhC;AACD,GAFM,CAAP;AAGD;;AAED;;;;;;;AAOO,SAAS,WAAT,CAAqB,GAArB,EAA0B,QAA1B,EAAoC;AACzC,eAAa,IAAI,eAAjB,EAAkC;AAAA,WAAM,CAAC,CAAC,IAAI,IAAZ;AAAA,GAAlC,EAAoD,QAApD;AACD;;AAGD;;;;;AAKO,SAAS,kBAAT,CAA4B,GAA5B,EAAiC;AACtC,SAAO,IAAI,OAAJ,CAAY,mBAAW;AAC5B,gBAAY,GAAZ,EAAiB,OAAjB;AACD,GAFM,CAAP;AAGD;;AAGD;;;;AAIO,SAAS,aAAT,CAAuB,OAAvB,EAAgC;AACrC,MAAI,QAAQ,aAAZ,EAA2B;AACzB,YAAQ,aAAR,CAAsB,WAAtB,CAAkC,OAAlC;AACD;AACF;;AAGD;;;;AAIO,SAAS,cAAT,CAAwB,MAAxB,EAAgC;AACrC,SAAO,OAAO,UAAd,EAA0B;AACxB,WAAO,WAAP,CAAmB,OAAO,UAA1B;AACD;AACF;;AAGD;;;;;;;AAOO,SAAS,YAAT,CAAsB,IAAtB,EAA4B,EAA5B,EAAgC;AACrC,MAAM,OAAO,GAAG,aAAH,CAAiB,sBAAjB,EAAb;AACA,OAAK,IAAI,IAAI,KAAK,UAAlB,EAA8B,CAA9B,EAAiC,IAAI,EAAE,WAAvC,EAAoD;AAClD,SAAK,WAAL,CAAiB,EAAE,SAAF,CAAY,IAAZ,CAAjB;AACD;AACD,KAAG,WAAH,CAAe,IAAf;AACD;;AAED;;;;;;;AAOO,SAAS,oBAAT,CAA8B,IAA9B,EAAoC,OAApC,EAA6C,KAA7C,EAAoD;AACzD,MAAM,SAAS,QAAQ,MAAM,WAAd,GAA4B,KAAK,UAAhD;AACA,OAAK,YAAL,CAAkB,OAAlB,EAA2B,MAA3B;AACD;;AAED;;;;;;AAMO,SAAS,sBAAT,CAAgC,OAAhC,EAAyC,UAAzC,EAAqD;AAC1D,OAAK,IAAM,IAAX,IAAmB,UAAnB,EAA+B;AAC7B,YAAQ,YAAR,CAAqB,IAArB,EAA2B,WAAW,IAAX,CAA3B;AACD;AACD,SAAO,OAAP;AACD;;AAED;;;;;;;AAOO,SAAS,2BAAT,CAAqC,GAArC,EAA0C,OAA1C,EAAmD,UAAnD,EAA+D;AACpE,MAAM,UAAU,IAAI,aAAJ,CAAkB,OAAlB,CAAhB;AACA,SAAO,uBAAuB,OAAvB,EAAgC,UAAhC,CAAP;AACD;;AAED;;;;;;AAMO,SAAS,eAAT,CAAyB,IAAzB,EAA+B;AACpC,MAAM,YAAY,KAAK,WAAvB;AACA,MAAI,cAAc,SAAlB,EAA6B;AAC3B,WAAO,SAAP;AACD;;AAED;AACA,MAAI,IAAI,IAAR;AACA,KAAG;AACD,QAAI,YAAY,CAAZ,CAAJ;AACA,QAAI,EAAE,IAAN,EAAY;AACV,UAAI,EAAE,IAAN;AACD,KAFD,MAEO;AACL;AACD;AACF,GAPD,QAOS,IAPT;AAQA,SAAO,EAAE,QAAF,KAAe,KAAK,aAA3B;AACD;;AAED;;;;;AAKO,SAAS,WAAT,CAAqB,IAArB,EAA2B;AAChC,MAAI,KAAK,SAAL,CAAe,WAAnB,EAAgC;AAC9B;AACA,WAAO,KAAK,WAAL,MAAsB,IAA7B;AACD;AACD,MAAI,UAAJ;AACA,OAAK,IAAI,IAAT,EAAe,CAAC,CAAC,EAAE,UAAnB,EAA+B,IAAI,EAAE,UAArC,EAAiD,CAAE;AACnD,SAAO,CAAP;AACD;;AAED;;;;;;;;AAQO,SAAS,OAAT,CAAiB,OAAjB,EAA0B,QAA1B,EAAoC,UAApC,EAAgD;AACrD,OAAK,IAAI,KAAK,OAAd,EAAuB,MAAM,OAAO,UAApC,EAAgD,KAAK,GAAG,aAAxD,EAAuE;AACrE,QAAI,SAAS,EAAT,CAAJ,EAAkB;AAChB,aAAO,EAAP;AACD;AACF;AACD,SAAO,IAAP;AACD;;AAGD;;;;;;;AAOO,SAAS,WAAT,CAAqB,IAArB,EAA2B,QAA3B,EAAqC;AAC1C,OAAK,IAAI,IAAI,IAAb,EAAmB,CAAnB,EAAsB,IAAI,EAAE,UAA5B,EAAwC;AACtC,QAAI,SAAS,CAAT,CAAJ,EAAiB;AACf,aAAO,CAAP;AACD;AACF;AACD,SAAO,IAAP;AACD;;AAGD;;;;;;;AAOO,SAAS,YAAT,CAAsB,OAAtB,EAA+B,OAA/B,EAAwC;AAC7C,MAAI,QAAQ,OAAZ,EAAqB;AACnB,WAAO,QAAQ,OAAR,CAAgB,OAAhB,CAAP;AACD;AACD,YAAU,QAAQ,WAAR,EAAV;AACA,SAAO,QAAQ,OAAR,EAAiB,cAAM;AAC5B,WAAO,GAAG,OAAH,IAAc,OAArB;AACD,GAFM,CAAP;AAGD;;AAED;;;;;;AAMO,SAAS,iBAAT,CAA2B,OAA3B,EAAoC,QAApC,EAA8C;AACnD,MAAI,QAAQ,OAAZ,EAAqB;AACnB,WAAO,QAAQ,OAAR,CAAgB,QAAhB,CAAP;AACD;;AAED,SAAO,QAAQ,OAAR,EAAiB,cAAM;AAC5B,WAAO,QAAQ,EAAR,EAAY,QAAZ,CAAP;AACD,GAFM,CAAP;AAGD;;AAED;;;;;;AAMO,SAAS,OAAT,CAAiB,EAAjB,EAAqB,QAArB,EAA+B;AACpC,MAAM,UAAU,GAAG,OAAH,IACZ,GAAG,qBADS,IAEZ,GAAG,kBAFS,IAGZ,GAAG,iBAHS,IAIZ,GAAG,gBAJP;AAKA,MAAI,OAAJ,EAAa;AACX,WAAO,QAAQ,IAAR,CAAa,EAAb,EAAiB,QAAjB,CAAP;AACD;AACD,SAAO,KAAP,CAToC,CAStB;AACf;;AAED;;;;;;AAMO,SAAS,YAAT,CAAsB,OAAtB,EAA+B,OAA/B,EAAwC;AAC7C,MAAI,iBAAJ;AACA;AACA,MAAI,OAAO,QAAQ,oBAAf,KAAwC,UAA5C,EAAwD;AACtD,eAAW,QAAQ,oBAAR,CAA6B,OAA7B,CAAX;AACD,GAFD,MAEO;AACL,eAAW,SAAQ,MAAM,gBAAd,CAA+B,OAA/B,CAAX;AACD;AACD,SAAQ,YAAY,SAAS,CAAT,CAAb,IAA6B,IAApC;AACD;;AAGD;;;;;;AAMO,SAAS,YAAT,CAAsB,MAAtB,EAA8B,QAA9B,EAAwC;AAC7C,OAAK,IAAI,QAAQ,OAAO,iBAAxB,EAA2C,KAA3C,EACE,QAAQ,MAAM,kBADhB,EACoC;AAClC,QAAI,SAAS,KAAT,CAAJ,EAAqB;AACnB,aAAO,KAAP;AACD;AACF;AACD,SAAO,IAAP;AACD;;AAGD;;;;;;AAMO,SAAS,aAAT,CAAuB,MAAvB,EAA+B,QAA/B,EAAyC;AAC9C,MAAM,WAAW,EAAjB;AACA,OAAK,IAAI,QAAQ,OAAO,iBAAxB,EAA2C,KAA3C,EACE,QAAQ,MAAM,kBADhB,EACoC;AAClC,QAAI,SAAS,KAAT,CAAJ,EAAqB;AACnB,eAAS,IAAT,CAAc,KAAd;AACD;AACF;AACD,SAAO,QAAP;AACD;;AAGD;;;;;;AAMO,SAAS,gBAAT,CAA0B,MAA1B,EAAkC,QAAlC,EAA4C;AACjD,OAAK,IAAI,QAAQ,OAAO,gBAAxB,EAA0C,KAA1C,EACE,QAAQ,MAAM,sBADhB,EACwC;AACtC,QAAI,SAAS,KAAT,CAAJ,EAAqB;AACnB,aAAO,KAAP;AACD;AACF;AACD,SAAO,IAAP;AACD;;AAED;;;;;;;AAOO,SAAS,UAAT,CAAoB,MAApB,EAA4B,QAA5B,EAAsC;AAC3C,MAAM,QAAQ,EAAd;AACA,OAAK,IAAI,QAAQ,OAAO,UAAxB,EAAoC,KAApC,EACE,QAAQ,MAAM,WADhB,EAC6B;AAC3B,QAAI,SAAS,KAAT,CAAJ,EAAqB;AACnB,YAAM,IAAN,CAAW,KAAX;AACD;AACF;AACD,SAAO,KAAP;AACD;;AAED;;;;AAIA,IAAI,+BAAJ;;AAEA;;;;AAIO,SAAS,mCAAT,CAA6C,GAA7C,EAAkD;AACvD,2BAAyB,GAAzB;AACD;;AAED;;;;;AAKA,SAAS,wBAAT,CAAkC,MAAlC,EAA0C;AACxC,MAAM,MAAM,OAAO,aAAnB;AACA,MAAI;AACF,QAAM,cAAc,IAAI,aAAJ,CAAkB,KAAlB,CAApB;AACA,QAAM,YAAY,IAAI,aAAJ,CAAkB,KAAlB,CAAlB;AACA,gBAAY,WAAZ,CAAwB,SAAxB;AACA;AACA;AACA,WAAO,aAAY,MAAM,aAAlB,CAAgC,YAAhC,MAAkD,SAAzD;AACD,GAPD,CAOE,OAAO,CAAP,EAAU;AACV,WAAO,KAAP;AACD;AACF;;AAED;;;;;;AAMO,SAAS,kBAAT,CAA4B,MAA5B,EAAoC,IAApC,EAA0C;AAC/C,SAAO,oBAAmB,MAAnB,CAA0B,MAA1B,UAAwC,IAAxC,OAAP;AACD;;AAGD;;;;;;AAMO,SAAS,sBAAT,CAAgC,MAAhC,EAAwC,IAAxC,EAA8C;AACnD,SAAO,iBAAiB,MAAjB,EAAyB,cAAM;AACpC,WAAO,GAAG,YAAH,CAAgB,IAAhB,CAAP;AACD,GAFM,CAAP;AAGD;;AAGD;;;;;;AAMO,SAAS,mBAAT,CAA6B,MAA7B,EAAqC,IAArC,EAA2C;AAChD,SAAO,uBAAsB,MAAtB,CAA6B,MAA7B,UAA2C,IAA3C,OAAP;AACD;;AAGD;;;;;;AAMO,SAAS,iBAAT,CAA2B,MAA3B,EAAmC,OAAnC,EAA4C;AACjD,SAAO,oBAAmB,MAAnB,CAA0B,MAA1B,SAAuC,OAAvC,CAAP;AACD;;AAGD;;;;;;AAMO,SAAS,kBAAT,CAA4B,MAA5B,EAAoC,OAApC,EAA6C;AAClD,SAAO,uBAAsB,MAAtB,CAA6B,MAA7B,SAA0C,OAA1C,CAAP;AACD;;AAGD;;;;;;;AAOO,SAAS,mBAAT,CAA6B,IAA7B,EAAmC,QAAnC,EAA6C;AAClD,MAAI,0BAA0B,IAA9B,EAAoC;AAClC,6BAAyB,yBAAyB,IAAzB,CAAzB;AACD;AACD,MAAI,sBAAJ,EAA4B;AAC1B,WAAO,MAAK,MAAM,aAAX,aAAmC,QAAnC,CAAP;AACD;;AAED;AACA,MAAM,SAAS,kBAAf;AACA,OAAK,SAAL,CAAe,GAAf,CAAmB,MAAnB;AACA,MAAM,UAAU,MAAK,MAAM,aAAX,OAA6B,MAA7B,SAAuC,QAAvC,CAAhB;AACA,OAAK,SAAL,CAAe,MAAf,CAAsB,MAAtB;AACA,SAAO,OAAP;AACD;;AAGD;;;;;;;AAOO,SAAS,sBAAT,CAAgC,IAAhC,EAAsC,QAAtC,EAAgD;AACrD,MAAI,0BAA0B,IAA9B,EAAoC;AAClC,6BAAyB,yBAAyB,IAAzB,CAAzB;AACD;AACD,MAAI,sBAAJ,EAA4B;AAC1B,WAAO,MAAK,MAAM,gBAAX,aAAsC,QAAtC,CAAP;AACD;;AAED;AACA,MAAM,SAAS,kBAAf;AACA,OAAK,SAAL,CAAe,GAAf,CAAmB,MAAnB;AACA,MAAM,WAAW,MAAK,MAAM,gBAAX,OAAgC,MAAhC,SAA0C,QAA1C,CAAjB;AACA,OAAK,SAAL,CAAe,MAAf,CAAsB,MAAtB;AACA,SAAO,QAAP;AACD;;AAGD;;;;;;;;;AASO,SAAS,2BAAT,CAAqC,OAArC,EAA8C,wBAA9C,EACL,gBADK,EACa;AAClB,MAAM,uBAAuB,4BAA6B;AAAA,WAAO,GAAP;AAAA,GAA1D;AADkB,MAEX,OAFW,GAEA,OAFA,CAEX,OAFW;;AAGlB,MAAM,SAAS,mBAAf;AACA,MAAM,eAAe,mBAAmB,gBAAnB,GAAsC,YAA3D;AACA,OAAK,IAAM,GAAX,IAAkB,OAAlB,EAA2B;AACzB,QAAM,WAAU,IAAI,KAAJ,CAAU,YAAV,CAAhB;AACA,QAAI,QAAJ,EAAa;AACX,UAAM,QAAQ,SAAQ,CAAR,EAAW,CAAX,EAAc,WAAd,KAA8B,SAAQ,CAAR,EAAW,MAAX,CAAkB,CAAlB,CAA5C;AACA,aAAO,qBAAqB,KAArB,CAAP,IAAsC,QAAQ,GAAR,CAAtC;AACD;AACF;AACD,SAAO,MAAP;AACD;;AAED;;;;;;;;;AASO,SAAS,0BAAT,CAAoC,OAApC,EAA6C,YAA7C,EAA2D;AAChE,MAAI,iBAAiB,OAArB;AACA,KAAG;AACD,QAAI,eAAe,WAAnB,EAAgC;AAC9B,aAAO,IAAP;AACD;AACF,GAJD,QAIS,CAAC,iBAAiB,eAAe,UAAjC,KACC,kBAAkB,YAL5B;AAMA,SAAO,KAAP;AACD;;AAGD;;;;;;AAMO,SAAS,gBAAT,CAA0B,KAA1B,EAAiC,SAAjC,EAA4C;AACjD,MAAM,YAAY,EAAlB;AACA,OAAK,IAAI,WAAW,MAAM,aAA1B,EAAyC,QAAzC,EACE,WAAW,SAAS,aADtB,EACqC;AACnC,QAAI,UAAU,QAAV,CAAJ,EAAyB;AACvB,gBAAU,IAAV,CAAe,QAAf;AACD;AACF;AACD,SAAO,SAAP;AACD;;AAGD;;;;;;AAMO,SAAS,qBAAT,CAA+B,KAA/B,EAAsC,OAAtC,EAA+C;AACpD,YAAU,QAAQ,WAAR,EAAV;AACA,SAAO,iBAAiB,KAAjB,EAAwB,cAAM;AACnC,WAAO,GAAG,OAAH,IAAc,OAArB;AACD,GAFM,CAAP;AAGD;;AAED;;;;;;;;;AASO,SAAS,oBAAT,CAA8B,QAA9B,EAAwC;AAC7C,MAAI,aAAa,QAAjB,EAA2B;AACzB,WAAO,SAAS,OAAT,CAAiB,SAAjB,CAA2B,IAA3B,CAAP;AACD,GAFD,MAEO;AACL,QAAM,UAAU,SAAS,aAAT,CAAuB,sBAAvB,EAAhB;AACA,iBAAa,QAAb,EAAuB,OAAvB;AACA,WAAO,OAAP;AACD;AACF;;AAED;;;;;;;;;;AAUO,SAAS,aAAT,CAAuB,QAAvB,EAAiC,EAAjC,EAAqC;AAC1C,OAAK,IAAI,IAAI,CAAR,EAAW,KAAhB,EAAuB,CAAC,QAAQ,SAAS,CAAT,CAAT,MAA0B,SAAjD,EAA4D,GAA5D,EAAiE;AAC/D,OAAG,KAAH,EAAU,CAAV;AACD;AACF;;AAED;;;;;;;;;;;;;AAaO,SAAS,gBAAT,CAA0B,GAA1B,EAA+B,GAA/B,EAAoC,MAApC,EAA4C,YAA5C,EAA0D;AAC/D;AACA;AACA;AACA,MAAI,YAAJ;AACA,MAAI;AACF,UAAM,IAAI,IAAJ,CAAS,GAAT,EAAc,MAAd,EAAsB,YAAtB,CAAN;AACD,GAFD,CAEE,OAAO,CAAP,EAAU;AACV,oBAAM,KAAN,CAAY,KAAZ,EAAmB,gCAAnB,EAAqD,MAArD,EAA6D,CAA7D;AACD;;AAED;AACA,MAAI,CAAC,GAAD,IAAQ,UAAU,MAAtB,EAA8B;AAC5B,UAAM,IAAI,IAAJ,CAAS,GAAT,EAAc,MAAd,CAAN;AACD;AACD,SAAO,GAAP;AACD;;AAED;;;;;AAKO,SAAS,eAAT,CAAyB,OAAzB,EAAkC;AACvC,SAAO,QAAQ,OAAR,IAAmB,QAAnB,IACG,QAAQ,YAAR,CAAqB,MAArB,EAA6B,WAA7B,MAA8C,kBADxD;AAED;;AAED;;;;;AAKO,SAAS,iBAAT,CAA2B,OAA3B,EAAoC;AACzC,SAAO,QAAQ,OAAR,IAAmB,QAAnB,IACH,QAAQ,YAAR,CAAqB,MAArB,EAA6B,WAA7B,MAA8C,qBADlD;AAED;;AAED;;;;;AAKO,SAAS,KAAT,CAAe,GAAf,EAAoB;AACzB,MAAM,MAAM,IAAI,IAAJ,CAAS,YAAT,CAAsB,KAAtB,KACM,IAAI,eAAJ,CAAoB,YAApB,CAAiC,KAAjC,CADN,IAEM,KAFlB;AAGA,SAAO,OAAO,KAAd;AACD;;AAGD;;;;;;;;AAQO,SAAS,sBAAT,CAAgC,KAAhC,EAAuC;AAC5C,SAAO,0BAAU,KAAV,CAAP;AACD;;AAED;;;;;;;;AAQO,SAAS,oBAAT,CAA8B,KAA9B,EAAqC;AAC1C,MAAM,UAAU,OAAO,KAAP,CAAhB;AACA;AACA,kBAAM,MAAN,CAAa,QAAQ,OAAR,CAAgB,GAAhB,MAAyB,CAAC,CAAvC;AACA,SAAO,OAAP;AACD;;AAED;;;;;AAKO,SAAS,UAAT,CAAoB,IAApB,EAA0B;AAC/B,MAAI,CAAC,IAAL,EAAW;AACT,WAAO,IAAP;AACD;AACD,SAAO,KAAK,OAAL,CAAa,iBAAb,EAAgC,cAAhC,CAAP;AACD;;AAED;;;;AAIA,SAAS,cAAT,CAAwB,CAAxB,EAA2B;AACzB,SAAO,kBAAkB,CAAlB,CAAP;AACD;;AAED;;;;;AAKO,SAAS,QAAT,CAAkB,OAAlB,EAA2B;AAChC,MAAI;AACF,aAAQ,MAAM,KAAd;AACD,GAFD,CAEE,OAAO,CAAP,EAAU;AACV;AACD;AACF;;AAED;;;;;AAKO,SAAS,SAAT,CAAmB,GAAnB,EAAwB;AAC7B,SAAO,IAAI,MAAJ,IAAc,IAAI,MAAJ,IAAc,GAAnC;AACD;;AAED;;;;;AAKO,SAAS,YAAT,CAAsB,OAAtB,EAA+B;AACpC,MAAM,MAAM,QAAQ,OAApB;AACA;AACA;AACA,SAAO,wBAAW,GAAX,EAAgB,MAAhB;AACH;AACA,IAAE,OAAO,2BAAP,IAAsC,OAAO,UAA/C,CAFJ;AAGD;;AAED;;;;;;AAMO,SAAS,2BAAT,CAAqC,OAArC,EAA8C;AACnD,kBAAM,MAAN,CAAa,aAAa,OAAb,CAAb,EAAoC,2BAApC;AACA,MAAI,QAAQ,eAAZ,EAA6B;AAC3B;AACA,WAAO,QAAQ,OAAR,CAAgB,OAAhB,CAAP;AACD;AACD;AACA;AACA,MAAI,CAAC,QAAQ,gCAAR,CAAL,EAAgD;AAC9C,QAAM,WAAW,uBAAjB;AACA,YAAQ,gCAAR,IAA4C,SAAS,OAArD;AACA,YAAQ,iCAAR,IAA6C,SAAS,OAAtD;AAED;;AAED,SAAO,QAAQ,gCAAR,CAAP;AACD;;AAED;;;;;AAKO,SAAS,eAAT,CAAyB,OAAzB,EAAkC;AACvC,MAAM,YAAY,QAAQ,iBAAR,IACd,QAAQ,iBADM,IAEd,QAAQ,uBAFM,IAGd,QAAQ,uBAHM,IAId,QAAQ,qBAJM,IAKd,QAAQ,qBALM,IAMd,QAAQ,mBANM,IAOd,QAAQ,mBAPM,IAQd,QAAQ,oBARM,IASd,QAAQ,oBATZ;AAUA,MAAI,SAAJ,EAAe;AACb,cAAU,IAAV,CAAe,OAAf;AACD;AACF;;AAED;;;;;AAKO,SAAS,cAAT,CAAwB,OAAxB,EAAiC;AACtC,MAAI,SAAS,QAAQ,gBAAR,IACG,QAAQ,cADX,IAEG,QAAQ,cAFX,IAGG,QAAQ,oBAHX,IAIG,QAAQ,oBAJX,IAKG,QAAQ,sBALX,IAMG,QAAQ,mBANX,IAOG,QAAQ,gBAPxB;AAQA,MAAI,MAAJ,EAAY;AACV,WAAO,IAAP,CAAY,OAAZ;AACA;AACD;AACD,MAAI,QAAQ,aAAZ,EAA2B;AACzB,aAAS,QAAQ,aAAR,CAAsB,gBAAtB,IACG,QAAQ,aAAR,CAAsB,cADzB,IAEG,QAAQ,aAAR,CAAsB,cAFzB,IAGG,QAAQ,aAAR,CAAsB,oBAHzB,IAIG,QAAQ,aAAR,CAAsB,oBAJzB,IAKG,QAAQ,aAAR,CAAsB,sBALzB,IAMG,QAAQ,aAAR,CAAsB,mBANzB,IAOG,QAAQ,aAAR,CAAsB,gBAPlC;AAQD;AACD,MAAI,MAAJ,EAAY;AACV,WAAO,IAAP,CAAY,QAAQ,aAApB;AACA;AACD;AACF;;AAGD;;;;;;AAMO,SAAS,mBAAT,CAA6B,OAA7B,EAAsC;AAC3C,MAAM,eAAe,QAAQ,0BAA7B;AACA,MAAI,YAAJ,EAAkB;AAChB,WAAO,IAAP;AACD;AACD,MAAI,QAAQ,aAAZ,EAA2B;AACzB,QAAM,oBAAoB,QAAQ,aAAR,CAAsB,iBAAtB,IACd,QAAQ,aAAR,CAAsB,uBADR,IAEd,QAAQ,aAAR,CAAsB,oBAFR,IAGd,QAAQ,8BAHpB;AAIA,QAAI,qBAAqB,OAAzB,EAAkC;AAChC,aAAO,IAAP;AACD;AACF;AACD,SAAO,KAAP;AACD;;AAED;;;;;;;;AAQO,SAAS,SAAT,CAAmB,OAAnB,EAA4B;AACjC,SAAO,EAAE,QAAQ,QAAR,IAAoB,QAAQ,OAAR,EAAiB,WAAjB,CAAtB,CAAP;AACD;;;;;;QCj2Be,iB,GAAA,iB;QAgBA,4B,GAAA,4B;QAoCA,uB,GAAA,uB;QAkBA,kC,GAAA,kC;QAkCA,8C,GAAA,8C;QA4CA,sB,GAAA,sB;QAoBA,uB,GAAA,uB;;AApMhB;;IAAY,G;;AACZ;;AAUA;;AACA;;;;AAEA;;;;;;;;;;;;;;AA9BA;;;;;;;;;;;;;;;;AA4CO,SAAS,iBAAT,CAA2B,GAA3B,EAAgC,EAAhC,EAAoC,SAApC,EAA+C,WAA/C,EAA4D;AACjE,SAAO,6BAA6B,GAA7B,EAAkC,EAAlC,EAAsC,SAAtC,EAAiD,WAAjD,EAA8D,IAA9D,CACH;AAAA,WAAW,cAAc,OAAd,EAAuB,EAAvB,EAA2B,SAA3B,CAAX;AAAA,GADG,CAAP;AAED;;AAED;;;;;;;;;;;AAWO,SAAS,4BAAT,CAAsC,GAAtC,EAA2C,EAA3C,EAA+C,SAA/C,EAA0D,WAA1D,EAAuE;AAC5E,MAAM,IAAI,sCAAwB,GAAxB,EAA6B,EAA7B,CAAV;AACA,MAAI,CAAJ,EAAO;AACL,WAAO,iCAAkC;AAAzC;AACD;AACD,SAAO,+BAA+B,GAA/B,EAAoC,EAApC,EAAwC,SAAxC,EAAmD,WAAnD,CAAP;AACD;;AAED;;;;;AAKA,SAAS,kBAAT,CAA4B,GAA5B,EAAiC,WAAjC,EAA8C;AAC5C;AACA,MAAI,CAAC,IAAI,mBAAT,EAA8B;AAC5B,WAAO,KAAP;AACD;AACD,SAAO,CAAC,CAAC,IAAI,mBAAJ,CAAwB,WAAxB,CAAT;AACD;;AAGD;;;;;;;;;;;;;;AAcO,SAAS,uBAAT,CAAiC,eAAjC,EAAkD,EAAlD,EAAsD,SAAtD,EACL,WADK,EACQ;AACb,SAAO,mCACH,eADG,EACc,EADd,EACkB,SADlB,EAC6B,WAD7B,EAEF,IAFE,CAEG;AAAA,WAAW,cAAc,OAAd,EAAuB,EAAvB,EAA2B,SAA3B,CAAX;AAAA,GAFH,CAAP;AAGD;;AAED;;;;;;;;;;;AAWO,SAAS,kCAAT,CACL,eADK,EACY,EADZ,EACgB,SADhB,EAC2B,WAD3B,EACwC;AAC7C,MAAM,SAAS,wBAAU,eAAV,CAAf;AACA,MAAM,IAAI,4CAA8B,eAA9B,EAA+C,EAA/C,CAAV;AACA,MAAI,CAAJ,EAAO;AACL,WAAO,iCAAkC;AAAzC;AACD;;AAED,SAAO,OAAO,iBAAP,GACF,IADE,CACG;AAAA,WAAM,0BACR,OAAO,GADC,EACI,SADJ,EAER,OAAO,WAAP,EAFQ,CAAN;AAAA,GADH,EAIF,IAJE,CAIG,YAAM;AACV;AACA;AACA,QAAI,WAAJ,EAAiB;AACf,aAAO,4CAA8B,eAA9B,EAA+C,EAA/C,CAAP;AACD,KAFD,MAEO,IAAI,mBAAmB,OAAO,GAA1B,EAA+B,SAA/B,CAAJ,EAA+C;AACpD,aAAO,sCAAwB,eAAxB,EAAyC,EAAzC,CAAP;AACD;AACD,WAAO,IAAP;AACD,GAbE,CAAP;AAcD;;AAED;;;;;;;;;;AAUO,SAAS,8CAAT,CACL,eADK,EACY,EADZ,EACgB,SADhB,EAC2B;AAChC,MAAM,IAAI,mDAAqC,eAArC,EAAsD,EAAtD,CAAV;AACA,MAAI,CAAJ,EAAO;AACL,WAAO,iCAAkC,QAAQ,OAAR,CAAgB,CAAhB;AAAzC;AACD;AACD;AACA,MAAI,gBAAgB,QAApB,EAA8B;AAC5B,QAAM,MAAM,kBAAM,gBAAgB,aAAhB,CAA8B,WAApC,CAAZ;AACA,QAAM,SAAS,2BAAa,GAAb,CAAf;AACA;AACA;AACA;AACA,QAAI,QAAQ,MAAZ,EAAoB;AAClB,aAAO,+BAA+B,GAA/B,EAAoC,EAApC,EAAwC,SAAxC,CAAP;AACD,KAFD,MAEO;AACL;AACA,aAAO,mCAAmC,eAAnC,EAAoD,EAApD,EAAwD,SAAxD,CAAP;AACD;AACF;AACD,SAAO,iCAAkC,QAAQ,OAAR,CAAgB,IAAhB;AAAzC;AACD;;AAED;;;;;;;;AAQA,SAAS,aAAT,CAAuB,OAAvB,EAAgC,EAAhC,EAAoC,SAApC,EAA+C;AAC7C,SAAO,uBAAwB,iBAAO,MAAP,CAAc,OAAd,EAC3B,yDACA,wDADA,GAEA,uDAH2B,EAI3B,EAJ2B,EAIvB,SAJuB,EAIZ,SAJY,EAID,SAJC;AAA/B;AAKD;;AAED;;;;;AAKO,SAAS,sBAAT,CAAgC,IAAhC,EAAsC;AAC3C;AACA,MAAI,CAAC,IAAL,EAAW;AACT,WAAO,EAAP;AACD;AACD,MAAM,UAAU,EAAhB;AACA,MAAM,OAAO,KAAK,gBAAL,CAAsB,wBAAtB,CAAb;AACA,OAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,KAAK,MAAzB,EAAiC,GAAjC,EAAsC;AACpC,YAAQ,IAAR,CAAa,KAAK,CAAL,EAAQ,YAAR,CAAqB,gBAArB,CAAb;AACD;AACD,SAAO,OAAP;AACD;;AAED;;;;;;;AAOO,SAAS,uBAAT,CAAiC,MAAjC,EAAyC,WAAzC,EAAsD;AAC3D,SAAO,OAAO,iBAAP,GACF,IADE,CACG,YAAM;AACV,WAAO,sBACH,OAAO,WAAP,EADG,EACmB,WADnB,CAAP;AAED,GAJE,CAAP;AAKD;;AAED;;;;;;;AAOA,SAAS,qBAAT,CAA+B,IAA/B,EAAqC,WAArC,EAAkD;AAChD,SAAO,uBAAuB,IAAvB,EAA6B,QAA7B,CAAsC,WAAtC,CAAP;AACD;;AAED;;;;;;;;AAQA,SAAS,yBAAT,CAAmC,GAAnC,EAAwC,SAAxC,EAAmD,IAAnD,EAAyD;AACvD;;;;;;;;AAQA;AACA;AACA,MAAI,CAAC,sBAAsB,IAAtB,EAA4B,SAA5B,CAAL,EAA6C;AAC3C,WAAO,QAAQ,OAAR,EAAP;AACD;;AAED,MAAM,aAAa,yBAAW,GAAX,EAAgB,YAAhB,CAAnB;AACA,SAAO,iCACL,WAAW,gBAAX,CAA4B,GAA5B,EAAiC,SAAjC;AADF;AAED;;AAED;;;;;;;;;;AAUA,SAAS,8BAAT,CAAwC,GAAxC,EAA6C,EAA7C,EAAiD,SAAjD,EAA4D,WAA5D,EAAyE;AACvE,SAAO,IAAI,kBAAJ,CAAuB,IAAI,QAA3B,EACF,IADE,CACG;AAAA,WAAM,0BAA0B,GAA1B,EAA+B,SAA/B,EAA0C,IAAI,QAAJ,CAAa,IAAvD,CAAN;AAAA,GADH,EAEF,IAFE,CAEG,YAAM;AACV;AACA;AACA,QAAI,WAAJ,EAAiB;AACf,aAAO,sCAAwB,GAAxB,EAA6B,EAA7B,CAAP;AACD,KAFD,MAEO,IAAI,mBAAmB,GAAnB,EAAwB,SAAxB,CAAJ,EAAwC;AAC7C,aAAO,gCAAkB,GAAlB,EAAuB,EAAvB,CAAP;AACD;AACD,WAAO,IAAP;AACD,GAXE,CAAP;AAYD;;;;;;QCtPe,4B,GAAA,4B;QAiDA,4B,GAAA,4B;QAyBA,qC,GAAA,qC;AA9GhB;;;;;;;;;;;;;;;;AAgBA;;;;;AAKA,IAAI,sBAAJ;;AAEA;;;;;;;;;;;;;AAaO,SAAS,4BAAT,CAAsC,OAAtC,EAA+C,SAA/C,EAA0D,QAA1D,EACL,mBADK,EACgB;AACrB,MAAI,eAAe,OAAnB;AACA,MAAI,gBAAgB,QAApB;AACA;;;AAGA,MAAI,gBAAJ;;AAEA,YAAU,wBAAS;AACjB,QAAI;AACF,aAAO,cAAc,KAAd,CAAP;AACD,KAFD,CAEE,OAAO,CAAP,EAAU;AACV;AACA,WAAK,WAAL,CAAiB,CAAjB;AACA,YAAM,CAAN;AACD;AACF,GARD;AASA,MAAM,gBAAgB,8BAAtB;AACA,MAAI,UAAU,KAAd;AACA,MAAI,mBAAJ,EAAyB;AACvB,cAAU,oBAAoB,OAA9B;AACD;AACD,eAAa,gBAAb,CACI,SADJ,EAEI,OAFJ,EAGI,gBAAgB,mBAAhB,GAAsC,OAH1C;AAKA,SAAO,YAAM;AACX,QAAI,YAAJ,EAAkB;AAChB,mBAAa,mBAAb,CACI,SADJ,EAEI,OAFJ,EAGI,gBAAgB,mBAAhB,GAAsC,OAH1C;AAKD;AACD;AACA,oBAAgB,IAAhB;AACA,mBAAe,IAAf;AACA,cAAU,IAAV;AACD,GAZD;AAaD;;AAED;;;;;;AAMO,SAAS,4BAAT,GAAwC;AAC7C;AACA,MAAI,kBAAkB,SAAtB,EAAiC;AAC/B,WAAO,aAAP;AACD;;AAED,kBAAgB,KAAhB;AACA,MAAI;AACF;AACA,QAAM,UAAU;AACd,UAAI,OAAJ,GAAc;AACZ,wBAAgB,IAAhB;AACD;AAHa,KAAhB;AAKA,SAAK,gBAAL,CAAsB,cAAtB,EAAsC,IAAtC,EAA4C,OAA5C;AACA,SAAK,mBAAL,CAAyB,cAAzB,EAAyC,IAAzC,EAA+C,OAA/C;AACD,GATD,CASE,OAAO,GAAP,EAAY;AACZ;AACD;AACD,SAAO,aAAP;AACD;;AAED;;;AAGO,SAAS,qCAAT,GAAiD;AACtD,kBAAgB,SAAhB;AACD;;;;;;QClFe,iB,GAAA,iB;QAwBA,M,GAAA,M;QAUA,O,GAAA,O;QASA,S,GAAA,S;QAaA,U,GAAA,U;QA0BA,iB,GAAA,iB;QAmBA,Q,GAAA,Q;QAgBA,W,GAAA,W;QAsDA,kB,GAAA,kB;;AAzLhB;;AACA;;AAEA;AAnBA;;;;;;;;;;;;;;;;AAoBA,IAAM,sBAAsB,iBAA5B;;AAEA;;;;;;;;AAQO,SAAS,iBAAT,CAA2B,GAA3B,EAAgC,IAAhC,EAAsC,MAAtC,EAA8C,aAA9C,EAA6D;AAClE,MAAM,YAAY,+BAAiC,EAAC,cAAD,EAAnD;AACA,SAAO,MAAP,CAAc,SAAd,EAAyB,aAAzB;AACA;AACA;AACA,MAAI,OAAO,IAAI,WAAX,IAA0B,UAA9B,EAA0C;AACxC,WAAO,IAAI,IAAI,WAAR,CAAoB,IAApB,EAA0B,SAA1B,CAAP;AACD,GAFD,MAEO;AACL;AACA,QAAM,IAAI,IAAI,QAAJ,CAAa,WAAb,CAAyB,aAAzB,CAAV;AACA,MAAE,eAAF,CACI,IADJ,EACU,CAAC,CAAC,UAAU,OADtB,EAC+B,CAAC,CAAC,UAAU,UAD3C,EACuD,MADvD;AAEA,WAAO,CAAP;AACD;AACF;;AAED;;;;;;;;AAQO,SAAS,MAAT,CAAgB,OAAhB,EAAyB,SAAzB,EAAoC,QAApC,EAA8C,mBAA9C,EAAmE;AACxE,SAAO,qDACH,OADG,EACM,SADN,EACiB,QADjB,EAC2B,mBAD3B,CAAP;AAED;;AAED;;;;;AAKO,SAAS,OAAT,CAAiB,KAAjB,EAAwB;AAC7B,SAAO,4CAA6C,MAAM;AAA1D;AACD;;AAED;;;;;AAKO,SAAS,SAAT,CAAmB,KAAnB,EAA0B;AAC/B,SAAO,4CAA6C,MAAM;AAA1D;AACD;;AAED;;;;;;;;;AASO,SAAS,UAAT,CAAoB,OAApB,EAA6B,SAA7B,EAAwC,QAAxC,EAAkD,mBAAlD,EAAuE;AAC5E,MAAI,gBAAgB,QAApB;AACA,MAAM,WAAW,qDAA6B,OAA7B,EAAsC,SAAtC,EAAiD,iBAAS;AACzE,QAAI;AACF,oBAAc,KAAd;AACD,KAFD,SAEU;AACR;AACA,sBAAgB,IAAhB;AACA;AACD;AACF,GARgB,EAQd,mBARc,CAAjB;AASA,SAAO,QAAP;AACD;;AAGD;;;;;;;;;;;AAWO,SAAS,iBAAT,CAA2B,OAA3B,EAAoC,SAApC,EAA+C,mBAA/C,EACL,UADK,EACO;AACZ,MAAI,iBAAJ;AACA,MAAM,eAAe,IAAI,OAAJ,CAAY,mBAAW;AAC1C,eAAW,WAAW,OAAX,EAAoB,SAApB,EAA+B,OAA/B,EAAwC,mBAAxC,CAAX;AACD,GAFoB,CAArB;AAGA,eAAa,IAAb,CAAkB,QAAlB,EAA4B,QAA5B;AACA,MAAI,UAAJ,EAAgB;AACd,eAAW,QAAX;AACD;AACD,SAAO,YAAP;AACD;;AAGD;;;;;AAKO,SAAS,QAAT,CAAkB,WAAlB,EAA+B;AACpC,SAAO,CAAC,EAAE,YAAY,QAAZ,IAAwB,YAAY,UAAZ,IAA0B;AACxD;AACA;AAFM,KAGF,YAAY,QAAZ,IACG,YAAY,QAAZ,CAAqB,UAArB,IAAmC,UAJtC,CAAR;AAKD;;AAED;;;;;;;;AAQO,SAAS,WAAT,CAAqB,WAArB,EAAkC;AACvC,MAAI,qBAAJ;AACA,MAAI,sBAAJ;AACA,MAAI,SAAS,WAAT,CAAJ,EAA2B;AACzB,WAAO,QAAQ,OAAR,CAAgB,WAAhB,CAAP;AACD;AACD,MAAM,iBAAiB,IAAI,OAAJ,CAAY,UAAC,OAAD,EAAU,MAAV,EAAqB;AACtD;AACA;AAFsD,QAG/C,OAH+C,GAGpC,WAHoC,CAG/C,OAH+C;;AAItD,QAAI,YAAY,OAAZ,IAAuB,YAAY,OAAvC,EAAgD;AAC9C,qBAAe,WAAW,WAAX,EAAwB,WAAxB,EAAqC,OAArC,CAAf;AACD,KAFD,MAEO;AACL,qBAAe,WAAW,WAAX,EAAwB,MAAxB,EAAgC,OAAhC,CAAf;AACD;AACD;AACA,QAAI,OAAJ,EAAa;AACX,sBAAgB,WAAW,WAAX,EAAwB,OAAxB,EAAiC,MAAjC,CAAhB;AACD;AACF,GAbsB,CAAvB;;AAeA,SAAO,eAAe,IAAf,CAAoB,YAAM;AAC/B,QAAI,aAAJ,EAAmB;AACjB;AACD;AACD,WAAO,WAAP;AACD,GALM,EAKJ,YAAM;AACP,QAAI,YAAJ,EAAkB;AAChB;AACD;AACD,iBAAa,WAAb;AACD,GAVM,CAAP;AAWD;;AAED;;;;;AAKA,SAAS,YAAT,CAAsB,WAAtB,EAAmC;AACjC;AACA;AACA,MAAI,SAAS,WAAb;AACA,MAAI,UAAU,OAAO,GAArB,EAA0B;AACxB,aAAS,OAAO,GAAhB;AACD;AACD,QAAM,iBAAO,WAAP,CAAmB,mBAAnB,EAAwC,MAAxC,CAAN;AACD;;AAED;;;;;AAKO,SAAS,kBAAT,CAA4B,OAA5B,EAAqC;AAC1C,SAAO,QAAQ,OAAR,CAAgB,mBAAhB,KAAwC,CAAC,CAAhD;AACD;;;;;;;QCvJe,Q,GAAA,Q;QASA,a,GAAA,a;QAWA,c,GAAA,c;QAiBA,gB,GAAA,gB;QAuBA,iB,GAAA,iB;QA4DA,uB,GAAA,uB;QAqDA,uC,GAAA,uC;QASA,gC,GAAA,gC;QA4DA,8B,GAAA,8B;QA4CA,mB,GAAA,mB;QAcA,qB,GAAA,qB;;AAzUhB;;AACA;;AACA;;AAEA;AACA,IAAM,cAAc,SAApB;;AAEA;AA9BA;;;;;;;;;;;;;;;;AAgBA;;;;;;;AAeA,IAAM,sBAAsB,GAA5B,C,CAAiC;;AAEjC;AACA,IAAM,6BAA6B,sBAAsB,EAAtB,GAA2B,EAA3B,GAAgC,EAAhC,GAAqC,IAAxE;;AAEA;AACA,IAAM,0BAA0B,2BAAhC;;AAEA;;;;;;AAMO,IAAI,gDAAJ;;AAEP;;;;;AAKO,SAAS,QAAT,CAAkB,GAAlB,EAAuB;AAC5B,SAAO,CAAC,EAAE,IAAI,UAAJ,IAAkB,IAAI,UAAJ,CAAe,MAAnC,CAAR;AACD;;AAED;;;;;AAKO,SAAS,aAAT,CAAuB,GAAvB,EAA4B;AACjC,SAAO,IAAI,UAAJ,IAAkB,IAAI,UAAJ,CAAe,IAAjC,GACL,IAAI,UAAJ,CAAe,IADV,GACiB,SADxB;AAED;;AAED;;;;;;AAMO,SAAS,cAAT,CAAwB,GAAxB,EAA6B,YAA7B,EAA2C;AAChD,MAAM,UAAU,kBAAkB,GAAlB,CAAhB;AACA,SAAO,CAAC,CAAC,QAAQ,YAAR,CAAT;AACD;;AAED;;;;;;;;;;;;AAYO,SAAS,gBAAT,CAA0B,GAA1B,EAA+B,YAA/B,EAA6C,MAA7C,EACL,uBADK,EACoB;AACzB,MAAM,cAAc,eAAe,GAAf,EAAoB,MAAM,YAA1B,CAApB;AACA,MAAM,KAAK,CAAC,EAAE,WAAW,SAAX,GAAuB,MAAvB,GAAgC,CAAC,WAAnC,CAAZ;AACA,MAAI,MAAM,WAAV,EAAuB;AACrB,QAAM,UAAU,kBAAkB,GAAlB,CAAhB;AACA,YAAQ,YAAR,IAAwB,EAAxB;;AAEA,QAAI,CAAC,uBAAL,EAA8B;AAC5B,UAAM,gBAAgB,+BAA+B,GAA/B,CAAtB;AACA,oBAAc,YAAd,IAA8B,EAA9B;AACA,oCAA8B,GAA9B,EAAmC,aAAnC;AACD;AACF;AACD,SAAO,EAAP;AACD;;AAED;;;;;;AAMO,SAAS,iBAAT,CAA2B,GAA3B,EAAgC;AACrC,MAAI,IAAI,uBAAJ,CAAJ,EAAkC;AAChC,WAAO,IAAI,uBAAJ,CAAP;AACD;AACD,MAAI,uBAAJ,IAA+B,OAAO,MAAP,CAAc,IAAd,CAA/B;AACA,MAAM,UAAU,IAAI,uBAAJ,CAAhB;;AAEA;AACA,MAAI,IAAI,UAAR,EAAoB;AAClB,SAAK,IAAM,YAAX,IAA2B,IAAI,UAA/B,EAA2C;AACzC,UAAM,YAAY,IAAI,UAAJ,CAAe,YAAf,CAAlB;AACA,UAAI,OAAO,SAAP,KAAqB,QAArB,IAAiC,aAAa,CAA9C,IAAmD,aAAa,CAApE,EAAuE;AACrE,gBAAQ,YAAR,IAAwB,KAAK,MAAL,KAAgB,SAAxC;AACD;AACF;AACF;AACD;AACA,MAAI,IAAI,UAAJ,IACG,MAAM,OAAN,CAAc,IAAI,UAAJ,CAAe,kBAAf,CAAd,CADH,IAEG,IAAI,UAAJ,CAAe,kBAAf,EAAmC,MAAnC,GAA4C,CAFnD,EAEsD;AACpD,QAAM,UAAU,IAAI,UAAJ,CAAe,kBAAf,CAAhB;AACA,QAAM,OACF,IAAI,QAAJ,CAAa,IAAb,CAAkB,aAAlB,CAAgC,qCAAhC,CADJ;AAEA,QAAI,IAAJ,EAAU;AACR,UAAM,qBAAqB,KAAK,YAAL,CAAkB,SAAlB,EAA6B,KAA7B,CAAmC,GAAnC,CAA3B;AACA,WAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,mBAAmB,MAAvC,EAA+C,GAA/C,EAAoD;AAClD,YAAI,QAAQ,OAAR,CAAgB,mBAAmB,CAAnB,CAAhB,KAA0C,CAAC,CAA/C,EAAkD;AAChD,kBAAQ,mBAAmB,CAAnB,CAAR,IAAiC,IAAjC;AACD;AACF;AACF;AACF;;AAED,SAAO,MAAP,CAAc,OAAd,EAAuB,+BAA+B,GAA/B,CAAvB;;AAEA,MAAI,IAAI,UAAJ,IACG,MAAM,OAAN,CAAc,IAAI,UAAJ,CAAe,kBAAf,CAAd,CADH,IAEG,IAAI,UAAJ,CAAe,kBAAf,EAAmC,MAAnC,GAA4C,CAFnD,EAEsD;AACpD,QAAM,WAAU,IAAI,UAAJ,CAAe,kBAAf,CAAhB;AACA,QAAM,OAAO,IAAI,QAAJ,CAAa,YAAb,IAA6B,IAAI,QAAJ,CAAa,IAAvD;AACA,QAAM,SAAS,2BAAiB,IAAjB,CAAf;AACA,SAAK,IAAI,KAAI,CAAb,EAAgB,KAAI,SAAQ,MAA5B,EAAoC,IAApC,EAAyC;AACvC,UAAM,QAAQ,cAAY,SAAQ,EAAR,CAAZ,CAAd;AACA,UAAI,SAAS,GAAb,EAAkB;AAChB,gBAAQ,SAAQ,EAAR,CAAR,IAAsB,IAAtB;AACD;AACD,UAAI,SAAS,GAAb,EAAkB;AAChB,gBAAQ,SAAQ,EAAR,CAAR,IAAsB,KAAtB;AACD;AACF;AACF;AACD,SAAO,OAAP;AACD;;AAED;;;;;;AAMO,SAAS,uBAAT,CAAiC,GAAjC,EAAsC;AAC3C,SAAO,IAAI,uBAAJ,KAAgC,IAAvC;AACD;;AAED;;;;;AAKA,SAAS,8BAAT,CAAwC,GAAxC,EAA6C;AAC3C,MAAM,mBAAmB,wBAAU,GAAV,EAAe,WAAf,CAAzB;AACA,MAAM,SAAS,mBAAmB,iBAAiB,KAAjB,CAAuB,UAAvB,CAAnB,GAAwD,EAAvE;;AAEA,MAAM,UAAU,OAAO,MAAP,CAAc,IAAd,CAAhB;AACA,OAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,OAAO,MAA3B,EAAmC,GAAnC,EAAwC;AACtC,QAAI,OAAO,CAAP,EAAU,MAAV,IAAoB,CAAxB,EAA2B;AACzB;AACD;AACD,QAAI,OAAO,CAAP,EAAU,CAAV,KAAgB,GAApB,EAAyB;AACvB,cAAQ,OAAO,CAAP,EAAU,MAAV,CAAiB,CAAjB,CAAR,IAA+B,KAA/B;AACD,KAFD,MAEO;AACL,cAAQ,OAAO,CAAP,CAAR,IAAqB,IAArB;AACD;AACF;;AAED,SAAO,OAAP;AACD;;AAED;;;;;AAKA,SAAS,6BAAT,CAAuC,GAAvC,EAA4C,OAA5C,EAAqD;AACnD,MAAM,gBAAgB,EAAtB;AACA,OAAK,IAAM,UAAX,IAAyB,OAAzB,EAAkC;AAChC,kBAAc,IAAd,CAAmB,CAAC,QAAQ,UAAR,MAAwB,KAAxB,GAAgC,GAAhC,GAAsC,EAAvC,IAA6C,UAAhE;AACD;;AAED,0BAAU,GAAV,EAAe,WAAf,EAA4B,cAAc,IAAd,CAAmB,GAAnB,CAA5B,EACI,KAAK,GAAL,KAAa,0BADjB,EAC6C;AACvC;AACA,YAAQ,IAAI,QAAJ,CAAa,QAFkB;AAGvC,wBAAoB;AAHmB,GAD7C;AAMD;;AAED;;;;;;AAMO,SAAS,uCAAT,CAAiD,GAAjD,EAAsD;AAC3D,SAAO,+BAA+B,GAA/B,CAAP;AACD;;AAED;;;;;AAKO,SAAS,gCAAT,CAA0C,GAA1C,EAA+C;AACpD,0BAAU,GAAV,EAAe,WAAf,EAA4B,EAA5B,EAAgC,CAAhC,EAAmC;AACjC,YAAQ,IAAI,QAAJ,CAAa;AADY,GAAnC;AAGA,MAAI,uBAAJ,IAA+B,IAA/B;AACD;;AAED;;;;;;;;;;AAUA,SAAS,mBAAT,GAA+B;AAC7B;AACA,SAAO,KAAK,MAAL,EAAP;AACD;;AAED;;;;;;;;AAQO,IAAM,8DAA2B;AACtC,gBAAc;AADwB,CAAjC;;AAIP;;;;;AAKA,SAAS,gBAAT,CAA0B,GAA1B,EAA+B;AAC7B,MAAM,KAAK,yBAAyB,YAAzB,EAAX;AACA,SAAO,IAAI,KAAK,KAAL,CAAW,KAAK,IAAI,MAApB,CAAJ,KAAoC,IAA3C;AACD;;AAED;;;;;;;;;;;;;;;;AAgBO,SAAS,8BAAT,CAAwC,GAAxC,EAA6C,WAA7C,EAA0D;AAC/D,MAAI,kBAAJ,GAAyB,IAAI,kBAAJ,IAA0B,EAAnD;AACA,MAAM,sBAAsB,EAA5B;AACA,OAAK,IAAM,cAAX,IAA6B,WAA7B,EAA0C;AACxC;AACA;AACA,QAAI,CAAC,oBAAO,WAAP,EAAoB,cAApB,CAAL,EAA0C;AACxC;AACD;AACD,QAAI,oBAAO,IAAI,kBAAX,EAA+B,cAA/B,CAAJ,EAAoD;AAClD,0BAAoB,cAApB,IACI,IAAI,kBAAJ,CAAuB,cAAvB,CADJ;AAEA;AACD;;AAED,QAAI,CAAC,YAAY,cAAZ,EAA4B,iBAA7B,IACA,CAAC,YAAY,cAAZ,EAA4B,iBAA5B,CAA8C,GAA9C,CADL,EACyD;AACvD,UAAI,kBAAJ,CAAuB,cAAvB,IAAyC,IAAzC;AACA;AACD;;AAED;AACA;AACA;AACA,QAAI,CAAC,IAAI,kBAAJ,CAAuB,cAAvB,CAAD,IACF,eAAe,GAAf,EAAoB,MAAM,cAA1B,CADF,EAC6C;AAAA,UACpC,QADoC,GACxB,YAAY,cAAZ,CADwB,CACpC,QADoC;;AAE3C,UAAI,kBAAJ,CAAuB,cAAvB,IAAyC,iBAAiB,QAAjB,CAAzC;AACA,0BAAoB,cAApB,IACI,IAAI,kBAAJ,CAAuB,cAAvB,CADJ;AAED;AACF;AACD,SAAO,mBAAP;AACD;;AAED;;;;;;;;;AASO,SAAS,mBAAT,CAA6B,GAA7B,EAAkC,cAAlC,EAAkD;AACvD,SAAO,IAAI,kBAAJ,GAAyB,IAAI,kBAAJ,CAAuB,cAAvB,CAAzB,GAAkE,IAAzE;AACD;;AAED;;;;;;;;;;AAUO,SAAS,qBAAT,CAA+B,GAA/B,EAAoC,cAApC,EAAoD,QAApD,EAA8D;AACnE,MAAI,kBAAJ,GAAyB,IAAI,kBAAJ,IAA0B,EAAnD;AACA,mBAAiB,GAAjB,EAAsB,cAAtB,EAAsC,CAAC,CAAC,QAAxC,EAAkD,IAAlD;AACA,MAAI,kBAAJ,CAAuB,cAAvB,IAAyC,QAAzC;AACD;;;;;;;;qjBCpWD;;;;;;;;;;;;;;;;QA0EgB,4B,GAAA,4B;QAwBA,6B,GAAA,6B;QAaA,8B,GAAA,8B;QAgBA,0B,GAAA,0B;QA6KA,mB,GAAA,mB;QAwTA,kB,GAAA,kB;QAkBA,O,GAAA,O;;AAtmBhB;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AAOA;;;;AAGA;AACA,IAAM,aAAa,eAAnB;;AAEA;AACA,IAAM,mBACF,CAAC,QAAD,EAAW,eAAX,EAA4B,WAA5B,EAAyC,aAAzC,CADJ;;AAIA;;;;;;;;;;;;;;;;;AAiBO,IAAI,wDAAJ;;AAGP;;;;AAIA,IAAI,wBAAJ;;AAEA;;;;AAIO,SAAS,4BAAT,CAAsC,GAAtC,EAA2C;AAChD,oBAAkB,GAAlB;AACD;;AAED;;;;AAIA,SAAS,iBAAT,GAA6B;AAC3B,MAAI,oBAAoB,SAAxB,EAAmC;AACjC,sBAAkB,YAAY,kBAAkB,SAAhD;AACD;AACD,SAAO,eAAP;AACD;;AAGD;;;;;;;;AAQO,SAAS,6BAAT,CAAuC,KAAvC,EAA8C,OAA9C,EAAuD;AAC5D,QAAM,WAAN,CAAkB,OAAlB;AACD;;AAGD;;;;;;;;AAQO,SAAS,8BAAT,CAAwC,MAAxC,EAAgD;AACrD,SAAO,oCAAqC,OAAO,UAAP;AAA5C;AACD;;AAGD;;;;;;;;;;;AAWO,SAAS,0BAAT,CAAoC,MAApC,EAA4C,SAA5C,EAAuD,IAAvD,EACL,sBADK,EACmB;AACxB;AACA,MAAM,MAAM,2BAAa,kBAAM,OAAO,aAAP,CAAqB,WAA3B,CAAb,CAAZ;AACA;AACA,MAAM,aAAa,mBAAS,aAAT,CAAuB,GAAvB,CAAnB;;AAEA,uBAAS,MAAT,EAAiB,YAAjB,EAA+B,QAA/B;AACA,SAAO,YAAP,CAAoB,gBAApB,EAAsC,YAAtC;;AAEA;AACA,MAAI,KAAK,YAAT,EAAuB;AACrB,SAAK,YAAL,CAAkB,OAAlB,CACI;AAAA,aAAe,WAAW,gBAAX,CAA4B,WAA5B,CAAf;AAAA,KADJ;AAED;;AAED,MAAM,OAAO,UAAU,IAAV,CAAb;;AAEA;AACA,SAAO,MAAP,GAAgB,YAAM;AACpB;AACA,WAAO,UAAP,GAAoB,UAApB;AACD,GAHD;AAIA,MAAM,4BAA4B,SAA5B,yBAA4B,GAAM;AACtC,WAAO,aAAP,CAAqB,gBAArB,CAAsC,yBAAtC,EACI,0BAAkB;AAChB,sBAAM,IAAN,CAAW,KAAX,EAAkB,2BAAlB,EAA+C,cAA/C;AACD,KAHL;AAID,GALD;AAMA,MAAI,sBAAJ;AACA,MAAI,mBAAJ,EAAyB;AACvB,WAAO,MAAP,GAAgB,IAAhB;AACA,oBAAgB,8BAAY,MAAZ,CAAhB;AACA,cAAU,WAAV,CAAsB,MAAtB;AACA;AACD,GALD,MAKO;AACL,WAAO,GAAP,GAAa,aAAb;AACA,cAAU,WAAV,CAAsB,MAAtB;AACA,QAAM,WAAW,OAAO,aAAP,CAAqB,QAAtC;AACA,aAAS,IAAT;AACA;AACA,aAAS,KAAT,CAAe,IAAf;AACA;AACA;AACA,oBAAgB,8BAAY,OAAO,aAAnB,CAAhB;AACA,aAAS,KAAT;AACD;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,MAAI,qBAAJ;AACA,MAAI,cAAc,MAAd,CAAJ,EAA2B;AACzB,mBAAe,QAAQ,OAAR,EAAf;AACD,GAFD,MAEO;AACL,mBAAe,IAAI,OAAJ,CAAY,mBAAW;AACpC;AACA,UAAM,WAAW,IAAI,WAAJ,CAAgB,YAAM;AACrC,YAAI,cAAc,MAAd,CAAJ,EAA2B;AACzB;AACA,cAAI,aAAJ,CAAkB,QAAlB;AACD;AACF,OALgB,EAKd,kBAAmB,CALL,CAAjB;;AAOA;AACA;AACA,oBAAc,KAAd,CAAoB,iBAAS;AAC3B,+BAAa,KAAb;AACD,OAFD,EAEG,IAFH,CAEQ,YAAM;AACZ;AACA,YAAI,aAAJ,CAAkB,QAAlB;AACD,OALD;AAMD,KAjBc,CAAf;AAkBD;;AAED,SAAO,aAAa,IAAb,CAAkB,YAAM;AAC7B,QAAM,QAAQ,IAAI,mBAAJ,CAAwB,MAAxB,EAAgC,IAAhC,EAAsC,aAAtC,CAAd;AACA,WAAO,UAAP,IAAqB,KAArB;;AAEA,QAAM,WAAW,sBAAwB,OAAO,aAAhD;AACA;AACA,eAAW,8BAAX,CACI,QADJ,EACc,KAAK,YAAL,IAAqB,EADnC,EACuC,sBADvC;AAEA;AACA,UAAM,YAAN;AACA,WAAO,KAAP;AACD,GAXM,CAAP;AAYD;;AAGD;;;;;AAKA,SAAS,aAAT,CAAuB,MAAvB,EAA+B;AAC7B;AACA;AACA;AACA;AACA;AACA,MAAM,WAAW,OAAO,aAAP,IAAwB,OAAO,aAAP,CAAqB,QAA9D;AACA,SAAO,CAAC,EAAE,YACN,oCAAgB,QAAhB,CADM,IAEN,SAAS,IAFH,IAGN,SAAS,IAAT,CAAc,UAHV,CAAR;AAID;;AAGD;;;;AAIA,SAAS,SAAT,CAAmB,IAAnB,EAAyB;AACvB,MAAM,eAAe,KAAK,IAA1B;AACA,MAAM,iBAAiB,aAAa,WAAb,EAAvB;;AAEA;AACA,MAAI,KAAK,eAAe,OAAf,CAAuB,OAAvB,CAAT;AACA,MAAI,MAAM,CAAC,CAAX,EAAc;AACZ,SAAK,eAAe,OAAf,CAAuB,GAAvB,EAA4B,KAAK,CAAjC,IAAsC,CAA3C;AACD;AACD,MAAI,MAAM,CAAC,CAAX,EAAc;AACZ,SAAK,eAAe,OAAf,CAAuB,OAAvB,CAAL;AACD;AACD,MAAI,MAAM,CAAC,CAAX,EAAc;AACZ,SAAK,eAAe,OAAf,CAAuB,OAAvB,CAAL;AACA,QAAI,MAAM,CAAC,CAAX,EAAc;AACZ,WAAK,eAAe,OAAf,CAAuB,GAAvB,EAA4B,KAAK,CAAjC,IAAsC,CAA3C;AACD;AACF;;AAED,MAAM,SAAS,EAAf;;AAEA;AACA,MAAI,KAAK,CAAT,EAAY;AACV,WAAO,IAAP,CAAY,aAAa,SAAb,CAAuB,CAAvB,EAA0B,EAA1B,CAAZ;AACD;;AAED;AACA,SAAO,IAAP,kBAA2B,qBAAW,KAAK,GAAhB,CAA3B;;AAEA;AACA,MAAI,KAAK,KAAT,EAAgB;AACd,SAAK,KAAL,CAAW,OAAX,CAAmB,gBAAQ;AACzB,aAAO,IAAP,kBACmB,qBAAW,IAAX,CADnB;AAED,KAHD;AAID;;AAED;AACA,SAAO,IAAP,CAAY,8CACR,uEADJ;;AAGA;AACA,MAAI,KAAK,CAAT,EAAY;AACV,WAAO,IAAP,CAAY,aAAa,SAAb,CAAuB,EAAvB,CAAZ;AACD,GAFD,MAEO;AACL,WAAO,IAAP,CAAY,YAAZ;AACD;;AAED,SAAO,OAAO,IAAP,CAAY,EAAZ,CAAP;AACD;;AAGD;;;;;AAKO,SAAS,mBAAT,CAA6B,IAA7B,EAAmC;AACxC,SAAO,UAAU,IAAV,CAAP;AACD;;AAGD;;;;;;;;;;;IAUa,mB,WAAA,mB;;AAEX;;;;;AAKA,+BAAY,MAAZ,EAAoB,IAApB,EAA0B,aAA1B,EAAyC;AAAA;;AACvC;AACA,SAAK,MAAL,GAAc,MAAd;;AAEA;AACA,SAAK,GAAL,GAAW,qBAAsB,OAAO,aAAxC;;AAEA;AACA,SAAK,IAAL,GAAY,IAAZ;;AAEA;AACA,SAAK,IAAL,GAAY,KAAK,IAAL,IAAa,IAAzB;;AAEA;AACA,SAAK,UAAL,GAAkB,KAAK,GAAL,EAAlB;;AAEA;;;;;AAKA,SAAK,QAAL,GAAgB,KAAhB;;AAEA;AACA,SAAK,qBAAL,GAA6B,4BAA7B;;AAEA;AACA,SAAK,QAAL,GAAgB,KAAK,IAAL,GAAY,KAAK,IAAL,CAAU,OAAV,EAAZ,GAAkC,sBAAlD;;AAEA;AACA,SAAK,iBAAL,GAAyB,QAAQ,GAAR,CAAY,CAAC,aAAD,EAAgB,KAAK,SAAL,EAAhB,CAAZ,CAAzB;AACD;;AAED;;;;;;;8BAGU;AACR,yBAAS,eAAT,CAAyB,KAAK,MAA9B,EAAsC,oBAAtC,CAA2D,KAAK,GAAhE;AACA,4CAAwB,KAAK,GAA7B;AACD;;AAED;;;;;;mCAGe;AACb,aAAO,KAAK,UAAZ;AACD;;AAED;;;;;;;6BAIS;AACP,aAAO,KAAK,IAAL,CAAU,GAAjB;AACD;;AAED;;;;8BACU;AACR,aAAO,KAAK,QAAZ;AACD;;AAED;;;;;;;;gCAKY;AACV,aAAO,KAAK,QAAL,CAAc,UAAd,CAAyB,6BAAc,YAAvC,CAAP;AACD;;AAED;;;;;;;;;uCAMmB;AACjB,aAAO,KAAK,iBAAZ;AACD;;AAED;;;;;;;;oCAKgB;AACd,aAAO,KAAK,QAAL,CAAc,UAAd,CAAyB,6BAAc,QAAvC,CAAP;AACD;;AAED;;;;;;;mCAIe;AAAA;;AACb,UAAI,KAAK,IAAT,EAAe;AACb,aAAK,IAAL,CAAU,aAAV;AACD,OAFD,MAEO;AACL,aAAK,QAAL,CAAc,MAAd,CAAqB,6BAAc,YAAnC;AACD;AACD,2BAAS,KAAK,MAAd,EAAsB,YAAtB,EAAoC,EAApC;AACA,UAAI,KAAK,GAAL,CAAS,QAAT,IAAqB,KAAK,GAAL,CAAS,QAAT,CAAkB,IAA3C,EAAiD;AAC/C,aAAK,GAAL,CAAS,QAAT,CAAkB,eAAlB,CAAkC,SAAlC,CAA4C,GAA5C,CAAgD,eAAhD;AACA,8BAAU,gBAAM,aAAN,CAAoB,KAAK,GAAL,CAAS,QAAT,CAAkB,IAAtC,CAAV,EAAuD;AACrD,mBAAS,CAD4C;AAErD,sBAAY,SAFyC;AAGrD,qBAAW;AAH0C,SAAvD;AAKD;;AAED;AACA,UAAI,aAAJ;AACA,UAAI,KAAK,IAAT,EAAe;AACb,eAAO,KAAK,IAAL,CAAU,YAAV,EAAP;AACD,OAFD,MAEO;AACL,eAAO,gCACH,CADG,EACA,CADA,EAEH,KAAK,GAAL,EAAS,MAAM,UAFZ,EAGH,KAAK,GAAL,EAAS,MAAM,WAHZ,CAAP;AAID;AACD,cAAQ,GAAR,CAAY,CACV,KAAK,SAAL,EADU,EAEV,mBAAmB,KAAK,MAAxB,EAAgC,KAAK,GAArC,EAA0C,IAA1C,CAFU,CAAZ,EAGG,IAHH,CAGQ,YAAM;AACZ,cAAK,QAAL,CAAc,MAAd,CAAqB,6BAAc,QAAnC;AACD,OALD;AAMD;;AAED;;;;;;;;;;gCAOY;AACV,aAAO,KAAK,QAAZ;AACD;;AAED;;;;;;;;wCAKoB,O,EAAS;AAC3B,aAAO,KAAK,qBAAL,CAA2B,GAA3B,CAA+B,OAA/B,CAAP;AACD;;AAED;;;;;;;;gCAKY,O,EAAS;AACnB,UAAI,KAAK,QAAL,IAAiB,OAArB,EAA8B;AAC5B,aAAK,QAAL,GAAgB,OAAhB;AACA,aAAK,qBAAL,CAA2B,IAA3B,CAAgC,KAAK,QAArC;AACD;AACF;;AAED;;;;;;;qCAIiB;AACf,aAAO,gCACL,CAAC,KAAK,MAAL,CAAY,eAAZ,IAA+B,KAAK,MAAL,CAAY,aAAZ,CAA0B,QAA1D,EACK;AAFP;AAGD;;AAED;;;;;;;oCAIgB;AACd,aAAO,mBAAS,eAAT,CAAyB,KAAK,MAA9B,CAAP;AACD;;AAED;;;;;;;;;;mCAOe,I,EAAM;AACnB,aAAO,KAAK,aAAL,GAAqB,oBAArB,CAA0C,KAAK,MAA/C,EACH,KAAK,OAAL,IAAgB,IADb,EACmB,KAAK,MADxB,CAAP;AAED;;AAED;;;;;;2CAGuB;AAAA;;AACrB,UAAM,cAAc,gBAAM,aAAN,CAAoB,KAAK,MAAL,CAAY,UAAhC,CAApB;;AAEA;AACA,uBAAO,MAAP,CAAc,YAAY,OAAZ,CAAoB,WAApB,MAAqC,QAAnD,EACI,kDADJ;;AAGA,UAAM,YAAY;AAChB,sBAAc,aADE;AAEhB,oBAAY,UAFI;AAGhB,kBAAU,MAHM;AAIhB,iBAAS,MAJO;;AAMhB;AACA,eAAO,EAPS;AAQhB,gBAAQ,EARQ;AAShB,iBAAS,EATO;AAUhB,kBAAU;AAVM,OAAlB;;AAaA,UAAM,cAAc;AAClB,oBAAY,OADM;AAElB,gBAAQ,CAFU;AAGlB,iBAAS,CAHS;AAIlB,kBAAU,CAJQ;AAKlB,iBAAS,OALS;AAMlB,eAAO,CANW;AAOlB,kBAAU;AAPQ,OAApB;;AAUA,aAAO,KAAK,cAAL,CAAoB;AACzB,iBAAS,mBAAM;AACb,cAAM,OAAO,OAAK,IAAL,GACX,OAAK,IAAL,CAAU,YAAV,EADW,GAEX,OAAK,MAAL,EAAY,MAAM,qBAAlB,EAFF;;AAIA;AACA,cAAM,KAAK,CAAC,mBAAS,cAAT,CAAwB,OAAK,MAA7B,EAAqC,YAArC,EAAZ;;AANa,gCAOsB,gCAAe,IAAf,EAAqB,QAAS,CAA9B,EAAiC,EAAjC,CAPtB;AAAA,cAON,GAPM,mBAON,GAPM;AAAA,cAOD,IAPC,mBAOD,IAPC;AAAA,cAOK,KAPL,mBAOK,KAPL;AAAA,cAOY,MAPZ,mBAOY,MAPZ;;AASb;;;AACA,iBAAO,MAAP,CAAc,SAAd,EAAyB;AACvB,mBAAO,eAAG,GAAH,CADgB;AAEvB,oBAAQ,eAAG,IAAH,CAFe;AAGvB,qBAAS,eAAG,KAAH,CAHc;AAIvB,sBAAU,eAAG,MAAH;AAJa,WAAzB;AAMD,SAjBwB;AAkBzB,gBAAQ,kBAAM;AACZ;AACA,yCAAmB,OAAK,MAAxB,EAAgC,WAAhC;;AAEA;AACA,yCAAmB,OAAK,cAAL,EAAnB,EAA0C,SAA1C;AACD;AAxBwB,OAApB,CAAP;AA0BD;;AAED;;;;;;2CAGuB;AAAA;;AACrB,aAAO,KAAK,cAAL,CAAoB;AACzB,gBAAQ,kBAAM;AACZ,kCAAY,OAAK,MAAjB,EAAyB,CACvB,UADuB,EAEvB,MAFuB,EAGvB,OAHuB,EAIvB,KAJuB,EAKvB,QALuB,EAMvB,OANuB,EAOvB,QAPuB,CAAzB;;AAUA;AACA;AACA,kCAAY,OAAK,cAAL,EAAZ,EAAmC,CACjC,UADiC,EAEjC,KAFiC,EAGjC,MAHiC,EAIjC,OAJiC,EAKjC,QALiC,EAMjC,QANiC,EAOjC,OAPiC,CAAnC;AASD;AAvBwB,OAApB,CAAP;AAyBD;;;;;;AAGH;;;;;;;;;;AAQO,SAAS,kBAAT,CAA4B,eAA5B,EAA6C,OAA7C,EAAsD,IAAtD,EAA4D;AACjE,SAAO,mBAAS,eAAT,CAAyB,eAAzB,EACF,kBADE,CACiB,OADjB,EAC0B,IAD1B,EAEF,IAFE,CAEG,qBAAa;AACjB,QAAM,WAAW,EAAjB;AACA,cAAU,OAAV,CAAkB,aAAK;AACrB,UAAI,CAAC,iBAAiB,QAAjB,CAA0B,EAAE,OAAF,CAAU,OAApC,CAAL,EAAmD;AACjD,iBAAS,IAAT,CAAc,EAAE,UAAF,EAAd;AACD;AACF,KAJD;AAKA,WAAO,QAAQ,GAAR,CAAY,QAAZ,CAAP;AACD,GAVE,CAAP;AAWD;;AAED;;;;AAIO,SAAS,OAAT,CAAiB,OAAjB,EAA0B;AAC/B,SAAO,CAAC,CAAC,4BAAkB,OAAlB,EAA2B,gBAA3B,CAAT;AACD;;;;;;;;qjBCxnBD;;;;;;;;;;;;;;;;QA2PgB,S,GAAA,S;QA6DA,oB,GAAA,oB;QA2BA,W,GAAA,W;QAiBA,oB,GAAA,oB;QAmCA,a,GAAA,a;QAkFA,uB,GAAA,uB;QAyBA,Q,GAAA,Q;QAwBA,wB,GAAA,wB;;AA1fhB;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;AAEA;;;;AAIA,IAAM,oBAAoB,UAA1B;;AAEA;;;;;;AAMA,IAAI,wBAAJ;;AAEA;;;;;;;AAOA,SAAS,aAAT,CAAuB,SAAvB,EAAkC,UAAlC,EAA8C;AAAA,MACvC,aADuC,GACtB,SADsB,CACvC,aADuC;;;AAG5C,MAAI,CAAC,aAAD,IAAkB,UAAtB,EAAkC;AAChC,oBAAgB,UAAU,aAAV,GAA0B,OAAO,MAAP,CAAc,IAAd,CAA1C;AACD;AACD,SAAO,iBAAiB,IAAxB;AACD;;AAED;;;;;;;;AAQA,SAAS,oBAAT,CAA8B,SAA9B,EAAyC,QAAzC,EAAmD,UAAnD,EAA+D;AAC7D,MAAM,gBAAgB,cAAc,SAAd,EAAyB,UAAzB,CAAtB;AACA,MAAI,CAAC,aAAL,EAAoB;AAClB,WAAO,aAAP;AACD;;AAED,MAAI,iBAAiB,cAAc,QAAd,CAArB;AACA,MAAI,CAAC,cAAD,IAAmB,UAAvB,EAAmC;AACjC,qBAAiB,cAAc,QAAd,IAA0B,EAA3C;AACD;AACD,SAAO,kBAAkB,IAAzB;AACD;;AAED;;;;;;;;AAQA,SAAS,0BAAT,CAAoC,SAApC,EAA+C,MAA/C,EAAuD,QAAvD,EAAiE;AAAA,4BAC9C,6BAAmB,OAAO,GAA1B,CAD8C;AAAA,MACxD,MADwD,uBACxD,MADwD;;AAE/D,MAAM,WAAW,aAAa,MAAb,EAAqB,QAArB,CAAjB;AACA,MAAM,iBAAiB,qBAAqB,SAArB,EAAgC,QAAhC,EAA0C,IAA1C,CAAvB;;AAEA,MAAI,qBAAJ;AACA,OAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,eAAe,MAAnC,EAA2C,GAA3C,EAAgD;AAC9C,QAAM,KAAK,eAAe,CAAf,CAAX;AACA,QAAI,GAAG,KAAH,KAAa,MAAjB,EAAyB;AACvB,qBAAe,EAAf;AACA;AACD;AACF;;AAED,MAAI,CAAC,YAAL,EAAmB;AACjB,mBAAe;AACb,aAAO,MADM;AAEb,oBAFa;AAGb,cAAQ,OAAO,MAAP,CAAc,IAAd;AAHK,KAAf;AAKA,mBAAe,IAAf,CAAoB,YAApB;AACD;;AAED,SAAO,aAAa,MAApB;AACD;;AAED;;;;;;;;AAQA,SAAS,kBAAT,CAA4B,SAA5B,EAAuC,QAAvC,EAAiD,MAAjD,EAAyD,UAAzD,EAAqE;AACnE,MAAM,iBAAiB,qBAAqB,SAArB,EAAgC,QAAhC,CAAvB;;AAEA,MAAI,CAAC,cAAL,EAAqB;AACnB,WAAO,cAAP;AACD;;AAED;AACA;AACA;AACA,MAAI,qBAAJ;AACA,OAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,eAAe,MAAnC,EAA2C,GAA3C,EAAgD;AAC9C,QAAM,KAAK,eAAe,CAAf,CAAX;AAD8C,QAEvC,aAFuC,GAEtB,GAAG,KAFmB,CAEvC,aAFuC;;AAG9C,QAAI,CAAC,aAAL,EAAoB;AAClB,iBAAW,kBAAX,EAA+B,CAA/B,EAAkC,cAAlC;AACD,KAFD,MAEO,IAAI,aAAa,KAAjB,EAAwB;AAC7B;AACA,UAAI,GAAG,MAAH,KAAc,MAAd,IAAwB,iBAAiB,UAA7C,EAAyD;AACvD,uBAAe,EAAf;AACA;AACD;AACF,KANM,MAMA,IAAI,cAAc,aAAd,IACP,mBAAmB,aAAnB,EAAkC,UAAlC,CADG,EAC4C;AACjD;AACA,qBAAe,EAAf;AACA;AACD;AACF;;AAED,SAAO,eAAe,aAAa,MAA5B,GAAqC,IAA5C;AACD;;AAED;;;;;;;AAOA,SAAS,kBAAT,CAA4B,QAA5B,EAAsC,UAAtC,EAAkD;AAChD,OAAK,IAAI,MAAM,UAAf,EAA2B,OAAO,OAAO,IAAI,MAA7C,EAAqD,MAAM,IAAI,MAA/D,EAAuE;AACrE,QAAI,OAAO,QAAX,EAAqB;AACnB,aAAO,IAAP;AACD;AACF;AACD,SAAO,KAAP;AACD;;AAED;;;;;AAKA,SAAS,kBAAT,CAA4B,cAA5B,EAA4C;AAC1C,MAAM,WAAW,kBAAK,EAAC,YAAY,iBAAb,EAAL,CAAjB;;AAEA,OAAK,IAAI,IAAI,eAAe,MAAf,GAAwB,CAArC,EAAwC,KAAK,CAA7C,EAAgD,GAAhD,EAAqD;AACnD,QAAM,eAAe,eAAe,CAAf,CAArB;;AAEA,QAAI,CAAC,aAAa,KAAb,CAAmB,aAAxB,EAAuC;AACrC,qBAAe,MAAf,CAAsB,CAAtB,EAAyB,CAAzB;;AADqC,UAG9B,MAH8B,GAGpB,YAHoB,CAG9B,MAH8B;;AAIrC,WAAK,IAAM,IAAX,IAAmB,MAAnB,EAA2B;AACzB;AACA,eAAO,IAAP,EAAa,MAAb,CAAoB,CAApB,EAAuB,QAAvB,EAAiC,OAAjC,CAAyC,iBAAS;AAChD,gBAAM,QAAN;AACD,SAFD;AAGD;AACF;AACF;AACF;;AAED;;;;AAIA,SAAS,8BAAT,CAAwC,SAAxC,EAAmD;AACjD,MAAI,UAAU,aAAd,EAA6B;AAC3B;AACD;AACD,MAAM,oBAAoB,SAApB,iBAAoB,CAAS,KAAT,EAAgB;AACxC,QAAI,CAAC,0BAAQ,KAAR,CAAL,EAAqB;AACnB;AACD;AACD,QAAM,OAAO,cAAc,0BAAQ,KAAR,CAAd,CAAb;AACA,QAAI,CAAC,IAAD,IAAS,CAAC,KAAK,UAAL,CAAd,EAAgC;AAC9B;AACD;;AAED,QAAM,kBAAkB,mBACpB,SADoB,EAEpB,KAAK,UAAL,CAFoB,EAGpB,MAAM,MAHc,EAIpB,MAAM,MAJc,CAAxB;AAMA,QAAI,CAAC,eAAL,EAAsB;AACpB;AACD;;AAED,QAAI,YAAY,gBAAgB,KAAK,MAAL,CAAhB,CAAhB;AACA,QAAI,CAAC,SAAL,EAAgB;AACd;AACD;;AAED;AACA;AACA;AACA,gBAAY,UAAU,KAAV,EAAZ;AACA,SAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,UAAU,MAA9B,EAAsC,GAAtC,EAA2C;AACzC,UAAM,WAAW,UAAU,CAAV,CAAjB;AACA,eAAS,IAAT,EAAe,MAAM,MAArB,EAA6B,MAAM,MAAnC;AACD;AACF,GAhCD;;AAkCA,YAAU,gBAAV,CAA2B,SAA3B,EAAsC,iBAAtC;AACD;;AAED;;;;;;;;;;;;;AAaO,SAAS,SAAT,CACL,MADK,EACG,aADH,EACkB,QADlB,EAC4B,QAD5B,EACsC,0BADtC,EACkE;AACvE,kBAAM,MAAN,CAAa,OAAO,GAApB,EAAyB,iCAAzB;AACA,kBAAM,MAAN,CAAa,CAAC,OAAO,UAArB,EAAiC,2CAC7B,oDADJ;AAEA,kBAAM,MAAN,CAAa,QAAb;AACA,MAAM,YAAY,OAAO,aAAP,CAAqB,WAAvC;;AAEA,iCAA+B,SAA/B;;AAEA,MAAM,kBAAkB,2BACpB,SADoB,EAEpB,MAFoB,EAGpB,QAHoB,CAAxB;;AAOA,MAAI,SAAS,gBAAgB,aAAhB,MACV,gBAAgB,aAAhB,IAAiC,EADvB,CAAb;;AAGA,MAAI,iBAAJ;AACA,MAAI,WAAW,kBAAS,IAAT,EAAe,MAAf,EAAuB,MAAvB,EAA+B;AAC5C;AACA;AACA;AACA,QAAI,CAAC,0BAAD,IAA+B,UAAU,OAAO,aAApD,EAAmE;AACjE;AACD;;AAED,QAAI,KAAK,QAAL,IAAiB,iBAArB,EAAwC;AACtC;AACA;AACD;AACD,aAAS,IAAT,EAAe,MAAf,EAAuB,MAAvB;AACD,GAbD;;AAeA,SAAO,IAAP,CAAY,QAAZ;;AAEA,SAAO,WAAW,oBAAW;AAC3B,QAAI,QAAJ,EAAc;AACZ,UAAM,QAAQ,OAAO,OAAP,CAAe,QAAf,CAAd;AACA,UAAI,QAAQ,CAAC,CAAb,EAAgB;AACd,eAAO,MAAP,CAAc,KAAd,EAAqB,CAArB;AACD;AACD;AACA;AACA,iBAAW,IAAX;AACA,eAAS,IAAT;AACA,iBAAW,IAAX;AACD;AACF,GAZD;AAaD;;AAED;;;;;;;;AAQO,SAAS,oBAAT,CAA8B,MAA9B,EAAsC,cAAtC,EAAsD,QAAtD,EAAgE;AACrE,MAAM,eAAe,EAArB;AACA,MAAI,OAAO,cAAP,IAAyB,QAA7B,EAAuC;AACrC,qBAAiB,CAAC,cAAD,CAAjB;AACD;AACD,SAAO,IAAI,OAAJ,CAAY,mBAAW;AAC5B,SAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,eAAe,MAAnC,EAA2C,GAA3C,EAAgD;AAC9C,UAAM,UAAU,eAAe,CAAf,CAAhB;AACA,UAAM,WAAW,UAAU,MAAV,EAAkB,OAAlB,EAA2B,UAAC,IAAD,EAAO,MAAP,EAAe,MAAf,EAA0B;AACpE,aAAK,IAAI,KAAI,CAAb,EAAgB,KAAI,aAAa,MAAjC,EAAyC,IAAzC,EAA8C;AAC5C,uBAAa,EAAb;AACD;AACD,gBAAQ,EAAC,UAAD,EAAO,cAAP,EAAe,cAAf,EAAR;AACD,OALgB,EAKd,QALc,CAAjB;AAMA,mBAAa,IAAb,CAAkB,QAAlB;AACD;AACF,GAXM,CAAP;AAYD;;AAED;;;;;;;;AAQO,SAAS,WAAT,CAAqB,MAArB,EAA6B,IAA7B,EAAmC,MAAnC,EAA2C,YAA3C,EAAyD,QAAzD,EAAmE;AACxE,uBAAqB,MAArB,EACI,CAAC,EAAC,KAAK,OAAO,aAAb,EAA4B,QAAQ,YAApC,EAAD,CADJ,EACyD,IADzD,EAC+D,MAD/D,EAEI,QAFJ;AAGD;;AAED;;;;;;;;;;;AAWO,SAAS,oBAAT,CAA8B,MAA9B,EAAsC,OAAtC,EAA+C,IAA/C,EAAqD,MAArD,EAA6D,QAA7D,EAAuE;AAC5E,MAAI,CAAC,OAAO,aAAZ,EAA2B;AACzB;AACD;AACD,SAAO,MAAP,IAAiB,IAAjB;AACA,SAAO,UAAP,IAAqB,aAAa,MAAb,EAAqB,QAArB,CAArB;AACA,MAAI,UAAU,MAAd;AACA,MAAI,QAAJ,EAAc;AACZ;AACA,cAAU,SAAS,KAAK,SAAL,CAAe,MAAf,CAAnB;AACD;AACD,OAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,QAAQ,MAA5B,EAAoC,GAApC,EAAyC;AACvC,QAAM,SAAS,QAAQ,CAAR,CAAf;AACA,WAAO,GAAP,EAAW,MAAM,WAAjB,CAA6B,OAA7B,EAAsC,OAAO,MAA7C;AACD;AACF;;AAED;;;;;;;AAOA,SAAS,YAAT,CAAsB,MAAtB,EAA8B,QAA9B,EAAwC;AACtC,SAAO,WAAW,OAAO,YAAP,CAAoB,sBAApB,CAAX,GAAyD,KAAhE;AACD;;AAED;;;;;;;AAOO,SAAS,aAAT,CAAuB,IAAvB,EAA6B;AAClC,MAAI,OAAO,IAAP,IAAe,QAAnB,EAA6B;AAC3B,QAAI,KAAK,MAAL,CAAY,CAAZ,KAAkB,GAAtB,EAA2B;AACzB,aAAO,wBAAa,IAAb,EAAmB,aAAK;AAC7B,wBAAM,IAAN,CAAW,eAAX,EACI,sCACA,+BAFJ,EAEqC,CAFrC;AAGD,OAJM,KAID,IAJN;AAKD,KAND,MAMO,IAAI,mCAAa,IAAb,CAAJ,EAAwB;AAC7B,aAAO,yCAAmB,IAAnB,CAAP;AACD,KAFM,MAEA;AACL,aAAO,IAAP;AACD;AACF;AACD,SAAO,2BAA4B;AAAnC;AACD;;AAID;;;;;;IAKa,e,WAAA,e;AACX;;;;;;;AAOA,2BAAY,MAAZ,EAAoB,IAApB,EAA0B,IAA1B,EAAgC,eAAhC,EAAiD;AAAA;;AAAA;;AAC/C;AACA,SAAK,OAAL,GAAe,MAAf;AACA;AACA,SAAK,KAAL,GAAa,IAAb;AACA;AACA,SAAK,cAAL,GAAsB,EAAtB;;AAEA;AACA,SAAK,SAAL,GAAiB,UAAU,KAAK,OAAf,EAAwB,IAAxB,EAA8B,UAAC,IAAD,EAAO,MAAP,EAAe,MAAf,EAA0B;AACvE;AACA;AACA,UAAI,CAAC,MAAK,cAAL,CAAoB,IAApB,CAAyB;AAAA,eAAS,MAAM,GAAN,IAAa,MAAtB;AAAA,OAAzB,CAAL,EAA6D;AAC3D,cAAK,cAAL,CAAoB,IAApB,CAAyB,EAAC,KAAK,MAAN,EAAc,cAAd,EAAzB;AACD;AACD,sBAAgB,IAAhB,EAAsB,MAAtB,EAA8B,MAA9B;AACD,KAPgB,EAOd,KAAK,KAPS;AAQb;AACJ,SAAK,KATY,CASN,gCATM,CAAjB;AAUD;;AAED;;;;;;;;;yBAKK,I,EAAM,I,EAAM;AACf;AACA,+BAAa,KAAK,cAAlB,EAAkC;AAAA,eAAU,CAAC,CAAC,OAAO,GAAP,CAAW,MAAvB;AAAA,OAAlC;AACA,2BACI,KAAK,OADT,EAEI,KAAK,cAFT,EAGI,IAHJ,EAII,IAJJ,EAKI,KAAK,KALT;AAMD;;AAED;;;;;;8BAGU;AACR,WAAK,SAAL;AACA,WAAK,cAAL,CAAoB,MAApB,GAA6B,CAA7B;AACD;;;;;;AAGH;;;;;;AAIO,SAAS,uBAAT,CAAiC,OAAjC,EAA0C;AAC/C,MAAM,MAAM,QAAQ,YAAR,EAAZ;AACA;AACA,MAAI,IAAI,KAAJ,GAAY,EAAZ,IAAkB,IAAI,MAAJ,GAAa,EAAnC,EAAuC;AACrC,WAAO,KAAP;AACD;AACD;AACA,SAAO,CAAC,4BAAkB,OAAlB,EAA2B,oBAA3B,CAAR;AACD;;AAED;AACA;AACA,IAAM,UAAU,CACd,CAAC,GAAD,EAAM,GAAN,CADc,EAEd,CAAC,GAAD,EAAM,EAAN,CAFc,EAGd,CAAC,GAAD,EAAM,EAAN,CAHc,EAId,CAAC,GAAD,EAAM,GAAN,CAJc,CAAhB;;AAOA;;;;;;AAMO,SAAS,QAAT,CAAkB,OAAlB,EAA2B;AAChC,MAAM,MAAM,QAAQ,YAAR,EAAZ;AADgC,MAEzB,MAFyB,GAER,GAFQ,CAEzB,MAFyB;AAAA,MAEjB,KAFiB,GAER,GAFQ,CAEjB,KAFiB;;AAGhC,OAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,QAAQ,MAA5B,EAAoC,GAApC,EAAyC;AACvC,QAAM,WAAW,QAAQ,CAAR,EAAW,CAAX,CAAjB;AACA,QAAM,YAAY,QAAQ,CAAR,EAAW,CAAX,CAAlB;AACA,QAAI,YAAY,MAAhB,EAAwB;AACtB;AACD;AACD,QAAI,WAAW,KAAf,EAAsB;AACpB;AACD;AACD;AACA,QAAI,SAAS,SAAT,IAAsB,EAAtB,IAA4B,QAAQ,QAAR,IAAoB,EAApD,EAAwD;AACtD,aAAO,IAAP;AACD;AACF;AACD,SAAO,KAAP;AACD;;AAED;;;;AAIO,SAAS,wBAAT,CAAkC,MAAlC,EAA0C;AAC/C,mCAAuB,MAAvB,EAA+B,kBAAK,EAAC,aAAa,IAAd,EAAL,CAA/B;;AAEA;AACA;AACA,uBAAS,MAAT,EAAiB,UAAjB,EAA6B,QAA7B;;AAEA,SAAO,MAAP;AACD;;;;;;;;qjBClhBD;;;;;;;;;;;;;;;;QAiEgB,0B,GAAA,0B;QAaA,mC,GAAA,mC;QA8TA,gB,GAAA,gB;;AA5XhB;;AACA;;AACA;;AACA;;AACA;;;;AAEA;;;;;;;;;;;;;;AAcO,IAAI,kCAAJ;;AAEA,IAAM,gDACT,CAAC,CAAD,EAAI,IAAJ,EAAU,GAAV,EAAe,IAAf,EAAqB,GAArB,EAA0B,IAA1B,EAAgC,GAAhC,EAAqC,IAArC,EAA2C,GAA3C,EACE,IADF,EACQ,GADR,EACa,IADb,EACmB,GADnB,EACwB,IADxB,EAC8B,GAD9B,EACmC,IADnC,EACyC,GADzC,EAC8C,IAD9C,EACoD,GADpD,EACyD,IADzD,EAC+D,CAD/D,CADG;;AAIP;;;;;AAKA,IAAI,oCAAJ;;AAEA;AACA,IAAM,MAAM,uBAAZ;;AAEA;AACA,IAAM,YAAY,KAAK,GAAL,EAAlB;;AAEA;;;;;;;;;;AAUO,SAAS,0BAAT,CACL,OADK,EACI,KADJ,EACW,YADX,EACyB;AAC9B,MAAM,eAAe,kCAAiB,OAAjB,EAA0B,KAA1B,EAAiC,YAAjC,KACjB,gCAAe,CAAf,EAAkB,CAAlB,EAAqB,CAArB,EAAwB,CAAxB,CADJ;AAEA,MAAM,QAAQ,kBAAkB,YAAlB,EAAgC,OAAhC,CAAd;AACA,SAAO,qBACH,OADG,EACM,YADN,EACoB,YADpB,EACkC,KADlC,CAAP;AAED;;AAED;;;;AAIO,SAAS,mCAAT,CAA6C,GAA7C,EAAkD;AACvD,SAAO,0BAA0B,GAA1B,IACH,+BAA+B,GAD5B,IAEH,uBAAuB,IAAI,yBAAJ,CAA8B,SAFzD;AAGD;;AAED;;;;;IAIa,uB,WAAA,uB;AACX;;;;;AAKA,mCAAY,WAAZ,EAAyB,MAAzB,EAAiC,QAAjC,EAA2C;AAAA;;AAAA;;AACzC;AACA,SAAK,YAAL,GAAoB,WAApB;;AAEA;AACA,SAAK,qBAAL,GAA6B,IAA7B;;AAEA;AACA,SAAK,cAAL,GAAsB,KAAtB;;AAEA;AACA,SAAK,aAAL,GAAqB,KAArB;;AAEA;AACA,SAAK,kBAAL,GAA0B,IAA1B;;AAEA;AACA,SAAK,SAAL,GAAiB,YAAY,WAAZ,EAAjB;;AAEA;AACA,SAAK,gBAAL,GAAwB,kCACpB,MADoB,EACZ,oBADY,EACU,YAAY,KADtB,EAC6B,YAAM;AACrD,YAAK,yBAAL;AACD,KAHmB,CAAxB;;AAKA,SAAK,qBAAL,GAA6B,IAAI,4BAAJ,CAAiC,mBAAW;AACvE;AACA,WAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,QAAQ,MAA5B,EAAoC,GAApC,EAAyC;AACvC,eAAO,QAAQ,CAAR,EAAW,QAAX,CAAP;AACD;AACD,YAAK,gBAAL,CAAsB,IAAtB,CAA2B,cAA3B,EAA2C,kBAAK,EAAC,WAAW,OAAZ,EAAL,CAA3C;AACD,KAN4B,EAM1B,EAAC,WAAW,iBAAZ,EAN0B,CAA7B;AAOA,SAAK,qBAAL,CAA2B,IAA3B,CAAgC,KAAK,SAAL,CAAe,OAAf,EAAhC;;AAEA;AACA,SAAK,IAAL,GAAY,YAAM;AAChB,UAAI,CAAC,MAAK,cAAN,IAAwB,CAAC,MAAK,aAAlC,EAAiD;AAC/C;AACD;AACD,YAAK,qBAAL,CAA2B,IAA3B,CAAgC,MAAK,SAAL,CAAe,OAAf,EAAhC;AACD,KALD;AAMD;;AAED;;;;;;;;gDAI4B;AAAA;;AAC1B,WAAK,cAAL,GAAsB,IAAtB;AACA,WAAK,qBAAL,CAA2B,OAA3B,CAAmC,KAAK,YAAL,CAAkB,OAArD;AACA,WAAK,YAAL,CAAkB,QAAlB,GAA6B,OAA7B,CAAqC,YAAM;AACzC,eAAK,aAAL,GAAqB,OAAK,YAAL,CAAkB,YAAlB,EAArB;AACA,eAAK,IAAL;AACD,OAHD;;AAKA,UAAM,yBAAyB,KAAK,SAAL,CAAe,QAAf,CAAwB,KAAK,IAA7B,CAA/B;AACA,UAAM,yBAAyB,KAAK,SAAL,CAAe,SAAf,CAAyB,KAAK,IAA9B,CAA/B;AACA,WAAK,kBAAL,GAA0B,YAAM;AAC9B;AACA;AACD,OAHD;AAID;;AAED;;;;;;;uCAImB,U,EAAY;AAC7B,WAAK,aAAL,GAAqB,UAArB;AACD;;AAED;;;;;;8BAGU;AACR,WAAK,cAAL,GAAsB,KAAtB;AACA,WAAK,qBAAL,GAA6B,IAA7B;AACA,UAAI,KAAK,kBAAT,EAA6B;AAC3B,aAAK,kBAAL;AACA,aAAK,kBAAL,GAA0B,IAA1B;AACD;AACD,WAAK,gBAAL,CAAsB,OAAtB;AACA,WAAK,gBAAL,GAAwB,IAAxB;AACD;;;;;;AAIH;;;;;;;;;;;;IAUa,4B,WAAA,4B;AACX;;;;AAIA,wCAAY,QAAZ,EAAsB,UAAtB,EAAkC;AAAA;;AAChC;AACA,SAAK,SAAL,GAAiB,QAAjB;;AAEA;AACA,QAAI,YAAY,cAAc,WAAW,SAAzC;AACA,QAAI,SAAJ,EAAe;AACb,kBAAY,oBAAQ,SAAR,IACV,SADU,GACE,CAAC,SAAD,CADd;AAED,KAHD,MAGO;AACL,kBAAY,CAAC,CAAD,CAAZ;AACD;;AAED,SAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,UAAU,MAA9B,EAAsC,GAAtC,EAA2C;AACzC,sBAAM,MAAN,CAAa,2BAAe,UAAU,CAAV,CAAf,CAAb,EAA2C,2BACvC,6CADJ;AAED;;AAED;;;;AAIA,SAAK,UAAL,GAAkB,UAAU,IAAV,EAAlB;AACA,oBAAM,MAAN,CAAa,KAAK,UAAL,CAAgB,CAAhB,KAAsB,CAAtB,IACT,KAAK,UAAL,CAAgB,KAAK,UAAL,CAAgB,MAAhB,GAAyB,CAAzC,KAA+C,CADnD,EAEA,gDAFA;;AAIA;AACA,SAAK,iBAAL,GAAyB,IAAzB;;AAEA;AACA,SAAK,eAAL,GAAuB,SAAvB;;AAEA;;;;;AAKA,SAAK,eAAL,GAAuB,EAAvB;AACD;;AAED;;;;;;iCAEa;AACX,WAAK,eAAL,CAAqB,MAArB,GAA8B,CAA9B;AACD;;AAED;;;;;;;;;4BAMQ,O,EAAS;AACf;AACA,sBAAM,MAAN,CAAa,QAAQ,YAArB;;AAEA;AACA,WAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,KAAK,eAAL,CAAqB,MAAzC,EAAiD,GAAjD,EAAsD;AACpD,YAAI,KAAK,eAAL,CAAqB,CAArB,EAAwB,OAAxB,KAAoC,OAAxC,EAAiD;AAC/C,0BAAM,IAAN,CAAW,GAAX,EAAgB,kCAAhB;AACA;AACD;AACF;;AAED,UAAM,WAAW;AACf,wBADe;AAEf,8BAAsB;AAFP,OAAjB;;AAKA;AACA,UAAI,KAAK,iBAAT,EAA4B;AAC1B,YAAM,SAAS,KAAK,gCAAL,CACX,QADW,EACD,KAAK,iBADJ,EACuB,KAAK,eAD5B,CAAf;AAEA,YAAI,MAAJ,EAAY;AACV,eAAK,SAAL,CAAe,CAAC,MAAD,CAAf;AACD;AACF;;AAED;AACA,WAAK,eAAL,CAAqB,IAArB,CAA0B,QAA1B;AACD;;AAED;;;;;;;8BAIU,O,EAAS;AACjB;AACA,WAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,KAAK,eAAL,CAAqB,MAAzC,EAAiD,GAAjD,EAAsD;AACpD,YAAI,KAAK,eAAL,CAAqB,CAArB,EAAwB,OAAxB,KAAoC,OAAxC,EAAiD;AAC/C,eAAK,eAAL,CAAqB,MAArB,CAA4B,CAA5B,EAA+B,CAA/B;AACA;AACD;AACF;AACD,sBAAM,IAAN,CAAW,GAAX,EAAgB,gCAAhB;AACD;;AAED;;;;;;;;;;;yBAQK,Y,EAAc,U,EAAY;;AAE7B,UAAI,UAAJ,EAAgB;AACd;AACA,uBACI,gCAAe,YAAf,EAA6B,CAAC,WAAW,IAAzC,EAA+C,CAAC,WAAW,GAA3D,CADJ;AAEA,qBACI,gCAAe,UAAf,EAA2B,CAAC,WAAW,IAAvC,EAA6C,CAAC,WAAW,GAAzD,CADJ;AAED;;AAED,WAAK,iBAAL,GAAyB,YAAzB;AACA,WAAK,eAAL,GAAuB,UAAvB;;AAEA,UAAM,UAAU,EAAhB;;AAEA,WAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,KAAK,eAAL,CAAqB,MAAzC,EAAiD,GAAjD,EAAsD;AACpD,YAAM,SAAS,KAAK,gCAAL,CACX,KAAK,eAAL,CAAqB,CAArB,CADW,EACc,YADd,EAC4B,UAD5B,CAAf;AAEA,YAAI,MAAJ,EAAY;AACV,kBAAQ,IAAR,CAAa,MAAb;AACD;AACF;;AAED,UAAI,QAAQ,MAAZ,EAAoB;AAClB,aAAK,SAAL,CAAe,OAAf;AACD;AACF;;AAED;;;;;;;;;;;;;;;qDAYiC,K,EAAO,Y,EAAc,U,EAAY;AAAA,UACzD,OADyD,GAC9C,KAD8C,CACzD,OADyD;;AAGhE;;AACA,UAAI,YAAY,IAAhB;;AAEA;AACA;AACA;AACA;AACA,UAAM,cAAc,QAAQ,YAAR,EAApB;AACA,UAAM,QAAQ,QAAQ,QAAR,EAAd;AACA,kBAAY,SAAS,MAAM,YAAN,EAArB;;AAEA;AACA;AACA,UAAM,mBACF,kCAAiB,WAAjB,EAA8B,SAA9B,EAAyC,YAAzC,EAAuD,UAAvD,KACA,gCAAe,CAAf,EAAkB,CAAlB,EAAqB,CAArB,EAAwB,CAAxB,CAFJ;AAGA;AACA,UAAM,QAAQ,kBAAkB,gBAAlB,EAAoC,WAApC,CAAd;AACA,UAAM,mBAAmB,iBAAiB,KAAK,UAAtB,EAAkC,KAAlC,CAAzB;;AAEA,UAAI,oBAAoB,MAAM,oBAA9B,EAAoD;AAClD,eAAO,IAAP;AACD;AACD,YAAM,oBAAN,GAA6B,gBAA7B;;AAEA;AACA;AACA,UAAM,cAAc,qBAAqB,WAArB,EACf,aAAa,IAAb,GAAoB,YADL,EACoB,gBADpB,EACsC,KADtC,CAApB;AAEA,kBAAY,MAAZ,GAAqB,OAArB;AACA,aAAO,WAAP;AACD;;;;;;AAGH;;;;;;;;AAMA,SAAS,iBAAT,CAA2B,OAA3B,EAAoC,MAApC,EAA4C;AAC1C,SAAQ,QAAQ,KAAR,GAAgB,QAAQ,MAAzB,IAAoC,OAAO,KAAP,GAAe,OAAO,MAA1D,CAAP;AACD;;AAED;;;;;;;AAOO,SAAS,gBAAT,CAA0B,eAA1B,EAA2C,KAA3C,EAAkD;AACvD,MAAI,WAAW,CAAf;AACA,MAAI,SAAS,gBAAgB,MAA7B;AACA;AACA,MAAI,SAAS,CAAb,EAAgB;AACd,WAAO,CAAP;AACD;AACD,MAAI,MAAO,CAAC,WAAW,MAAZ,IAAsB,CAAvB,GAA4B,CAAtC;AACA,SAAO,WAAW,GAAlB,EAAuB;AACrB,QAAM,WAAW,gBAAgB,GAAhB,CAAjB;AACA;AACA,QAAI,QAAQ,QAAZ,EAAsB;AACpB,eAAS,GAAT;AACD,KAFD,MAEO;AACL,iBAAW,GAAX;AACD;AACD,UAAO,CAAC,WAAW,MAAZ,IAAsB,CAAvB,GAA4B,CAAlC;AACD;AACD,SAAO,MAAP;AACD;;AAED;;;;;;;;AAQA,SAAS,oBAAT,CACE,OADF,EACW,YADX,EACyB,YADzB,EACuC,KADvC,EAC8C;AAC5C;AACA;AACA,MAAI,qBAAqB,OAAzB;AACA,MAAI,aAAa,YAAjB;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAI,YAAJ,EAAkB;AAChB;AACA;AACA,iBAAa,2CAA6C,UAA1D;AACA,mBAAe,gCAAe,YAAf,EAA6B,CAAC,aAAa,IAA3C,EACX,CAAC,aAAa,GADH,CAAf;AAEA;AACA;AACA,yBAAqB,gCAAe,kBAAf,EACjB,CAAC,aAAa,IADG,EACG,CAAC,aAAa,GADjB,CAArB;AAEA;AACA,iBAAa,gCAAe,UAAf,EACT,CAAC,aAAa,IADL,EACW,CAAC,aAAa,GADzB,CAAb;AAED;;AAED,SAAO,0CAA2C;AAChD,YAAO,OAAO,WAAP,KAAuB,WAAvB,IAAsC,YAAY,GAAnD,GACJ,YAAY,GAAZ,EADI,GACgB,KAAK,GAAL,KAAa,SAFa;AAGhD,4BAHgD;AAIhD,4CAJgD;AAKhD,wBAAkB,YAL8B;AAMhD,yBAAmB;AAN6B;AAAlD;AAQD;;;;;;;8QC5cD;;;;;;;;;;;;;;;;AAgBA;;;;;QA2CgB,sB,GAAA,sB;QAsBA,e,GAAA,e;QA+BA,S,GAAA,S;QAaA,Y,GAAA,Y;QAoBA,e,GAAA,e;;AA5HhB;;AAGA;AACA;;AAEA;;;;AAIA,IAAI,sBAAJ;;AAGA;;;;AAIA,IAAI,sBAAJ;;AAGA;;;;AAIA,IAAI,qBAAJ;;AAGA;;;;AAIA,IAAI,qBAAJ;;AAEA;;;;;AAKO,SAAS,sBAAT,CAAgC,GAAhC,EAAqC;AAC1C,MAAM,OAAO,OAAO,MAAP,CAAc,IAAd,CAAb;AACA,OAAK,IAAM,CAAX,IAAgB,GAAhB,EAAqB;AACnB,QAAI,CAAC,eAAe,GAAf,EAAoB,CAApB,CAAL,EAA6B;AAC3B;AACD;AACD,QAAM,IAAI,IAAI,CAAJ,CAAV;AACA,SAAK,CAAL,IAAU,qBAAS,CAAT,IAAc,uBAAuB,CAAvB,CAAd,GAA0C,CAApD;AACD;AACD,SAAO,2BAA4B;AAAnC;AACD;;AAED;;;;;;;;;;AAUO,SAAS,eAAT,CAAyB,GAAzB,EAA8B,IAA9B,EAAoC;AACzC;AACA,MAAI,QAAQ,GAAZ,EAAiB;AACf,WAAO,GAAP;AACD;AACD;AACA,MAAM,QAAQ,KAAK,KAAL,CAAW,GAAX,CAAd;AACA,MAAI,QAAQ,GAAZ;AACA,OAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,MAAM,MAA1B,EAAkC,GAAlC,EAAuC;AACrC,QAAM,OAAO,MAAM,CAAN,CAAb;AACA,QAAI,QACA,KADA,IAEA,MAAM,IAAN,MAAgB,SAFhB,IAGA,eAAe,KAAf,EAAsB,IAAtB,CAHJ,EAIE;AACA,cAAQ,MAAM,IAAN,CAAR;AACA;AACD;AACD,YAAQ,SAAR;AACA;AACD;AACD,SAAO,KAAP;AACD;;AAED;;;;;;;AAOO,SAAS,SAAT,CAAmB,IAAnB,EAAyB;AAC9B,SAAO,2BAA2B,KAAK,KAAL,EAAW,qBAAuB,IAAlC;AAAlC;AACD;;AAED;;;;;;;;;AASO,SAAS,YAAT,CAAsB,IAAtB,EAA4B,YAA5B,EAA0C;AAC/C,MAAI;AACF,WAAO,UAAU,IAAV,CAAP;AACD,GAFD,CAEE,OAAO,CAAP,EAAU;AACV,QAAI,YAAJ,EAAkB;AAChB,mBAAa,CAAb;AACD;AACD,WAAO,SAAP;AACD;AACF;;AAED;;;;;;;;;AASO,SAAS,eAAT,CAAyB,CAAzB,EAA4B,CAA5B,EAA0C;AAAA,MAAX,KAAW,uEAAH,CAAG;;AAC/C,MAAI,CAAC,SAAS,KAAT,CAAL,EAAsB;AACpB,UAAM,IAAI,KAAJ,CAAU,+BAA+B,KAAzC,CAAN;AACD;AACD,MAAI,MAAM,CAAV,EAAa;AACX,WAAO,IAAP;AACD;AACD;AACA,MAAI,QAAQ,CAAZ,EAAe;AACb,WAAO,KAAP;AACD;AACD,MAAI,QAAO,CAAP,yCAAO,CAAP,eAAoB,CAApB,yCAAoB,CAApB,EAAJ,EAA2B;AACzB,WAAO,KAAP;AACD;AACD,MAAI,MAAM,OAAN,CAAc,CAAd,KAAoB,MAAM,OAAN,CAAc,CAAd,CAAxB,EAA0C;AACxC,QAAI,EAAE,MAAF,KAAa,EAAE,MAAnB,EAA2B;AACzB,aAAO,KAAP;AACD;AACD,SAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,EAAE,MAAtB,EAA8B,GAA9B,EAAmC;AACjC,UAAI,CAAC,gBAAgB,EAAE,CAAF,CAAhB,EAAsB,EAAE,CAAF,CAAtB,EAA4B,QAAQ,CAApC,CAAL,EAA6C;AAC3C,eAAO,KAAP;AACD;AACF;AACD,WAAO,IAAP;AACD;AACD,MAAI,KAAK,CAAL,IAAU,QAAO,CAAP,yCAAO,CAAP,OAAa,QAAvB,IAAmC,QAAO,CAAP,yCAAO,CAAP,OAAa,QAApD,EAA8D;AAC5D,QAAM,QAAQ,OAAO,IAAP,EAAY,sBAAwB,CAApC,CAAd;AACA,QAAM,QAAQ,OAAO,IAAP,EAAY,sBAAwB,CAApC,CAAd;AACA,QAAI,MAAM,MAAN,KAAiB,MAAM,MAA3B,EAAmC;AACjC,aAAO,KAAP;AACD;AACD,SAAK,IAAI,KAAI,CAAb,EAAgB,KAAI,MAAM,MAA1B,EAAkC,IAAlC,EAAuC;AACrC,UAAM,OAAO,MAAM,EAAN,CAAb;AACA,UAAM,SAAS,EAAE,IAAF,CAAf;AACA,UAAM,SAAS,EAAE,IAAF,CAAf;AACA,UAAI,CAAC,gBAAgB,MAAhB,EAAwB,MAAxB,EAAgC,QAAQ,CAAxC,CAAL,EAAiD;AAC/C,eAAO,KAAP;AACD;AACF;AACD,WAAO,IAAP;AACD;AACD,SAAO,KAAP;AACD;;AAGD;;;;;AAKA,SAAS,cAAT,CAAwB,GAAxB,EAA6B,GAA7B,EAAkC;AAChC,MAAI,OAAO,IAAP,IAAe,QAAO,GAAP,yCAAO,GAAP,MAAc,QAAjC,EAA2C;AACzC,WAAO,KAAP;AACD;AACD,SAAO,OAAO,SAAP,CAAiB,cAAjB,CAAgC,IAAhC;AACH,wBAAwB,GADrB,EAC2B,GAD3B,CAAP;AAED;;;;;;QCrHe,c,GAAA,c;QAoBA,qB,GAAA,qB;QAWA,kB,GAAA,kB;QAWA,gB,GAAA,gB;QA8BA,sB,GAAA,sB;QAiBA,gB,GAAA,gB;QAcA,c,GAAA,c;QAeA,iB,GAAA,iB;QAYA,oB,GAAA,oB;QAUA,gB,GAAA,gB;QAYA,2B,GAAA,2B;AA5OhB;;;;;;;;;;;;;;;;AAiBA;;;;;;;;;;;;;;;AAeO,IAAI,8CAAJ;;AAGP;;;;;;;;;;AAUO,IAAI,oDAAJ;;AAGP;;;;;;;;;;;;AAYO,IAAI,gEAAJ;;AAEP;;;;;;;AAOO,IAAM,gDAAoB;AAC/B,UAAQ,QADuB;AAE/B,OAAK,KAF0B;AAG/B,UAAQ;AAHuB,CAA1B;;AAMP;;;;;;;;;AASO,SAAS,cAAT,CAAwB,IAAxB,EAA8B,GAA9B,EAAmC,KAAnC,EAA0C,MAA1C,EAAkD;AACvD,SAAO;AACL,cADK;AAEL,YAFK;AAGL,gBAHK;AAIL,kBAJK;AAKL,YAAQ,MAAM,MALT;AAML,WAAO,OAAO,KANT;AAOL,OAAG,IAPE;AAQL,OAAG;AARE,GAAP;AAUD;;AAGD;;;;;;AAMO,SAAS,qBAAT,CAA+B,IAA/B,EAAqC;AAC1C,SAAO,eAAe,OAAO,KAAK,IAAZ,CAAf,EAAkC,OAAO,KAAK,GAAZ,CAAlC,EACH,OAAO,KAAK,KAAZ,CADG,EACiB,OAAO,KAAK,MAAZ,CADjB,CAAP;AAED;;AAED;;;;;;AAMO,SAAS,kBAAT,CAA4B,EAA5B,EAAgC,EAAhC,EAAoC;AACzC,SAAQ,GAAG,GAAH,IAAU,GAAG,MAAb,IAAuB,GAAG,GAAH,IAAU,GAAG,MAApC,IACJ,GAAG,IAAH,IAAW,GAAG,KADV,IACmB,GAAG,IAAH,IAAW,GAAG,KADzC;AAED;;AAGD;;;;;AAKO,SAAS,gBAAT,CAA0B,QAA1B,EAAoC;AACzC,MAAI,KAAK,CAAC,QAAV;AACA,MAAI,KAAK,QAAT;AACA,MAAI,KAAK,CAAC,QAAV;AACA,MAAI,KAAK,QAAT;AACA,OAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,UAAU,MAA9B,EAAsC,GAAtC,EAA2C;AACzC,QAAM,UAAU,UAAU,CAAV,CAAhB;AACA,QAAI,CAAC,OAAL,EAAc;AACZ;AACD;AACD,SAAK,KAAK,GAAL,CAAS,EAAT,EAAa,QAAQ,IAArB,CAAL;AACA,SAAK,KAAK,GAAL,CAAS,EAAT,EAAa,QAAQ,IAAR,GAAe,QAAQ,KAApC,CAAL;AACA,SAAK,KAAK,GAAL,CAAS,EAAT,EAAa,QAAQ,GAArB,CAAL;AACA,SAAK,KAAK,GAAL,CAAS,EAAT,EAAa,QAAQ,GAAR,GAAc,QAAQ,MAAnC,CAAL;AACA,QAAI,KAAK,EAAL,IAAW,KAAK,EAApB,EAAwB;AACtB,aAAO,IAAP;AACD;AACF;AACD,MAAI,MAAM,QAAV,EAAoB;AAClB,WAAO,IAAP;AACD;AACD,SAAO,eAAe,EAAf,EAAmB,EAAnB,EAAuB,KAAK,EAA5B,EAAgC,KAAK,EAArC,CAAP;AACD;;AAED;;;;;;AAMO,SAAS,sBAAT,CAAgC,EAAhC,EAAoC,EAApC,EAAwC;AAC7C,MAAI,GAAG,GAAH,GAAS,GAAG,GAAhB,EAAqB;AACnB,WAAO,kBAAkB,GAAzB;AACD,GAFD,MAEO,IAAI,GAAG,MAAH,GAAY,GAAG,MAAnB,EAA2B;AAChC,WAAO,kBAAkB,MAAzB;AACD,GAFM,MAEA;AACL,WAAO,kBAAkB,MAAzB;AACD;AACF;;AAED;;;;;;;AAOO,SAAS,gBAAT,CAA0B,IAA1B,EAAgC,EAAhC,EAAoC,EAApC,EAAwC;AAC7C,SAAO,eAAe,KAAK,IAAL,GAAY,KAAK,KAAL,GAAa,EAAxC,EACH,KAAK,GAAL,GAAW,KAAK,MAAL,GAAc,EADtB,EAEH,KAAK,KAAL,IAAc,IAAI,KAAK,CAAvB,CAFG,EAGH,KAAK,MAAL,IAAe,IAAI,KAAK,CAAxB,CAHG,CAAP;AAID;;AAED;;;;;;;AAOO,SAAS,cAAT,CAAwB,IAAxB,EAA8B,EAA9B,EAAkC,EAAlC,EAAsC;AAC3C,MAAK,MAAM,CAAN,IAAW,MAAM,CAAlB,IACC,KAAK,KAAL,IAAc,CAAd,IAAmB,KAAK,MAAL,IAAe,CADvC,EAC2C;AACzC,WAAO,IAAP;AACD;AACD,SAAO,eAAe,KAAK,IAAL,GAAY,EAA3B,EAA+B,KAAK,GAAL,GAAW,EAA1C,EACH,KAAK,KADF,EACS,KAAK,MADd,CAAP;AAED;;AAGD;;;;;AAKO,SAAS,iBAAT,CAA2B,OAA3B,EAAoC,MAApC,EAA4C;AACjD,SAAQ,OAAO,GAAP,KAAe,SAAf,IAA4B,OAAO,GAAP,IAAc,QAAQ,GAAnD,IACF,OAAO,KAAP,KAAiB,SAAjB,IAA8B,OAAO,KAAP,IAAgB,QAAQ,KADpD,IAEF,OAAO,MAAP,KAAkB,SAAlB,IAA+B,OAAO,MAAP,IAAiB,QAAQ,MAFtD,IAGF,OAAO,IAAP,KAAgB,SAAhB,IAA6B,OAAO,IAAP,IAAe,QAAQ,IAHzD;AAID;;AAED;;;;;AAKO,SAAS,oBAAT,CAA8B,IAA9B,EAAoC,EAApC,EAAwC;AAC7C,SAAO,KAAK,KAAL,IAAc,GAAG,KAAjB,IACH,KAAK,MAAL,KAAgB,GAAG,MADvB;AAED;;AAED;;;;;AAKO,SAAS,gBAAT,CAA0B,EAA1B,EAA8B,EAA9B,EAAkC;AACvC,MAAI,CAAC,EAAD,IAAO,CAAC,EAAZ,EAAgB;AACd,WAAO,KAAP;AACD;AACD,SAAO,GAAG,IAAH,IAAW,GAAG,IAAd,IAAsB,GAAG,GAAH,IAAU,GAAG,GAAnC,IACH,GAAG,KAAH,IAAY,GAAG,KADZ,IACqB,GAAG,MAAH,IAAa,GAAG,MAD5C;AAED;;AAED;;;;AAIO,SAAS,2BAAT,CAAqC,aAArC,EAAoD;AACzD,MAAI,CAAC,aAAL,EAAoB;AAClB,WAAO,aAAP;AACD;AACD,SAAO;AACL,SAAK,cAAc,GADd;AAEL,YAAQ,cAAc,MAFjB;AAGL,UAAM,cAAc,IAHf;AAIL,WAAO,cAAc;AAJhB,GAAP;AAMD;;;;;;;;;;QC3He,W,GAAA,W;QAcA,c,GAAA,c;QAUA,mB,GAAA,mB;QAgBA,iB,GAAA,iB;QAYA,W,GAAA,W;QAuBA,Y,GAAA,Y;QAgBA,qB,GAAA,qB;QAYA,c,GAAA,c;QAcA,gB,GAAA,gB;QAYA,oB,GAAA,oB;QAcA,oB,GAAA,oB;QA+BA,gB,GAAA,gB;QAyBA,iB,GAAA,iB;;AA7ShB;;AACA;;AACA;;AACA;;AACA;;kJAzBA;;;;;;;;;;;;;;;;AAgBA;;;;;AAWA;;;AAGO,IAAM,0BAAS;AACpB,aAAW,WADS;AAEpB,SAAO,OAFa;AAGpB,gBAAc,cAHM;AAIpB,cAAY,YAJQ;AAKpB,aAAW,WALS;AAMpB,QAAM,MANc;AAOpB,aAAW,WAPS;AAQpB,SAAO,OARa;AASpB,aAAW;AATS,CAAf;;AAaP;;;;;AAKO,IAAM,0CAAiB;AAC5B,WAAS,CADmB;AAE5B,YAAU,CAFkB;AAG5B,OAAK,CAHuB;AAI5B,cAAY;AAJgB,CAAvB;;AAQP;;;;AAIO,IAAI,sCAAJ;;AAGP;;;;;;AAMA,IAAI,sBAAJ;;AAGA;;;;;;;;;;AAUO,IAAM,kDAAqB;AAChC,eAAa,EAAC,OAAO,KAAR,EAAe,QAAQ,KAAvB,EADmB;AAEhC,mBAAiB,EAAC,OAAO,KAAR,EAAe,QAAQ,KAAvB,EAFe;AAGhC;AACA,eAAa,IAJmB;AAKhC,sBAAoB,EAAC,OAAO,MAAR,EAAgB,QAAQ,MAAxB;AALY,CAA3B;;AASP;;;;;;AAMO,IAAM,gDAAoB;AAC/B,cAAY,IADmB;AAE/B,oBAAkB,IAFa;AAG/B,+BAA6B,IAHE;AAI/B,eAAa,IAJkB;AAK/B,kBAAgB,IALe;AAM/B,2BAAyB,IANM;AAO/B,uBAAqB,IAPU;AAQ/B,uBAAqB,IARU;AAS/B,gBAAc,IATiB;AAU/B,aAAW,IAVoB;AAW/B,mBAAiB,IAXc;AAY/B,cAAY,IAZmB;AAa/B,uBAAqB,IAbU;AAc/B,mBAAiB,IAdc;AAe/B,kBAAgB,IAfe;AAgB/B,eAAa,IAhBkB;AAiB/B,iBAAe;AAjBgB,CAA1B;;AAqBP;;;;;AAKO,SAAS,WAAT,CAAqB,CAArB,EAAwB;AAC7B,OAAK,IAAM,CAAX,IAAgB,MAAhB,EAAwB;AACtB,QAAI,OAAO,CAAP,KAAa,CAAjB,EAAoB;AAClB,aAAO,OAAO,CAAP,CAAP;AACD;AACF;AACD,SAAO,SAAP;AACD;;AAGD;;;;AAIO,SAAS,cAAT,CAAwB,MAAxB,EAAgC;AACrC,SAAO,sBAAsB,MAA7B;AACD;;AAGD;;;;;AAKO,SAAS,mBAAT,CAA6B,MAA7B,EAAqC;AAC1C,SAAQ,UAAU,OAAO,KAAjB,IACJ,UAAU,OAAO,YADb,IAEJ,UAAU,OAAO,UAFb,IAGJ,UAAU,OAAO,IAHb,IAIJ,UAAU,OAAO,SAJb,IAKJ,UAAU,OAAO,KALb,IAMJ,UAAU,OAAO,SANrB;AAOD;;AAGD;;;;;AAKO,SAAS,iBAAT,CAA2B,GAA3B,EAAgC;AACrC,MAAM,UAAW,OAAO,GAAP,IAAc,QAAf,GAA2B,GAA3B,GAAiC,IAAI,OAArD;AACA,SAAO,WAAW,wBAAW,QAAQ,WAAR,EAAX,EAAkC,IAAlC,CAAlB;AACD;;AAGD;;;;;;AAMO,SAAS,WAAT,CAAqB,CAArB,EAAwB;AAC7B,MAAI,OAAO,CAAP,IAAY,QAAhB,EAA0B;AACxB,WAAO,IAAI,IAAX;AACD;AACD,MAAI,CAAC,CAAL,EAAQ;AACN,WAAO,SAAP;AACD;AACD,MAAI,CAAC,6DAA6D,IAA7D,CAAkE,CAAlE,CAAL,EAA2E;AACzE,WAAO,SAAP;AACD;AACD,MAAI,gBAAgB,IAAhB,CAAqB,CAArB,CAAJ,EAA6B;AAC3B,WAAO,IAAI,IAAX;AACD;AACD,SAAO,CAAP;AACD;;AAID;;;;;AAKO,SAAS,YAAT,CAAsB,MAAtB,EAA8B;AACnC,mBAAO,MAAP,CACI,4DAA4D,IAA5D,CAAiE,MAAjE,CADJ,EAEI,0BAFJ,EAEgC,MAFhC;AAGA,SAAO,0BAA2B;AAAlC;AACD;;AAKD;;;;;;AAMO,SAAS,qBAAT,CAA+B,MAA/B,EAAuC;AAC5C,mBAAO,MAAP,CAAc,6CAA6C,IAA7C,CAAkD,MAAlD,CAAd,EACI,qCADJ,EAC2C,MAD3C;AAEA,SAAO,MAAP;AACD;;AAGD;;;;;AAKO,SAAS,cAAT,CAAwB,MAAxB,EAAgC;AACrC,eAAa,MAAb;AACA,kBAAM,YAAN,CAAmB,MAAnB;AACA,MAAM,IAAI,iBAAO,MAAP,CAAc,OAAO,KAAP,CAAa,SAAb,CAAd,EACN,8BADM,EAC0B,MAD1B,CAAV;AAEA,SAAO,EAAE,CAAF,CAAP;AACD;;AAGD;;;;;AAKO,SAAS,gBAAT,CAA0B,MAA1B,EAAkC;AACvC,MAAM,MAAM,WAAW,MAAX,CAAZ;AACA,SAAO,2BAAe,GAAf,IAAsB,GAAtB,GAA4B,SAAnC;AACD;;AAGD;;;;;;AAMO,SAAS,oBAAT,CAA8B,OAA9B,EAAuC;AAC5C,YAAU,QAAQ,WAAR,EAAV;AACA,SAAO,mBAAmB,OAAnB,MAAgC,SAAvC;AACD;;AAGD;;;;;;;;AAQO,SAAS,oBAAT,CAA8B,OAA9B,EAAuC;AAC5C,MAAM,UAAU,QAAQ,OAAR,CAAgB,WAAhB,EAAhB;AACA,kBAAM,MAAN,CAAa,mBAAmB,OAAnB,MAAgC,SAA7C;AACA,MAAI,CAAC,mBAAmB,OAAnB,CAAL,EAAkC;AAChC,QAAM,MAAM,QAAQ,aAApB;AACA,QAAM,iBAAiB,QAAQ,OAAR,CAAgB,QAAhB,EAA0B,EAA1B,CAAvB;AACA,QAAM,OAAO,IAAI,aAAJ,CAAkB,cAAlB,CAAb;AACA;AACA,SAAK,QAAL,GAAgB,IAAhB;AACA,0BAAU,IAAV,EAAgB;AACd,gBAAU,UADI;AAEd,kBAAY;AAFE,KAAhB;AAIA,QAAI,IAAJ,CAAS,WAAT,CAAqB,IAArB;AACA,uBAAmB,OAAnB,IAA8B;AAC5B,aAAO,CAAC,MAAK,MAAM,WAAX,IAA0B,CAA3B,IAAgC,IADX;AAE5B,cAAQ,CAAC,MAAK,MAAM,YAAX,IAA2B,CAA5B,IAAiC;AAFb,KAA9B;AAIA,QAAI,IAAJ,CAAS,WAAT,CAAqB,IAArB;AACD;AACD,SAAO,6BAA8B,mBAAmB,OAAnB;AAArC;AACD;;AAGD;;;;;;;AAOO,SAAS,gBAAT,CAA0B,OAA1B,EAAmC;AACxC,MAAM,UAAU,QAAQ,OAAR,CAAgB,WAAhB,EAAhB;AACA,MAAI,WAAW,QAAX,IAAuB,WAAW,WAAtC,EAAmD;AACjD,WAAO,IAAP;AACD;AACD,SAAO,kBAAkB,OAAlB,KAA8B,KAArC;AACD;;AAGD;;;;;;;;;;;;;;;;AAgBO,SAAS,iBAAT,CAA2B,OAA3B,EAAoC;AACzC;AACA;AACA;AACA,MAAM,sBAAsB,QAAQ,YAAR,CAAqB,kBAArB,CAA5B;AACA,MAAI,mBAAJ,EAAyB;AACvB,QAAM,UAAS,sBAAwB,gBAAM,MAAN,CACnC,YAAY,mBAAZ,CADmC,CAAvC;AAEA,QAAI,CAAC,WAAU,OAAO,UAAjB,IAA+B,WAAU,OAAO,SAAjD,KACC,QAAQ,iBADb,EACgC;AAC9B;AACA,cAAQ,YAAR,GACI,QAAQ,aAAR,CAAsB,iBAAtB,KAA4C,SADhD;AAED,KALD,MAKO,IAAI,WAAU,OAAO,SAArB,EAAgC;AACrC,2BAAqB,OAArB;AACD;AACD,WAAO,OAAP;AACD;;AAED;AACA;AACA;;AAEA;AACA,MAAM,aAAa,QAAQ,YAAR,CAAqB,QAArB,CAAnB;AACA,MAAM,YAAY,QAAQ,YAAR,CAAqB,OAArB,CAAlB;AACA,MAAM,aAAa,QAAQ,YAAR,CAAqB,QAArB,CAAnB;AACA,MAAM,YAAY,QAAQ,YAAR,CAAqB,OAArB,CAAlB;AACA,MAAM,cAAc,QAAQ,YAAR,CAAqB,SAArB,CAApB;;AAEA;AACA,MAAM,cAAc,aAAa,YAAY,UAAZ,CAAb,GAAuC,IAA3D;AACA,mBAAO,MAAP,CAAc,gBAAgB,SAA9B,EAAyC,oBAAzC,EAA+D,UAA/D;AACA;AACA,MAAM,aAAc,aAAa,aAAa,MAA3B,GACjB,YAAY,SAAZ,CADiB,GACQ,SAD3B;AAEA,mBAAO,MAAP,CAAc,eAAe,SAA7B,EAAwC,yBAAxC,EAAmE,SAAnE;AACA;AACA,MAAM,cAAe,cAAc,cAAc,OAA7B,GAClB,YAAY,UAAZ,CADkB,GACQ,UAD5B;AAEA,mBAAO,MAAP,CAAc,gBAAgB,SAA9B,EAAyC,0BAAzC,EACI,UADJ;;AAGA;AACA,MAAI,cAAJ;AACA,MAAI,eAAJ;AACA,MAAI,eAAJ;;AAEA;AACA,MAAI,CAAC,CAAC,WAAD,IAAgB,eAAe,OAAO,KAAtC,IACD,eAAe,OAAO,YADtB,MAEC,CAAC,UAAD,IAAe,CAAC,WAFjB,KAEiC,qBAAqB,QAAQ,OAA7B,CAFrC,EAE4E;AAC1E;AACA;AACA,QAAM,aAAa,qBAAqB,OAArB,CAAnB;AACA,YAAS,cAAc,eAAe,OAAO,YAArC,GAAqD,UAArD,GACN,WAAW,KADb;AAEA,aAAS,eAAe,WAAW,MAAnC;AACD,GATD,MASO;AACL,YAAQ,UAAR;AACA,aAAS,WAAT;AACD;;AAED;AACA,MAAI,WAAJ,EAAiB;AACf,aAAS,WAAT;AACD,GAFD,MAEO,IAAI,CAAC,KAAD,IAAU,CAAC,MAAf,EAAuB;AAC5B,aAAS,OAAO,SAAhB;AACD,GAFM,MAEA,IAAI,UAAU,OAAd,EAAuB;AAC5B,aAAS,OAAO,KAAhB;AACD,GAFM,MAEA,IAAI,WAAW,CAAC,KAAD,IAAU,SAAS,MAA9B,CAAJ,EAA2C;AAChD,aAAS,OAAO,YAAhB;AACD,GAFM,MAEA,IAAI,UAAU,KAAV,KAAoB,aAAa,WAAjC,CAAJ,EAAmD;AACxD,aAAS,OAAO,UAAhB;AACD,GAFM,MAEA;AACL,aAAS,OAAO,KAAhB;AACD;;AAED;AACA,MAAI,UAAU,OAAO,KAAjB,IAA0B,UAAU,OAAO,YAA3C,IACA,UAAU,OAAO,UADjB,IAC+B,UAAU,OAAO,SADpD,EAC+D;AAC7D,qBAAO,MAAP,CAAc,MAAd,EAAsB,qCAAtB,EAA6D,UAA7D;AACD;AACD,MAAI,UAAU,OAAO,YAArB,EAAmC;AACjC,qBAAO,MAAP,CAAc,CAAC,KAAD,IAAU,SAAS,MAAjC,EACI,wDACA,6BAFJ,EAEmC,SAFnC;AAGD;AACD,MAAI,UAAU,OAAO,KAAjB,IAA0B,UAAU,OAAO,UAA3C,IACA,UAAU,OAAO,SADrB,EACgC;AAC9B,qBAAO,MAAP,CAAc,SAAS,SAAS,MAAhC,EACI,4DADJ,EAEI,SAFJ;AAGD;;AAED,MAAI,UAAU,OAAO,UAAjB,IAA+B,UAAU,OAAO,SAApD,EAA+D;AAC7D,qBAAO,MAAP,CAAc,eAAe,KAAf,KAAyB,eAAe,MAAf,CAAvC,EACI,8DADJ,EAEI,SAFJ,EAEe,UAFf;AAGD,GAJD,MAIO;AACL,qBAAO,MAAP,CAAc,gBAAgB,IAA9B,EACI,2DADJ;AAED;;AAED;AACA,UAAQ,SAAR,CAAkB,GAAlB,CAAsB,eAAe,MAAf,CAAtB;AACA,MAAI,oBAAoB,MAApB,CAAJ,EAAiC;AAC/B,YAAQ,SAAR,CAAkB,GAAlB,CAAsB,+BAAtB;AACD;AACD,MAAI,UAAU,OAAO,SAArB,EAAgC;AAC9B;AACA;AACA,yBAAqB,OAArB;AACD,GAJD,MAIO,IAAI,UAAU,OAAO,KAArB,EAA4B;AACjC,0BAAU,OAAV,EAAmB;AACjB,aAAO,gBAAM,YAAN,CAAmB,KAAnB,CADU;AAEjB,cAAQ,gBAAM,YAAN,CAAmB,MAAnB;AAFS,KAAnB;AAID,GALM,MAKA,IAAI,UAAU,OAAO,YAArB,EAAmC;AACxC,yBAAS,OAAT,EAAkB,QAAlB,EAA4B,gBAAM,YAAN,CAAmB,MAAnB,CAA5B;AACD,GAFM,MAEA,IAAI,UAAU,OAAO,UAArB,EAAiC;AACtC,QAAM,QAAQ,QAAQ,aAAR,CAAsB,aAAtB,CAAoC,iBAApC,CAAd;AACA,0BAAU,KAAV,EAAiB;AACf,eAAS,OADM;AAEf,kBACI,iBAAiB,MAAjB,IAA2B,iBAAiB,KAAjB,CAA5B,GAAuD,GAAxD,GAA+D;AAHlD,KAAjB;AAKA,YAAQ,YAAR,CAAqB,KAArB,EAA4B,QAAQ,UAApC;AACA,YAAQ,YAAR,GAAuB,KAAvB;AACD,GATM,MASA,IAAI,UAAU,OAAO,SAArB,EAAgC;AACrC;AACA;AACA;AACA,QAAM,SAAQ,6BAAQ,OAAR,CAAR,iBAAN;AAIA,QAAM,iBAAiB,OAAM,iBAA7B;AACA,mBAAe,YAAf,CAA4B,KAA5B,qDACqD,MADrD,iBACuE,KADvE;AAEA,YAAQ,YAAR,CAAqB,MAArB,EAA4B,QAAQ,UAApC;AACA;AACA,YAAQ,YAAR,GAAuB,cAAvB;AACD,GAdM,MAcA,IAAI,UAAU,OAAO,IAArB,EAA2B;AAChC;AACD,GAFM,MAEA,IAAI,UAAU,OAAO,SAArB,EAAgC;AACrC;AACA;AACA;AACD,GAJM,MAIA,IAAI,UAAU,OAAO,SAArB,EAAgC;AACrC;AACA;AACA,QAAI,KAAJ,EAAW;AACT,2BAAS,OAAT,EAAkB,OAAlB,EAA2B,KAA3B;AACD;AACD,QAAI,MAAJ,EAAY;AACV,2BAAS,OAAT,EAAkB,QAAlB,EAA4B,MAA5B;AACD;AACF,GATM,MASA,IAAI,UAAU,OAAO,KAArB,EAA4B;AACjC,YAAQ,SAAR,CAAkB,GAAlB,CAAsB,gCAAtB;AACA,QAAI,KAAJ,EAAW;AACT,2BAAS,OAAT,EAAkB,OAAlB,EAA2B,KAA3B;AACD;AACD,yBAAS,OAAT,EAAkB,QAAlB,EAA4B,CAA5B;AACD;AACD,SAAO,MAAP;AACD;;AAGD;;;AAGA,SAAS,oBAAT,CAA8B,OAA9B,EAAuC;AACrC;AACA;AACA;AACA,uBAAS,OAAT,EAAkB,SAAlB,EAA6B,MAA7B;AACA,UAAQ,SAAR,CAAkB,GAAlB,CAAsB,mBAAtB;AACD;;;;;;;;qjBCpfD;;;;;;;;;;;;;;;;QA4CgB,kB,GAAA,kB;QAQA,gB,GAAA,gB;QAsBA,c,GAAA,c;QAaA,gB,GAAA,gB;QA+YA,yB,GAAA,yB;QAyBA,gB,GAAA,gB;QA6BA,Y,GAAA,Y;QAkCA,kB,GAAA,kB;QAiBA,6B,GAAA,6B;QAgBA,I,GAAA,I;QA4CA,G,GAAA,G;QAwBA,W,GAAA,W;;AAnpBhB;;AACA;;AACA;;;;AAEA;;;;;;;;;AASO,IAAM,oDAAsB,oBAA5B;;AAGP;;;;;AAKO,IAAM,gEAA4B,0BAAlC;;AAGP;;;;AAIO,SAAS,kBAAT,CAA4B,OAA5B,EAAqC;AAC1C,SAAO,QAAQ,OAAR,CAAgB,mBAAhB,KAAwC,CAA/C;AACD;;AAED;;;;AAIO,SAAS,gBAAT,CAA0B,OAA1B,EAAmC;AACxC,SAAO,QAAQ,OAAR,CAAgB,yBAAhB,KAA8C,CAArD;AACD;;AAGD;;;;AAIO,IAAM,8BAAW;AACtB,OAAK,CADiB;AAEtB,SAAO,CAFe;AAGtB,QAAM,CAHgB;AAItB,QAAM,CAJgB;AAKtB,QAAM;AALgB,CAAjB;;AAQP;;;;;AAKO,SAAS,cAAT,CAAwB,EAAxB,EAA4B;AACjC,OAAK,WAAL,GAAmB,EAAnB;AACD;;AAED;;;;AAIA,IAAI,iBAAiB,SAArB;;AAEA;;;AAGO,SAAS,gBAAT,CAA0B,KAA1B,EAAiC;AACtC,mBAAiB,KAAjB;AACD;;AAED;;;;;;;;;;;IAUa,G,WAAA,G;AACX;;;;;;;;;;;AAWA,eAAY,GAAZ,EAAiB,SAAjB,EAA4B,UAA5B,EAAwC;AAAA;;AACtC;;;;;AAKA,SAAK,GAAL,GAAY,qBAAU,IAAV,IAAkB,IAAI,eAAvB,GAA0C,IAAI,MAA9C,GAAuD,GAAlE;;AAEA;AACA,SAAK,UAAL,GAAkB,SAAlB;;AAEA;AACA,SAAK,MAAL,GAAc,KAAK,aAAL,EAAd;;AAEA;AACA,SAAK,OAAL,GAAe,cAAc,EAA7B;AACD;;AAED;;;;;;;;gCAIY;AACV,aAAQ,mBAAmB,SAApB,GAAiC,cAAjC,GAAkD,KAAK,MAA9D;AACD;;AAED;;;;;;;oCAIgB;AACd;AACA,UAAI,CAAC,KAAK,GAAL,CAAS,OAAV,IAAqB,CAAC,KAAK,GAAL,CAAS,OAAT,CAAiB,GAA3C,EAAgD;AAC9C,eAAO,SAAS,GAAhB;AACD;;AAED;AACA,UAAI,qBAAU,GAAV,IAAiB,GAArB,EAA0B;AACxB,eAAO,SAAS,GAAhB;AACD;;AAED;AACA,UAAI,qBAAU,IAAV,IAAkB,KAAK,GAAL,CAAS,UAA/B,EAA2C;AACzC,eAAO,SAAS,IAAhB;AACD;;AAED;AACA,UAAI,qBAAU,QAAV,IAAsB,CAAC,qBAAU,GAArC,EAA0C;AACxC,eAAO,SAAS,IAAhB;AACD;;AAED;AACA,aAAO,KAAK,UAAL,CAAgB,gCAAhB,CAAP;AACD;;AAED;;;;;;;;yBAKK,G,EAAK,K,EAAO,Q,EAAU;AACzB,UAAI,KAAK,SAAL,MAAoB,SAAS,GAAjC,EAAsC;AACpC,YAAI,KAAK,KAAK,GAAL,CAAS,OAAT,CAAiB,GAA1B;AACA,YAAI,SAAS,OAAb,EAAsB;AACpB,eAAK,KAAK,GAAL,CAAS,OAAT,CAAiB,KAAjB,IAA0B,EAA/B;AACD,SAFD,MAEO,IAAI,SAAS,MAAb,EAAqB;AAC1B,eAAK,KAAK,GAAL,CAAS,OAAT,CAAiB,IAAjB,IAAyB,EAA9B;AACD,SAFM,MAEA,IAAI,SAAS,MAAb,EAAqB;AAC1B,eAAK,KAAK,GAAL,CAAS,OAAT,CAAiB,IAAjB,IAAyB,EAA9B;AACD;AACD,YAAI,qBAAU,QAAd,EAAwB;AACtB,mBAAS,OAAT,CAAiB,MAAM,GAAN,GAAY,GAA7B;AACD;AACD,WAAG,KAAH,CAAS,KAAK,GAAL,CAAS,OAAlB,EAA2B,QAA3B;AACD;AACF;;AAED;;;;;;;gCAIY;AACV,aAAO,KAAK,SAAL,MAAoB,SAAS,GAApC;AACD;;AAED;;;;;;;;yBAKK,G,EAAK,Q,EAAU;AAClB,UAAI,KAAK,SAAL,MAAoB,SAAS,IAAjC,EAAuC;AACrC,aAAK,IAAL,CAAU,GAAV,EAAe,MAAf,EAAuB,MAAM,SAAN,CAAgB,KAAhB,CAAsB,IAAtB,CAA2B,SAA3B,EAAsC,CAAtC,CAAvB;AACD;AACF;;AAED;;;;;;;;yBAKK,G,EAAK,Q,EAAU;AAClB,UAAI,KAAK,SAAL,MAAoB,SAAS,IAAjC,EAAuC;AACrC,aAAK,IAAL,CAAU,GAAV,EAAe,MAAf,EAAuB,MAAM,SAAN,CAAgB,KAAhB,CAAsB,IAAtB,CAA2B,SAA3B,EAAsC,CAAtC,CAAvB;AACD;AACF;;AAED;;;;;;;;yBAKK,G,EAAK,Q,EAAU;AAClB,UAAI,KAAK,SAAL,MAAoB,SAAS,IAAjC,EAAuC;AACrC,aAAK,IAAL,CAAU,GAAV,EAAe,MAAf,EAAuB,MAAM,SAAN,CAAgB,KAAhB,CAAsB,IAAtB,CAA2B,SAA3B,EAAsC,CAAtC,CAAvB;AACD;AACF;;AAED;;;;;;;;;;;2BAQO,G,EAAK,Q,EAAU;AACpB,UAAI,KAAK,SAAL,MAAoB,SAAS,KAAjC,EAAwC;AACtC,aAAK,IAAL,CAAU,GAAV,EAAe,OAAf,EAAwB,MAAM,SAAN,CAAgB,KAAhB,CAAsB,IAAtB,CAA2B,SAA3B,EAAsC,CAAtC,CAAxB;AACD,OAFD,MAEO;AACL,YAAM,QAAQ,iBAAiB,KAAjB,CAAuB,IAAvB,EACV,MAAM,SAAN,CAAgB,KAAhB,CAAsB,IAAtB,CAA2B,SAA3B,EAAsC,CAAtC,CADU,CAAd;AAEA,aAAK,aAAL,CAAmB,KAAnB;AACA,eAAO,KAAP;AACD;AACF;;AAED;;;;;;;;0BAKM,G,EAAK,Q,EAAU;AACnB,UAAM,QAAQ,KAAK,MAAL,CAAY,KAAZ,CAAkB,IAAlB,EAAwB,SAAxB,CAAd;AACA,UAAI,KAAJ,EAAW;AACT,cAAM,IAAN,GAAa,OAAO,MAAM,IAA1B;AACA;AACA,aAAK,WAAL,CAAiB,KAAjB;AACD;AACF;;AAED;;;;;;;;;kCAMc,S,EAAW,Q,EAAU;AACjC,UAAM,QAAQ,KAAK,MAAL,CAAY,KAAZ,CAAkB,IAAlB,EAAwB,SAAxB,CAAd;AACA,UAAI,KAAJ,EAAW;AACT,cAAM,QAAN,GAAiB,IAAjB;AACA;AACA,aAAK,WAAL,CAAiB,KAAjB;AACD;AACF;;AAED;;;;;;;;gCAKY,Q,EAAU;AACpB,UAAM,QAAQ,iBAAiB,KAAjB,CAAuB,IAAvB,EAA6B,SAA7B,CAAd;AACA,WAAK,aAAL,CAAmB,KAAnB;AACA,aAAO,KAAP;AACD;;AAED;;;;;;;;wCAKoB,Q,EAAU;AAC5B,UAAM,QAAQ,iBAAiB,KAAjB,CAAuB,IAAvB,EAA6B,SAA7B,CAAd;AACA,WAAK,aAAL,CAAmB,KAAnB;AACA,YAAM,QAAN,GAAiB,IAAjB;AACA,aAAO,KAAP;AACD;;AAED;;;;;;;;;;;;;;;;;;;;;;;2BAoBO,e,EAAiB,W,EAAa,Q,EAAU;AAC7C,UAAI,qBAAJ;AACA,UAAI,CAAC,eAAL,EAAsB;AACpB,YAAM,UAAU,eAAe,kBAA/B;AACA,YAAM,eAAe,QAAQ,KAAR,CAAc,IAAd,CAArB;AACA,YAAM,QAAQ,aAAa,KAAb,EAAd;AACA,YAAI,YAAY,KAAhB;AACA,YAAM,eAAe,EAArB;AACA,uBAAe,YAAf,EAA6B,KAA7B;AACA,aAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,UAAU,MAA9B,EAAsC,GAAtC,EAA2C;AACzC,cAAM,MAAM,UAAU,CAAV,CAAZ;AACA,cAAI,OAAO,IAAI,OAAf,EAAwB;AACtB,2BAAe,GAAf;AACD;AACD,cAAM,eAAe,aAAa,KAAb,EAArB;AACA,uBAAa,IAAb,CAAkB,GAAlB;AACA,yBAAe,YAAf,EAA6B,aAAa,IAAb,EAA7B;AACA,uBAAa,SAAS,GAAT,IAAgB,YAA7B;AACD;AACD,YAAM,IAAI,IAAI,KAAJ,CAAU,SAAV,CAAV;AACA,UAAE,UAAF,GAAe,IAAf;AACA,UAAE,iBAAF,GAAsB,YAAtB;AACA,UAAE,YAAF,GAAiB,YAAjB;AACA,aAAK,aAAL,CAAmB,CAAnB;AACA;AACA,aAAK,WAAL,CAAiB,CAAjB;AACA,cAAM,CAAN;AACD;AACD,aAAO,eAAP;AACD;;AAED;;;;;;;;;;;;;;kCAWc,e,EAAiB,W,EAAa;AAC1C,UAAM,kBAAkB,mBAAmB,gBAAgB,QAAhB,IAA4B,CAAvE;AACA,WAAK,MAAL,CAAY,eAAZ,EAA6B,CAAC,eAAe,kBAAhB,IAAsC,MAAnE,EACI,eADJ;AAEA,aAAO,wBAAyB;AAAhC;AACD;;AAED;;;;;;;;;;;;;;iCAWa,c,EAAgB,W,EAAa;AACxC,WAAK,MAAL,CAAY,OAAO,cAAP,IAAyB,QAArC,EACI,CAAC,eAAe,iBAAhB,IAAqC,MADzC,EACiD,cADjD;AAEA,aAAO,sBAAuB;AAA9B;AACD;;AAED;;;;;;;;;;;;;;iCAWa,c,EAAgB,W,EAAa;AACxC,WAAK,MAAL,CAAY,OAAO,cAAP,IAAyB,QAArC,EACI,CAAC,eAAe,iBAAhB,IAAqC,MADzC,EACiD,cADjD;AAEA,aAAO,sBAAuB;AAA9B;AACD;;AAED;;;;;;;;;;;;kCASc,e,EAAiB,W,EAAa;AAC1C,WAAK,MAAL,CAAY,CAAC,CAAC,eAAF,KAAsB,eAAlC,EACI,CAAC,eAAe,kBAAhB,IAAsC,MAD1C,EACkD,eADlD;AAEA,aAAO,uBAAwB;AAA/B;AACD;;AAED;;;;;;;;;;;;;;oCAWgB,O,EAAS,C,EAAG,Y,EAAc;AACxC,UAAI,wBAAY,OAAZ,EAAqB,CAArB,CAAJ,EAA6B;AAC3B,eAAO,CAAP;AACD;AACD,WAAK,MAAL,CAAY,KAAZ,EACI,wBADJ,EAEI,gBAAgB,MAFpB,EAE4B,CAF5B;AAGD;;AAED;;;;;;;kCAIc,K,EAAO;AACnB,cAAQ,0BAA0B,KAA1B,CAAR;AACA,UAAI,KAAK,OAAT,EAAkB;AAChB,YAAI,CAAC,MAAM,OAAX,EAAoB;AAClB,gBAAM,OAAN,GAAgB,KAAK,OAArB;AACD,SAFD,MAEO,IAAI,MAAM,OAAN,CAAc,OAAd,CAAsB,KAAK,OAA3B,KAAuC,CAAC,CAA5C,EAA+C;AACpD,gBAAM,OAAN,IAAiB,KAAK,OAAtB;AACD;AACF,OAND,MAMO,IAAI,mBAAmB,MAAM,OAAzB,CAAJ,EAAuC;AAC5C,cAAM,OAAN,GAAgB,MAAM,OAAN,CAAc,OAAd,CAAsB,mBAAtB,EAA2C,EAA3C,CAAhB;AACD;AACF;;;;;;AAGH;;;;;;AAIA,SAAS,QAAT,CAAkB,GAAlB,EAAuB;AACrB;AACA,MAAI,OAAO,IAAI,QAAJ,IAAgB,CAA3B,EAA8B;AAC5B,WAAO,IAAI,OAAJ,CAAY,WAAZ,MAA6B,IAAI,EAAJ,GAAS,MAAM,IAAI,EAAnB,GAAwB,EAArD,CAAP;AACD;AACD,SAAO,sBAAuB;AAA9B;AACD;;AAGD;;;;AAIA,SAAS,cAAT,CAAwB,KAAxB,EAA+B,GAA/B,EAAoC;AAClC,MAAI,OAAO,EAAX,EAAe;AACb,UAAM,IAAN,CAAW,GAAX;AACD;AACF;;AAED;;;;;AAKO,SAAS,yBAAT,CAAmC,KAAnC,EAA0C;AAAA,MACxC,OADwC,GAC7B,KAD6B,CACxC,OADwC;;AAE/C,MAAM,OAAO,OAAO,KAAK,MAAL,EAAP,CAAb;AACA,QAAM,OAAN,GAAgB,IAAhB;;AAEA,MAAI,MAAM,OAAN,KAAkB,IAAtB,EAA4B;AAC1B,UAAM,OAAN,GAAgB,OAAhB;AACA,WAAO,KAAP;AACD;;AAED,MAAM,IAAI,IAAI,KAAJ,CAAU,MAAM,OAAhB,CAAV;AACA;AACA,OAAK,IAAM,IAAX,IAAmB,KAAnB,EAA0B;AACxB,MAAE,IAAF,IAAU,MAAM,IAAN,CAAV;AACD;AACD;AACA,IAAE,KAAF,GAAU,MAAM,KAAhB;AACA,SAAO,CAAP;AACD;;AAED;;;;;AAKO,SAAS,gBAAT,CAA0B,QAA1B,EAAoC;AACzC,MAAI,QAAQ,IAAZ;AACA,MAAI,UAAU,EAAd;AACA,OAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,UAAU,MAA9B,EAAsC,GAAtC,EAA2C;AACzC,QAAM,MAAM,UAAU,CAAV,CAAZ;AACA,QAAI,eAAe,KAAf,IAAwB,CAAC,KAA7B,EAAoC;AAClC,cAAQ,0BAA0B,GAA1B,CAAR;AACD,KAFD,MAEO;AACL,UAAI,OAAJ,EAAa;AACX,mBAAW,GAAX;AACD;AACD,iBAAW,GAAX;AACD;AACF;;AAED,MAAI,CAAC,KAAL,EAAY;AACV,YAAQ,IAAI,KAAJ,CAAU,OAAV,CAAR;AACD,GAFD,MAEO,IAAI,OAAJ,EAAa;AAClB,UAAM,OAAN,GAAgB,UAAU,IAAV,GAAiB,MAAM,OAAvC;AACD;AACD,SAAO,KAAP;AACD;;AAGD;;;;;AAKO,SAAS,YAAT,CAAsB,QAAtB,EAAgC;AACrC,MAAM,QAAQ,iBAAiB,KAAjB,CAAuB,IAAvB,EAA6B,SAA7B,CAAd;AACA,aAAW,YAAM;AACf;AACA,SAAK,WAAL,CAAiB,KAAjB;AACA,UAAM,KAAN;AACD,GAJD;AAKD;;AAGD;;;;;AAKA,KAAK,GAAL,GAAY,KAAK,GAAL,IAAY;AACtB,QAAM,IADgB;AAEtB,OAAK,IAFiB;AAGtB,gBAAc;AAHQ,CAAxB;;AAMA,IAAM,OAAO,KAAK,GAAlB;;AAEA;;;;;;AAMA,IAAI,iBAAiB,IAArB;;AAEA;;;AAGO,SAAS,kBAAT,GAA8B;AACnC,mBAAiB,GAAjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD;;AAED;;;AAGO,SAAS,6BAAT,GAAyC;AAC9C,mBAAiB,IAAjB;AACD;;AAED;;;;;;;;;;;;AAYO,SAAS,IAAT,CAAc,WAAd,EAA2B;AAChC,MAAI,CAAC,KAAK,IAAV,EAAgB;AACd,SAAK,IAAL,GAAY,cAAc,mBAAd,CAAZ;AACD;AACD,MAAI,CAAC,YAAY,KAAK,IAAL,CAAU,GAAtB,EAA2B,WAA3B,CAAL,EAA8C;AAC5C,WAAO,KAAK,IAAZ;AACD,GAFD,MAEO;AACL,QAAI,KAAK,YAAT,EAAuB;AACrB,aAAO,KAAK,YAAZ;AACD;AACD,WAAO,KAAK,YAAL,GAAoB,cAAc,yBAAd,CAA3B;AACD;AACF;;AAED;;;;;AAKA,SAAS,aAAT,CAAuB,MAAvB,EAA+B;AAC7B,MAAI,CAAC,cAAL,EAAqB;AACnB,UAAM,IAAI,KAAJ,CAAU,mCAAV,CAAN;AACD;AACD,SAAO,IAAI,cAAJ,CAAmB,IAAnB,EAAyB,gBAAQ;AACtC,QAAM,SAAS,SAAS,KAAK,GAAd,EAAmB,EAAnB,CAAf;AACA,QAAI,KAAK,WAAL,IAAoB,UAAU,CAAlC,EAAqC;AACnC,aAAO,SAAS,IAAhB;AACD;AACD,WAAO,SAAS,IAAhB;AACD,GANM,EAMJ,MANI,CAAP;AAOD;;AAED;;;;;;;;;;;;AAYO,SAAS,GAAT,GAAe;AACpB,MAAI,KAAK,GAAT,EAAc;AACZ,WAAO,KAAK,GAAZ;AACD;AACD,MAAI,CAAC,cAAL,EAAqB;AACnB,UAAM,IAAI,KAAJ,CAAU,mCAAV,CAAN;AACD;AACD,SAAO,KAAK,GAAL,GAAW,IAAI,cAAJ,CAAmB,IAAnB,EAAyB,gBAAQ;AACjD,QAAM,SAAS,SAAS,KAAK,GAAd,EAAmB,EAAnB,CAAf;AACA,QAAI,UAAU,CAAd,EAAiB;AACf,aAAO,SAAS,IAAhB;AACD;AACD,QAAI,UAAU,CAAd,EAAiB;AACf,aAAO,SAAS,IAAhB;AACD;AACD,WAAO,SAAS,GAAhB;AACD,GATiB,CAAlB;AAUD;;AAED;;;;;AAKO,SAAS,WAAT,CAAqB,GAArB,EAA0B,WAA1B,EAAuC;AAC5C,MAAI,CAAC,WAAL,EAAkB;AAChB,WAAO,KAAP;AACD;AACD,SAAO,YAAY,aAAZ,CAA0B,WAA1B,IAAyC,GAAhD;AACD;;;;;;QChpBe,a,GAAA,a;;AARhB;;AAEA;;;;;;AAMO,SAAS,aAAT,CAAuB,OAAvB,EAAgC;AACrC,SAAO;AACL,cAAU,mBAAQ,OAAR,EAAiB,QADtB;AAEL,iBAAa,mBAAQ,OAAR,EAAiB,WAFzB;AAGL,YAAQ,mBAAQ,OAAR,EAAiB,MAHpB;AAIL,cAAU,mBAAQ,OAAR,EAAiB,QAJtB;AAKL,UAAM,mBAAQ,OAAR,EAAiB,IALlB;AAML,UAAM,mBAAQ,OAAR,EAAiB,IANlB;AAOL,SAAK,mBAAQ,OAAR,EAAiB,GAPjB;AAQL,aAAS,mBAAQ,OAAR,EAAiB,OARrB;AASL,gBAAY,mBAAQ,OAAR,EAAiB;AATxB,GAAP;AAWD,C,CApCD;;;;;;;;;;;;;;;;;;;;;QCgDgB,O,GAAA,O;QAgGA,uB,GAAA,uB;QAMA,yB,GAAA,yB;;AAtIhB;;AAEA;;;;;;;;;;;;;AAaO,IAAI,kCAAJ;;AAEP;AAjCA;;;;;;;;;;;;;;;;AAkCA,IAAM,UAAU,0BAAhB;;AAEA;;;;;AAKA,IAAI,aAAa,EAAjB;;AAEA;;;;;AAKO,SAAS,OAAT,CAAiB,OAAjB,EAA0B;AAC/B,MAAM,MAAM,WAAW,IAAvB;AACA,MAAI,IAAI,QAAR,EAAkB;AAChB,WAAO,IAAI,QAAX;AACD;AACD,SAAO,IAAI,QAAJ,GAAe,SAAS,GAAT,CAAtB;AACD;;AAED;;;;;AAKA,SAAS,QAAT,CAAkB,GAAlB,EAAuB;AACrB;AACA;AACA;AACA;AACA,MAAM,SAAS,IAAf;AACA,MAAM,cAAc,KAApB;;AAEA,MAAM,kBAAkB,CAAC,EAAE,KAAK,UAAL,IAAmB,KAAK,UAAL,CAAgB,QAArC,CAAzB;AACA,MAAM,eAAe,UAAU,CAAC,EAAE,IAAI,QAAJ,IAAgB,IAAI,SAAtB,CAAhC;AACA,MAAM,aAAa,WAAW,mBAAmB,YAA9B,CAAnB;AACA,MAAM,YAAY;AACd;AACA;AACA,MAAI,QAAJ,CAAa,YAAb,IAA6B,IAAI,QAAJ,CAAa,IAH5B,CAAlB;;AAKA,MAAM,cAAc,4CAAkB,IAAI,QAAJ,CAAa,MAA/B,CAApB;;AAEA,MAAI,CAAC,UAAL,EAAiB;AACf,iBAAa,cAAc,GAAd,EAAmB,UAAnB,CAAb;AACD;;AAED;AACA;AACA;AACA;AACA,SAAO;AACL,cAAU,UADL;AAEL;AACA;AACA;AACA,iBAAa,CAAC,EAAE,UAAU,aAAV,KAA4B,GAA5B,IAAmC,IAAI,YAAzC,CALT;AAML,cAAU,UAAU,aAAV,KAA4B,GANjC;AAOL;AACA;AACA,YAAQ,UAAU,QAAV,CATH;AAUL;AACA,iBAAa,UAAU,SAAV,CAXR;AAYL,cAAU,WAZL;AAaL;AACA;AACA,UAAM,YAAY,UAAZ,KAA2B,SAf5B;AAgBL,UAAM,YAhBD;AAiBL,SAAK,UAAU,KAAV,CAjBA;AAkBL,oBAlBK;AAmBL;AAnBK,GAAP;AAqBD;;AAED;;;;;;;;AAQA,SAAS,aAAT,CAAuB,GAAvB,EAA4B,UAA5B,EAAwC;AACtC;AACA;AACA,MAAI,UAAJ,EAAgB;AACd,WAAO,OAAP;AACD;;AAED,MAAI,IAAI,UAAJ,IAAkB,IAAI,UAAJ,CAAe,CAArC,EAAwC;AACtC,WAAO,IAAI,UAAJ,CAAe,CAAtB;AACD;;AAED;AACA;AACA;AACA;AACA;AACA,gBAAY,OAAZ;AACD;;AAGD;;;;;;AAMO,SAAS,uBAAT,CAAiC,GAAjC,EAAsC,UAAtC,EAAkD;AACvD,SAAO,cAAc,GAAd,EAAmB,UAAnB,CAAP;AACD;;AAGD;AACO,SAAS,yBAAT,GAAqC;AAC1C,eAAa,EAAb;AACD;;;;;;;;;;;ACxJD;;;;;;;;;;;;;;;;AAkBA;;;;;IAKa,U,WAAA,U;;AAEX;;;AAGA,wBAAc;AAAA;;AACZ;AACA,SAAK,SAAL,GAAiB,IAAjB;AACD;;AAED;;;;;;;;;wBAKI,O,EAAS;AAAA;;AACX,UAAI,CAAC,KAAK,SAAV,EAAqB;AACnB,aAAK,SAAL,GAAiB,EAAjB;AACD;AACD,WAAK,SAAL,CAAe,IAAf,CAAoB,OAApB;AACA,aAAO,YAAM;AACX,cAAK,MAAL,CAAY,OAAZ;AACD,OAFD;AAGD;;AAED;;;;;;;2BAIO,O,EAAS;AACd,UAAI,CAAC,KAAK,SAAV,EAAqB;AACnB;AACD;AACD,UAAM,QAAQ,KAAK,SAAL,CAAe,OAAf,CAAuB,OAAvB,CAAd;AACA,UAAI,QAAQ,CAAC,CAAb,EAAgB;AACd,aAAK,SAAL,CAAe,MAAf,CAAsB,KAAtB,EAA6B,CAA7B;AACD;AACF;;AAED;;;;;;gCAGY;AACV,UAAI,CAAC,KAAK,SAAV,EAAqB;AACnB;AACD;AACD,WAAK,SAAL,CAAe,MAAf,GAAwB,CAAxB;AACD;;AAED;;;;;;;yBAIK,S,EAAW;AACd,UAAI,CAAC,KAAK,SAAV,EAAqB;AACnB;AACD;AACD,UAAM,WAAW,KAAK,SAAtB;AACA,WAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,SAAS,MAA7B,EAAqC,GAArC,EAA0C;AACxC,YAAM,UAAU,SAAS,CAAT,CAAhB;AACA,gBAAQ,SAAR;AACD;AACF;;AAED;;;;;;;sCAIkB;AAChB,UAAI,CAAC,KAAK,SAAV,EAAqB;AACnB,eAAO,CAAP;AACD;AACD,aAAO,KAAK,SAAL,CAAe,MAAtB;AACD;;;;;;;;;;QCnEa,W,GAAA,W;;AAbhB;;AACA;;AACA;;AAEA;AACA,IAAM,MAAM,OAAZ;;AAEA;;;;;;AAvBA;;;;;;;;;;;;;;;;AA6BO,SAAS,WAAT,CAAqB,GAArB,EAA0B,GAA1B,EAA+B,cAA/B,EAA+C;AACpD,MAAI,kBAAkB,mBAAmB,aAAzC,EAAwD;AACtD,qBAAO,KAAP,CAAa,GAAb,EAAkB,iCAAiC,cAAnD;AACD;;AAED,SAAO,mBAAmB,aAAnB,GACH,sBAAsB,GAAtB,EAA2B,GAA3B,CADG,GAEH,iBAAiB,GAAjB,EAAsB,GAAtB,CAFJ;AAGD;;AAED;;;;;AAKA,SAAS,qBAAT,CAA+B,GAA/B,EAAoC,GAApC,EAAyC;AACvC,MAAI,2BAAJ,EAAiC;AAC/B,WAAO,iBAAiB,GAAjB,EAAsB,GAAtB,EAA2B,IAA3B,CAAP;AACD,GAFD,MAEO;AACL;AACA;AACA,QAAM,SAAS;AACX,4BAA0B,IAAI,QADnB,EAC8B,QAD9B,EACwC,kBAAK;AACtD,aAAO,aAD+C;AAEtD,eAAS;AAF6C,KAAL,CADxC,CAAf;AAKA,QAAI,QAAJ,CAAa,IAAb,CAAkB,WAAlB,CAA8B,MAA9B;AACA,qBAAiB,OAAO,aAAxB,EAAuC,GAAvC;AACA,WAAO,MAAP;AACD;AACF;;AAED;;;;;;AAMA,SAAS,gBAAT,CAA0B,GAA1B,EAA+B,GAA/B,EAAwD;AAAA,MAApB,UAAoB,uEAAP,KAAO;;AACtD,MAAM,QAAQ,IAAI,IAAI,KAAR,EAAd;AACA,MAAI,UAAJ,EAAgB;AACd,UAAM,cAAN,GAAuB,aAAvB;AACD;AACD,QAAM,GAAN,GAAY,GAAZ;AACA,SAAO,KAAP;AACD;;AAED;;;;;;AAMA,SAAS,yBAAT,GAAqC;AACnC,SAAO,oBAAoB,MAAM,SAAjC;AACD;;;ACpED;;AACA;;AACA;;AACA;;AAGA;;AACA;;AACA;;AACA;;AACA;;AAEA;;0JA5BA;;;;;;;;;;;;;;;;AA8BA,IAAI,iCAAe,IAAf,EAAqB,oBAArB,KAA8C,qBAAU,IAA5D,EAAkE;AAChE,+BAAsB,IAAtB;AAAA;AAAA;AAAA;;AAAA;AAAA;AACD,CAFD,MAEO;AACL,sDAAuB,IAAvB,EAA6B,MAA7B;AACD;AACD,iCAA0B,IAA1B;AACA,uBAAgB,IAAhB;AACA,2BAAoB,IAApB;AACA,sBAAe,IAAf;AACA,+BAAmB,IAAnB;AACA,4BAAqB,IAArB;;;;;;QCIgB,O,GAAA,O;AA5ChB;;;;;;;;;;;;;;;;AAiBA;;;;;;;;AAQA,SAAS,QAAT,CAAkB,KAAlB,EAAyB,aAAzB,EAAwC;AACtC,MAAM,YAAY,iBAAiB,CAAnC;AACA,MAAM,MAAM,KAAK,MAAjB;AACA,MAAI,IAAI,aAAa,CAAb,GAAiB,SAAjB,GAA6B,KAAK,GAAL,CAAS,MAAM,SAAf,EAA0B,CAA1B,CAArC;AACA,SAAO,IAAI,GAAX,EAAgB,GAAhB,EAAqB;AACnB,QAAM,QAAQ,KAAK,CAAL,CAAd;AACA;AACA;AACA,QAAI,UAAU,KAAV,IAAoB,UAAU,KAAV,IAAmB,UAAU,KAArD,EAA6D;AAC3D,aAAO,IAAP;AACD;AACF;AACD,SAAO,KAAP;AACD;;AAED;;;;AAIO,SAAS,OAAT,CAAiB,GAAjB,EAAsB;AAC3B,MAAI,CAAC,IAAI,KAAJ,CAAU,SAAV,CAAoB,QAAzB,EAAmC;AACjC,QAAI,MAAJ,CAAW,cAAX,CAA0B,MAAM,SAAhC,EAA2C,UAA3C,EAAuD;AACrD,kBAAY,KADyC;AAErD,oBAAc,IAFuC;AAGrD,gBAAU,IAH2C;AAIrD,aAAO;AAJ8C,KAAvD;AAMD;AACF;;;;;;;;;QCgnBe,O,GAAA,O;;;;AArqBhB;;;;;;;;;;;;;;;;AAgBA;;;;;;AAMA,IAAI,oBAAJ;;AAEA;;;AAGA,IAAI,oCAAJ;;AAEA;;;;;;AAMA,IAAI,yBAAJ;;AAEA;;;;;AAKA,IAAM,aAAa,iCAAnB;AACA,IAAM,gBAAgB,CACpB,gBADoB,EAEpB,eAFoB,EAGpB,WAHoB,EAIpB,eAJoB,EAKpB,eALoB,EAMpB,kBANoB,EAOpB,gBAPoB,EAQpB,eARoB,CAAtB;;AAWA;;;;;;AAMA,SAAS,eAAT,CAAyB,WAAzB,EAAsC,IAAtC,EAA4C;AAC1C,MAAI,CAAC,WAAW,IAAX,CAAgB,IAAhB,CAAD,IAA0B,cAAc,OAAd,CAAsB,IAAtB,KAA+B,CAA7D,EAAgE;AAC9D,UAAM,IAAI,WAAJ,mCAAgD,IAAhD,OAAN;AACD;AACF;;AAED;;;;;;AAMA,SAAS,iBAAT,CAA2B,GAA3B,EAAgC;AAAA,MACvB,cADuB,GACL,GADK,CACvB,cADuB;;;AAG9B,SAAO,CAAC,EACN,kBACA,eAAe,MADf,IAEA,eAAe,GAFf,IAGA,eAAe,WAJT,CAAR;AAKD;;AAED;;;;;;AAMA,SAAS,SAAT,CAAmB,GAAnB,EAAwB;AACtB,MAAM,MAAM,IAAI,WAAJ,CAAgB,QAAhB,EAAZ;AACA,SAAO,IAAI,OAAJ,CAAY,eAAZ,MAAiC,CAAC,CAAzC;AACD;;AAED;;;;IAGM,qB;AACJ;;;;AAIA,iCAAY,GAAZ,EAAiB,QAAjB,EAA2B;AAAA;;AACzB;;;AAGA,SAAK,IAAL,GAAY,GAAZ;;AAEA;;;AAGA,SAAK,SAAL,GAAiB,QAAjB;;AAEA;;;;;AAKA,SAAK,eAAL,GAAuB,KAAK,IAAL,CAAU,MAAV,CAAiB,MAAjB,CAAwB,IAAxB,CAAvB;AACD;;AAED;;;;;;;;;;;2BAOO,I,EAAM,I,EAAM,O,EAAS;AAC1B,WAAK,SAAL,CAAe,MAAf,CAAsB,IAAtB,EAA4B,IAA5B,EAAkC,OAAlC;;AAEA;AACA;AACA,UAAM,UAAU,KAAK,eAArB;AACA,UAAM,WAAW,QAAQ,IAAR,CAAjB;AACA,UAAI,QAAJ,EAAc;AACZ,iBAAS,OAAT;AACA,eAAO,QAAQ,IAAR,CAAP;AACD;AACF;;AAED;;;;;;;;;wBAMI,I,EAAM;AACR,UAAM,MAAM,KAAK,SAAL,CAAe,SAAf,CAAyB,IAAzB,CAAZ;AACA,UAAI,GAAJ,EAAS;AACP,eAAO,IAAI,IAAX;AACD;AACF;;AAED;;;;;;;;;;gCAOY,I,EAAM;AAAA,kBACe,KAAK,IADpB;AAAA,UACT,OADS,SACT,OADS;AAAA,UACA,WADA,SACA,WADA;;AAEhB,sBAAgB,WAAhB,EAA6B,IAA7B;;AAEA,UAAI,KAAK,SAAL,CAAe,SAAf,CAAyB,IAAzB,CAAJ,EAAoC;AAClC,eAAO,QAAQ,OAAR,EAAP;AACD;;AAED,UAAM,UAAU,KAAK,eAArB;AACA,UAAM,WAAW,QAAQ,IAAR,CAAjB;AACA,UAAI,QAAJ,EAAc;AACZ,eAAO,SAAS,OAAhB;AACD;;AAED,UAAI,gBAAJ;AACA,UAAM,UAAU,IAAI,MAAM,OAAV,CAAkB;AAAA,eAAO,UAAU,GAAjB;AAAA,OAAlB,CAAhB;AACA,cAAQ,IAAR,IAAgB;AACd,wBADc;AAEd;AAFc,OAAhB;;AAKA,aAAO,OAAP;AACD;;AAED;;;;;;;;4BAKQ,I,EAAM;AACZ,WAAK,SAAL,CAAe,OAAf,CAAuB,IAAvB;AACD;;;;;;AAGH;;;;;;;IAKM,Q;AACJ;;;AAGA,oBAAY,GAAZ,EAAiB;AAAA;;AACf;;;AAGA,SAAK,IAAL,GAAY,GAAZ;;AAEA;;;AAGA,SAAK,IAAL,GAAY,IAAI,QAAhB;;AAEA;;;;;AAKA,SAAK,YAAL,GAAoB,IAAI,MAAJ,CAAW,MAAX,CAAkB,IAAlB,CAApB;;AAEA;;;;AAIA,SAAK,MAAL,GAAc,EAAd;;AAEA;;;;AAIA,SAAK,QAAL,GAAgB,IAAhB;AACD;;AAED;;;;;;;;;;;;;;;;8BAYU;AACR,UAAM,UAAU,KAAK,QAArB;AACA,WAAK,QAAL,GAAgB,IAAhB;AACA,aAAO,OAAP;AACD;;AAED;;;;;;;;;8BAMU,I,EAAM;AACd,UAAM,aAAa,KAAK,YAAL,CAAkB,IAAlB,CAAnB;AACA,UAAI,UAAJ,EAAgB;AACd,eAAO,UAAP;AACD;AACF;;AAED;;;;;;;;;qCAMiB,I,EAAM;AACrB,UAAM,cAAc,KAAK,YAAzB;;AAEA,WAAK,IAAM,IAAX,IAAmB,WAAnB,EAAgC;AAC9B,YAAM,MAAM,YAAY,IAAZ,CAAZ;AACA,YAAI,IAAI,IAAJ,KAAa,IAAjB,EAAuB;AACrB,iBAAO,GAAP;AACD;AACF;AACF;;AAED;;;;;;;;;;;2BAQO,I,EAAM,I,EAAM,O,EAAS;AAAA,mBACG,KAAK,IADR;AAAA,UACnB,KADmB,UACnB,KADmB;AAAA,UACZ,WADY,UACZ,WADY;;;AAG1B,UAAI,OAAJ,EAAa;AACX,cAAM,IAAI,KAAJ,CAAU,mDAAV,CAAN;AACD;;AAED,sBAAgB,WAAhB,EAA6B,IAA7B;;AAEA,UAAI,KAAK,SAAL,CAAe,IAAf,KACA,KAAK,gBAAL,CAAsB,IAAtB,CADJ,EACiC;AAC/B,cAAM,IAAI,KAAJ,4BAAmC,IAAnC,OAAN;AACD;;AAED;AACA;AACA;AACA,WAAK,YAAL,CAAkB,IAAlB,IAA0B;AACxB,kBADwB;AAExB;AAFwB,OAA1B;;AAKA,WAAK,QAAL,CAAc,IAAd;AACA,WAAK,OAAL,CAAa,KAAK,IAAlB,EAAwB,IAAxB;AACD;;AAED;;;;;;;;;;;;4BASQ,I,EAAM,S,EAAW;AACvB;AACA;AACA;AACA,UAAM,eAAe,CAAC,CAAC,SAAvB;AACA,UAAM,QAAQ,aAAa,KAAK,MAAhC;AACA,UAAM,oBAAoB,KAAK,SAAL,CAAe,IAAf,EAAqB,KAArB,CAA1B;;AAEA,WAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,kBAAkB,MAAtC,EAA8C,GAA9C,EAAmD;AACjD,YAAM,YAAY,kBAAkB,CAAlB,CAAlB;AACA,YAAI,YAAJ,EAAkB;AAChB,eAAK,kBAAL,CAAwB,SAAxB;AACD,SAFD,MAEO;AACL,eAAK,WAAL,CAAiB,SAAjB;AACD;AACF;AACF;;AAED;;;;;;;;;gCAMY,I,EAAM;AAChB,UAAM,MAAM,KAAK,SAAL,CAAe,KAAK,SAApB,CAAZ;AACA,UAAI,CAAC,GAAL,EAAU;AACR;AACD;;AAED,WAAK,YAAL,EAAkB,uBAAwB,IAA1C,EAAiD,GAAjD;AACD;;AAED;;;;;;;;8BAKU,I,EAAM,K,EAAO;AACrB,UAAI,CAAC,KAAD,IAAU,CAAC,KAAK,gBAApB,EAAsC;AACpC;AACA,eAAO,EAAP;AACD;;AAED,aAAO,KAAK,gBAAL,CAAsB,KAAtB,CAAP;AACD;;AAED;;;;;;;;;iCAMa,I,EAAM,G,EAAK;AAAA,UACf,IADe,GACP,GADO,CACf,IADe;;AAEtB,UAAI,gBAAgB,IAApB,EAA0B;AACxB;AACD;;AAED;AACA;AACA;AACA;AACA;AACA,WAAK,QAAL,GAAgB,IAAhB;AACA,UAAM,KAAK,IAAI,IAAJ,EAAX;;AAEA,UAAI,OAAO,IAAX,EAAiB;AACf,cAAM,IAAI,KAAK,IAAL,CAAU,KAAd,CACF,sDADE,CAAN;AAED;AACF;;AAED;;;;;;;;;;uCAOmB,I,EAAM;AACvB,UAAM,MAAM,KAAK,SAAL,CAAe,KAAK,SAApB,CAAZ;AACA,UAAI,CAAC,GAAL,EAAU;AACR;AACD;AACD,WAAK,YAAL,EAAkB,uBAAwB,IAA1C,EAAiD,GAAjD;AACA;AACA;AACA;AACA;AACA,UAAI,KAAK,iBAAT,EAA4B;AAC1B,aAAK,iBAAL;AACD;AACF;;AAED;;;;;;;;0CAKsB,I,EAAM;AAC1B;AACA;AACA,UAAI,KAAK,oBAAT,EAA+B;AAC7B,aAAK,oBAAL;AACD;AACF;;AAED;;;;;;;;;;;;;;;;;;6BAeS,I,EAAM;AAAA;;AACb,UAAI,KAAK,MAAT,EAAiB;AACf,aAAK,MAAL,UAAmB,IAAnB;AACA;AACD;;AAED,WAAK,MAAL,GAAc,IAAd;;AAEA;AACA,UAAM,WAAW,IAAI,KAAK,IAAL,CAAU,gBAAd,CAA+B,mBAAW;AACzD,YAAI,OAAJ,EAAa;AACX,gBAAK,cAAL,CAAoB,OAApB;AACD;AACF,OAJgB,CAAjB;AAKA,eAAS,OAAT,CAAiB,KAAK,IAAtB,EAA4B;AAC1B,mBAAW,IADe;AAE1B,iBAAS;AAFiB,OAA5B;AAID;;AAED;;;;;;;;;;;mCAQe,O,EAAS;AACtB,WAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,QAAQ,MAA5B,EAAoC,GAApC,EAAyC;AACvC,YAAM,SAAS,QAAQ,CAAR,CAAf;AACA,YAAI,CAAC,MAAL,EAAa;AACX;AACD;;AAJsC,YAMhC,UANgC,GAMJ,MANI,CAMhC,UANgC;AAAA,YAMpB,YANoB,GAMJ,MANI,CAMpB,YANoB;;AAOvC,aAAK,IAAI,KAAI,CAAb,EAAgB,KAAI,WAAW,MAA/B,EAAuC,IAAvC,EAA4C;AAC1C,cAAM,OAAO,WAAW,EAAX,CAAb;AACA,cAAM,sBAAsB,KAAK,SAAL,CAAe,IAAf,EAAqB,KAAK,MAA1B,CAA5B;AACA,eAAK,kBAAL,CAAwB,IAAxB;AACA,eAAK,IAAI,MAAI,CAAb,EAAgB,MAAI,oBAAoB,MAAxC,EAAgD,KAAhD,EAAqD;AACnD,iBAAK,kBAAL,CAAwB,oBAAoB,GAApB,CAAxB;AACD;AACF;;AAED,aAAK,IAAI,MAAI,CAAb,EAAgB,MAAI,aAAa,MAAjC,EAAyC,KAAzC,EAA8C;AAC5C,cAAM,QAAO,aAAa,GAAb,CAAb;AACA,cAAM,yBAAyB,KAAK,SAAL,CAAe,KAAf,EAAqB,KAAK,MAA1B,CAA/B;AACA,eAAK,qBAAL,CAA2B,KAA3B;AACA,eAAK,IAAI,MAAI,CAAb,EAAgB,MAAI,uBAAuB,MAA3C,EAAmD,KAAnD,EAAwD;AACtD,iBAAK,qBAAL,CAA2B,uBAAuB,GAAvB,CAA3B;AACD;AACF;AACF;AACF;;;;;;AAGH;;;;;;AAIA,SAAS,QAAT,CAAkB,GAAlB,EAAuB;AAAA,MACd,WADc,GAC4C,GAD5C,CACd,WADc;AAAA,MACD,OADC,GAC4C,GAD5C,CACD,OADC;AAAA,MACQ,IADR,GAC4C,GAD5C,CACQ,IADR;AAAA,MACc,QADd,GAC4C,GAD5C,CACc,QADd;AAAA,MACwB,MADxB,GAC4C,GAD5C,CACwB,MADxB;AAAA,MACgC,QADhC,GAC4C,GAD5C,CACgC,QADhC;AAAA,MAEd,aAFc,GAE0B,QAF1B,CAEd,aAFc;AAAA,MAEC,SAFD,GAE0B,QAF1B,CAEC,SAFD;AAAA,MAEY,UAFZ,GAE0B,QAF1B,CAEY,UAFZ;;;AAIrB,MAAM,WAAW,IAAI,QAAJ,CAAa,GAAb,CAAjB;AACA,MAAM,iBAAiB,IAAI,qBAAJ,CAA0B,GAA1B,EAA+B,QAA/B,CAAvB;;AAEA;AACA;AACA;AACA,SAAO,cAAP,CAAsB,GAAtB,EAA2B,gBAA3B,EAA6C;AAC3C,gBAAY,IAD+B;AAE3C,kBAAc,IAF6B;AAG3C;AACA,WAAO;AAJoC,GAA7C;;AAOA;AACA;AACA;AACA,WAAS,SAAT,CAAmB,aAAnB,GAAmC,SAAS,qBAAT,CAA+B,IAA/B,EAAqC;AACtE,QAAM,MAAM,SAAS,SAAT,CAAmB,IAAnB,CAAZ;AACA,QAAI,GAAJ,EAAS;AACP,aAAO,IAAI,IAAI,IAAR,EAAP;AACD;AACD,WAAO,cAAc,KAAd,CAAoB,IAApB,EAA0B,SAA1B,CAAP;AACD,GAND;;AAQA;AACA;AACA,WAAS,SAAT,CAAmB,UAAnB,GAAgC,SAAS,kBAAT,GAA8B;AAC5D,QAAM,WAAW,WAAW,KAAX,CAAiB,IAAjB,EAAuB,SAAvB,CAAjB;AACA,QAAI,QAAJ,EAAc;AACZ,eAAS,WAAT,CAAqB,QAArB;AACA,eAAS,OAAT,CAAiB,QAAjB;AACD;AACD,WAAO,QAAP;AACD,GAPD;;AASA;AACA,OAAK,SAAL,CAAe,SAAf,GAA2B,SAAS,iBAAT,GAA6B;AACtD,QAAM,SAAS,UAAU,KAAV,CAAgB,IAAhB,EAAsB,SAAtB,CAAf;AACA,aAAS,WAAT,CAAqB,MAArB;AACA,aAAS,OAAT,CAAiB,MAAjB;AACA,WAAO,MAAP;AACD,GALD;;AAOA;AACA;AACA;AACA,MAAM,gBAAgB,OAAO,wBAAP,CAAgC,QAAQ,SAAxC,EAClB,WADkB,CAAtB;AAEA,MAAM,kBAAkB,cAAc,GAAtC;AACA,gBAAc,GAAd,GAAoB,UAAS,IAAT,EAAe;AACjC,oBAAgB,IAAhB,CAAqB,IAArB,EAA2B,IAA3B;AACA,aAAS,OAAT,CAAiB,IAAjB;AACD,GAHD;AAIA,SAAO,cAAP,CAAsB,QAAQ,SAA9B,EAAyC,WAAzC,EAAsD,aAAtD;;AAEA;;;;;AAKA,WAAS,mBAAT,GAA+B;AAAA,QACtB,WADsB,GACP,IADO,CACtB,WADsB;;AAG7B;AACA;;AACA,QAAI,KAAK,SAAS,OAAT,EAAT;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAI,CAAC,EAAL,EAAS;AACP;AACA;AACA;AACA;AACA,UAAM,MAAM,SAAS,gBAAT,CAA0B,WAA1B,CAAZ;AACA,WAAK,cAAc,IAAd,CAAmB,QAAnB,EAA6B,IAAI,IAAjC,CAAL;AACD;;AAED;AACA;AACA;AACA;AACA,WAAO,cAAP,CAAsB,EAAtB,EAA0B,YAAY,SAAtC;AACA,WAAO,EAAP;AACD;AACD,WAAS,MAAT,EAAiB,WAAjB,EAA8B,mBAA9B;;AAEA;AACA,MAAI,WAAJ,GAAkB,mBAAlB;AACD;;AAED;;;;;;;;;AASA,SAAS,eAAT,CAAyB,GAAzB,EAA8B;AAAA,MACrB,WADqB,GACW,GADX,CACrB,WADqB;AAAA,MACR,OADQ,GACW,GADX,CACR,OADQ;AAAA,MACC,MADD,GACW,GADX,CACC,MADD;AAE5B;;;AAEA,WAAS,kBAAT,GAA8B;AAC5B,QAAM,OAAO;AACX,+BAA4B,IAAD,CAAO,WADpC;;AAGA;AACA;AACA;AACA,WAAO,QAAQ,SAAR,CAAkB,WAAlB,EAA+B,EAA/B,EAAmC,IAAnC,CAAP;AACD;AACD,WAAS,MAAT,EAAiB,WAAjB,EAA8B,kBAA9B;;AAEA;AACA,MAAI,WAAJ,GAAkB,kBAAlB;AACD;;AAED;;;;;;;AAOA,SAAS,QAAT,CAAkB,MAAlB,EAA0B,UAA1B,EAAsC,QAAtC,EAAgD;AAC9C;AACA;AACA,WAAS,SAAT,GAAqB,OAAO,MAAP,CAAc,WAAW,SAAzB,EAAoC;AACvD,iBAAa;AACX;AACA,oBAAc,IAFH;AAGX,gBAAU,IAHC;AAIX,aAAO;AAJI;AAD0C,GAApC,CAArB;AAQD;;AAED;;;;;;;;;;;;;;;AAeO,SAAS,OAAT,CAAiB,GAAjB,EAAsB,IAAtB,EAA4B;AACjC,MAAI,UAAU,GAAV,CAAJ,EAAoB;AAClB;AACD;;AAED,MAAI,UAAU,IAAd;AACA,MAAI,iBAAiB,KAArB;;AAEA,MAAI,kBAAkB,GAAlB,CAAJ,EAA4B;AAC1B;AACA;AACA;AACA,QAAI;AAAA,UACK,OADL,GACwB,GADxB,CACK,MADL;AAAA,UACa,QADb,GACwB,GADxB,CACa,OADb;;AAGF;;AACA,UAAM,WAAW,QAAO,MAAP,CAAc,KAAK,SAAnB,CAAjB;AACA,WAAK,IAAL,CAAU,QAAV;;AAEA;AACA;AACA,uBAAiB,CAAC,EAAE,YAAW,SAAQ,SAArB,CAAlB;AACD,KAVD,CAUE,OAAO,CAAP,EAAU;;AAEV;AACA;AACA,gBAAU,KAAV;AACD;AACF;;AAED,MAAI,cAAJ,EAAoB;AAClB,oBAAgB,GAAhB;AACD,GAFD,MAEO,IAAI,OAAJ,EAAa;AAClB,aAAS,GAAT;AACD;AACF;;;;;;QCnqBe,O,GAAA,O;AArChB;;;;;;;;;;;;;;;;AAiBA;;;;;;;;AAQA,SAAS,wBAAT,CAAkC,IAAlC,EAAwC;AACtC;AACA;AACA;AACA,SAAO,QAAQ,IAAR,IAAgB,KAAK,eAAL,CAAqB,QAArB,CAA8B,IAA9B,CAAvB;AACD;;AAGD;;;;AAIO,SAAS,OAAT,CAAiB,GAAjB,EAAsB;AAC3B;AACA;AACA,MAAM,gBAAgB,IAAI,YAAJ,IAAoB,IAAI,QAA9C;AACA,MAAI,CAAC,cAAc,SAAd,CAAwB,QAA7B,EAAuC;AACrC,QAAI,MAAJ,CAAW,cAAX,CAA0B,cAAc,SAAxC,EAAmD,UAAnD,EAA+D;AAC7D,kBAAY,KADiD;AAE7D,oBAAc,IAF+C;AAG7D,gBAAU,IAHmD;AAI7D,aAAO;AAJsD,KAA/D;AAMD;AACF;;;;;;QCPe,O,GAAA,O;AA1ChB;;;;;;;;;;;;;;;;AAiBA;;;;;;;;;AASA,SAAS,0BAAT,CAAoC,KAApC,EAA2C,SAA3C,EAAsD;AACpD,MAAM,SAAS,cAAc,SAAd,GAA0B,KAAK,QAAL,CAAc,KAAd,CAA1B,GAAiD,CAAC,SAAjE;AACA,MAAI,MAAJ,EAAY;AACV,SAAK,MAAL,CAAY,KAAZ;AACA,WAAO,KAAP;AACD,GAHD,MAGO;AACL,SAAK,GAAL,CAAS,KAAT;AACA,WAAO,IAAP;AACD;AACF;;AAGD;;;;AAIO,SAAS,OAAT,CAAiB,GAAjB,EAAsB;AAC3B,MAAI,KAAK,GAAL,KAAa,IAAI,YAArB,EAAmC;AACjC,QAAI,MAAJ,CAAW,cAAX,CAA0B,IAAI,YAAJ,CAAiB,SAA3C,EAAsD,QAAtD,EAAgE;AAC9D,kBAAY,KADkD;AAE9D,oBAAc,IAFgD;AAG9D,gBAAU,IAHoD;AAI9D,aAAO;AAJuD,KAAhE;AAMD;AACF;;AAGD;;;;;AAKA,SAAS,IAAT,CAAc,GAAd,EAAmB;AACjB,SAAO,0BAAyB,IAAzB,CAA8B,IAAI,SAAJ,CAAc,SAA5C;AAAP;AACD;;;;;;QCrCe,I,GAAA,I;QAgBA,O,GAAA,O;AAxChB;;;;;;;;;;;;;;;;AAgBA;;;;;;;;AAQO,SAAS,IAAT,CAAc,CAAd,EAAiB;AACtB,MAAI,OAAO,CAAP,CAAJ;;AAEA;AACA,MAAI,CAAC,CAAL,EAAQ;AACN,WAAO,CAAP;AACD;;AAED,SAAO,IAAI,CAAJ,GAAQ,CAAR,GAAY,CAAC,CAApB;AACD;;AAGD;;;;AAIO,SAAS,OAAT,CAAiB,GAAjB,EAAsB;AAC3B,MAAI,CAAC,IAAI,IAAJ,CAAS,IAAd,EAAoB;AAClB,QAAI,MAAJ,CAAW,cAAX,CAA0B,IAAI,IAA9B,EAAoC,MAApC,EAA4C;AAC1C,kBAAY,KAD8B;AAE1C,oBAAc,IAF4B;AAG1C,gBAAU,IAHgC;AAI1C,aAAO;AAJmC,KAA5C;AAMD;AACF;;;;;;QCvBe,M,GAAA,M;QAwBA,O,GAAA,O;AAlDhB;;;;;;;;;;;;;;;;IAgBO,c,GAAkB,OAAO,S,CAAzB,c;;AAEP;;;;;;;;;AAQO,SAAS,MAAT,CAAgB,MAAhB,EAAwB,QAAxB,EAAkC;AACvC,MAAI,UAAU,IAAd,EAAoB;AAClB,UAAM,IAAI,SAAJ,CAAc,4CAAd,CAAN;AACD;;AAED,MAAM,SAAS,OAAO,MAAP,CAAf;AACA,OAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,UAAU,MAA9B,EAAsC,GAAtC,EAA2C;AACzC,QAAM,SAAS,UAAU,CAAV,CAAf;AACA,QAAI,UAAU,IAAd,EAAoB;AAClB,WAAK,IAAM,GAAX,IAAkB,MAAlB,EAA0B;AACxB,YAAI,eAAe,IAAf,CAAoB,MAApB,EAA4B,GAA5B,CAAJ,EAAsC;AACpC,iBAAO,GAAP,IAAc,OAAO,GAAP,CAAd;AACD;AACF;AACF;AACF;AACD,SAAO,MAAP;AACD;;AAGD;;;;AAIO,SAAS,OAAT,CAAiB,GAAjB,EAAsB;AAC3B,MAAI,CAAC,IAAI,MAAJ,CAAW,MAAhB,EAAwB;AACtB,QAAI,MAAJ,CAAW,cAAX,CAA0B,IAAI,MAA9B,EAAsC,QAAtC,EAAgD;AAC9C,kBAAY,KADkC;AAE9C,oBAAc,IAFgC;AAG9C,gBAAU,IAHoC;AAI9C,aAAO;AAJuC,KAAhD;AAMD;AACF;;;;;;QCpCe,O,GAAA,O;;AANhB;;IAAY,O;;;;AAEZ;;;;AAIO,SAAS,OAAT,CAAiB,GAAjB,EAAsB;AAC3B,MAAI,CAAC,IAAI,OAAT,EAAkB;AAChB,QAAI,OAAJ,GAAc,gBAAkB,OAAhC;AACA;AACA;AACA,QAAI,QAAQ,OAAZ,EAAqB;AACnB,UAAI,OAAJ,GAAc,QAAQ,OAAtB;AACD;AACD;AACA;AACA,QAAI,OAAJ,CAAY,OAAZ,GAAsB,QAAQ,OAA9B;AACA,QAAI,OAAJ,CAAY,MAAZ,GAAqB,QAAQ,MAA7B;AACA,QAAI,OAAJ,CAAY,GAAZ,GAAkB,QAAQ,GAA1B;AACA,QAAI,OAAJ,CAAY,IAAZ,GAAmB,QAAQ,IAA3B;AACD;AACF,C,CAtCD;;;;;;;;;;;;;;;;;;;;;;qjBCAA;;;;;;;;;;;;;;;;AAgBA;;;;;;AAMA;AACsB;;QAiEN,8B,GAAA,8B;QAwBA,oC,GAAA,oC;QAyBA,0B,GAAA,0B;QAkCA,sB,GAAA,sB;QAoBA,4B,GAAA,4B;QAuBA,U,GAAA,U;QAgBA,iB,GAAA,iB;QAWA,wB,GAAA,wB;QAgBA,uB,GAAA,uB;QAaA,gB,GAAA,gB;QAoBA,0B,GAAA,0B;QAeA,uB,GAAA,uB;QAaA,6B,GAAA,6B;QAUA,e,GAAA,e;QAWA,e,GAAA,e;QAWA,Y,GAAA,Y;QAWA,2B,GAAA,2B;QAiBA,S,GAAA,S;QAwKA,Y,GAAA,Y;QAWA,gB,GAAA,gB;QAWA,qB,GAAA,qB;QAUA,uB,GAAA,uB;QAkDA,Y,GAAA,Y;QAWA,oB,GAAA,oB;QAcA,gC,GAAA,gC;QAuBA,sB,GAAA,sB;;AA7oBhB;;AAEA;;AACA;;AACA;;;;AAGA;;;;;;;;;;;;;;;;AAgBA,IAAI,yBAAJ;;AAGA;;;;;;IAKa,U,WAAA,U;;;;;;;;;AAEX;;;;8BAIU,CAAE;;;;;;AAId;;;;;;;IAKa,iB,WAAA,iB;;;;;;;;;AAEX;;;;;qCAKiB,c,EAAgB,CAAE;;;;;;AAIrC;;;;;;;;;;AAQO,SAAS,8BAAT,CAAwC,GAAxC,EAA6C,EAA7C,EAAiD,oBAAjD,EAAuE;AAC5E;AACA,MAAM,QAAQ,yCAAyC,GAAzC,EAA8C,EAA9C,CAAd;AACA,MAAI,KAAJ,EAAW;AACT,WAAO,KAAP;AACD;AACD,MAAI,oBAAJ,EAA0B;AACxB,WAAO,WAAW,GAAX,EAAgB,EAAhB,CAAP;AACD;AACD,SAAO,IAAP;AACD;;AAED;;;;;;;;;;;;AAYO,SAAS,oCAAT,CACL,SADK,EACM,EADN,EACU,oBADV,EACgC;AACrC;AACA,MAAI,UAAU,QAAd,EAAwB;AACtB;AACA,QAAM,MAAM,mBAAM,wBAAyB,CACzC,UAAU,aAAV,IAA2B,SADc,EACH,WAD5B,CAAZ;AAEA,QAAM,QAAQ,yCAAyC,GAAzC,EAA8C,EAA9C,CAAd;AACA,QAAI,KAAJ,EAAW;AACT,aAAO,KAAP;AACD;AACF;AACD;AACA,MAAI,CAAC,UAAU,QAAX,IAAuB,oBAA3B,EAAiD;AAC/C,WAAO,2BAA2B,SAA3B,EAAsC,EAAtC,CAAP;AACD;AACD,SAAO,IAAP;AACD;;AAED;;;;;;AAMO,SAAS,0BAAT,CAAoC,QAApC,EAA8C,EAA9C,EAAkD,OAAlD,EAA2D;AAChE,MAAM,SAAS,aAAa,QAAb,CAAf;AACA,kBAAM,MAAN,CAAa,YAAY,MAAzB,EACI,4DADJ,EACkE,EADlE;AAEA,kBAAM,MAAN,CAAa,CAAC,yCAAyC,QAAzC,EAAmD,EAAnD,CAAd,EACI,iDADJ,EACuD,EADvD;AAEA,0BAAwB,QAAxB,EAAkC,QAAlC,EAA4C,EAA5C,EAAgD;AAAA,WAAM,OAAN;AAAA,GAAhD;AACA,qBAAmB,QAAnB,EAA6B,EAA7B,EAPgE,CAO9B;AACnC;;AAED;;;;;AAKA,SAAS,wCAAT,CAAkD,QAAlD,EAA4D,EAA5D,EAAgE;AAC9D;AACA;AACA;AACA,MAAM,SAAS,aAAa,QAAb,CAAf;AACA,MAAI,YAAY,MAAZ,IAAsB,oBAAoB,QAApB,EAA8B,EAA9B,CAA1B,EAA6D;AAC3D,WAAO,mBAAmB,QAAnB,EAA6B,EAA7B,CAAP;AACD,GAFD,MAEO;AACL,WAAO,IAAP;AACD;AACF;;AAED;;;;;;;AAOO,SAAS,sBAAT,CAAgC,GAAhC,EACL,EADK,EAEL,WAFK,EAGL,eAHK,EAGY;AACjB,QAAM,aAAa,GAAb,CAAN;AACA,0BAAwB,GAAxB,EAA6B,GAA7B,EAAkC,EAAlC,EAAsC,WAAtC;AACA,MAAI,eAAJ,EAAqB;AACnB,uBAAmB,GAAnB,EAAwB,EAAxB;AACD;AACF;;AAGD;;;;;;;;AAQO,SAAS,4BAAT,CAAsC,SAAtC,EACL,EADK,EAEL,WAFK,EAGL,eAHK,EAGY;AACjB,MAAM,SAAS,UAAU,SAAV,CAAf;AACA,MAAM,SAAS,uBAAuB,MAAvB,CAAf;AACA,0BAAwB,MAAxB,EAAgC,MAAhC,EAAwC,EAAxC,EAA4C,WAA5C;AACA,MAAI,eAAJ,EAAqB;AACnB,uBAAmB,MAAnB,EAA2B,EAA3B;AACD;AACF;;AAGD;;;;;;;;;;AAUO,SAAS,UAAT,CAAoB,GAApB,EAAyB,EAAzB,EAA6B;AAClC,QAAM,aAAa,GAAb,CAAN;AACA,SAAO,mBAAmB,GAAnB,EAAwB,EAAxB,CAAP;AACD;;AAGD;;;;;;;;;;AAUO,SAAS,iBAAT,CAA2B,GAA3B,EAAgC,EAAhC,EAAoC;AACzC,SAAO,0BAA0B,GAA1B,EAA+B,EAA/B,CAAP;AACD;;AAGD;;;;;;AAMO,SAAS,wBAAT,CAAkC,GAAlC,EAAuC,EAAvC,EAA2C;AAChD,QAAM,aAAa,GAAb,CAAN;AACA,MAAI,oBAAoB,GAApB,EAAyB,EAAzB,CAAJ,EAAkC;AAChC,WAAO,mBAAmB,GAAnB,EAAwB,EAAxB,CAAP;AACD,GAFD,MAEO;AACL,WAAO,IAAP;AACD;AACF;;AAGD;;;;;;AAMO,SAAS,uBAAT,CAAiC,GAAjC,EAAsC,EAAtC,EAA0C;AAC/C,SAAO,gCAAgC,GAAhC,EAAqC,EAArC,CAAP;AACD;;AAGD;;;;;;;;AAQO,SAAS,gBAAT,CAA0B,eAA1B,EAA2C,EAA3C,EAA+C;AACpD,MAAM,SAAS,UAAU,eAAV,CAAf;AACA,MAAM,SAAS,uBAAuB,MAAvB,CAAf;AACA,SAAO,mBAAmB,MAAnB,EAA2B,EAA3B,CAAP;AACD;;AAGD;;;;;;;;;;;;;AAaO,SAAS,0BAAT,CAAoC,SAApC,EAA+C,EAA/C,EAAmD;AACxD,MAAM,SAAS,UAAU,SAAV,CAAf;AACA,MAAM,SAAS,uBAAuB,MAAvB,CAAf;AACA,SAAO,mBAAmB,MAAnB,EAA2B,EAA3B,CAAP;AACD;;AAGD;;;;;;;;AAQO,SAAS,uBAAT,CAAiC,eAAjC,EAAkD,EAAlD,EAAsD;AAC3D,SAAO,0BACH,uBAAuB,eAAvB,CADG,EACsC,EADtC,CAAP;AAED;;AAGD;;;;;;;AAOO,SAAS,6BAAT,CAAuC,eAAvC,EAAwD,EAAxD,EAA4D;AACjE,SAAO,gCACH,uBAAuB,eAAvB,CADG,EACsC,EADtC,CAAP;AAED;;AAED;;;;;AAKO,SAAS,eAAT,CAAyB,GAAzB,EAA8B,SAA9B,EAAyC;AAC9C,MAAI,YAAJ,GAAmB,SAAnB;AACA,MAAI,SAAJ,GAAgB,aAAa,SAAb,CAAhB;AACD;;AAGD;;;;;AAKO,SAAS,eAAT,CAAyB,GAAzB,EAA8B;AACnC,SAAO,IAAI,YAAJ,IAAoB,GAA3B;AACD;;AAGD;;;;;;AAMO,SAAS,YAAT,CAAsB,GAAtB,EAA2B;AAChC,SAAO,IAAI,SAAJ,IAAiB,GAAxB;AACD;;AAGD;;;;;;AAMO,SAAS,2BAAT,CAAqC,IAArC,EAA2C,MAA3C,EAAmD;AACxD,MAAM,WAAW,CAAC,KAAK,aAAL,IAAsB,IAAvB,EAA6B,WAA9C;AACA,MAAI,YAAY,YAAY,MAAxB,IAAkC,aAAa,QAAb,KAA0B,MAAhE,EAAwE;AACtE,QAAI;AACF,aAAO,kCAAmC,SAAS;AAAnD;AACD,KAFD,CAEE,OAAO,CAAP,EAAU;AACV;AACD;AACF;AACD,SAAO,IAAP;AACD;;AAGD;;;;AAIO,SAAS,SAAT,CAAmB,SAAnB,EAA8B;AACnC,MAAI,UAAU,QAAd,EAAwB;AACtB,QAAM,MAAM,mBAAM,wBAAyB,CACzC,UAAU,aAAV,IAA2B,SADc,EACH,WAD5B,CAAZ;AAEA,WAAO,iBAAiB,GAAjB,EAAsB,SAAtB,EAAgC,oBAAsB,SAAtD,CAAP;AACD;AACD,SAAO,6CAA8C;AAArD;AACD;;AAGD;;;;AAIA,SAAS,sBAAT,CAAgC,SAAhC,EAA2C;AACzC,MAAM,SAAS,UAAU,SAAV,CAAf;AACA,SAAO,OAAO,WAAP,KAAuB,OAAO,GAA9B,GAAoC,MAA3C;AACD;;AAGD;;;;;;AAMA,SAAS,gBAAT,CAA0B,GAA1B,EAA+B;AAC7B,SAAO,oDACL,WAAW,GAAX,EAAgB,QAAhB;AADF;AAED;;AAGD;;;;;;;;AAQA,SAAS,kBAAT,CAA4B,MAA5B,EAAoC,EAApC,EAAwC;AACtC,kBAAM,MAAN,CAAa,oBAAoB,MAApB,EAA4B,EAA5B,CAAb,wBACwB,EADxB;AAEA,MAAM,WAAW,YAAY,MAAZ,CAAjB;AACA,MAAM,IAAI,SAAS,EAAT,CAAV;AACA,MAAI,CAAC,EAAE,GAAP,EAAY;AACV,oBAAM,MAAN,CAAa,EAAE,IAAf,eAAgC,EAAhC;AACA,oBAAM,MAAN,CAAa,EAAE,OAAf,eAAmC,EAAnC;AACA,MAAE,GAAF,GAAQ,IAAI,EAAE,IAAN,CAAW,EAAE,OAAb,CAAR;AACA,oBAAM,MAAN,CAAa,EAAE,GAAf,eAA+B,EAA/B;AACA,MAAE,IAAF,GAAS,IAAT;AACA,MAAE,OAAF,GAAY,IAAZ;AACA;AACA;AACA,QAAI,EAAE,OAAN,EAAe;AACb,QAAE,OAAF,CAAU,EAAE,GAAZ;AACD;AACF;AACD,SAAO,EAAE,GAAT;AACD;;AAED;;;;;;AAMA,SAAS,uBAAT,CAAiC,MAAjC,EAAyC,OAAzC,EAAkD,EAAlD,EAAsD,IAAtD,EAA4D;AAC1D,MAAM,WAAW,YAAY,MAAZ,CAAjB;AACA,MAAI,IAAI,SAAS,EAAT,CAAR;;AAEA,MAAI,CAAC,CAAL,EAAQ;AACN,QAAI,SAAS,EAAT,IAAe;AACjB,WAAK,IADY;AAEjB,eAAS,IAFQ;AAGjB,eAAS,IAHQ;AAIjB,eAAS,IAJQ;AAKjB,YAAM;AALW,KAAnB;AAOD;;AAED,MAAI,EAAE,IAAF,IAAU,EAAE,GAAhB,EAAqB;AACnB;AACA;AACD;;AAED,IAAE,IAAF,GAAS,IAAT;AACA,IAAE,OAAF,GAAY,OAAZ;;AAEA;AACA;AACA,MAAI,EAAE,OAAN,EAAe;AACb;AACA,uBAAmB,MAAnB,EAA2B,EAA3B;AACD;AACF;;AAED;;;;;AAKA,SAAS,yBAAT,CAAmC,MAAnC,EAA2C,EAA3C,EAA+C;AAC7C,MAAM,SAAS,gCAAgC,MAAhC,EAAwC,EAAxC,CAAf;AACA,MAAI,MAAJ,EAAY;AACV,WAAO,MAAP;AACD;AACD;;AAEA;AACA;AACA,MAAM,WAAW,uBAAjB;AAT6C,MAUtC,OAVsC,GAUlB,QAVkB,CAUtC,OAVsC;AAAA,MAU7B,OAV6B,GAUlB,QAVkB,CAU7B,OAV6B;;;AAY7C,MAAM,WAAW,YAAY,MAAZ,CAAjB;AACA,WAAS,EAAT,IAAe;AACb,SAAK,IADQ;AAEb,oBAFa;AAGb,oBAHa;AAIb,aAAS,IAJI;AAKb,UAAM;AALO,GAAf;AAOA,SAAO,OAAP;AACD;;AAGD;;;;;;;AAOA,SAAS,+BAAT,CAAyC,MAAzC,EAAiD,EAAjD,EAAqD;AACnD,MAAM,WAAW,YAAY,MAAZ,CAAjB;AACA,MAAM,IAAI,SAAS,EAAT,CAAV;AACA,MAAI,CAAJ,EAAO;AACL,QAAI,EAAE,OAAN,EAAe;AACb,aAAO,EAAE,OAAT;AACD,KAFD,MAEO;AACL;AACA,yBAAmB,MAAnB,EAA2B,EAA3B;AACA,aAAO,EAAE,OAAF,GAAY,QAAQ,OAAR,EAAgB,sBAAwB,EAAE,GAA1C,CAAnB;AACD;AACF;AACD,SAAO,IAAP;AACD;;AAGD;;;;;AAKA,SAAS,WAAT,CAAqB,MAArB,EAA6B;AAAA,MACtB,QADsB,GACV,MADU,CACtB,QADsB;;AAE3B,MAAI,CAAC,QAAL,EAAe;AACb,eAAW,OAAO,QAAP,GAAkB,EAA7B;AACD;AACD,SAAO,QAAP;AACD;;AAGD;;;;;AAKO,SAAS,YAAT,CAAsB,OAAtB,EAA+B;AACpC,SAAO,OAAO,QAAQ,OAAf,IAA0B,UAAjC;AACD;;AAGD;;;;;;AAMO,SAAS,gBAAT,CAA0B,OAA1B,EAAmC;AACxC,kBAAM,MAAN,CAAa,aAAa,OAAb,CAAb,EAAoC,kCAApC;AACA,SAAO,2BAA4B;AAAnC;AACD;;AAGD;;;;;AAKO,SAAS,qBAAT,CAA+B,MAA/B,EAAuC;AAC5C,0BAAwB,MAAxB;AACD;;AAGD;;;;;AAKO,SAAS,uBAAT,CAAiC,QAAjC,EAA2C;AAChD,0BAAwB,QAAxB;AACD;;AAGD;;;AAGA,SAAS,uBAAT,CAAiC,MAAjC,EAAyC;AACvC;AACA;AACA,MAAM,WAAW,YAAY,MAAZ,CAAjB;;AAHuC,6BAI5B,EAJ4B;AAKrC,QAAI,CAAC,OAAO,SAAP,CAAiB,cAAjB,CAAgC,IAAhC,CAAqC,QAArC,EAA+C,EAA/C,CAAL,EAAyD;AACvD;AACD;AACD,QAAM,gBAAgB,SAAS,EAAT,CAAtB;AACA,QAAI,cAAc,GAAlB,EAAuB;AACrB,6BAAuB,EAAvB,EAA2B,cAAc,GAAzC;AACD,KAFD,MAEO,IAAI,cAAc,OAAlB,EAA2B;AAChC,oBAAc,OAAd,CAAsB,IAAtB,CACI;AAAA,eAAY,uBAAuB,EAAvB,EAA2B,QAA3B,CAAZ;AAAA,OADJ;AAED;AAdoC;;AAIvC,OAAK,IAAM,EAAX,IAAiB,QAAjB,EAA2B;AAAA,qBAAhB,EAAgB;;AAAA,6BAEvB;AASH;AACF;;AAGD;;;;AAIA,SAAS,sBAAT,CAAgC,EAAhC,EAAoC,OAApC,EAA6C;AAC3C,MAAI,CAAC,aAAa,OAAb,CAAL,EAA4B;AAC1B;AACD;AACD,MAAI;AACF,qBAAiB,OAAjB,EAA0B,OAA1B;AACD,GAFD,CAEE,OAAO,CAAP,EAAU;AACV;AACA;AACA,oBAAM,KAAN,CAAY,SAAZ,EAAuB,2BAAvB,EAAoD,EAApD,EAAwD,CAAxD;AACD;AACF;;AAGD;;;;;AAKO,SAAS,YAAT,CAAsB,OAAtB,EAA+B;AACpC,SAAO,OAAO,QAAQ,gBAAf,IAAmC,UAA1C;AACD;;AAGD;;;;;;AAMO,SAAS,oBAAT,CAA8B,QAA9B,EAAwC,SAAxC,EAAmD;AACxD,MAAM,UAAU,iCAAiC,QAAjC,EAA2C,SAA3C,CAAhB;AACA,kBAAM,MAAN,CAAa,OAAb,EAAsB,aAAW,SAAX,6BAClB,0CADJ;AAED;;AAGD;;;;;;;AAOO,SAAS,gCAAT,CAA0C,QAA1C,EAAoD,SAApD,EAA+D;AACpE,MAAM,eAAe,oBAAsB,gBAAM,MAAN,CACvC,SAAS,YAD8B,EAEvC,kCAFuC,CAA3C;AAGA,MAAM,SAAS,UAAU,YAAV,CAAf;AACA,MAAM,SAAS,uBAAuB,MAAvB,CAAf;AACA,MAAI,CAAC,oBAAoB,MAApB,EAA4B,SAA5B,CAAL,EAA6C;AAC3C,WAAO,KAAP;AACD;AACD,MAAM,UAAU,2BAA2B,YAA3B,EAAyC,SAAzC,CAAhB;AACA,MAAI,CAAC,aAAa,OAAb,CAAL,EAA4B;AAC1B,WAAO,KAAP;AACD;AACD,UAAQ,gBAAR,CAAyB,QAAzB;AACA,SAAO,IAAP;AACD;;AAGD;;;;;AAKO,SAAS,sBAAT,CAAgC,MAAhC,EAAwC,EAAxC,EAA4C;AACjD,MAAI,OAAO,QAAX,EAAqB;AACnB,WAAO,QAAP,CAAgB,EAAhB,IAAsB,IAAtB;AACD;AACF;;AAED;;;;;AAKA,SAAS,mBAAT,CAA6B,MAA7B,EAAqC,EAArC,EAAyC;AACvC,MAAM,UAAU,OAAO,QAAP,IAAmB,OAAO,QAAP,CAAgB,EAAhB,CAAnC;AACA;AACA,SAAO,CAAC,EAAE,YAAY,QAAQ,IAAR,IAAgB,QAAQ,GAApC,CAAF,CAAR;AACD;;;;;;;;qjBCnrBD;;;;;;;;;;;;;;;;;;QA0MgB,sB,GAAA,sB;;AA1LhB;;AACA;;AACA;;AACA;;;;;;AAEA;AACA,IAAM,YAAY,GAAlB;;IAEa,S,WAAA,S;;AAEX;;;AAGA,qBAAY,GAAZ,EAAiB;AAAA;;AACf;AACA,SAAK,IAAL,GAAY,GAAZ;AACA;AACA,SAAK,YAAL,GAAoB,CAApB;AACA;AACA,SAAK,cAAL,GAAsB,CAAtB;AACA;AACA,SAAK,cAAL,GAAsB,CAAtB;AACA;AACA,SAAK,aAAL,GAAqB,CAArB;AACA;AACA,SAAK,cAAL,GAAsB,IAAtB;AACA;AACA,SAAK,KAAL,GAAa,mBAAS,oBAAT,CAA8B,GAA9B,CAAb;;AAEA;AACA,SAAK,eAAL,GAAuB,IAAvB;AACA;AACA,SAAK,kBAAL,GAA0B,IAA1B;AACA,SAAK,yBAAL;;AAEA;AACA,SAAK,iBAAL,GAAyB,IAAzB;AACA,SAAK,2BAAL;AACD;;AAED;;;;;;;kCAGc;AACZ,UAAI,CAAC,KAAK,UAAL,EAAL,EAAwB;AACtB;AACD;AACD;AACA,UAAI,KAAK,cAAL,IAAuB,IAA3B,EAAiC;AAC/B,aAAK,cAAL,GAAsB,KAAK,IAAL,CAAU,IAAV,CAAe,GAAf,EAAtB;AACD;AACF;;AAED;;;;;;4BAGQ;AACN,UAAI,CAAC,KAAK,UAAL,EAAD,IAAsB,KAAK,cAAL,IAAuB,IAAjD,EAAuD;AACrD;AACD;AACD,UAAM,eAAe,KAAK,IAAL,CAAU,IAAV,CAAe,GAAf,KAAuB,KAAK,cAAjD;AACA,WAAK,cAAL,GAAsB,IAAtB;AACA,WAAK,cAAL;AACA,UAAI,eAAe,EAAnB,EAAuB;AACrB,aAAK,YAAL;AACA,wBAAM,IAAN,CAAW,MAAX,EAAmB,oBAAoB,YAApB,GAAmC,IAAtD;AACD;;AAED;AACA,UAAI,KAAK,KAAL,IAAc,KAAK,cAAL,IAAuB,SAAzC,EAAoD;AAClD;AACA,YAAM,MAAM,KAAK,aAAL,EAAZ;AACA,aAAK,KAAL,CAAW,SAAX,CAAqB,KAArB,EAA4B,GAA5B;AACA;AACA,aAAK,KAAL,CAAW,SAAX,CAAqB,IAArB,EAA2B,KAAK,YAAhC;AACA,YAAI,KAAK,iBAAT,EAA4B;AAC1B;AACA,eAAK,KAAL,CAAW,SAAX,CAAqB,KAArB,EAA4B,KAAK,aAAjC;AACA;AACA,eAAK,KAAL,CAAW,SAAX,CAAqB,KAArB,EAA4B,KAAK,cAAjC;AACA,eAAK,iBAAL,CAAuB,UAAvB;AACA,eAAK,iBAAL,GAAyB,IAAzB;AACD;AACD,YAAI,cAAc,CAAlB;AACA,YAAI,KAAK,eAAL,IAAyB,KAAK,kBAAL,IAA2B,IAAxD,EAA+D;AAC7D,wBAAc,KAAK,IAAL,CAAU,IAAV,CAAe,GAAf,CAAmB,CAAnB,EAAsB,KAAK,IAAL,CAAU,IAAV,CAAe,KAAf,CAChC,KAAK,eAAL,CAAqB,KAArB,GAA6B,GAA7B,GAAmC,KAAK,kBADR,CAAtB,CAAd;AAEA;AACA,eAAK,KAAL,CAAW,SAAX,CAAqB,IAArB,EAA2B,WAA3B;AACD;AACD,aAAK,KAAL,CAAW,KAAX;AACA,YAAI,mBAAmB,KAAK,IAAxB,CAAJ,EAAmC;AACjC,eAAK,oBAAL,CAA0B,WAA1B;AACD;AACF;AACF;;AAED;;;;;;;;iCAKa;AACX,aAAO,mBAAmB,KAAK,IAAxB,KACC,KAAK,KAAL,IACG,KAAK,KAAL,CAAW,uBAAX,EADH,IAEG,KAAK,cAAL,GAAsB,SAHjC;AAID;;AAED;;;;;;;yCAIqB,W,EAAa;AAChC,UAAM,MAAM,KAAK,IAAL,CAAU,QAAtB;AACA,UAAM,UAAU,6BAAQ,GAAR,CAAV,iBAAN;AAEA,cAAQ,WAAR,GACI,QAAM,KAAK,YAAX,eAAiC,KAAK,aAAtC,oBACO,KAAK,cADZ,aACkC,WADlC,CADJ;AAGA,UAAI,IAAJ,CAAS,WAAT,CAAqB,OAArB;AACD;;AAED;;;;;;;;oCAKgB;AACd,aAAO,KAAK,IAAL,CAAU,IAAV,CAAe,KAAf,CACH,CAAC,KAAK,cAAL,GAAsB,KAAK,YAA5B,IAA4C,KAAK,cAAjD,GAAkE,GAD/D,CAAP;AAED;;AAED;;;;;;kDAG8B;AAAA;;AAC5B,UAAI,CAAC,KAAK,UAAL,EAAD,IAAsB,CAAC,uBAAuB,KAAK,IAA5B,CAA3B,EAA8D;AAC5D;AACD;AACD,WAAK,iBAAL,GAAyB,IAAI,KAAK,IAAL,CAAU,mBAAd,CAAkC,qBAAa;AACtE,YAAM,UAAU,UAAU,UAAV,EAAhB;AACA,aAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,QAAQ,MAA5B,EAAoC,GAApC,EAAyC;AACvC,cAAI,QAAQ,CAAR,EAAW,SAAX,IAAwB,UAA5B,EAAwC;AACtC;AACA;AACA,gBAAM,OAAO,MAAK,IAAL,CAAU,IAAV,CAAe,KAAf,CAAqB,QAAQ,CAAR,EAAW,QAAX,GAAsB,EAA3C,CAAb;AACA,gBAAI,QAAQ,CAAR,EAAW,IAAX,IAAmB,yBAAvB,EAAkD;AAChD,oBAAK,cAAL,IAAuB,IAAvB;AACA,+BAAO,IAAP,CACI,UADJ,wBACoC,QAAQ,CAAR,EAAW,QAD/C;AAED,aAJD,MAIO;AACL,oBAAK,aAAL,IAAsB,IAAtB;AACA,8BAAM,IAAN,CAAW,UAAX,uBAA0C,QAAQ,CAAR,EAAW,QAArD;AACD;AACF;AACF;AACF,OAjBwB,CAAzB;AAkBA,WAAK,iBAAL,CAAuB,OAAvB,CAA+B,EAAC,YAAY,CAAC,UAAD,CAAb,EAA/B;AACD;;AAED;;;;;;gDAG4B;AAAA;;AAC1B,UAAI,sBAAsB,KAAK,IAA3B,CAAJ,EAAsC;AACpC,aAAK,IAAL,CAAU,SAAV,CAAoB,UAApB,GAAiC,IAAjC,CAAsC,mBAAW;AAC/C,iBAAK,eAAL,GAAuB,OAAvB;AACA,iBAAK,kBAAL,GAA0B,QAAQ,KAAR,GAAgB,GAA1C;AACD,SAHD;AAID;AACF;;;;;;AAGH;;;;;;AAIA,SAAS,kBAAT,CAA4B,GAA5B,EAAiC;AAC/B,SAAO,iCAAe,GAAf,EAAoB,YAApB,CAAP;AACD;;AAED;;;;AAIO,SAAS,sBAAT,CAAgC,GAAhC,EAAqC;AAC1C,SAAO,CAAC,CAAC,IAAI,mBAAN,IACA,CAAC,CAAC,IAAI,qBADN,IAEC,mBAAmB,IAAI,qBAAJ,CAA0B,SAFrD;AAGD;;AAED;;;;AAIA,SAAS,qBAAT,CAA+B,SAA/B,EAA0C;AACxC;AACA,SAAO,KAAP;AACD;;;;;;;;qjBCvND;;;;;;;;;;;;;;;;AAgBA;;AASA;;;;AAOA;AACO,IAAI,0DAAJ;;IAEM,Q,WAAA,Q;;;;;;;;AACX;;;;;AAKA;;;;;wCAK2B,e,EAAiB;AAC1C,aAAQ,gFACN,6CAAwB,eAAxB,EAAyC,QAAzC,EAAmD,YAAnD;AADF;AAED;;AAED;;;;;;;;;8CAMiC,e,EAAiB;AAChD,aAAQ,gFACN,wDAAmC,eAAnC,EAAoD,QAApD,EACI,YADJ;AADF;AAGD;;AAED;;;;;;;;+CAKkC,e,EAAiB;AACjD,aAAQ,8CACN,6CAAwB,eAAxB,EAAyC,eAAzC,EACI,mBADJ;AADF;AAGD;;AAED;;;;;;;;qDAKwC,e,EAAiB;AACvD,aAAQ,8CACN,wDAAmC,eAAnC,EAAoD,eAApD,EACI,mBADJ;AADF;AAGD;;AAED;;;;;;;;;wCAM2B,S,EAAW;AACpC,aAAO,oDACL,mDACI,SADJ,EACe,QADf,EACyB,0BAA2B,IADpD;AADF;AAGD;;AAED;;;;;;;mCAIsB,e,EAAiB;AACrC,aAAO,mCACL,6CAAwB,eAAxB,EAAyC,UAAzC,EAAqD,eAArD;AADF;AAED;;AAED;;;;;;;;;;qCAOwB,M,EAAQ;AAC9B,aAAO,oDACL,yBAAW,MAAX,EAAmB,QAAnB;AADF;AAED;;AAED;;;;;;;;2BAKc,e,EAAiB;AAC7B,aAAO,wBAAU,eAAV,CAAP;AACD;;AAED;;;;;;;;oCAKuB,e,EAAwC;AAAA,UAAvB,aAAuB,uEAAP,KAAO;;AAC7D,UAAI,aAAJ,EAAmB;AACjB;AACA,YAAM,SAAS,wBAAU,eAAV,CAAf;AACA,iBAAS,aAAT,CAAuB,OAAO,GAA9B,GAAmC,MAAM,sBAAzC,CACI,MADJ,EACY,eADZ;AAED;AACD,aAAO,iGACL,6CAAwB,eAAxB,EAAyC,+BAAzC,EACI,eADJ;AADF;AAGD;;AAED;;;;;;;0CAI6B,e,EAAiB;AAC5C,aAAO,iGACL,wDAAmC,eAAnC,EACI,+BADJ,EACqC,eADrC;AADF;AAGD;;AAED;;;;;;;kCAIqB,M,EAAQ;AAC3B,aAAO,sDACL,yBAAW,MAAX,EAAmB,aAAnB;AADF;AAED;;AAED;;;;;;;qCAIwB,e,EAAiB;AACvC,aAAO,oEACL,oEACI,eADJ,EACqB,MADrB,EAC6B,UAD7B;AADF;AAGD;;AAED;;;;;;;8BAIiB,e,EAAiB;AAChC,aAAO,iDACL,sCAAwB,eAAxB,EAAyC,KAAzC;AADF;AAED;;AAED;;;;;;;qCAIwB,e,EAAiB;AACvC,aAAO,gDACL,+BAAiB,eAAjB,EAAkC,YAAlC;AADF;AAED;;AAED;;;;;;;8BAIiB,M,EAAQ;AACvB,aAAQ,6CACN,yBAAW,MAAX,EAAmB,QAAnB;AADF;AAED;;AAED;;;;;;;uCAI0B,e,EAAiB;AACzC,aAAO,qDACL,+BAAiB,eAAjB,EAAkC,cAAlC,CAD0D,CACP,GADO;AAA5D;AAED;;AAED;;;;;;;qCAIwB,M,EAAQ;AAC9B,aAAO,yBAAW,MAAX,EAAmB,eAAnB,CAAP;AACD;;AAED;;;;;;;kCAIqB,M,EAAQ;AAC3B,aAAO,qDACL,yBAAW,MAAX,EAAmB,YAAnB;AADF;AAED;;AAED;;;;;;;;kCAKqB,e,EAAiB;AACpC,aAAO,+CACL,+BAAiB,eAAjB,EAAkC,SAAlC;AADF;AAED;;AAED;;;;;;;6BAIgB,G,EAAK;AACnB,aAAO,yBAAW,GAAX,EAAgB,OAAhB,CAAP;AACD;;AAED;;;;;;;iCAIoB,e,EAAiB;AACnC,aAAO,mDACL,+BAAiB,eAAjB,EAAkC,QAAlC;AADF;AAED;;AAED;;;;;;;mCAIsB,M,EAAQ;AAC5B,aAAO,sDACL,yBAAW,MAAX,EAAmB,aAAnB;AADF;AAED;;AAED;;;;;;;yCAI4B,M,EAAQ;AAClC,aAAO,sDACL,uCAAyB,MAAzB,EAAiC,aAAjC;AADF;AAED;;AAED;;;;;;;gCAImB,M,EAAQ;AACzB,aAAO,iDACL,yBAAW,MAAX,EAAmB,UAAnB;AADF;AAED;;AAED;;;;;;;;oCAKuB,S,EAAW;AAChC,aAAO,mDACL,yCAA2B,SAA3B,EAAsC,WAAtC;AADF;AAED;;AAED;;;;;;;2CAI8B,G,EAAK;AACjC,aAAQ,+EACN,kDAA6B,GAA7B,EAAkC,gBAAlC,EACI,oBADJ,EAC0B,IAD1B;AADF;AAGD;;AAED;;;;;;;kDAIqC,G,EAAK;AACxC;AACA;AACG,0DAA6B,GAA7B,EAAkC,gBAAlC,EAAoD,WAApD,EACG,IADH;AAFH;AAID;;AAED;;;;;;;;;+CAMkC,G,EAAK;AACrC;AACA;AACG,0DAA6B,GAA7B,EAAkC,aAAlC,EAAiD,WAAjD;AAFH;AAGD;;AAED;;;;;;;sCAIyB,G,EAAK;AAC5B,aAAQ;AACL,+CAAyB,GAAzB,EAA8B,aAA9B;AADH;AAED;;AAED;;;;;;;wCAI2B,G,EAAK;AAC9B,aAAQ;AACL,+CAAyB,GAAzB,EAA8B,eAA9B;AADH;AAED;;AAED;;;;;;;iDAIoC,G,EAAK;AACvC;AACA;AACG,0DAA6B,GAA7B,EAAkC,cAAlC,EAAkD,WAAlD,EAA+D,IAA/D;AAFH;AAGD;;AAED;;;;;;;wCAI2B,G,EAAK;AAC9B,aAAO,yBAAW,GAAX,EAAgB,cAAhB,CAAP;AACD;;AAED;;;;;;;;yCAK4B,G,EAAK;AAC/B,aAAO,yBAAW,GAAX,EAAgB,aAAhB,CAAP;AACD;;AAED;;;;;;;;2CAK8B,G,EAAK;AACjC,aAAO,yBAAW,GAAX,EAAgB,mBAAhB,CAAP;AACD;;AAED;;;;;;;;oDAKuC,G,EAAK;AAC1C;AACA;AACG,0DAA6B,GAA7B,EAAkC,kBAAlC,EAAsD,WAAtD,EACG,IADH;AAFH;AAID;;AAED;;;;;;;;2CAK8B,G,EAAK;AACjC,aAAO,yBAAW,GAAX,EAAgB,kBAAhB,CAAP;AACD;;AAED;;;;;;;8DAIiD,G,EAAK;AACpD;AACA;AACG,0DAA6B,GAA7B,EAAkC,6BAAlC,EACG,wBADH,EAC6B,IAD7B;AAFH;AAID;;AAED;;;;;;;2CAI8B,e,EAAiB;AAC7C,aAAQ;AACL,qDACG,eADH,EACoB,eADpB,EACqC,eADrC;AADH;AAGD;;AAED;;;;;;;kCAIqB,e,EAAiB;AACpC,aAAO,yDACL,sCAAwB,eAAxB,EAAyC,SAAzC;AADF;AAED;;AAED;;;;;;;iCAIoB,M,EAAQ;AAC1B,aAAO,kDACL,yBAAW,MAAX,EAAmB,WAAnB;AADF;AAED;;AAED;;;;;;;6BAIgB,M,EAAQ;AACtB,aAAO,2CACL,yBAAW,MAAX,EAAmB,OAAnB;AADF;AAED;;AAED;;;;;;;;;0CAM6B,S,EAAW;AACtC,aAAO,gEACL,mDACI,SADJ,EACe,aADf,EAC8B,0BAA2B,IADzD;AADF;AAGD;;AAED;;;;;;;kDAIqC,e,EAAiB;AACpD,aAAQ;AACL,qDAAwB,eAAxB,EAAyC,yBAAzC,EACG,uBADH;AADH;AAGD;;AAED;;;;;;;;;qDAMwC,e,EAAiB;AACvD,aAAQ;AACL,gEAAmC,eAAnC,EACG,sBADH,EAC2B,aAD3B;AADH;AAGD;;AAED;;;;;;;;;oCAMuB,e,EAAiB;AACtC,aAAO,mEACL,wDACI,eADJ,EACqB,KADrB,EAC4B,SAD5B,EACuC,IADvC;AADF;AAGD;;AAED;;;;;;;;;8BAMiB,S,EAAW;AAC1B,aAAO,uCACL,mDACI,SADJ,EACe,KADf,EACsB,0BAA2B,IADjD;AADF;AAGD;;AAED;;;;;;;;;qCAMwB,G,EAAK;AAC3B,aAAO,yCACL,kDAA6B,GAA7B,EAAkC,SAAlC,EAA6C,gBAA7C,EAA+D,IAA/D;AADF;AAED;;AAED;;;;;;;uCAI0B,e,EAAiB;AACzC;AACE,+EACE,+BAAiB,eAAjB,EAAkC,eAAlC;AAFJ;AAGD;;AAED;;;;;;;;iCAKoB,S,EAAW;AAC7B,aAAO,6CACL,yCAA2B,SAA3B,EAAsC,QAAtC;AADF;AAED;;AAED;;;;;;;;;;wCAO2B,e,EAAiB;AAC1C,aAAO,uDACL,sCAAwB,eAAxB,EAAyC,QAAzC;AADF;AAED;;AAED;;;;;;;6BAIgB,M,EAAQ;AACtB,aAAO,2CACL,yBAAW,MAAX,EAAmB,OAAnB;AADF;AAED;;AAED;;;;;;;;mCAKsB,S,EAAW;AAC/B,aAAO,0DACL,yCAA2B,SAA3B,EAAsC,UAAtC;AADF;AAED;;AAED;;;;;;;2BAIc,M,EAAQ;AACpB,aAAO,uCAAwC,yBAAW,MAAX,EAAmB,KAAnB;AAA/C;AACD;;;;;;;;;;QCjiBa,O,GAAA,O;QA6CA,Q,GAAA,Q;;AAxDhB;;AACA;;AAjBA;;;;;;;;;;;;;;;;AAmBA,IAAI,kBAAJ;;AAEA;;;;;;AAMO,SAAS,OAAT,CAAiB,SAAjB,EAA4B;AACjC,MAAM,MAAM,UAAU,aAAV,IAA2B,SAAvC;AACA,MAAI,CAAC,SAAD,IAAc,UAAU,aAAV,KAA4B,GAA9C,EAAmD;AACjD,gBAAY,IAAI,aAAJ,CAAkB,KAAlB,CAAZ;AACD;;AAED,SAAO,IAAP;AACD;;AAED;;;;;;;;;;;;;;AAcA,SAAS,IAAT,CAAc,OAAd,EAAuB;AACrB,kBAAM,MAAN,CAAa,QAAQ,MAAR,KAAmB,CAAhC,EAAmC,mCAAnC;AACA,aAAU,MAAM,SAAhB,GAA4B,QAAQ,CAAR,CAA5B;;AAEA,MAAM,KAAK,UAAU,iBAArB;AACA,kBAAM,MAAN,CAAa,EAAb,EAAiB,yBAAjB;AACA,kBAAM,MAAN,CAAa,CAAC,GAAG,kBAAjB,EAAqC,oCAArC;;AAEA;AACA,aAAU,MAAM,SAAhB,GAA4B,EAA5B;;AAEA,SAAO,EAAP;AACD;;AAED;;;;;;;;AAQO,SAAS,QAAT,CAAkB,IAAlB,EAAwB;AAC7B,MAAM,WAAW,KAAK,gBAAL,CAAsB,OAAtB,CAAjB;AACA,MAAM,OAAO,kBAAb;;AAEA,OAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,SAAS,MAA7B,EAAqC,GAArC,EAA0C;AACxC,QAAM,UAAU,SAAS,CAAT,CAAhB;AACA,QAAM,MAAM,gBAAM,MAAN,CAAa,QAAQ,YAAR,CAAqB,KAArB,CAAb,EAA0C,gBAA1C,CAAZ;AACA,YAAQ,eAAR,CAAwB,KAAxB;AACA,oBAAM,MAAN,CAAa,KAAK,GAAL,MAAc,SAA3B,EAAsC,eAAtC;AACA,SAAK,GAAL,IAAY,OAAZ;AACD;;AAED,SAAO,IAAP;AACD;;;;;;QC/Ce,e,GAAA,e;QAUA,e,GAAA,e;QAQA,e,GAAA,e;QAUA,Q,GAAA,Q;QAWA,U,GAAA,U;QAqBA,c,GAAA,c;QAsBA,Y,GAAA,Y;AAxHhB;;;;;;;;;;;;;;;;AAgBA;;;;;AAKA,SAAS,WAAT,CAAqB,MAArB,EAA6B,SAA7B,EAAwC;AACtC,SAAO,UAAU,WAAV,EAAP;AACD;;AAED;;;;AAIA,SAAS,yBAAT,CAAmC,KAAnC,EAA0C;AACxC,SAAO,MAAM,MAAM,WAAN,EAAb;AACD;;AAED;;;;;AAKO,SAAS,eAAT,CAAyB,IAAzB,EAA+B;AACpC,SAAO,KAAK,OAAL,CAAa,WAAb,EAA0B,WAA1B,CAAP;AACD;;AAED;;;;;;AAMO,SAAS,eAAT,CAAyB,MAAzB,EAAiC;AACtC,SAAO,OAAO,OAAP,CAAe,aAAf,EAA8B,yBAA9B,CAAP;AACD;;AAED;;;;AAIO,SAAS,eAAT,CAAyB,IAAzB,EAA+B;AACpC,SAAO,KAAK,OAAL,CAAa,GAAb,EAAkB,GAAlB,CAAP;AACD;;AAED;;;;;;AAMO,SAAS,QAAT,CAAkB,MAAlB,EAA0B,MAA1B,EAAkC;AACvC,MAAM,QAAQ,OAAO,MAAP,GAAgB,OAAO,MAArC;AACA,SAAO,SAAS,CAAT,IAAc,OAAO,OAAP,CAAe,MAAf,EAAuB,KAAvB,KAAiC,KAAtD;AACD;;AAED;;;;;;AAMO,SAAS,UAAT,CAAoB,MAApB,EAA4B,MAA5B,EAAoC;AACzC,MAAI,OAAO,MAAP,GAAgB,OAAO,MAA3B,EAAmC;AACjC,WAAO,KAAP;AACD;AACD,SAAO,OAAO,WAAP,CAAmB,MAAnB,EAA2B,CAA3B,KAAiC,CAAxC;AACD;;AAED;;;;;;;;;;;;;;AAcO,SAAS,cAAT,CAAwB,QAAxB,EAAkC,MAAlC,EAA0C,iBAA1C,EAA6D;AAClE,MAAM,gBAAgB,qBAAqB,CAA3C;;AADkE,6BAEzD,CAFyD;AAGhE,QAAI,UAAU,CAAd;AACA,eAAW,SAAS,OAAT,CAAiB,cAAjB,EAAiC,UAAC,EAAD,EAAK,CAAL,EAAW;AACrD;AACA,aAAO,OAAO,CAAP,CAAP;AACD,KAHU,CAAX;AAIA,QAAI,CAAC,OAAL,EAAc;AACZ;AACD;AAV+D;;AAElE,OAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,aAApB,EAAmC,GAAnC,EAAwC;AAAA,qBAA/B,CAA+B;;AAAA,0BAOpC;AAEH;AACD,SAAO,QAAP;AACD;;AAED;;;;;;;AAOO,SAAS,YAAT,CAAsB,GAAtB,EAA2B;AAAA,MACzB,MADyB,GACf,GADe,CACzB,MADyB;;AAEhC,MAAI,OAAO,IAAX;AACA,OAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,MAApB,EAA4B,GAA5B,EAAiC;AAC/B,WAAO,OAAO,EAAP,GAAY,IAAI,UAAJ,CAAe,CAAf,CAAnB;AACD;AACD;AACA,SAAO,OAAO,SAAS,CAAhB,CAAP;AACD;;;;;;QC/Fe,oB,GAAA,oB;QAiCA,uB,GAAA,uB;QAiCA,kB,GAAA,kB;QAgBA,Q,GAAA,Q;QAiBA,Q,GAAA,Q;QAgBA,S,GAAA,S;QAYA,M,GAAA,M;QAaA,E,GAAA,E;QASA,G,GAAA,G;QASA,U,GAAA,U;QAcA,S,GAAA,S;QAmBA,K,GAAA,K;QASA,M,GAAA,M;QAcA,oB,GAAA,oB;QAaA,a,GAAA,a;QAWA,W,GAAA,W;;AA9PhB;;AACA;;AAGA;AArBA;;;;;;;;;;;;;;;;AAgBA;AAMA,IAAI,0BAAJ;;AAEA;AACA,IAAM,iBAAiB,CAAC,QAAD,EAAW,QAAX,EAAqB,KAArB,EAA4B,KAA5B,EAAmC,IAAnC,EAAyC,GAAzC,EAA8C,GAA9C,CAAvB;;AAGA;;;;;AAKO,SAAS,oBAAT,CAA8B,SAA9B,EAAyC;AAC9C,SAAO,UAAU,MAAV,CAAiB,CAAjB,EAAoB,WAApB,KAAoC,UAAU,KAAV,CAAgB,CAAhB,CAA3C;AACD;;AAED;;;;;;;;AAQA,SAAS,wBAAT,CAAkC,KAAlC,EAAyC,SAAzC,EAAoD;AAClD,OAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,eAAe,MAAnC,EAA2C,GAA3C,EAAgD;AAC9C,QAAM,eAAe,eAAe,CAAf,IAAoB,SAAzC;AACA,QAAI,MAAM,YAAN,MAAwB,SAA5B,EAAuC;AACrC,aAAO,YAAP;AACD;AACF;AACD,SAAO,EAAP;AACD;;AAED;;;;;;;;;;;AAWO,SAAS,uBAAT,CAAiC,KAAjC,EAAwC,SAAxC,EAAmD,eAAnD,EAAoE;AACzE,MAAI,wBAAW,SAAX,EAAsB,IAAtB,CAAJ,EAAiC;AAC/B;AACA,WAAO,SAAP;AACD;AACD,MAAI,CAAC,iBAAL,EAAwB;AACtB,wBAAoB,kBAApB;AACD;AACD,MAAI,eAAe,kBAAkB,SAAlB,CAAnB;AACA,MAAI,CAAC,YAAD,IAAiB,eAArB,EAAsC;AACpC,mBAAe,SAAf;AACA,QAAI,MAAM,SAAN,MAAqB,SAAzB,EAAoC;AAClC,UAAM,YAAY,qBAAqB,SAArB,CAAlB;AACA,UAAM,uBAAuB,yBAAyB,KAAzB,EAAgC,SAAhC,CAA7B;;AAEA,UAAI,MAAM,oBAAN,MAAgC,SAApC,EAA+C;AAC7C,uBAAe,oBAAf;AACD;AACF;AACD,QAAI,CAAC,eAAL,EAAsB;AACpB,wBAAkB,SAAlB,IAA+B,YAA/B;AACD;AACF;AACD,SAAO,YAAP;AACD;;AAGD;;;;;;AAMO,SAAS,kBAAT,CAA4B,OAA5B,EAAqC,MAArC,EAA6C;AAClD,OAAK,IAAM,CAAX,IAAgB,MAAhB,EAAwB;AACtB,YAAQ,KAAR,CAAc,WAAd,CACI,wBAAwB,MAAxB,EAAgC,CAAhC,CADJ,EACwC,OAAO,CAAP,EAAU,QAAV,EADxC,EAC8D,WAD9D;AAED;AACF;;AAGD;;;;;;;;AAQO,SAAS,QAAT,CAAkB,OAAlB,EAA2B,QAA3B,EAAqC,KAArC,EAA4C,SAA5C,EAAuD,eAAvD,EAAwE;AAC7E,MAAM,eAAe,wBAAwB,QAAQ,KAAhC,EAAuC,QAAvC,EACjB,eADiB,CAArB;AAEA,MAAI,YAAJ,EAAkB;AAChB,YAAQ,KAAR,CAAc,YAAd;AACE,yBAAuB,YAAY,QAAQ,SAApB,GAAgC,KADzD;AAED;AACF;;AAGD;;;;;;;AAOO,SAAS,QAAT,CAAkB,OAAlB,EAA2B,QAA3B,EAAqC,eAArC,EAAsD;AAC3D,MAAM,eAAe,wBAAwB,QAAQ,KAAhC,EAAuC,QAAvC,EACjB,eADiB,CAArB;AAEA,MAAI,CAAC,YAAL,EAAmB;AACjB,WAAO,SAAP;AACD;AACD,SAAO,QAAQ,KAAR,CAAc,YAAd,CAAP;AACD;;AAGD;;;;;;AAMO,SAAS,SAAT,CAAmB,OAAnB,EAA4B,MAA5B,EAAoC;AACzC,OAAK,IAAM,CAAX,IAAgB,MAAhB,EAAwB;AACtB,aAAS,OAAT,EAAkB,CAAlB,EAAqB,OAAO,CAAP,CAArB;AACD;AACF;;AAGD;;;;;AAKO,SAAS,MAAT,CAAgB,OAAhB,EAAyB,WAAzB,EAAsC;AAC3C,MAAI,gBAAgB,SAApB,EAA+B;AAC7B,kBAAc,SAAS,OAAT,EAAkB,SAAlB,KAAgC,MAA9C;AACD;AACD,WAAS,OAAT,EAAkB,SAAlB,EAA6B,cAAc,EAAd,GAAmB,MAAhD;AACD;;AAGD;;;;;AAKO,SAAS,EAAT,CAAY,KAAZ,EAAmB;AACxB,SAAU,KAAV;AACD;;AAED;;;;;AAKO,SAAS,GAAT,CAAa,KAAb,EAAoB;AACzB,SAAU,KAAV;AACD;;AAED;;;;;AAKO,SAAS,UAAT,CAAoB,KAApB,EAA2B;AAChC,MAAI,OAAO,KAAP,IAAgB,QAApB,EAA8B;AAC5B,2BAAqB,KAArB;AACD;AACD,yBAAqB,GAAG,KAAH,CAArB;AACD;;AAGD;;;;;;AAMO,SAAS,SAAT,CAAmB,CAAnB,EAAsB,KAAtB,EAA6B;AAClC,MAAI,OAAO,CAAP,IAAY,QAAhB,EAA0B;AACxB,QAAI,GAAG,CAAH,CAAJ;AACD;AACD,MAAI,UAAU,SAAd,EAAyB;AACvB,0BAAoB,CAApB;AACD;AACD,MAAI,OAAO,KAAP,IAAgB,QAApB,EAA8B;AAC5B,YAAQ,GAAG,KAAH,CAAR;AACD;AACD,wBAAoB,CAApB,UAA0B,KAA1B;AACD;;AAGD;;;;;AAKO,SAAS,KAAT,CAAe,KAAf,EAAsB;AAC3B,oBAAgB,KAAhB;AACD;;AAED;;;;;AAKO,SAAS,MAAT,CAAgB,KAAhB,EAAuB;AAC5B,MAAI,OAAO,KAAP,IAAgB,QAApB,EAA8B;AAC5B,YAAQ,IAAI,KAAJ,CAAR;AACD;AACD,qBAAiB,KAAjB;AACD;;AAED;;;;;;;AAOO,SAAS,oBAAT,CAA8B,SAA9B,EAAyC;AAC9C,SAAO,UAAU,OAAV,CACH,qCADG,EACoC,eADpC,CAAP;AAED;;AAED;;;;;;;;AAQO,SAAS,aAAT,CAAuB,GAAvB,EAA4B,EAA5B,EAAgC;AACrC,MAAM,QAAQ,mCAAoC,IAAI,gBAAJ,CAAqB,EAArB,CAAlD;AACA,SAAO,uCAAuC,KAAD,IAAW;AAAxD;AACD;;AAGD;;;;;AAKO,SAAS,WAAT,CAAqB,OAArB,EAA8B,UAA9B,EAA0C;AAC/C,MAAM,WAAW,EAAjB;AACA,aAAW,OAAX,CAAmB,gBAAQ;AACzB,aAAS,IAAT,IAAiB,IAAjB;AACD,GAFD;AAGA,YAAU,OAAV,EAAmB,QAAnB;AACD;;;;;;QCpPe,O,GAAA,O;QAUA,O,GAAA,O;QAgBA,Q,GAAA,Q;QAWA,c,GAAA,c;QAYA,W,GAAA,W;QAmBA,K,GAAA,K;AArGhB;;;;;;;;;;;;;;;;AAgBA;AACA,IAAM,YAAY,OAAO,SAAP,CAAiB,QAAnC;;AAEA;;;;;AAKA,SAAS,QAAT,CAAkB,KAAlB,EAAyB;AACvB,SAAO,UAAU,IAAV,CAAe,KAAf,CAAP;AACD;;AAED;;;;;AAKO,SAAS,OAAT,CAAiB,KAAjB,EAAwB;AAC7B,SAAO,MAAM,OAAN,CAAc,KAAd,CAAP;AACD;;AAED;;;;;;AAMO,SAAS,OAAT,CAAiB,SAAjB,EAA4B;AACjC,MAAI,CAAC,SAAL,EAAgB;AACd,WAAO,EAAP;AACD;AACD,MAAM,QAAQ,IAAI,KAAJ,CAAU,UAAU,MAApB,CAAd;AACA,OAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,UAAU,MAA9B,EAAsC,GAAtC,EAA2C;AACzC,UAAM,CAAN,IAAW,UAAU,CAAV,CAAX;AACD;AACD,SAAO,KAAP;AACD;;AAED;;;;;AAKO,SAAS,QAAT,CAAkB,KAAlB,EAAyB;AAC9B,SAAO,SAAS,KAAT,MAAoB,iBAA3B;AACD;;AAED;;;;;;;AAOO,SAAS,cAAT,CAAwB,KAAxB,EAA+B;AACpC,SAAQ,OAAO,KAAP,KAAiB,QAAjB,IAA6B,SAAS,KAAT,CAArC;AACD;;AAED;;;;;;;;AAQO,SAAS,WAAT,CAAqB,OAArB,EAA8B,CAA9B,EAAiC;AACtC,OAAK,IAAM,CAAX,IAAgB,OAAhB,EAAyB;AACvB,QAAI,QAAQ,CAAR,MAAe,CAAnB,EAAsB;AACpB,aAAO,IAAP;AACD;AACF;AACD,SAAO,KAAP;AACD;;AAED;;;;;;;;;;AAUO,SAAS,KAAT,CAAe,SAAf,EAA0B;AAC/B,SAAO,uBAAwB;AAA/B;AACD;;;;;;QCzEe,iB,GAAA,iB;;AAdhB;;AAEA,IAAM,QAAQ,oCAAd;;AAEA;;;;;;;;;;AApBA;;;;;;;;;;;;;;;;AA8BO,SAAS,iBAAT,CAA2B,WAA3B,EAAwC;AAC7C,MAAM,SAAS,0BAA4B,OAAO,MAAP,CAAc,IAAd,CAA3C;AACA,MAAI,CAAC,WAAL,EAAkB;AAChB,WAAO,MAAP;AACD;;AAED,MAAI,cAAJ;AACA,SAAQ,QAAQ,MAAM,IAAN,CAAW,WAAX,CAAhB,EAA0C;AACxC,QAAM,OAAO,sDAAuB,MAAM,CAAN,CAAvB,EAAiC,MAAM,CAAN,CAAjC,CAAb;AACA,QAAM,QAAQ,MAAM,CAAN,IAAW,sDAAuB,MAAM,CAAN,CAAvB,EAAiC,MAAM,CAAN,CAAjC,CAAX,GAAwD,EAAtE;AACA,WAAO,IAAP,IAAe,KAAf;AACD;AACD,SAAO,MAAP;AACD;;;;;;QChBe,sB,GAAA,sB;AA3BhB;;;;;;;;;;;;;;;;AAgBA;;;;;;;;;;;AAWO,SAAS,sBAAT,CAAgC,SAAhC,EAA0D;AAAA,MAAf,QAAe,uEAAJ,EAAI;;AAC/D,MAAI;AACF,WAAO,mBAAmB,SAAnB,CAAP;AACD,GAFD,CAEE,OAAO,CAAP,EAAU;AACV,WAAO,QAAP;AACD;AACF;;;;;;;QC+Ce,Y,GAAA,Y;QAaA,kB,GAAA,kB;QAoBA,a,GAAA,a;QAmEA,6B,GAAA,6B;QA0BA,a,GAAA,a;QAYA,c,GAAA,c;QAUA,oB,GAAA,oB;QAwBA,qB,GAAA,qB;QAoBA,c,GAAA,c;QAmBA,4B,GAAA,4B;QAkBA,gB,GAAA,gB;QAUA,c,GAAA,c;QAcA,W,GAAA,W;QAaA,a,GAAA,a;QAcA,mB,GAAA,mB;QAgBA,iB,GAAA,iB;QAaA,e,GAAA,e;QAeA,wB,GAAA,wB;QAYA,Y,GAAA,Y;QAkCA,Y,GAAA,Y;QAmCA,e,GAAA,e;QAUA,kB,GAAA,kB;QAiBA,2B,GAAA,2B;QAkCA,U,GAAA,U;QAWA,Y,GAAA,Y;QAeA,qB,GAAA,qB;;AA5iBhB;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AAEA;;;AAGA,IAAM,sBAAsB,kBAAK;AAC/B;AACA,OAAK,IAF0B;AAG/B;AACA,OAAK,IAJ0B;AAK/B;AACA,OAAK,IAN0B;AAO/B;AACA,QAAM;AARyB,CAAL,CAA5B;;AAWA;;;;AAxCA;;;;;;;;;;;;;;;;AA4CA,IAAI,UAAJ;;AAEA;;;;;;AAMA,IAAI,cAAJ;;AAEA;AACA,IAAM,sBAAsB,iBAA5B;;AAEA;AACA,IAAM,uBAAuB,kBAA7B;;AAEA;AACA,IAAM,qBAAqB,gBAA3B;;AAEA;AACA,IAAM,iCAAiC,eAAvC;;AAEA,IAAM,oBAAoB;AACxB,2BAA4B,aADJ;AAExB,2BAA4B,OAFJ;AAGxB,2BAA4B,WAHJ,CAA1B;;AAMA;AACO,IAAM,oDAAsB,qBAA5B;;AAEP;;;;;AAKO,SAAS,YAAT,CAAsB,GAAtB,EAA2B;AAChC,SAAO,IAAI,MAAJ,IAAc,mBAAmB,IAAI,QAAJ,CAAa,IAAhC,EAAsC,MAA3D;AACD;;AAED;;;;;;;;;AASO,SAAS,kBAAT,CAA4B,GAA5B,EAAiC,WAAjC,EAA8C;AACnD,MAAI,CAAC,CAAL,EAAQ;AACN,QAAI,iCAAmC,KAAK,QAAL,CAAc,aAAd,CAA4B,GAA5B,CAAvC;AACA,YAAQ,KAAK,QAAL,KAAkB,KAAK,QAAL,GAAgB,uBAAa,GAAb,CAAlC,CAAR;AACD;;AAED,SAAO,cAAc,CAAd,EAAiB,GAAjB,EAAsB,cAAc,IAAd,GAAqB,KAA3C,CAAP;AACD;;AAED;;;;;;;;;;;AAWO,SAAS,aAAT,CAAuB,CAAvB,EAA0B,GAA1B,EAA+B,SAA/B,EAA0C;AAC/C,MAAI,aAAa,UAAU,GAAV,CAAc,GAAd,CAAjB,EAAqC;AACnC,WAAO,UAAU,GAAV,CAAc,GAAd,CAAP;AACD;;AAED,IAAE,IAAF,GAAS,GAAT;;AAEA;AACA;AACA,MAAI,CAAC,EAAE,QAAP,EAAiB;AACf,MAAE,IAAF,GAAS,EAAE,IAAX;AACD;;AAED,MAAM,OAAO,wBAAyB;AACpC,UAAM,EAAE,IAD4B;AAEpC,cAAU,EAAE,QAFwB;AAGpC,UAAM,EAAE,IAH4B;AAIpC,cAAU,EAAE,QAJwB;AAKpC,UAAM,EAAE,IAAF,IAAU,GAAV,GAAgB,EAAhB,GAAqB,EAAE,IALO;AAMpC,cAAU,EAAE,QANwB;AAOpC,YAAQ,EAAE,MAP0B;AAQpC,UAAM,EAAE,IAR4B;AASpC,YAAQ,IAT4B,CAStB;AATsB,GAAtC;;AAYA;AACA;AACA,MAAI,KAAK,QAAL,CAAc,CAAd,MAAqB,GAAzB,EAA8B;AAC5B,SAAK,QAAL,GAAgB,MAAM,KAAK,QAA3B;AACD;;AAED;AACA;AACA,MAAK,KAAK,QAAL,IAAiB,OAAjB,IAA4B,KAAK,IAAL,IAAa,EAA1C,IACI,KAAK,QAAL,IAAiB,QAAjB,IAA6B,KAAK,IAAL,IAAa,GADlD,EACwD;AACtD,SAAK,IAAL,GAAY,EAAZ;AACA,SAAK,IAAL,GAAY,KAAK,QAAjB;AACD;;AAED;AACA;AACA,MAAI,EAAE,MAAF,IAAY,EAAE,MAAF,IAAY,MAA5B,EAAoC;AAClC,SAAK,MAAL,GAAc,EAAE,MAAhB;AACD,GAFD,MAEO,IAAI,KAAK,QAAL,IAAiB,OAAjB,IAA4B,CAAC,KAAK,IAAtC,EAA4C;AACjD,SAAK,MAAL,GAAc,KAAK,IAAnB;AACD,GAFM,MAEA;AACL,SAAK,MAAL,GAAc,KAAK,QAAL,GAAgB,IAAhB,GAAuB,KAAK,IAA1C;AACD;;AAED;AACA,MAAM,SAAU,qBAAU,IAAV,IAAkB,OAAO,MAA1B,GAAoC,OAAO,MAAP,CAAc,IAAd,CAApC,GAA0D,IAAzE;;AAEA,MAAI,SAAJ,EAAe;AACb,cAAU,GAAV,CAAc,GAAd,EAAmB,MAAnB;AACD;;AAED,SAAO,MAAP;AACD;;AAED;;;;;;;;AAQO,SAAS,6BAAT,CAAuC,GAAvC,EAA4C,WAA5C,EACL,cADK,EACW;AAChB,MAAI,CAAC,WAAL,EAAkB;AAChB,WAAO,GAAP;AACD;AACD,MAAM,kBAAkB,IAAI,KAAJ,CAAU,GAAV,EAAe,CAAf,CAAxB;AACA,MAAM,eAAe,gBAAgB,CAAhB,EAAmB,KAAnB,CAAyB,GAAzB,EAA8B,CAA9B,CAArB;;AAEA,MAAI,SAAS,aAAa,CAAb,KACX,aAAa,CAAb,IACK,uBACK,WADL,SACoB,aAAa,CAAb,CADpB,SAEK,aAAa,CAAb,CAFL,SAEwB,WAH7B,SAIQ,WALG,CAAb;AAMA,YAAU,gBAAgB,CAAhB,UAAyB,gBAAgB,CAAhB,CAAzB,GAAgD,EAA1D;AACA,SAAO,MAAP;AACD;AACD;;;;;;;;;AASO,SAAS,aAAT,CAAuB,GAAvB,EAA4B,GAA5B,EAAiC,KAAjC,EAAwC,cAAxC,EAAwD;AAC7D,MAAM,QAAW,mBAAmB,GAAnB,CAAX,SAAsC,mBAAmB,KAAnB,CAA5C;AACA,SAAO,8BAA8B,GAA9B,EAAmC,KAAnC,EAA0C,cAA1C,CAAP;AACD;;AAED;;;;;;;AAOO,SAAS,cAAT,CAAwB,GAAxB,EAA6B,MAA7B,EAAqC;AAC1C,SAAO,8BAA8B,GAA9B,EAAmC,qBAAqB,MAArB,CAAnC,CAAP;AACD;;AAED;;;;;;AAMO,SAAS,oBAAT,CAA8B,MAA9B,EAAsC;AAC3C,MAAM,IAAI,EAAV;AACA,OAAK,IAAM,CAAX,IAAgB,MAAhB,EAAwB;AACtB,QAAM,IAAI,OAAO,CAAP,CAAV;AACA,QAAI,KAAK,IAAT,EAAe;AACb;AACD,KAFD,MAEO,IAAI,oBAAQ,CAAR,CAAJ,EAAgB;AACrB,WAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,EAAE,MAAtB,EAA8B,GAA9B,EAAmC;AACjC,YAAM,KAAK,qBAAuB,EAAE,CAAF,CAAlC;AACA,UAAE,IAAF,CAAU,mBAAmB,CAAnB,CAAV,SAAmC,mBAAmB,EAAnB,CAAnC;AACD;AACF,KALM,MAKA;AACL,UAAM,MAAK,qBAAuB,CAAlC;AACA,QAAE,IAAF,CAAU,mBAAmB,CAAnB,CAAV,SAAmC,mBAAmB,GAAnB,CAAnC;AACD;AACF;AACD,SAAO,EAAE,IAAF,CAAO,GAAP,CAAP;AACD;;AAED;;;;;AAKO,SAAS,qBAAT,CAA+B,GAA/B,EAAoC;AACzC,MAAI,OAAO,GAAP,IAAc,QAAlB,EAA4B;AAC1B,UAAM,mBAAmB,GAAnB,CAAN;AACD;AACD,SAAQ,IAAI,QAAJ,IAAgB,QAAhB,IACJ,IAAI,QAAJ,IAAgB,WADZ,IAEJ,sBAAS,IAAI,QAAb,EAAuB,YAAvB,CAFJ;AAGD;;AAED;;;;;;;;;;;AAWO,SAAS,cAAT,CACL,SADK,EACM,cADN,EAC6C;AAAA,MAAvB,UAAuB,uEAAV,QAAU;;AAClD,mBAAO,MAAP,CAAc,aAAa,IAA3B,EAAiC,yBAAjC,EACI,cADJ,EACoB,UADpB;AAEA;AACA,MAAM,eAAe,qBAAuB,SAA5C;AACA,mBAAO,MAAP,CAAc,sBAAsB,YAAtB,KAAuC,UAAU,IAAV,CAAe,YAAf,CAArD,EACI,2BACA,oDADA,GAEA,mDAHJ,EAII,cAJJ,EAIoB,UAJpB,EAIgC,YAJhC;AAKA,SAAO,YAAP;AACD;;AAED;;;;;AAKO,SAAS,4BAAT,CAAsC,SAAtC,EAAiD;AACtD,mBAAO,MAAP,CAAc,aAAa,IAAb,CAAkB,SAAlB,CAAd,EACI,gEADJ,EAEI,SAFJ;AAGA,SAAO,mBAAmB,SAAnB,EAA8B,IAArC;AACD;;AAGD;;;;;;;;;;AAUO,SAAS,gBAAT,CAA0B,WAA1B,EAAuC;AAC5C,SAAO,4CAAkB,WAAlB,CAAP;AACD;;AAED;;;;;;AAMO,SAAS,cAAT,CAAwB,GAAxB,EAA6B;AAClC,MAAM,QAAQ,IAAI,OAAJ,CAAY,GAAZ,CAAd;AACA,MAAI,SAAS,CAAC,CAAd,EAAiB;AACf,WAAO,GAAP;AACD;AACD,SAAO,IAAI,SAAJ,CAAc,CAAd,EAAiB,KAAjB,CAAP;AACD;;AAED;;;;;;AAMO,SAAS,WAAT,CAAqB,GAArB,EAA0B;AAC/B,MAAM,QAAQ,IAAI,OAAJ,CAAY,GAAZ,CAAd;AACA,MAAI,SAAS,CAAC,CAAd,EAAiB;AACf,WAAO,EAAP;AACD;AACD,SAAO,IAAI,SAAJ,CAAc,KAAd,CAAP;AACD;;AAED;;;;;AAKO,SAAS,aAAT,CAAuB,GAAvB,EAA4B;AACjC,MAAI,OAAO,GAAP,IAAc,QAAlB,EAA4B;AAC1B,UAAM,mBAAmB,GAAnB,CAAN;AACD;AACD,SAAO,aAAK,aAAL,CAAmB,IAAnB,CAAwB,IAAI,MAA5B,CAAP;AACD;;AAED;;;;;;;AAOO,SAAS,mBAAT,CAA6B,GAA7B,EAAkC;AACvC,MAAI,OAAO,GAAP,IAAc,QAAlB,EAA4B;AAC1B,UAAM,mBAAmB,GAAnB,CAAN;AACD;AACD,MAAI,CAAC,cAAc,GAAd,CAAL,EAAyB;AACvB,WAAO,IAAP;AACD;AACD,MAAM,OAAO,IAAI,QAAJ,CAAa,KAAb,CAAmB,GAAnB,EAAwB,CAAxB,CAAb;AACA,SAAO,KAAK,CAAL,CAAP;AACD;;AAED;;;;;AAKO,SAAS,iBAAT,CAA2B,GAA3B,EAAgC;AACrC,MAAI,OAAO,GAAP,IAAc,QAAlB,EAA4B;AAC1B,UAAM,mBAAmB,GAAnB,CAAN;AACD;AACD,SAAO,aAAK,cAAL,CAAoB,IAApB,CAAyB,IAAI,MAA7B,CAAP;AACD;;AAED;;;;;;AAMO,SAAS,eAAT,CAAyB,GAAzB,EAA8B;AACnC,MAAI,CAAC,GAAL,EAAU;AACR,WAAO,IAAP;AACD;AACD,MAAI,OAAO,GAAP,IAAc,QAAlB,EAA4B;AAC1B,UAAM,mBAAmB,GAAnB,CAAN;AACD;AACD,SAAO,CAAC,kBAAkB,QAAlB,CAA2B,IAAI,QAA/B,CAAR;AACD;;AAED;;;;;AAKO,SAAS,wBAAT,CAAkC,GAAlC,EAAuC;AAC5C,MAAM,SAAS,mBAAmB,GAAnB,CAAf;AACA,MAAM,SAAS,4BAA4B,OAAO,MAAnC,CAAf;AACA,SAAO,OAAO,MAAP,GAAgB,OAAO,QAAvB,GAAkC,MAAlC,GAA2C,OAAO,IAAzD;AAED;;AAED;;;;;AAKO,SAAS,YAAT,CAAsB,GAAtB,EAA2B;AAChC,MAAM,QAAQ,IAAI,OAAJ,CAAY,GAAZ,CAAd;AACA,MAAI,SAAS,CAAC,CAAd,EAAiB;AACf,WAAO,GAAP;AACD;AACD,MAAM,WAAW,YAAY,GAAZ,CAAjB;AACA,SAAO,IAAI,SAAJ,CAAc,CAAd,EAAiB,KAAjB,IAA0B,QAAjC;AACD;;AAED;;;;;;AAMA,SAAS,2BAAT,CAAqC,SAArC,EAAgD;AAC9C,MAAI,CAAC,SAAD,IAAc,aAAa,GAA/B,EAAoC;AAClC,WAAO,EAAP;AACD;AACD,MAAM,SAAS,UACV,OADU,CACF,mBADE,EACmB,EADnB,EAEV,OAFU,CAEF,oBAFE,EAEoB,EAFpB,EAGV,OAHU,CAGF,kBAHE,EAGkB,EAHlB,EAIV,OAJU,CAIF,8BAJE,EAI8B,EAJ9B,EAKV,OALU,CAKF,OALE,EAKO,EALP,CAAf,CAJ8C,CASnB;AAC3B,SAAO,SAAS,MAAM,MAAf,GAAwB,EAA/B;AACD;;AAED;;;;;;AAMO,SAAS,YAAT,CAAsB,GAAtB,EAA2B;AAChC,MAAI,OAAO,GAAP,IAAc,QAAlB,EAA4B;AAC1B,UAAM,mBAAmB,GAAnB,CAAN;AACD;;AAED;AACA,MAAI,CAAC,cAAc,GAAd,CAAL,EAAyB;AACvB,WAAO,IAAI,IAAX;AACD;;AAED;AACA;AACA;AACA;AACA,MAAM,OAAO,IAAI,QAAJ,CAAa,KAAb,CAAmB,GAAnB,CAAb;AACA,MAAM,SAAS,KAAK,CAAL,CAAf;AACA,mBAAO,MAAP,CAAc,oBAAoB,MAApB,CAAd,EACI,+BADJ,EACqC,IAAI,IADzC;AAEA,MAAM,sBAAsB,KAAK,CAAL,CAA5B;AACA,MAAM,SAAS,uBAAuB,GAAvB,GACX,aAAa,mBAAmB,KAAK,CAAL,CAAnB,CADF,GAEX,YAAY,mBAAmB,mBAAnB,CAFhB;AAGA;AACA,mBAAO,MAAP,CAAc,OAAO,OAAP,CAAe,GAAf,IAAsB,CAApC,EAAuC,2BAAvC,EAAoE,MAApE;AACA,OAAK,MAAL,CAAY,CAAZ,EAAe,uBAAuB,GAAvB,GAA6B,CAA7B,GAAiC,CAAhD;AACA,SAAO,SAAS,KAAK,IAAL,CAAU,GAAV,CAAT,GACH,4BAA4B,IAAI,MAAhC,CADG,IACwC,IAAI,IAAJ,IAAY,EADpD,CAAP;AAED;;AAED;;;;;;AAMO,SAAS,eAAT,CAAyB,GAAzB,EAA8B;AACnC,SAAO,mBAAmB,aAAa,GAAb,CAAnB,EAAsC,MAA7C;AACD;;AAED;;;;;;AAMO,SAAS,kBAAT,CAA4B,iBAA5B,EAA+C,OAA/C,EAAwD;AAC7D,MAAI,OAAO,OAAP,IAAkB,QAAtB,EAAgC;AAC9B,cAAU,mBAAmB,OAAnB,CAAV;AACD;AACD,MAAI,OAAO,GAAP,IAAc,UAAlB,EAA8B;AAC5B,WAAO,IAAI,GAAJ,CAAQ,iBAAR,EAA2B,QAAQ,IAAnC,EAAyC,QAAzC,EAAP;AACD;AACD,SAAO,4BAA4B,iBAA5B,EAA+C,OAA/C,CAAP;AACD;;AAED;;;;;;;AAOO,SAAS,2BAAT,CAAqC,iBAArC,EAAwD,OAAxD,EAAiE;AACtE,MAAI,OAAO,OAAP,IAAkB,QAAtB,EAAgC;AAC9B,cAAU,mBAAmB,OAAnB,CAAV;AACD;AACD,sBAAoB,kBAAkB,OAAlB,CAA0B,KAA1B,EAAiC,GAAjC,CAApB;AACA,MAAM,cAAc,mBAAmB,iBAAnB,CAApB;;AAEA;AACA,MAAI,wBAAW,kBAAkB,WAAlB,EAAX,EAA4C,YAAY,QAAxD,CAAJ,EAAuE;AACrE,WAAO,YAAY,IAAnB;AACD;;AAED;AACA,MAAI,wBAAW,iBAAX,EAA8B,IAA9B,CAAJ,EAAyC;AACvC,WAAO,QAAQ,QAAR,GAAmB,iBAA1B;AACD;;AAED;AACA,MAAI,wBAAW,iBAAX,EAA8B,GAA9B,CAAJ,EAAwC;AACtC,WAAO,QAAQ,MAAR,GAAiB,iBAAxB;AACD;;AAED;AACA,SAAO,QAAQ,MAAR,GAAiB,QAAQ,QAAR,CAAiB,OAAjB,CAAyB,UAAzB,EAAqC,GAArC,CAAjB,GACD,iBADN;AAED;;AAGD;;;;;;AAMO,SAAS,UAAT,CAAoB,GAApB,EAAyB,GAAzB,EAA8B;AACnC,eAAa,GAAb;AACA,MAAM,eAAe,gBAAgB,IAAI,QAAJ,CAAa,IAA7B,CAArB;AACA,SAAO,cAAc,GAAd,EAAmB,mBAAnB,EAAwC,YAAxC,CAAP;AACD;;AAGD;;;;AAIO,SAAS,YAAT,CAAsB,GAAtB,EAA2B;AAChC,MAAM,YAAY,mBAAmB,GAAnB,CAAlB;AACA,MAAM,QAAQ,iBAAiB,UAAU,MAA3B,CAAd;AACA,mBAAO,MAAP,CAAc,EAAE,uBAAuB,KAAzB,CAAd,EACI,oCADJ,EAC0C,GAD1C;AAED;;AAED;;;;;;;;AAQO,SAAS,qBAAT,CAA+B,SAA/B,EAA0C,YAA1C,EAAwD;AAC7D,SAAO,sDAAuB,SAAvB,EAAkC,YAAlC,CAAP;AACD;;;;;;QCniBe,e,GAAA,e;QAuBA,Y,GAAA,Y;QA+BA,S,GAAA,S;QAgBA,Y,GAAA,Y;QAeA,c,GAAA,c;AAhHhB;;;;;;;;;;;;;;;;AAiBA;;;;;;;;;;AAUO,SAAS,eAAT,CAAyB,IAAzB,EAA+B,IAA/B,EAAqC;AAC1C,MAAI,KAAK,MAAL,KAAgB,KAAK,MAAzB,EAAiC;AAC/B,WAAO,KAAP;AACD;;AAED,OAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,KAAK,MAAzB,EAAiC,GAAjC,EAAsC;AACpC,QAAI,KAAK,CAAL,MAAY,KAAK,CAAL,CAAhB,EAAyB;AACvB,aAAO,KAAP;AACD;AACF;;AAED,SAAO,IAAP;AACD;;AAED;;;;;;;;;AASO,SAAS,YAAT,CAAsB,KAAtB,EAA6B,MAA7B,EAAqC;AAC1C,MAAM,SAAS,EAAf;AACA,MAAI,QAAQ,CAAZ;AACA,OAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,MAAM,MAA1B,EAAkC,GAAlC,EAAuC;AACrC,QAAM,OAAO,MAAM,CAAN,CAAb;AACA,QAAI,OAAO,IAAP,EAAa,CAAb,EAAgB,KAAhB,CAAJ,EAA4B;AAC1B,UAAI,QAAQ,CAAZ,EAAe;AACb,cAAM,KAAN,IAAe,IAAf;AACD;AACD;AACD,KALD,MAKO;AACL,aAAO,IAAP,CAAY,IAAZ;AACD;AACF;;AAED,MAAI,QAAQ,MAAM,MAAlB,EAA0B;AACxB,UAAM,MAAN,GAAe,KAAf;AACD;;AAED,SAAO,MAAP;AACD;;AAED;;;;;;;;;AASO,SAAS,SAAT,CAAmB,KAAnB,EAA0B,SAA1B,EAAqC;AAC1C,OAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,MAAM,MAA1B,EAAkC,GAAlC,EAAuC;AACrC,QAAI,UAAU,MAAM,CAAN,CAAV,EAAoB,CAApB,EAAuB,KAAvB,CAAJ,EAAmC;AACjC,aAAO,CAAP;AACD;AACF;AACD,SAAO,CAAC,CAAR;AACD;;AAED;;;;;;;AAOO,SAAS,YAAT,CAAsB,QAAtB,EAAgC;AACrC,MAAM,QAAQ,EAAd;AACA,OAAK,IAAI,IAAI,SAAS,IAAT,EAAb,EAA8B,CAAC,EAAE,IAAjC,EAAuC,IAAI,SAAS,IAAT,EAA3C,EAA4D;AAC1D,UAAM,IAAN,CAAW,EAAE,KAAb;AACD;AACD,SAAO,KAAP;AACD;;AAED;;;;;;;AAOO,SAAS,cAAT,CAAwB,KAAxB,EAA+B,IAA/B,EAAqC;AAC1C,MAAI,MAAM,OAAN,CAAc,IAAd,IAAsB,CAA1B,EAA6B;AAC3B,UAAM,IAAN,CAAW,IAAX;AACD;AACF;;;;;;QChFe,sB,GAAA,sB;QAWA,mB,GAAA,mB;QAUA,wB,GAAA,wB;QAWA,yB,GAAA,yB;QAUA,qB,GAAA,qB;;AA9DhB;;AAEA;;;;AAIA,IAAM,sBAAsB,EAAC,KAAK,GAAN,EAAW,KAAK,GAAhB,EAAqB,KAAK,GAA1B,EAA5B;;AAEA;;;;AAxBA;;;;;;;;;;;;;;;;AA4BA,IAAM,sBAAsB,EAAC,KAAK,GAAN,EAAW,KAAK,GAAhB,EAAqB,KAAK,GAA1B,EAA5B;;AAEA;;;;;;AAMO,SAAS,sBAAT,CAAgC,GAAhC,EAAqC;AAC1C,MAAM,UAAU,KAAK,IAAI,OAAJ,CAAY,QAAZ,EAAsB;AAAA,WAAM,oBAAoB,EAApB,CAAN;AAAA,GAAtB,CAAL,CAAhB;AACA,SAAO,0BAAc,OAAd,CAAP;AACD;;AAED;;;;;;AAMO,SAAS,mBAAT,CAA6B,GAA7B,EAAkC;AACvC,SAAO,0BAAc,KAAK,GAAL,CAAd,CAAP;AACD;;AAED;;;;;;AAMO,SAAS,wBAAT,CAAkC,KAAlC,EAAyC;AAC9C,MAAM,MAAM,0BAAc,KAAd,CAAZ;AACA,SAAO,KAAK,GAAL,EAAU,OAAV,CAAkB,QAAlB,EAA4B;AAAA,WAAM,oBAAoB,EAApB,CAAN;AAAA,GAA5B,CAAP;AACD;;AAED;;;;;;AAMO,SAAS,yBAAT,CAAmC,GAAnC,EAAwC;AAC7C,MAAM,QAAQ,uBAAW,GAAX,CAAd;AACA,SAAO,yBAAyB,KAAzB,CAAP;AACD;;AAED;;;;;AAKO,SAAS,qBAAT,CAA+B,KAA/B,EAAsC;AAC3C,SAAO,KAAK,0BAAc,KAAd,CAAL,CAAP;AACD;;;;;;QCzDe,U,GAAA,U;QAaA,U,GAAA,U;QAcA,a,GAAA,a;QAeA,a,GAAA,a;QAgBA,a,GAAA,a;QAmBA,yB,GAAA,yB;;AApFhB;;AAEA;;;;;AAKO,SAAS,UAAT,CAAoB,KAApB,EAA2B;AAChC,MAAI,OAAO,WAAP,KAAuB,WAA3B,EAAwC;AACtC,WAAO,IAAI,WAAJ,CAAgB,OAAhB,EAAyB,MAAzB,CAAgC,KAAhC,CAAP;AACD;AACD,MAAM,cAAc,cAAc,IAAI,UAAJ,CAAe,MAAM,MAAN,IAAgB,KAA/B,CAAd,CAApB;AACA,SAAO,mBAAmB,OAAO,WAAP,CAAnB,CAAP;AACD;;AAED;;;;;AA/BA;;;;;;;;;;;;;;;;AAoCO,SAAS,UAAT,CAAoB,MAApB,EAA4B;AACjC,MAAI,OAAO,WAAP,KAAuB,WAA3B,EAAwC;AACtC,WAAO,IAAI,WAAJ,CAAgB,OAAhB,EAAyB,MAAzB,CAAgC,MAAhC,CAAP;AACD;AACD,SAAO,cAAc,SAAS,mBAAmB,MAAnB,CAAT,CAAd,CAAP;AACD;;AAED;;;;;;;AAOO,SAAS,aAAT,CAAuB,GAAvB,EAA4B;AACjC,MAAM,QAAQ,IAAI,UAAJ,CAAe,IAAI,MAAnB,CAAd;AACA,OAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,IAAI,MAAxB,EAAgC,GAAhC,EAAqC;AACnC,QAAM,WAAW,IAAI,UAAJ,CAAe,CAAf,CAAjB;AACA,oBAAM,MAAN,CAAa,YAAY,GAAzB,EAA8B,qCAA9B;AACA,UAAM,CAAN,IAAW,QAAX;AACD;AACD,SAAO,KAAP;AACD;;AAED;;;;;AAKO,SAAS,aAAT,CAAuB,KAAvB,EAA8B;AACnC;AACA;AACA,MAAM,QAAQ,IAAI,KAAJ,CAAU,MAAM,MAAhB,CAAd;AACA,OAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,MAAM,MAA1B,EAAkC,GAAlC,EAAuC;AACrC,UAAM,CAAN,IAAW,OAAO,YAAP,CAAoB,MAAM,CAAN,CAApB,CAAX;AACD;AACD,SAAO,MAAM,IAAN,CAAW,EAAX,CAAP;AACD;;AAED;;;;;;AAMO,SAAS,aAAT,CAAuB,KAAvB,EAA8B;AACnC,MAAI,MAAM,MAAN,IAAgB,CAApB,EAAuB;AACrB,UAAM,IAAI,KAAJ,CAAU,sCAAV,CAAN;AACD;AACD,MAAM,MAAM,CAAC,MAAM,CAAN,IAAW,IAAZ,KAAqB,EAArB,GACT,CAAC,MAAM,CAAN,IAAW,IAAZ,KAAqB,EADZ,GAET,CAAC,MAAM,CAAN,IAAW,IAAZ,KAAqB,CAFZ,GAGR,MAAM,CAAN,IAAW,IAHf;AAIA;AACA,SAAO,QAAQ,CAAf;AACD;;AAED;;;;;;;AAOO,SAAS,yBAAT,CAAmC,GAAnC,EAAwC,MAAxC,EAAgD;AACrD,MAAI,CAAC,IAAI,MAAL,IAAe,CAAC,IAAI,MAAJ,CAAW,eAA/B,EAAgD;AAC9C,WAAO,IAAP;AACD;;AAED;AACA;AACA,MAAM,aAAa,IAAI,UAAJ,CAAe,MAAf,CAAnB;AACA,MAAI,MAAJ,CAAW,eAAX,CAA2B,UAA3B;AACA,SAAO,UAAP;AACD;;;;;;;;qjBC9GD;;;;;;;;;;;;;;;;AAgBA;;;;AAEA;AACA,IAAM,MAAM,WAAZ;;AAEA;;;;IAGa,Q,WAAA,Q;AACX;;;AAGA,oBAAY,QAAZ,EAAsB;AAAA;;AACpB;AACA,SAAK,SAAL,GAAiB,QAAjB;;AAEA;AACA,SAAK,KAAL,GAAa,CAAb;;AAEA;;;;AAIA,SAAK,OAAL,GAAe,CAAf;;AAEA;AACA,SAAK,MAAL,GAAc,OAAO,MAAP,CAAc,IAAd,CAAd;AACD;;AAED;;;;;;;;;;wBAMI,G,EAAK;AACP,aAAO,CAAC,CAAC,KAAK,MAAL,CAAY,GAAZ,CAAT;AACD;;AAED;;;;;;;wBAII,G,EAAK;AACP,UAAM,YAAY,KAAK,MAAL,CAAY,GAAZ,CAAlB;AACA,UAAI,SAAJ,EAAe;AACb,kBAAU,MAAV,GAAmB,EAAE,KAAK,OAA1B;AACA,eAAO,UAAU,OAAjB;AACD;AACD,aAAO,SAAP;AACD;;AAED;;;;;;;wBAII,G,EAAK,O,EAAS;AAChB,UAAI,CAAC,KAAK,GAAL,CAAS,GAAT,CAAL,EAAoB;AAClB,aAAK,KAAL;AACD;AACD,WAAK,MAAL,CAAY,GAAZ,IAAmB,EAAC,gBAAD,EAAU,QAAQ,KAAK,OAAvB,EAAnB;AACA,WAAK,MAAL;AACD;;AAED;;;;;;6BAGS;AACP,UAAI,KAAK,KAAL,IAAc,KAAK,SAAvB,EAAkC;AAChC;AACD;;AAED,sBAAM,IAAN,CAAW,GAAX,EAAgB,oBAAhB;AACA,UAAM,QAAQ,KAAK,MAAnB;AACA,UAAI,SAAS,KAAK,OAAL,GAAe,CAA5B;AACA,UAAI,kBAAJ;AACA,WAAK,IAAM,GAAX,IAAkB,KAAlB,EAAyB;AAAA,YAChB,MADgB,GACN,MAAM,GAAN,CADM,CAChB,MADgB;;AAEvB,YAAI,SAAS,MAAb,EAAqB;AACnB,mBAAS,MAAT;AACA,sBAAY,GAAZ;AACD;AACF;;AAED,UAAI,cAAc,SAAlB,EAA6B;AAC3B,eAAO,MAAM,SAAN,CAAP;AACA,aAAK,KAAL;AACD;AACF;;;;;;;;;;QC3Ea,G,GAAA,G;QAmBA,I,GAAA,I;QAcA,M,GAAA,M;QAYA,W,GAAA,W;QAmBA,S,GAAA,S;QA4CA,I,GAAA,I;;AAzHhB;;AAEA;AACA,IAAM,UAAU,OAAO,SAAP,CAAiB,cAAjC;;AAEA;;;;;;;;AArBA;;;;;;;;;;;;;;;;AA6BO,SAAS,GAAT,CAAa,WAAb,EAA0B;AAC/B,MAAM,MAAM,OAAO,MAAP,CAAc,IAAd,CAAZ;AACA,MAAI,WAAJ,EAAiB;AACf,WAAO,MAAP,CAAc,GAAd,EAAmB,WAAnB;AACD;AACD,SAAO,GAAP;AACD;;AAED;;;;;;;;;;;AAWO,SAAS,IAAT,CAAc,WAAd,EAA2B;AAChC;AACA;AACA,SAAO,2BAA4B,eAAe;AAAlD;AACD;;AAED;;;;;;;;AAQO,SAAS,MAAT,CAAgB,GAAhB,EAAqB,GAArB,EAA0B;AAC/B,SAAO,QAAQ,IAAR,CAAa,GAAb,EAAkB,GAAlB,CAAP;AACD;;AAED;;;;;;;;AAQO,SAAS,WAAT,CAAqB,GAArB,EAA0B,GAA1B,EAA+B;AACpC,MAAI,OAAO,GAAP,EAAY,GAAZ,CAAJ,EAAsB;AACpB,WAAO,IAAI,GAAJ,CAAP;AACD,GAFD,MAEO;AACL,WAAO,SAAP;AACD;AACF;;AAED;;;;;;;;;;;AAWO,SAAS,SAAT,CAAmB,MAAnB,EAA2B,MAA3B,EAA+C;AAAA,MAAZ,KAAY,uEAAJ,EAAI;;AACpD;AACA,MAAM,OAAO,EAAb;;AAEA;AACA,MAAM,QAAQ,EAAd;AACA,QAAM,IAAN,CAAW,EAAC,GAAG,MAAJ,EAAY,GAAG,MAAf,EAAuB,GAAG,CAA1B,EAAX;;AAEA;;AARoD;AAAA,uBAUhC,MAAM,KAAN,EAVgC;AAAA,QAU3C,CAV2C,gBAU3C,CAV2C;AAAA,QAUxC,CAVwC,gBAUxC,CAVwC;AAAA,QAUrC,CAVqC,gBAUrC,CAVqC;;AAWlD,QAAI,KAAK,QAAL,CAAc,CAAd,CAAJ,EAAsB;AACpB,YAAM,IAAI,KAAJ,CAAU,yCAAV,CAAN;AACD;AACD,SAAK,IAAL,CAAU,CAAV;AACA,QAAI,MAAM,CAAV,EAAa;AACX;AACD;AACD,QAAI,IAAI,KAAR,EAAe;AACb,aAAO,MAAP,CAAc,CAAd,EAAiB,CAAjB;AACA;AACD;AACD,WAAO,IAAP,CAAY,CAAZ,EAAe,OAAf,CAAuB,eAAO;AAC5B,UAAM,WAAW,EAAE,GAAF,CAAjB;AACA;AACA;AACA,UAAI,OAAO,CAAP,EAAU,GAAV,CAAJ,EAAoB;AAClB,YAAM,WAAW,EAAE,GAAF,CAAjB;AACA,YAAI,qBAAS,QAAT,KAAsB,qBAAS,QAAT,CAA1B,EAA8C;AAC5C,gBAAM,IAAN,CAAW,EAAC,GAAG,QAAJ,EAAc,GAAG,QAAjB,EAA2B,GAAG,IAAI,CAAlC,EAAX;AACA;AACD;AACF;AACD,QAAE,GAAF,IAAS,QAAT;AACD,KAZD;AAtBkD;;AASpD,SAAO,MAAM,MAAN,GAAe,CAAtB,EAAyB;AAAA;;AAAA,6BAWrB;AAeH;AACD,SAAO,MAAP;AACD;;AAED;;;;;AAKO,SAAS,IAAT,CAAc,CAAd,EAAiB,KAAjB,EAAwB;AAC7B,SAAO,OAAO,IAAP,CAAY,CAAZ,EAAe,MAAf,CAAsB,UAAC,GAAD,EAAM,GAAN,EAAc;AACzC,QAAI,CAAC,MAAM,QAAN,CAAe,GAAf,CAAL,EAA0B;AACxB,UAAI,GAAJ,IAAW,EAAE,GAAF,CAAX;AACD;AACD,WAAO,GAAP;AACD,GALM,EAKJ,EALI,CAAP;AAMD;;;;;;;;;QCxEe,U,GAAA,U;QAeA,I,GAAA,I;;;;AAvFhB;;;;;;;;;;;;;;;;AAgBA;;;;;;;;;;;;;;;;;;;;;IAqBa,Q;AACX;;;QADW,Q,GAIX,oBAAc;AAAA;;AACZ,MAAI,gBAAJ;AAAA,MAAa,eAAb;;AAEA;;;AAGA,OAAK,OAAL,GAAe,IAAI,MAAM,OAAV,CAAkB,UAAC,GAAD,EAAM,GAAN,EAAc;AAC7C,cAAU,GAAV;AACA,aAAS,GAAT;AACD,GAHc,CAAf;;AAKA;;;AAGA,OAAK,OAAL,GAAe,OAAf;;AAEA;;;AAGA,OAAK,MAAL,GAAc,MAAd;AACD,C;;AAGH;;;;;;;;;;AAQO,SAAS,UAAT,CAAoB,EAApB,EAAwB;AAC7B,SAAO,IAAI,OAAJ,CAAY,mBAAW;AAC5B,YAAQ,IAAR;AACD,GAFM,CAAP;AAGD;;AAED;;;;;;;;;AASO,SAAS,IAAT,CAAc,QAAd,EAAmC;AAAA,MAAX,KAAW,uEAAH,CAAG;;AACxC,SAAO,IAAI,OAAJ,CAAY,UAAC,OAAD,EAAU,MAAV,EAAqB;AACtC,YAAQ,KAAK,GAAL,CAAS,KAAT,EAAgB,CAAhB,CAAR;AACA,QAAM,QAAQ,SAAS,MAAT,GAAkB,KAAhC;AACA,QAAI,QAAQ,CAAZ,EAAe;AACb,aAAO,IAAI,KAAJ,CAAU,gCAAV,CAAP;AACD;AACD,QAAI,SAAS,MAAT,IAAmB,CAAvB,EAA0B;AACxB,cAAQ,EAAR;AACD;AACD,QAAM,SAAS,EAAf;AACA,QAAM,UAAU,EAAhB;;AAEA,QAAM,cAAc,SAAd,WAAc,QAAS;AAC3B,UAAI,OAAO,MAAP,GAAgB,KAApB,EAA2B;AACzB,eAAO,IAAP,CAAY,KAAZ;AACD;AACD,UAAI,OAAO,MAAP,IAAiB,KAArB,EAA4B;AAC1B,gBAAQ,MAAR;AACD;AACF,KAPD;AAQA,QAAM,aAAa,SAAb,UAAa,SAAU;AAC3B,UAAI,QAAQ,MAAR,IAAkB,KAAtB,EAA6B;AAC3B,gBAAQ,IAAR,CAAa,MAAb;AACD;AACD,UAAI,QAAQ,MAAR,GAAiB,KAArB,EAA4B;AAC1B,eAAO,OAAP;AACD;AACF,KAPD;AAQA,SAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,SAAS,MAA7B,EAAqC,GAArC,EAA0C;AACxC,cAAQ,OAAR,CAAgB,SAAS,CAAT,CAAhB,EAA6B,IAA7B,CAAkC,WAAlC,EAA+C,UAA/C;AACD;AACF,GA/BM,CAAP;AAgCD;;AAED;;;;;IAIa,iB,WAAA,iB;AACX;;;AAGA,6BAAY,YAAZ,EAA0B;AAAA;;AACxB,QAAI,iBAAJ;AAAA,QAAc,gBAAd;AACA;AACA,SAAK,QAAL,GAAgB,IAAI,OAAJ,CAAY,UAAC,OAAD,EAAU,MAAV,EAAqB;AAC/C,iBAAW,OAAX;AACA,gBAAU,MAAV;AACD,KAHe,CAAhB;;AAKA;AACA,SAAK,QAAL,GAAgB,QAAhB;;AAEA;AACA,SAAK,OAAL,GAAe,OAAf;;AAEA;AACA,SAAK,MAAL,GAAc,CAAd;;AAEA,QAAI,YAAJ,EAAkB;AAChB,WAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,aAAa,MAAjC,EAAyC,GAAzC,EAA8C;AAC5C,aAAK,GAAL,CAAS,aAAa,CAAb,CAAT;AACD;AACF;AACF;;AAED;;;;;;;;;wBAKI,O,EAAS;AAAA;;AACX,UAAM,aAAa,EAAE,KAAK,MAA1B;AACA,cAAQ,OAAR,CAAgB,OAAhB,EAAyB,IAAzB,CAA8B,kBAAU;AACtC,YAAI,MAAK,MAAL,KAAgB,UAApB,EAAgC;AAC9B,gBAAK,QAAL,CAAc,MAAd;AACD;AACF,OAJD,EAIG,iBAAS;AACV;AACA;AACA,YAAI,MAAK,MAAL,KAAgB,UAApB,EAAgC;AAC9B,gBAAK,OAAL,CAAa,KAAb;AACD;AACF,OAVD;AAWA,aAAO,KAAK,QAAZ;AACD;;AAED;;;;yBACK,W,EAAa,U,EAAY;AAC5B,aAAO,KAAK,QAAL,CAAc,IAAd,CAAmB,WAAnB,EAAgC,UAAhC,CAAP;AACD;;;;;;;;;;;;qjBClLH;;;;;;;;;;;;;;;;AAgBA;;AACA;;;;AAGA;;;;IAIa,O,WAAA,O;;AAEX;;;AAGA,qBAAc;AAAA;;AACZ;;;;;AAKA,SAAK,IAAL,GAAY,kBAAZ;;AAEA;;;;;;;;;AASA,SAAK,WAAL,GAAmB,IAAnB;AACD;;AAED;;;;;;;;;;wBAMI,I,EAAM;AACR,aAAO,KAAK,IAAL,CAAU,IAAV,KAAmB,IAA1B;AACD;;AAED;;;;;;;;;+BAMW,I,EAAM;AACf,UAAI,gBAAgB,KAAK,WAAL,IAAoB,KAAK,WAAL,CAAiB,IAAjB,CAAxC;AACA,UAAI,CAAC,aAAL,EAAoB;AAClB,YAAM,SAAS,KAAK,IAAL,CAAU,IAAV,CAAf;AACA,YAAI,UAAU,IAAd,EAAoB;AAClB;AACA,cAAM,UAAU,OAAO,MAAP,IAAiB,QAAjB,GACd,QAAQ,OAAR,CAAgB,MAAhB,CADc,GAEd,QAAQ,MAAR,CAAe,MAAf,CAFF;AAGA,0BAAgB,EAAC,gBAAD,EAAhB;AACD,SAND,MAMO;AACL;AACA;AACA,cAAM,WAAW,wBAAjB;AAHK,cAIE,QAJF,GAI8B,QAJ9B,CAIE,OAJF;AAAA,cAIW,OAJX,GAI8B,QAJ9B,CAIW,OAJX;AAAA,cAIoB,MAJpB,GAI8B,QAJ9B,CAIoB,MAJpB;;;AAML,0BAAgB,EAAC,iBAAD,EAAU,gBAAV,EAAmB,cAAnB,EAAhB;AACD;AACD,YAAI,CAAC,KAAK,WAAV,EAAuB;AACrB,eAAK,WAAL,GAAmB,kBAAnB;AACD;AACD,aAAK,WAAL,CAAiB,IAAjB,IAAyB,aAAzB;AACD;AACD,aAAO,cAAc,OAArB;AACD;;AAED;;;;;;;;;;2BAOO,I,EAAM,Q,EAAU;AACrB,UAAI,KAAK,IAAL,CAAU,IAAV,KAAmB,IAAvB,EAA6B;AAC3B;AACA;AACD;AACD,UAAM,OAAO,YAAY,KAAK,GAAL,EAAzB;AACA,WAAK,IAAL,CAAU,IAAV,IAAkB,IAAlB;AACA,UAAM,gBAAgB,KAAK,WAAL,IAAoB,KAAK,WAAL,CAAiB,IAAjB,CAA1C;AACA,UAAI,iBAAiB,cAAc,OAAnC,EAA4C;AAC1C,sBAAc,OAAd,CAAsB,IAAtB;AACA,sBAAc,OAAd,GAAwB,SAAxB;AACA,sBAAc,MAAd,GAAuB,SAAvB;AACD;AACF;;AAED;;;;;;;;;iCAMa,I,EAAM,K,EAAO;AACxB,UAAI,KAAK,IAAL,CAAU,IAAV,KAAmB,IAAvB,EAA6B;AAC3B;AACA;AACD;AACD,WAAK,IAAL,CAAU,IAAV,IAAkB,KAAlB;AACA,UAAM,gBAAgB,KAAK,WAAL,IAAoB,KAAK,WAAL,CAAiB,IAAjB,CAA1C;AACA,UAAI,iBAAiB,cAAc,MAAnC,EAA2C;AACzC,sBAAc,MAAd,CAAqB,KAArB;AACA,sBAAc,OAAd,GAAwB,SAAxB;AACA,sBAAc,MAAd,GAAuB,SAAvB;AACD;AACF;;AAED;;;;;;;0BAIM,I,EAAM;AACV,UAAI,KAAK,IAAL,CAAU,IAAV,CAAJ,EAAqB;AACnB,eAAO,KAAK,IAAL,CAAU,IAAV,CAAP;AACD;AACD;AACA,UAAM,gBAAgB,KAAK,WAAL,IAAoB,KAAK,WAAL,CAAiB,IAAjB,CAA1C;AACA,UAAI,iBAAiB,CAAC,cAAc,OAApC,EAA6C;AAC3C,eAAO,KAAK,WAAL,CAAiB,IAAjB,CAAP;AACD;AACF;;;;;;;;;;;;;;;AClJH;;;;;;;;;;;;;;;;AAgBO,IAAM,gFAAoC,GAA1C;;AAEP;;;;;;;;;;;;;;;IAca,c,WAAA,c;;;;;;;;;AAEX;;;;;uCAKmB,CAAE;;AAErB;;;;;;;;;;oCAOgB,CAAE;;AAElB;;;;;;;qCAIiB,CAAE;;AAEnB;;;;;;;kCAIc,CAAE;;AAEhB;;;;;;;sCAIkB,CAAE;;AAEpB;;;;;;;;;;yBAOK,gB,EAAkB,CAAE;;AAEzB;;;;;;4BAGQ,CAAE;;AAEV;;;;;;2BAGO,CAAE;;AAET;;;;;;6BAGS,CAAE;;AAEX;;;;;;;;mCAKe,CAAE;;AAEjB;;;;;;;;mCAKe,CAAE;;AAEjB;;;;;;;;;;;;kCASc,CAAE;;AAEhB;;;;;;;;;;;;kDAS8B,CAAE;;AAEhC;;;;;;;;;;;mDAQ+B,CAAE;;AAEjC;;;;;;;;;;;;sCASkB,CAAE;;AAEpB;;;;;;qCAGiB,CAAE;;AAEnB;;;;;;;mCAIe,CAAE;;;;;;AAInB;;;;;;;;;;AAQO,IAAM,4CAAkB;AAC7B;;;;;;;;;;;;;;;;;;;;AAoBA,YAAU,UArBmB;AAsB7B;;;;;;AAMA,QAAM,MA5BuB;AA6B7B;;;;;;;;;;;;AAYA,wBAAsB,sBAzCO;AA0C7B;;;;;AAKA,YAAU;AA/CmB,CAAxB;;AAmDP;;;;;;;;AAQO,IAAM,oCAAc;AACzB;;;;;;;;AAQA,cAAY,YATa;;AAWzB;;;;;;;;AAQA,QAAM,MAnBmB;;AAqBzB;;;;;;;AAOA,WAAS,SA5BgB;;AA8BzB;;;;;;;AAOA,SAAO,OArCkB;;AAuCzB;;;;;;;;;AASA,SAAO,OAhDkB;;AAkDzB;;;;;;;AAOA,SAAO,OAzDkB;;AA2DzB;;;;;;;AAOA,WAAS,SAlEgB;;AAoEzB;;;;;;;;;AASA,cAAY,sBA7Ea;;AA+EzB;;;;;;;AAOA,UAAQ,UAtFiB;;AAwFzB;;;;;;;;;;AAUA,YAAU,UAlGe;;AAoGzB;;;;;;;;;;AAUA,UAAQ;AA9GiB,CAApB;;AAkHP;;;;;;;;AAQO,IAAM,wCAAgB;AAC3B;;;;;;;;AAQA,kBAAgB,gBATW;;AAW3B;;;;;;;AAOA,gBAAc,cAlBa;;AAoB3B;;;;;;;AAOA,UAAQ;AA3BmB,CAAtB;;AA+BP;AACO,IAAM,sDAAuB;AAClC;;;;;;;AAOA,SAAO,aAR2B;;AAUlC;;;;;;;AAOA,SAAO,aAjB2B;;AAmBlC;;;;;;;AAOA,QAAM,YA1B4B;;AA4BlC;;;;;;;AAOA,WAAS,eAnCyB;;AAqClC;;;;;;;AAOA,mBAAiB,uBA5CiB;;AA8ClC;;;;;;;;AAQA,kBAAgB;AAtDkB,CAA7B;;AA0DP;;;;;;;;;;;;;;AAcO,IAAI,oEAAJ;;AAGP;;;;;;;;;AASO,IAAI,8DAAJ;;;;;;QCpaS,S,GAAA,S;AA/ChB;;AAGA;;;;;;;;;;;;;;;;;AAiBA,IAAI,QAAQ,wEAAZ;;AAEA,SAAS,OAAT,CAAiB,KAAjB,EAAwB,GAAxB,EAA6B,IAA7B,EAAmC,SAAnC,EAA8C,KAA9C,EAAqD;AACnD;AACA,MAAI,KAAJ,EAAW;AACT,WAAO,KAAP;AACD;AACD;AACA,MAAI,GAAJ,EAAS;AACP,WAAO,QAAP;AACD;AACD;AACA;AACA;AACA,MAAI,SAAJ,EAAe;AACb,WAAO,MAAM,KAAN,CAAY,CAAZ,EAAe,CAAC,CAAhB,IAAqB,IAArB,GAA4B,MAAM,KAAN,CAAY,CAAC,CAAb,EAAgB,UAAhB,CAA2B,CAA3B,EAA8B,QAA9B,CAAuC,EAAvC,CAA5B,GAAyE,GAAhF;AACD;AACD;AACA;AACA,SAAO,OAAO,KAAd;AACD;;AAED;;;;;AAKO,SAAS,SAAT,CAAmB,KAAnB,EAA0B;AAC/B,SAAO,OAAO,KAAP,EAAc,OAAd,CAAsB,KAAtB,EAA6B,OAA7B,CAAP;AACD","file":"amp-analytics-0.1.max.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","/**\n * Copyright 2015 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Provides an ability to collect data about activities the user\n * has performed on the page.\n */\n\nimport {Services} from '../../../src/services';\nimport {hasOwn} from '../../../src/utils/object';\nimport {listen} from '../../../src/event-helper';\nimport {registerServiceBuilderForDoc} from '../../../src/service';\n\n\n/**\n * The amount of time after an activity the user is considered engaged.\n * @private @const {number}\n */\nconst DEFAULT_ENGAGED_SECONDS = 5;\n\n/**\n * @enum {string}\n */\nconst ActivityEventType = {\n  ACTIVE: 'active',\n  INACTIVE: 'inactive',\n};\n\n/**\n * @typedef {{\n *   type: string,\n *   time: number\n * }}\n */\nlet ActivityEventDef;\n\n/**\n * Find the engaged time between the event and the time (exclusive of the time)\n * @param {ActivityEventDef} activityEvent\n * @param {number} time\n * @return {number}\n * @private\n */\nfunction findEngagedTimeBetween(activityEvent, time) {\n  let engagementBonus = 0;\n\n  if (activityEvent.type === ActivityEventType.ACTIVE) {\n    engagementBonus = DEFAULT_ENGAGED_SECONDS;\n  }\n\n  return Math.min(time - activityEvent.time, engagementBonus);\n}\n\nclass ActivityHistory {\n\n  /**\n   * Creates an instance of ActivityHistory.\n   */\n  constructor() {\n    /** @private {number} */\n    this.totalEngagedTime_ = 0;\n\n    /**\n     * prevActivityEvent_ remains undefined until the first valid push call.\n     * @private {ActivityEventDef|undefined}\n     */\n    this.prevActivityEvent_ = undefined;\n  }\n\n  /**\n   * Indicate that an activity took place at the given time.\n   * @param {ActivityEventDef} activityEvent\n   */\n  push(activityEvent) {\n    if (!this.prevActivityEvent_) {\n      this.prevActivityEvent_ = activityEvent;\n    }\n\n    if (this.prevActivityEvent_.time < activityEvent.time) {\n      this.totalEngagedTime_ +=\n          findEngagedTimeBetween(this.prevActivityEvent_, activityEvent.time);\n      this.prevActivityEvent_ = activityEvent;\n    }\n  }\n\n  /**\n   * Get the total engaged time up to the given time recorded in\n   * ActivityHistory.\n   * @param {number} time\n   * @return {number}\n   */\n  getTotalEngagedTime(time) {\n    let totalEngagedTime = 0;\n    if (this.prevActivityEvent_ !== undefined) {\n      totalEngagedTime = this.totalEngagedTime_ +\n          findEngagedTimeBetween(this.prevActivityEvent_, time);\n    }\n    return totalEngagedTime;\n  }\n\n}\n\n\n/**\n * Array of event types which will be listened for on the document to indicate\n * activity. Other activities are also observed on the Viewer and Viewport\n * objects. See {@link setUpActivityListeners_} for listener implementation.\n * @private @const {Array<string>}\n */\nconst ACTIVE_EVENT_TYPES = [\n  'mousedown', 'mouseup', 'mousemove', 'keydown', 'keyup',\n];\n\n/**\n * @param {!../../../src/service/ampdoc-impl.AmpDoc} ampDoc\n */\nexport function installActivityServiceForTesting(ampDoc) {\n  registerServiceBuilderForDoc(ampDoc, 'activity', Activity);\n}\n\nexport class Activity {\n\n  /**\n   * Activity tracks basic user activity on the page.\n   *  - Listeners are not registered on the activity event types until the\n   *    Viewer's `whenFirstVisible` is resolved.\n   *  - When the `whenFirstVisible` of Viewer is resolved, a first activity\n   *    is recorded.\n   *  - The first activity in any second causes all other activities to be\n   *    ignored. This is similar to debounce functionality since some events\n   *    (e.g. scroll) could occur in rapid succession.\n   *  - In any one second period, active events or inactive events can override\n   *    each other. Whichever type occured last has precedence.\n   *  - Active events give a 5 second \"bonus\" to engaged time.\n   *  - Inactive events cause an immediate stop to the engaged time bonus of\n   *    any previous activity event.\n   *  - At any point after instantiation, `getTotalEngagedTime` can be used\n   *    to get the engage time up to the time the function is called. If\n   *    `whenFirstVisible` has not yet resolved, engaged time is 0.\n   * @param {!../../../src/service/ampdoc-impl.AmpDoc} ampdoc\n   */\n  constructor(ampdoc) {\n    /** @const {!../../../src/service/ampdoc-impl.AmpDoc} ampdoc */\n    this.ampdoc = ampdoc;\n\n    /** @private @const {function()} */\n    this.boundStopIgnore_ = this.stopIgnore_.bind(this);\n\n    /** @private @const {function()} */\n    this.boundHandleActivity_ = this.handleActivity_.bind(this);\n\n    /** @private @const {function()} */\n    this.boundHandleVisibilityChange_ = this.handleVisibilityChange_.bind(this);\n\n    /**\n     * Contains the incrementalEngagedTime timestamps for named triggers.\n     * @private {Object<string, number>}\n     */\n    this.totalEngagedTimeByTrigger_ = {\n      /*\n       * \"$triggerName\" : ${lastRequestTimestamp}\n      */\n    };\n\n    /** @private {Array<!UnlistenDef>} */\n    this.unlistenFuncs_ = [];\n\n    /** @private {boolean} */\n    this.ignoreActivity_ = false;\n\n    /** @private {boolean} */\n    this.ignoreInactive_ = false;\n\n    /** @private @const {!ActivityHistory} */\n    this.activityHistory_ = new ActivityHistory();\n\n    /** @private @const {!../../../src/service/viewer-impl.Viewer} */\n    this.viewer_ = Services.viewerForDoc(this.ampdoc);\n\n    /** @private @const {!../../../src/service/viewport/viewport-impl.Viewport} */\n    this.viewport_ = Services.viewportForDoc(this.ampdoc);\n\n    this.viewer_.whenFirstVisible().then(this.start_.bind(this));\n  }\n\n  /** @private */\n  start_() {\n    /** @private @const {number} */\n    this.startTime_ = Date.now();\n    // record an activity since this is when the page became visible\n    this.handleActivity_();\n    this.setUpActivityListeners_();\n  }\n\n  /** @private */\n  getTimeSinceStart_() {\n    const timeSinceStart = Date.now() - this.startTime_;\n    // Ensure that a negative time is never returned. This may cause loss of\n    // data if there is a time change during the session but it will decrease\n    // the likelyhood of errors in that situation.\n    return (timeSinceStart > 0 ? timeSinceStart : 0);\n  }\n\n  /**\n   * Return to a state where neither activities or inactivity events are\n   * ignored when that event type is fired.\n   * @private\n   */\n  stopIgnore_() {\n    this.ignoreActivity_ = false;\n    this.ignoreInactive_ = false;\n  }\n\n  /** @private */\n  setUpActivityListeners_() {\n    for (let i = 0; i < ACTIVE_EVENT_TYPES.length; i++) {\n      this.unlistenFuncs_.push(listen(this.ampdoc.getRootNode(),\n          ACTIVE_EVENT_TYPES[i], this.boundHandleActivity_));\n    }\n\n    this.unlistenFuncs_.push(\n        this.viewer_.onVisibilityChanged(this.boundHandleVisibilityChange_));\n\n    // Viewport.onScroll does not return an unlisten function.\n    // TODO(britice): If Viewport is updated to return an unlisten function,\n    // update this to capture the unlisten function.\n    this.viewport_.onScroll(this.boundHandleActivity_);\n  }\n\n  /** @private */\n  handleActivity_() {\n    if (this.ignoreActivity_) {\n      return;\n    }\n    this.ignoreActivity_ = true;\n    this.ignoreInactive_ = false;\n\n    this.handleActivityEvent_(ActivityEventType.ACTIVE);\n  }\n\n  /** @private */\n  handleInactive_() {\n    if (this.ignoreInactive_) {\n      return;\n    }\n    this.ignoreInactive_ = true;\n    this.ignoreActivity_ = false;\n\n    this.handleActivityEvent_(ActivityEventType.INACTIVE);\n  }\n\n  /**\n   * @param {ActivityEventType} type\n   * @private\n   */\n  handleActivityEvent_(type) {\n    const timeSinceStart = this.getTimeSinceStart_();\n    const secondKey = Math.floor(timeSinceStart / 1000);\n    const timeToWait = 1000 - (timeSinceStart % 1000);\n\n    // stop ignoring activity at the start of the next activity bucket\n    setTimeout(this.boundStopIgnore_, timeToWait);\n\n    this.activityHistory_.push({\n      type,\n      time: secondKey,\n    });\n  }\n\n  /** @private */\n  handleVisibilityChange_() {\n    if (this.viewer_.isVisible()) {\n      this.handleActivity_();\n    } else {\n      this.handleInactive_();\n    }\n  }\n\n  /**\n   * Remove all listeners associated with this Activity instance.\n   * @private\n   */\n  unlisten_() {\n    for (let i = 0; i < this.unlistenFuncs_.length; i++) {\n      const unlistenFunc = this.unlistenFuncs_[i];\n      // TODO(britice): Due to eslint typechecking, this check may not be\n      // necessary.\n      if (typeof unlistenFunc === 'function') {\n        unlistenFunc();\n      }\n    }\n    this.unlistenFuncs_ = [];\n  }\n\n  /**\n   * @private\n   * @visibleForTesting\n   */\n  cleanup_() {\n    this.unlisten_();\n  }\n\n  /**\n   * Get total engaged time since the page became visible.\n   * @return {number}\n   */\n  getTotalEngagedTime() {\n    const secondsSinceStart = Math.floor(this.getTimeSinceStart_() / 1000);\n    return this.activityHistory_.getTotalEngagedTime(secondsSinceStart);\n  }\n\n  /**\n   * Get the incremental engaged time since the last push and reset it if asked.\n   * @param {string} name\n   * @param {boolean=} reset\n   * @return {number}\n   */\n  getIncrementalEngagedTime(name, reset = true) {\n    if (!hasOwn(this.totalEngagedTimeByTrigger_, name)) {\n      if (reset) {\n        this.totalEngagedTimeByTrigger_[name] = this.getTotalEngagedTime();\n      }\n      return this.getTotalEngagedTime();\n    }\n    const currentIncrementalEngagedTime =\n      this.totalEngagedTimeByTrigger_[name];\n    if (reset === false) {\n      return this.getTotalEngagedTime() - currentIncrementalEngagedTime;\n    }\n    this.totalEngagedTimeByTrigger_[name] = this.getTotalEngagedTime();\n    return this.totalEngagedTimeByTrigger_[name] -\n      currentIncrementalEngagedTime;\n  }\n}\n","/**\n * Copyright 2015 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Activity} from './activity-impl';\nimport {AnalyticsConfig, mergeObjects} from './config';\nimport {AnalyticsEventType} from './events';\nimport {\n  ExpansionOptions,\n  installVariableService,\n  variableServiceFor,\n} from './variables';\nimport {IframeTransport, getIframeTransportScriptUrl} from './iframe-transport';\nimport {\n  InstrumentationService,\n  instrumentationServicePromiseForDoc,\n} from './instrumentation';\nimport {LayoutPriority} from '../../../src/layout';\nimport {\n  RequestHandler,\n} from './requests';\nimport {Services} from '../../../src/services';\nimport {dev, rethrowAsync, user} from '../../../src/log';\nimport {dict, hasOwn, map} from '../../../src/utils/object';\nimport {expandTemplate} from '../../../src/string';\nimport {getAmpAdResourceId} from '../../../src/ad-helper';\nimport {getMode} from '../../../src/mode';\nimport {getTopWindow} from '../../../src/service';\nimport {isArray} from '../../../src/types';\nimport {isEnumValue} from '../../../src/types';\nimport {sendRequest, sendRequestUsingIframe} from './transport';\nimport {serializeResourceTiming} from './resource-timing';\nimport {toggle} from '../../../src/style';\n\nconst TAG = 'amp-analytics';\n\nconst MAX_REPLACES = 16; // The maximum number of entries in a extraUrlParamsReplaceMap\n\nconst WHITELIST_EVENT_IN_SANDBOX = [\n  AnalyticsEventType.VISIBLE,\n  AnalyticsEventType.HIDDEN,\n];\n\nexport class AmpAnalytics extends AMP.BaseElement {\n\n  /** @param {!AmpElement} element */\n  constructor(element) {\n    super(element);\n\n    /** @private {!Promise} */\n    this.consentPromise_ = Promise.resolve();\n\n    /**\n     * The html id of the `amp-user-notification` element.\n     * @private {?string}\n     */\n    this.consentNotificationId_ = null;\n\n    /** @private {boolean} */\n    this.isSandbox_ = false;\n\n    /**\n     * @private {Object<string, RequestHandler>} A map of request handler with requests\n     */\n    this.requests_ = {};\n\n    /**\n     * @private {JsonObject}\n     */\n    this.config_ = dict();\n\n    /** @private {?./instrumentation.InstrumentationService} */\n    this.instrumentation_ = null;\n\n    /** @private {?./instrumentation.AnalyticsGroup} */\n    this.analyticsGroup_ = null;\n\n    /** @private {!./variables.VariableService} */\n    this.variableService_ = variableServiceFor(this.win);\n\n    /** @private {!../../../src/service/crypto-impl.Crypto} */\n    this.cryptoService_ = Services.cryptoFor(this.win);\n\n    /** @private {?Promise} */\n    this.iniPromise_ = null;\n\n    /** @private {?IframeTransport} */\n    this.iframeTransport_ = null;\n\n    /** @private {boolean} */\n    this.isInabox_ = getMode(this.win).runtime == 'inabox';\n\n    /**\n     * Maximum time (since epoch) to report resource timing metrics.\n     * We stop reporting after 1 minute.\n     * @private @const {number}\n     */\n    this.maxResourceTimingReportingTime_ = Date.now() + (60 * 1000);\n  }\n\n  /** @override */\n  getLayoutPriority() {\n    // Load immediately if inabox, otherwise after other content.\n    return this.isInabox_ ? LayoutPriority.CONTENT : LayoutPriority.METADATA;\n  }\n\n  /** @override */\n  isAlwaysFixed() {\n    return true;\n  }\n\n  /** @override */\n  isLayoutSupported(unusedLayout) {\n    return true;\n  }\n\n  /** @override */\n  buildCallback() {\n    this.isSandbox_ = this.element.hasAttribute('sandbox');\n\n    this.element.setAttribute('aria-hidden', 'true');\n\n    this.consentNotificationId_ = this.element\n        .getAttribute('data-consent-notification-id');\n\n    if (this.consentNotificationId_ != null) {\n      this.consentPromise_ =\n          Services.userNotificationManagerForDoc(this.element)\n              .then(service => service.get(dev().assertString(\n                  this.consentNotificationId_)));\n    }\n\n    if (this.element.getAttribute('trigger') == 'immediate') {\n      this.ensureInitialized_();\n    }\n  }\n\n  /** @override */\n  layoutCallback() {\n    // Now that we are rendered, stop rendering the element to reduce\n    // resource consumption.\n    return this.ensureInitialized_();\n  }\n\n  /** @override */\n  detachedCallback() {\n    if (this.analyticsGroup_) {\n      this.analyticsGroup_.dispose();\n      this.analyticsGroup_ = null;\n    }\n    for (let i = 0; i < this.requests_.length; i++) {\n      this.requests_[i].dispose();\n      delete this.requests_[i];\n    }\n  }\n\n  /** @override */\n  resumeCallback() {\n    if (this.config_['transport'] && this.config_['transport']['iframe']) {\n      this.initIframeTransport_();\n    }\n  }\n\n  /** @override */\n  unlayoutCallback() {\n    if (Services.viewerForDoc(this.getAmpDoc()).isVisible()) {\n      // amp-analytics tag was just set to display:none. Page is still loaded.\n      return false;\n    }\n\n    // Page was unloaded - free up owned resources.\n    if (this.iframeTransport_) {\n      this.iframeTransport_.detach();\n      this.iframeTransport_ = null;\n    }\n    return super.unlayoutCallback();\n  }\n\n  /**\n   * @return {!Promise}\n   * @private\n   */\n  ensureInitialized_() {\n    if (this.iniPromise_) {\n      return this.iniPromise_;\n    }\n    toggle(this.element, false);\n    this.iniPromise_ =\n        Services.viewerForDoc(this.getAmpDoc()).whenFirstVisible()\n            // Rudimentary \"idle\" signal.\n            .then(() => Services.timerFor(this.win).promise(1))\n            .then(() => this.consentPromise_)\n            .then(() => instrumentationServicePromiseForDoc(this.getAmpDoc()))\n            .then(instrumentation => {\n              this.instrumentation_ = instrumentation;\n              return new AnalyticsConfig(this.element).loadConfig();\n            })\n            .then(config => {\n              this.config_ = config;\n            })\n            .then(this.registerTriggers_.bind(this));\n    return this.iniPromise_;\n  }\n\n  /**\n   * Registers triggers.\n   * @return {!Promise|undefined}\n   * @private\n   */\n  registerTriggers_() {\n    if (this.hasOptedOut_()) {\n      // Nothing to do when the user has opted out.\n      const TAG = this.getName_();\n      user().fine(TAG, 'User has opted out. No hits will be sent.');\n      return Promise.resolve();\n    }\n\n    this.generateRequests_();\n\n    if (!this.config_['triggers']) {\n      const TAG = this.getName_();\n      this.user().error(TAG, 'No triggers were found in the ' +\n          'config. No analytics data will be sent.');\n      return Promise.resolve();\n    }\n\n    this.processExtraUrlParams_(this.config_['extraUrlParams'],\n        this.config_['extraUrlParamsReplaceMap']);\n\n    this.analyticsGroup_ =\n        this.instrumentation_.createAnalyticsGroup(this.element);\n\n    if (this.config_['transport'] && this.config_['transport']['iframe']) {\n      this.initIframeTransport_();\n    }\n\n    const promises = [];\n    // Trigger callback can be synchronous. Do the registration at the end.\n    for (const k in this.config_['triggers']) {\n      if (hasOwn(this.config_['triggers'], k)) {\n        const trigger = this.config_['triggers'][k];\n        const expansionOptions = this.expansionOptions_(\n            {}, trigger, undefined, true);\n        const TAG = this.getName_();\n        if (!trigger) {\n          this.user().error(TAG, 'Trigger should be an object: ', k);\n          continue;\n        }\n        if (!trigger['on'] || !trigger['request']) {\n          this.user().error(TAG, '\"on\" and \"request\" ' +\n              'attributes are required for data to be collected.');\n          continue;\n        }\n        // Check for not supported trigger for sandboxed analytics\n        if (this.isSandbox_) {\n          const eventType = trigger['on'];\n          if (isEnumValue(AnalyticsEventType, eventType) &&\n              !WHITELIST_EVENT_IN_SANDBOX.includes(eventType)) {\n            this.user().error(TAG, eventType +\n                ' is not supported for amp-analytics in scope');\n            continue;\n          }\n        }\n\n        this.processExtraUrlParams_(trigger['extraUrlParams'],\n            this.config_['extraUrlParamsReplaceMap']);\n        promises.push(this.isSampledIn_(trigger).then(result => {\n          if (!result) {\n            return;\n          }\n          // replace selector and selectionMethod\n          if (this.isSandbox_) {\n            // Only support selection of parent element for analytics in scope\n            if (!this.element.parentElement) {\n              // In case parent element has been removed from DOM, do nothing\n              return;\n            }\n            trigger['selector'] = this.element.parentElement.tagName;\n            trigger['selectionMethod'] = 'closest';\n            this.addTriggerNoInline_(trigger);\n          } else if (trigger['selector']) {\n            // Expand the selector using variable expansion.\n            return this.variableService_.expandTemplate(\n                trigger['selector'], expansionOptions)\n                .then(selector => {\n                  trigger['selector'] = selector;\n                  this.addTriggerNoInline_(trigger);\n                });\n          } else {\n            this.addTriggerNoInline_(trigger);\n          }\n        }));\n      }\n    }\n    return Promise.all(promises);\n  }\n\n  /**\n   * amp-analytics will create an iframe for vendors in\n   * extensions/amp-analytics/0.1/vendors.js who have transport/iframe defined.\n   * This is limited to MRC-accreddited vendors. The frame is removed if the\n   * user navigates/swipes away from the page, and is recreated if the user\n   * navigates back to the page.\n   * @private\n   */\n  initIframeTransport_() {\n    if (this.iframeTransport_) {\n      return;\n    }\n    this.preload(getIframeTransportScriptUrl(this.getAmpDoc().win), 'script');\n    const ampAdResourceId = this.assertAmpAdResourceId();\n\n    this.iframeTransport_ = new IframeTransport(\n        // Create  3p transport frame within creative frame if inabox.\n        this.isInabox_ ? this.win : this.getAmpDoc().win,\n        this.element.getAttribute('type'),\n        this.config_['transport'], ampAdResourceId);\n  }\n\n  /**\n   * Asks the browser to preload a URL. Always also does a preconnect\n   * because browser support for that is better.\n   *\n   * @param {string} url\n   * @param {string=} opt_preloadAs\n   * @visibleForTesting\n   */\n  preload(url, opt_preloadAs) {\n    this.preconnect.preload(url, opt_preloadAs);\n  }\n\n  /**\n   * Gets the resourceID of the parent amp-ad element.\n   * Throws an exception if no such element.\n   * @return {string}\n   * @visibleForTesting\n   */\n  assertAmpAdResourceId() {\n    return user().assertString(\n        getAmpAdResourceId(this.element, getTopWindow(this.win)),\n        `${this.getName_()}: No friendly amp-ad ancestor element was found ` +\n        'for amp-analytics tag with iframe transport.');\n  }\n\n  /**\n   * Calls `AnalyticsGroup.addTrigger` and reports any errors. \"NoInline\" is\n   * to avoid inlining this method so that `try/catch` does it veto\n   * optimizations.\n   * @param {!JsonObject} config\n   * @private\n   */\n  addTriggerNoInline_(config) {\n    try {\n      this.analyticsGroup_.addTrigger(\n          config, this.handleEvent_.bind(this, config));\n    } catch (e) {\n      const TAG = this.getName_();\n      const eventType = config['on'];\n      rethrowAsync(TAG, 'Failed to process trigger \"' + eventType + '\"', e);\n    }\n  }\n\n  /**\n   * Replace the names of keys in params object with the values in replace map.\n   *\n   * @param {!Object<string, string>} params The params that need to be renamed.\n   * @param {!Object<string, string>} replaceMap A map of pattern and replacement\n   *    value.\n   * @private\n   */\n  processExtraUrlParams_(params, replaceMap) {\n    if (params && replaceMap) {\n      // If the config includes a extraUrlParamsReplaceMap, apply it as a set\n      // of params to String.replace to allow aliasing of the keys in\n      // extraUrlParams.\n      let count = 0;\n      for (const replaceMapKey in replaceMap) {\n        if (++count > MAX_REPLACES) {\n          const TAG = this.getName_();\n          this.user().error(TAG,\n              'More than ' + MAX_REPLACES + ' extraUrlParamsReplaceMap rules ' +\n              'aren\\'t allowed; Skipping the rest');\n          break;\n        }\n\n        for (const extraUrlParamsKey in params) {\n          const newkey = extraUrlParamsKey.replace(\n              replaceMapKey,\n              replaceMap[replaceMapKey]\n          );\n          if (extraUrlParamsKey != newkey) {\n            const value = params[extraUrlParamsKey];\n            delete params[extraUrlParamsKey];\n            params[newkey] = value;\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * @return {boolean} true if the user has opted out.\n   */\n  hasOptedOut_() {\n    if (!this.config_['optout']) {\n      return false;\n    }\n\n    const props = this.config_['optout'].split('.');\n    let k = this.win;\n    for (let i = 0; i < props.length; i++) {\n      if (!k) {\n        return false;\n      }\n      k = k[props[i]];\n    }\n    // The actual property being called is controlled by vendor configs only\n    // that are approved in code reviews. User customization of the `optout`\n    // property is not allowed.\n    return k();\n  }\n\n  /**\n   * Goes through all the requests in predefined vendor config and tag's config\n   * and creates a map of request name to request template. These requests can\n   * then be used while sending a request to a server.\n   *\n   * @private\n   */\n  generateRequests_() {\n    if (!this.config_ || !this.config_['requests']) {\n      const TAG = this.getName_();\n      this.user().error(TAG, 'No request strings defined. Analytics ' +\n          'data will not be sent from this page.');\n      return;\n    }\n\n    if (this.config_['requests']) {\n      for (const k in this.config_['requests']) {\n        if (hasOwn(this.config_['requests'], k)) {\n          const request = this.config_['requests'][k];\n          if (!request['baseUrl']) {\n            this.user().error(TAG, 'request must have a baseUrl');\n            delete this.config_['requests'][k];\n          }\n        }\n      }\n\n      // Expand any placeholders. For requests, we expand each string up to 5\n      // times to support nested requests. Leave any unresolved placeholders.\n      // Expand any requests placeholder.\n      for (const k in this.config_['requests']) {\n        this.config_['requests'][k]['baseUrl'] =\n            expandTemplate(this.config_['requests'][k]['baseUrl'], key => {\n              const request = this.config_['requests'][key];\n              return (request && request['baseUrl']) || '${' + key + '}';\n            }, 5);\n      }\n\n      const requests = {};\n      for (const k in this.config_['requests']) {\n        if (hasOwn(this.config_['requests'], k)) {\n          const request = this.config_['requests'][k];\n          requests[k] = new RequestHandler(\n              this.element, request, this.preconnect,\n              this.sendRequest_.bind(this),\n              this.isSandbox_);\n        }\n      }\n      this.requests_ = requests;\n    }\n  }\n\n  /**\n   * Callback for events that are registered by the config's triggers. This\n   * method generates requests and sends them out.\n   *\n   * @param {!JsonObject} trigger JSON config block that resulted in this event.\n   * @param {!Object} event Object with details about the event.\n   * @private\n   */\n  handleEvent_(trigger, event) {\n    const requests = isArray(trigger['request'])\n      ? trigger['request'] : [trigger['request']];\n\n    for (let r = 0; r < requests.length; r++) {\n      const requestName = requests[r];\n      this.handleRequestForEvent_(requestName, trigger, event);\n    }\n  }\n\n  /**\n   * Processes a request for an event callback and sends it out.\n   *\n   * @param {string} requestName The requestName to process.\n   * @param {!JsonObject} trigger JSON config block that resulted in this event.\n   * @param {!Object} event Object with details about the event.\n   * @private\n   */\n  handleRequestForEvent_(requestName, trigger, event) {\n    if (!this.element.ownerDocument.defaultView) {\n      const TAG = this.getName_();\n      dev().warn(TAG, 'request against destroyed embed: ', trigger['on']);\n    }\n\n    const request = this.requests_[requestName];\n\n    if (!request) {\n      const TAG = this.getName_();\n      this.user().error(TAG, 'Ignoring event. Request string ' +\n          'not found: ', trigger['request']);\n      return;\n    }\n\n    this.checkTriggerEnabled_(trigger, event).then(enabled => {\n      if (!enabled) {\n        return;\n      }\n      this.expandAndSendRequest_(request, trigger, event);\n    });\n  }\n\n  /**\n   * @param {!JsonObject} trigger JSON config block that resulted in this event.\n   * @param {!ExpansionOptions} expansionOptions Expansion options.\n   * @return {!Object<string, (string|!Promise<string>|function(): string)>}\n   * @private\n   */\n  getDynamicVariableBindings_(trigger, expansionOptions) {\n    const dynamicBindings = {};\n    const resourceTimingSpec = trigger['resourceTimingSpec'];\n    if (resourceTimingSpec) {\n      // Check if we're done reporting resource timing metrics before binding\n      // before binding the resource timing variable.\n      if (!resourceTimingSpec['done'] &&\n          Date.now() < this.maxResourceTimingReportingTime_) {\n        const binding = 'RESOURCE_TIMING';\n        const analyticsVar = 'resourceTiming';\n        dynamicBindings[binding] =\n            serializeResourceTiming(this.win, resourceTimingSpec);\n        expansionOptions.vars[analyticsVar] = binding;\n      }\n    }\n    return dynamicBindings;\n  }\n\n  /**\n   * @param {RequestHandler} request The request to process.\n   * @param {!JsonObject} trigger JSON config block that resulted in this event.\n   * @param {!Object} event Object with details about the event.\n   * @private\n   */\n  expandAndSendRequest_(request, trigger, event) {\n    this.config_['vars']['requestCount']++;\n    const expansionOptions = this.expansionOptions_(event, trigger);\n    const dynamicBindings =\n        this.getDynamicVariableBindings_(trigger, expansionOptions);\n    request.send(\n        this.config_['extraUrlParams'], trigger, expansionOptions,\n        dynamicBindings);\n  }\n\n  /**\n   * @param {!JsonObject} trigger The config to use to determine sampling.\n   * @return {!Promise<boolean>} Whether the request should be sampled in or\n   * not based on sampleSpec.\n   * @private\n   */\n  isSampledIn_(trigger) {\n    /** @const {!JsonObject} */\n    const spec = trigger['sampleSpec'];\n    const resolve = Promise.resolve(true);\n    const TAG = this.getName_();\n    if (!spec) {\n      return resolve;\n    }\n    const sampleOn = spec['sampleOn'];\n    if (!sampleOn) {\n      this.user().error(TAG, 'Invalid sampleOn value.');\n      return resolve;\n    }\n    const threshold = parseFloat(spec['threshold']); // Threshold can be NaN.\n    if (threshold >= 0 && threshold <= 100) {\n      const expansionOptions = this.expansionOptions_({}, trigger);\n      return this.expandTemplateWithUrlParams_(sampleOn, expansionOptions)\n          .then(key => this.cryptoService_.uniform(key))\n          .then(digest => digest * 100 < threshold);\n    }\n    user()./*OK*/error(TAG, 'Invalid threshold for sampling.');\n    return resolve;\n  }\n\n  /**\n   * Checks if request for a trigger is enabled.\n   * @param {!JsonObject} trigger The config to use to determine if trigger is\n   * enabled.\n   * @param {!Object} event Object with details about the event.\n   * @return {!Promise<boolean>} Whether trigger must be called.\n   * @private\n   */\n  checkTriggerEnabled_(trigger, event) {\n    const expansionOptions = this.expansionOptions_(event, trigger);\n    const enabledOnTagLevel =\n        this.checkSpecEnabled_(this.config_['enabled'], expansionOptions);\n    const enabledOnTriggerLevel =\n        this.checkSpecEnabled_(trigger['enabled'], expansionOptions);\n\n    return Promise.all([enabledOnTagLevel, enabledOnTriggerLevel])\n        .then(enabled => {\n          dev().assert(enabled.length === 2);\n          return enabled[0] && enabled[1];\n        });\n  }\n\n  /**\n   * Checks result of 'enabled' spec evaluation. Returns false if spec is\n   * provided and value resolves to a falsey value (empty string, 0, false,\n   * null, NaN or undefined).\n   * @param {string} spec Expression that will be evaluated.\n   * @param {!ExpansionOptions} expansionOptions Expansion options.\n   * @return {!Promise<boolean>} False only if spec is provided and value is\n   * falsey.\n   * @private\n   */\n  checkSpecEnabled_(spec, expansionOptions) {\n    // Spec absence always resolves to true.\n    if (spec === undefined) {\n      return Promise.resolve(true);\n    }\n\n    return this.expandTemplateWithUrlParams_(spec, expansionOptions)\n        .then(val => {\n          return val !== '' && val !== '0' && val !== 'false' &&\n              val !== 'null' && val !== 'NaN' && val !== 'undefined';\n        });\n  }\n\n  /**\n   * Expands spec using provided expansion options and applies url replacement\n   * if necessary.\n   * @param {string} spec Expression that needs to be expanded.\n   * @param {!ExpansionOptions} expansionOptions Expansion options.\n   * @return {!Promise<string>} expanded spec.\n   * @private\n   */\n  expandTemplateWithUrlParams_(spec, expansionOptions) {\n    return this.variableService_.expandTemplate(spec, expansionOptions)\n        .then(key => Services.urlReplacementsForDoc(\n            this.element).expandUrlAsync(key));\n  }\n\n  /**\n   * @param {string} request The full request string to send.\n   * @param {!JsonObject} trigger\n   * @private\n   */\n  sendRequest_(request, trigger) {\n    if (!request) {\n      const TAG = this.getName_();\n      this.user().error(TAG, 'Request not sent. Contents empty.');\n      return;\n    }\n    if (trigger['iframePing']) {\n      user().assert(trigger['on'] == 'visible',\n          'iframePing is only available on page view requests.');\n      sendRequestUsingIframe(this.win, request);\n    } else if (this.config_['transport'] &&\n        this.config_['transport']['iframe']) {\n      user().assert(this.iframeTransport_,\n          'iframe transport was inadvertently deleted');\n      this.iframeTransport_.sendRequest(request);\n    } else {\n      sendRequest(this.win, request, this.config_['transport'] || {});\n    }\n  }\n\n  /**\n   * @return {string} Returns a string to identify this tag. May not be unique\n   * if the element id is not unique.\n   * @private\n   */\n  getName_() {\n    return 'AmpAnalytics ' +\n        (this.element.getAttribute('id') || '<unknown id>');\n  }\n\n  /**\n   * @param {!Object<string, Object<string, string|Array<string>>>} source1\n   * @param {!Object<string, Object<string, string|Array<string>>>} source2\n   * @param {number=} opt_iterations\n   * @param {boolean=} opt_noEncode\n   * @return {!ExpansionOptions}\n   */\n  expansionOptions_(source1, source2, opt_iterations, opt_noEncode) {\n    const vars = map();\n    mergeObjects(this.config_['vars'], vars);\n    mergeObjects(source2['vars'], vars);\n    mergeObjects(source1['vars'], vars);\n    return new ExpansionOptions(vars, opt_iterations, opt_noEncode);\n  }\n}\n\nAMP.extension(TAG, '0.1', AMP => {\n  // Register doc-service factory.\n  AMP.registerServiceForDoc(\n      'amp-analytics-instrumentation', InstrumentationService);\n  AMP.registerServiceForDoc('activity', Activity);\n  installVariableService(AMP.win);\n  // Register the element.\n  AMP.registerElement(TAG, AmpAnalytics);\n});\n","/**\n * Copyright 2017 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Services} from '../../../src/services';\nimport {\n  VisibilityManagerForDoc,\n  VisibilityManagerForEmbed,\n} from './visibility-manager';\nimport {\n  closestBySelector,\n  matches,\n  scopedQuerySelector,\n} from '../../../src/dom';\nimport {dev, user} from '../../../src/log';\nimport {getMode} from '../../../src/mode';\nimport {layoutRectLtwh} from '../../../src/layout-rect';\nimport {map} from '../../../src/utils/object';\nimport {tryResolve} from '../../../src/utils/promise';\nimport {whenContentIniLoad} from '../../../src/friendly-iframe-embed';\n\nconst TAG = 'amp-analytics';\n\n\n/**\n * An analytics root. Analytics can be scoped to either ampdoc, embed or\n * an arbitrary AMP element.\n *\n * TODO(dvoytenko): consider moving this concept into core as `AmpRoot`\n * interface that will be implemented by `AmpDoc` and `FriendlyIframeEmbed`.\n *\n * @implements {../../../src/service.Disposable}\n * @abstract\n */\nexport class AnalyticsRoot {\n  /**\n   * @param {!../../../src/service/ampdoc-impl.AmpDoc} ampdoc\n   * @param {?AnalyticsRoot} parent\n   */\n  constructor(ampdoc, parent) {\n    /** @const */\n    this.ampdoc = ampdoc;\n\n    /** @const */\n    this.parent = parent;\n\n    /** @const */\n    this.trackers_ = map();\n\n    /** @private {?./visibility-manager.VisibilityManager} */\n    this.visibilityManager_ = null;\n  }\n\n  /** @override */\n  dispose() {\n    for (const k in this.trackers_) {\n      this.trackers_[k].dispose();\n      delete this.trackers_[k];\n    }\n    if (this.visibilityManager_) {\n      this.visibilityManager_.dispose();\n    }\n  }\n\n  /**\n   * Returns the type of the tracker.\n   * @return {string}\n   * @abstract\n   */\n  getType() {}\n\n  /**\n   * The root node the analytics is scoped to.\n   *\n   * @return {!Document|!ShadowRoot|!Element}\n   * @abstract\n   */\n  getRoot() {}\n\n  /**\n   * The viewer of analytics root\n   * @return {!../../../src/service/viewer-impl.Viewer}\n   */\n  getViewer() {\n    return Services.viewerForDoc(this.ampdoc);\n  }\n\n  /**\n   * The root element within the analytics root.\n   *\n   * @return {!Element}\n   */\n  getRootElement() {\n    const root = this.getRoot();\n    return dev().assertElement(root.documentElement || root.body || root);\n  }\n\n  /**\n   * The host element of the analytics root.\n   *\n   * @return {?Element}\n   * @abstract\n   */\n  getHostElement() {}\n\n  /**\n   * The signals for the root.\n   *\n   * @return {!../../../src/utils/signals.Signals}\n   * @abstract\n   */\n  signals() {}\n\n  /**\n   * Whether this analytics root contains the specified node.\n   *\n   * @param {!Node} node\n   * @return {boolean}\n   */\n  contains(node) {\n    return this.getRoot().contains(node);\n  }\n\n  /**\n   * Returns the element with the specified ID in the scope of this root.\n   *\n   * @param {string} unusedId\n   * @return {?Element}\n   * @abstract\n   */\n  getElementById(unusedId) {}\n\n  /**\n   * Returns the tracker for the specified name and list of allowed types.\n   *\n   * @param {string} name\n   * @param {!Object<string, function(new:./events.EventTracker)>} whitelist\n   * @return {?./events.EventTracker}\n   */\n  getTrackerForWhitelist(name, whitelist) {\n    const trackerProfile = whitelist[name];\n    if (trackerProfile) {\n      return this.getTracker(name, trackerProfile);\n    }\n    return null;\n  }\n\n  /**\n   * Returns the tracker for the specified name and type. If the tracker\n   * has not been requested before, it will be created.\n   *\n   * @param {string} name\n   * @param {function(new:./events.CustomEventTracker, !AnalyticsRoot)|function(new:./events.ClickEventTracker, !AnalyticsRoot)|function(new:./events.SignalTracker, !AnalyticsRoot)|function(new:./events.IniLoadTracker, !AnalyticsRoot)|function(new:./events.VideoEventTracker, !AnalyticsRoot)|function(new:./events.VideoEventTracker, !AnalyticsRoot)|function(new:./events.VisibilityTracker, !AnalyticsRoot)} klass\n   * @return {!./events.EventTracker}\n   */\n  getTracker(name, klass) {\n    let tracker = this.trackers_[name];\n    if (!tracker) {\n      tracker = new klass(this);\n      this.trackers_[name] = tracker;\n    }\n    return tracker;\n  }\n\n  /**\n   * Returns the tracker for the specified name or `null`.\n   * @param {string} name\n   * @return {?./events.EventTracker}\n   */\n  getTrackerOptional(name) {\n    return this.trackers_[name] || null;\n  }\n\n  /**\n   * Searches the element that matches the selector within the scope of the\n   * analytics root in relationship to the specified context node.\n   *\n   * @param {!Element} context\n   * @param {string} selector DOM query selector.\n   * @param {?string=} selectionMethod Allowed values are `null`,\n   *   `'closest'` and `'scope'`.\n   * @return {!Promise<!Element>} Element corresponding to the selector.\n   */\n  getElement(context, selector, selectionMethod = null) {\n    // Special case selectors. The selection method is irrelavant.\n    // And no need to wait for document ready.\n    if (selector == ':root') {\n      return tryResolve(() => this.getRootElement());\n    }\n    if (selector == ':host') {\n      return new Promise(resolve => {\n        resolve(user().assertElement(\n            this.getHostElement(), `Element \"${selector}\" not found`));\n      });\n    }\n\n    // Wait for document-ready to avoid false missed searches\n    return this.ampdoc.whenReady().then(() => {\n      let found;\n      let result = null;\n      // Query search based on the selection method.\n      try {\n        if (selectionMethod == 'scope') {\n          found = scopedQuerySelector(context, selector);\n        } else if (selectionMethod == 'closest') {\n          found = closestBySelector(context, selector);\n        } else {\n          found = this.getRoot().querySelector(selector);\n        }\n      } catch (e) {\n        user().assert(false, `Invalid query selector ${selector}`);\n      }\n\n      // DOM search can \"look\" outside the boundaries of the root, thus make\n      // sure the result is contained.\n      if (found && this.contains(found)) {\n        result = found;\n      }\n      return user().assertElement(\n          result, `Element \"${selector}\" not found`);\n    });\n  }\n\n  /**\n   * Searches the AMP element that matches the selector within the scope of the\n   * analytics root in relationship to the specified context node.\n   *\n   * @param {!Element} context\n   * @param {string} selector DOM query selector.\n   * @param {?string=} selectionMethod Allowed values are `null`,\n   *   `'closest'` and `'scope'`.\n   * @return {!Promise<!AmpElement>} AMP element corresponding to the selector if found.\n   */\n  getAmpElement(context, selector, selectionMethod) {\n    return this.getElement(context, selector, selectionMethod).then(element => {\n      user().assert(\n          element.classList.contains('i-amphtml-element'),\n          'Element \"%s\" is required to be an AMP element', selector);\n      return element;\n    });\n  }\n\n  /**\n   * Creates listener-filter for DOM events to check against the specified\n   * selector. If the node (or its ancestors) match the selector the listener\n   * will be called.\n   *\n   * @param {function(!Element, !Event)} listener The first argument is the\n   *   matched target node and the second is the original event.\n   * @param {!Element} context\n   * @param {string} selector DOM query selector.\n   * @param {?string=} selectionMethod Allowed values are `null`,\n   *   `'closest'` and `'scope'`.\n   * @return {function(!Event)}\n   */\n  createSelectiveListener(\n    listener, context, selector, selectionMethod = null) {\n    return event => {\n      if (selector == ':host') {\n        // `:host` is not reachable via selective listener b/c event path\n        // cannot be retargeted across the boundary of the embed.\n        return;\n      }\n\n      // Navigate up the DOM tree to find the actual target.\n      const rootElement = this.getRootElement();\n      const isSelectAny = (selector == '*');\n      const isSelectRoot = (selector == ':root');\n      let {target} = event;\n      while (target) {\n\n        // Target must be contained by this root.\n        if (!this.contains(target)) {\n          break;\n        }\n        // `:scope` context must contain the target.\n        if (selectionMethod == 'scope' &&\n            !isSelectRoot && !context.contains(target)) {\n          break;\n        }\n        // `closest()` target must contain the conext.\n        if (selectionMethod == 'closest' && !target.contains(context)) {\n          // However, the search must continue!\n          target = target.parentElement;\n          continue;\n        }\n\n        // Check if the target matches the selector.\n        if (isSelectAny ||\n            (isSelectRoot && target == rootElement) ||\n            matchesNoInline(target, selector)) {\n          listener(target, event);\n          // Don't fire the event multiple times even if the more than one\n          // ancestor matches the selector.\n          break;\n        }\n\n        target = target.parentElement;\n      }\n    };\n  }\n\n  /**\n   * Returns the promise that will be resolved as soon as the elements within\n   * the root have been loaded inside the first viewport of the root.\n   * @return {!Promise}\n   * @abstract\n   */\n  whenIniLoaded() {}\n\n  /**\n   * Returns the visibility root corresponding to this analytics root (ampdoc\n   * or embed). The visibility root is created lazily as needed and takes\n   * care of all visibility tracking functions.\n   * @return {!./visibility-manager.VisibilityManager}\n   */\n  getVisibilityManager() {\n    if (!this.visibilityManager_) {\n      this.visibilityManager_ = this.createVisibilityManager();\n    }\n    return this.visibilityManager_;\n  }\n\n  /**\n   * @return {!./visibility-manager.VisibilityManager}\n   * @protected\n   * @abstract\n   */\n  createVisibilityManager() {}\n}\n\n\n/**\n * The implementation of the analytics root for an ampdoc.\n */\nexport class AmpdocAnalyticsRoot extends AnalyticsRoot {\n  /**\n   * @param {!../../../src/service/ampdoc-impl.AmpDoc} ampdoc\n   */\n  constructor(ampdoc) {\n    super(ampdoc, /* parent */ null);\n  }\n\n  /** @override */\n  getType() {\n    return 'ampdoc';\n  }\n\n  /** @override */\n  getRoot() {\n    return this.ampdoc.getRootNode();\n  }\n\n  /** @override */\n  getHostElement() {\n    // ampdoc is always the root of everything - no host.\n    return null;\n  }\n\n  /** @override */\n  signals() {\n    return this.ampdoc.signals();\n  }\n\n  /** @override */\n  getElementById(id) {\n    return this.ampdoc.getElementById(id);\n  }\n\n  /** @override */\n  whenIniLoaded() {\n    const viewport = Services.viewportForDoc(this.ampdoc);\n    let rect;\n    if (getMode(this.ampdoc.win).runtime == 'inabox') {\n      // TODO(dvoytenko, #7971): This is currently addresses incorrect position\n      // calculations in a in-a-box viewport where all elements are offset\n      // to the bottom of the embed. The current approach, even if fixed, still\n      // creates a significant probability of risk condition.\n      // Once address, we can simply switch to the 0/0 approach in the `else`\n      // clause.\n      rect = viewport.getLayoutRect(this.getRootElement());\n    } else {\n      const size = viewport.getSize();\n      rect = layoutRectLtwh(0, 0, size.width, size.height);\n    }\n    return whenContentIniLoad(this.ampdoc, this.ampdoc.win, rect);\n  }\n\n  /** @override */\n  createVisibilityManager() {\n    return new VisibilityManagerForDoc(this.ampdoc);\n  }\n}\n\n\n/**\n * The implementation of the analytics root for FIE.\n */\nexport class EmbedAnalyticsRoot extends AnalyticsRoot {\n  /**\n   * @param {!../../../src/service/ampdoc-impl.AmpDoc} ampdoc\n   * @param {!../../../src/friendly-iframe-embed.FriendlyIframeEmbed} embed\n   * @param {?AnalyticsRoot} parent\n   */\n  constructor(ampdoc, embed, parent) {\n    super(ampdoc, parent);\n    /** @const */\n    this.embed = embed;\n  }\n\n  /** @override */\n  getType() {\n    return 'embed';\n  }\n\n  /** @override */\n  getRoot() {\n    return this.embed.win.document;\n  }\n\n  /** @override */\n  getHostElement() {\n    return this.embed.iframe;\n  }\n\n  /** @override */\n  signals() {\n    return this.embed.signals();\n  }\n\n  /** @override */\n  getElementById(id) {\n    return this.embed.win.document.getElementById(id);\n  }\n\n  /** @override */\n  whenIniLoaded() {\n    return this.embed.whenIniLoaded();\n  }\n\n  /** @override */\n  createVisibilityManager() {\n    return new VisibilityManagerForEmbed(\n        this.parent.getVisibilityManager(),\n        this.embed);\n  }\n}\n\n\n/**\n * @param  {!Element} el\n * @param  {string} selector\n * @return {boolean}\n */\nfunction matchesNoInline(el, selector) {\n  try {\n    return matches(el, selector);\n  } catch (e) {\n    user().error(TAG, 'Bad query selector.', selector, e);\n    return false;\n  }\n}\n","/**\n * Copyright 2018 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {getMode} from '../../../src/mode';\n\n/** @typedef {{\n *    trigger: string,\n *    timestamp: null,\n *    extraUrlParams: ?JsonObject\n *  }} */\nexport let batchSegmentDef;\n\n/**\n * Please register your batch plugin function below.\n * Please keep the object in alphabetic order.\n * Note: extraUrlParams passed in are not encoded. Please make sure to proper\n * encode segments and make sure the final output url is valid.\n */\nexport const BatchingPluginFunctions = {\n  '_ping_': ping,\n};\n\n\n/**\n * Please add your batch plugin function below in alphabetic order. All batch\n * plugin function should accept input of a string, an array of batchSegment\n * Then return a string. Note: extraUrlParams passed in are not encoded. Please\n * make sure to proper encode segments and make sure the final output url is\n * valid.\n */\n\n// Below is a function prototype for easy copy\n// /**\n//  * @param {string} baseUrl\n//  * @param {Array<!batchSegmentDef>} batchSegments\n//  * @return {string}\n//  */\n// function ping(baseUrl, batchSegments) {}\n\n/**\n * @param {string} unusedBaseUrlForTesting\n * @param {Array<!batchSegmentDef>} unusedBatchSegmentsForTesting\n * @return {string}\n */\nfunction ping(unusedBaseUrlForTesting, unusedBatchSegmentsForTesting) {\n  if (getMode().localDev || getMode().test) {\n    return 'testFinalUrl';\n  }\n  throw new Error('batchPlugin _ping_ is for testing only');\n}\n","/**\n * Copyright 2018 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {ANALYTICS_CONFIG} from './vendors';\nimport {Services} from '../../../src/services';\nimport {assertHttpsUrl} from '../../../src/url';\nimport {dev, user} from '../../../src/log';\nimport {dict, hasOwn} from '../../../src/utils/object';\nimport {getMode} from '../../../src/mode';\nimport {isArray, isObject} from '../../../src/types';\nimport {isJsonScriptTag} from '../../../src/dom';\nimport {parseJson} from '../../../src/json';\nimport {toWin} from '../../../src/types';\n\nconst TAG = 'analytics-config';\n\nexport class AnalyticsConfig {\n\n  /**\n   * @param {!Element} element\n   */\n  constructor(element) {\n\n    /** @private {!Element} */\n    this.element_ = element;\n\n    /** @private {?Window} */\n    this.win_ = null;\n\n    /**\n     * @const {!JsonObject} Copied here for tests.\n     * @private\n     */\n    this.predefinedConfig_ = ANALYTICS_CONFIG;\n\n    /**\n     * @private {JsonObject}\n     */\n    this.config_ = dict();\n\n    /**\n     * @private {JsonObject}\n     */\n    this.remoteConfig_ = dict();\n\n    /** @private {boolean} */\n    this.isSandbox_ = false;\n  }\n\n  /**\n   * @return {!Promise<JsonObject>}\n   */\n  loadConfig() {\n    this.win_ = this.element_.ownerDocument.defaultView;\n    this.isSandbox_ = this.element_.hasAttribute('sandbox');\n\n    return this.fetchRemoteConfig_()\n        .then(this.processConfigs_.bind(this))\n        .then(() => this.config_);\n  }\n\n  /**\n   * Returns a promise that resolves when configuration is re-written if\n   * configRewriter is configured by a vendor.\n   *\n   * @private\n   * @return {!Promise<undefined>}\n   */\n  processConfigs_() {\n    const configRewriterUrl = this.getConfigRewriter_()['url'];\n\n    const config = dict({});\n    const inlineConfig = this.getInlineConfigNoInline();\n    this.validateTransport_(inlineConfig);\n    mergeObjects(inlineConfig, config);\n    mergeObjects(this.remoteConfig_, config);\n\n    if (!configRewriterUrl || this.isSandbox_) {\n      this.config_ = this.mergeConfigs_(config);\n      // use default configuration merge.\n      return Promise.resolve();\n    }\n\n    assertHttpsUrl(configRewriterUrl, this.element_);\n    const TAG = this.getName_();\n    dev().fine(TAG, 'Rewriting config', configRewriterUrl);\n\n    const fetchConfig = {\n      method: 'POST',\n      body: config,\n      requireAmpResponseSourceOrigin: false,\n    };\n    if (this.element_.hasAttribute('data-credentials')) {\n      fetchConfig.credentials = this.element_.getAttribute('data-credentials');\n    }\n    return Services.urlReplacementsForDoc(this.element_)\n        .expandUrlAsync(configRewriterUrl)\n        .then(expandedUrl => {\n          return Services.xhrFor(toWin(this.win_)).fetchJson(\n              expandedUrl, fetchConfig);\n        })\n        .then(res => res.json())\n        .then(jsonValue => {\n          this.config_ = this.mergeConfigs_(jsonValue);\n          dev().fine(TAG, 'Configuration re-written', configRewriterUrl);\n        }, err => {\n          user().error(TAG,\n              'Error rewriting configuration: ', configRewriterUrl, err);\n        });\n  }\n\n  /**\n   * Returns a promise that resolves when remote config is ready (or\n   * immediately if no remote config is specified.)\n   * @private\n   * @return {!Promise<undefined>}\n   */\n  fetchRemoteConfig_() {\n    let remoteConfigUrl = this.element_.getAttribute('config');\n    if (!remoteConfigUrl || this.isSandbox_) {\n      return Promise.resolve();\n    }\n    assertHttpsUrl(remoteConfigUrl, this.element_);\n    const TAG = this.getName_();\n    dev().fine(TAG, 'Fetching remote config', remoteConfigUrl);\n    const fetchConfig = {\n      requireAmpResponseSourceOrigin: false,\n    };\n    if (this.element_.hasAttribute('data-credentials')) {\n      fetchConfig.credentials = this.element_.getAttribute('data-credentials');\n    }\n    return Services.urlReplacementsForDoc(this.element_)\n        .expandUrlAsync(remoteConfigUrl)\n        .then(expandedUrl => {\n          remoteConfigUrl = expandedUrl;\n          return Services.xhrFor(toWin(this.win_)).fetchJson(\n              remoteConfigUrl, fetchConfig);\n        })\n        .then(res => res.json())\n        .then(jsonValue => {\n          this.remoteConfig_ = jsonValue;\n          dev().fine(TAG, 'Remote config loaded', remoteConfigUrl);\n        }, err => {\n          user().error(TAG,\n              'Error loading remote config: ', remoteConfigUrl, err);\n        });\n  }\n\n  /**\n   * Merges various sources of configs and stores them in a member variable.\n   *\n   * Order of precedence for configs from highest to lowest:\n   * - Remote config: specified through an attribute of the tag.\n   * - Inline config: specified insize the tag.\n   * - Predefined config: Defined as part of the platform.\n   * - Default config: Built-in config shared by all amp-analytics tags.\n   *\n   * @private\n   * @param {!JsonObject} rewrittenConfig\n   * @return {!JsonObject}\n   */\n  mergeConfigs_(rewrittenConfig) {\n    // Initialize config with analytics related vars.\n    const config = dict({\n      'vars': {\n        'requestCount': 0,\n      },\n    });\n    const defaultConfig = this.predefinedConfig_['default'] || {};\n    mergeObjects(expandConfigRequest(defaultConfig), config);\n    mergeObjects(expandConfigRequest(this.getTypeConfig_()), config,\n        /* predefined */ true);\n    mergeObjects(expandConfigRequest(rewrittenConfig), config);\n    return config;\n  }\n\n  /**\n   * Reads configRewriter from a vendor config.\n   * @return {!JsonObject}\n   */\n  getConfigRewriter_() {\n    return this.getTypeConfig_()['configRewriter'] || {};\n  }\n\n  /**\n   * Reads a vendor configuration.\n   * @return {!JsonObject}\n   */\n  getTypeConfig_() {\n    const type = this.element_.getAttribute('type');\n    return this.predefinedConfig_[type] || {};\n  }\n\n  /**\n   * @private\n   * @return {!JsonObject}\n   */\n  getInlineConfigNoInline() {\n    if (this.element_.CONFIG) {\n      // If the analytics element is created by runtime, return cached config.\n      return this.element_.CONFIG;\n    }\n    let inlineConfig = {};\n    const TAG = this.getName_();\n    try {\n      const {children} = this.element_;\n      if (children.length == 1) {\n        const child = children[0];\n        if (isJsonScriptTag(child)) {\n          inlineConfig = parseJson(children[0].textContent);\n        } else {\n          user().error(TAG, 'The analytics config should ' +\n              'be put in a <script> tag with type=\"application/json\"');\n        }\n      } else if (children.length > 1) {\n        user().error(TAG, 'The tag should contain only one' +\n            ' <script> child.');\n      }\n    }\n    catch (er) {\n      user().error(TAG, 'Analytics config could not be ' +\n          'parsed. Is it in a valid JSON format?', er);\n    }\n    return /** @type {!JsonObject} */ (inlineConfig);\n  }\n\n  /**\n   * Validates transport configuration.\n   * @param {!JsonObject} inlineConfig\n   */\n  validateTransport_(inlineConfig) {\n    const type = this.element_.getAttribute('type');\n    if (this.predefinedConfig_[type]) {\n      // TODO(zhouyx, #7096) Track overwrite percentage. Prevent transport\n      // overwriting\n      if (inlineConfig['transport'] || this.remoteConfig_['transport']) {\n        const TAG = this.getName_();\n        user().error(TAG, 'Inline or remote config should not ' +\n            'overwrite vendor transport settings');\n      }\n    }\n\n    // Do NOT allow inline or remote config to use 'transport: iframe'\n    if (inlineConfig['transport'] && inlineConfig['transport']['iframe']) {\n      user().error(TAG, 'Inline configs are not allowed to ' +\n          'specify transport iframe');\n      if (!getMode().localDev || getMode().test) {\n        inlineConfig['transport']['iframe'] = undefined;\n      }\n    }\n\n    if (this.remoteConfig_['transport'] &&\n        this.remoteConfig_['transport']['iframe']) {\n      user().error(TAG, 'Remote configs are not allowed to ' +\n          'specify transport iframe');\n      this.remoteConfig_['transport']['iframe'] = undefined;\n    }\n  }\n\n  /**\n   * @return {string} Returns a string to identify this tag. May not be unique\n   * if the element id is not unique.\n   * @private\n   */\n  getName_() {\n    return 'AmpAnalytics ' +\n        (this.element_.getAttribute('id') || '<unknown id>');\n  }\n}\n\n\n/**\n * Merges two objects. If the value is array or plain object, the values are\n * merged otherwise the value is overwritten.\n *\n * @param {Object|Array} from Object or array to merge from\n * @param {Object|Array} to Object or Array to merge into\n * @param {boolean=} opt_predefinedConfig\n */\nexport function mergeObjects(from, to, opt_predefinedConfig) {\n  if (to === null || to === undefined) {\n    to = {};\n  }\n\n  // Assert that optouts are allowed only in predefined configs.\n  // The last expression adds an exception of known, safe optout function\n  // that is already being used in the wild.\n  user().assert(opt_predefinedConfig\n      || !from || !from['optout']\n      || from['optout'] == '_gaUserPrefs.ioo',\n  'optout property is only available to vendor config.');\n\n  for (const property in from) {\n    user().assert(opt_predefinedConfig || property != 'iframePing',\n        'iframePing config is only available to vendor config.');\n    // Only deal with own properties.\n    if (hasOwn(from, property)) {\n      if (isArray(from[property])) {\n        if (!isArray(to[property])) {\n          to[property] = [];\n        }\n        to[property] = mergeObjects(from[property], to[property],\n            opt_predefinedConfig);\n      } else if (isObject(from[property])) {\n        if (!isObject(to[property])) {\n          to[property] = {};\n        }\n        to[property] = mergeObjects(from[property], to[property],\n            opt_predefinedConfig);\n      } else {\n        to[property] = from[property];\n      }\n    }\n  }\n  return to;\n}\n\n/**\n * Expand config's request to object\n * @param {!JsonObject} config\n * @visibleForTesting\n */\nexport function expandConfigRequest(config) {\n  if (!config['requests']) {\n    return config;\n  }\n  for (const k in config['requests']) {\n    if (hasOwn(config['requests'], k)) {\n      config['requests'][k] = expandRequestStr(config['requests'][k]);\n    }\n  }\n  return config;\n}\n\n/**\n * Expand single request to an object\n * @param {!JsonObject} request\n */\nfunction expandRequestStr(request) {\n  if (isObject(request)) {\n    return request;\n  }\n  return {\n    'baseUrl': request,\n  };\n}\n","/**\n * Copyright 2017 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {CommonSignals} from '../../../src/common-signals';\nimport {Observable} from '../../../src/observable';\nimport {\n  PlayingStates,\n  VideoAnalyticsDetailsDef,\n  VideoAnalyticsEvents,\n} from '../../../src/video-interface';\nimport {dev, user} from '../../../src/log';\nimport {getData} from '../../../src/event-helper';\nimport {getDataParamsFromAttributes} from '../../../src/dom';\nimport {hasOwn} from '../../../src/utils/object';\nimport {isEnumValue} from '../../../src/types';\nimport {startsWith} from '../../../src/string';\n\nconst MIN_TIMER_INTERVAL_SECONDS = 0.5;\nconst DEFAULT_MAX_TIMER_LENGTH_SECONDS = 7200;\nconst VARIABLE_DATA_ATTRIBUTE_KEY = /^vars(.+)/;\nconst NO_UNLISTEN = function() {};\nconst TAG = 'analytics-events';\n\n/**\n * Events that can result in analytics data to be sent.\n * @const\n * @enum {string}\n */\nexport const AnalyticsEventType = {\n  VISIBLE: 'visible',\n  CLICK: 'click',\n  TIMER: 'timer',\n  SCROLL: 'scroll',\n  HIDDEN: 'hidden',\n};\n\nconst ALLOWED_FOR_ALL_ROOT_TYPES = ['ampdoc', 'embed'];\n\n/**\n * Events that can result in analytics data to be sent.\n * @const {!Object<string, {\n *     name: string,\n *     allowedFor: !Array<string>,\n *     klass: function(new:./events.EventTracker)\n *   }>}\n */\nconst TRACKER_TYPE = Object.freeze({\n  'click': {\n    name: 'click',\n    allowedFor: ALLOWED_FOR_ALL_ROOT_TYPES.concat(['timer']),\n    // Escape the temporal dead zone by not referencing a class directly.\n    klass: function(root) { return new ClickEventTracker(root); },\n  },\n  'custom': {\n    name: 'custom',\n    allowedFor: ALLOWED_FOR_ALL_ROOT_TYPES.concat(['timer']),\n    klass: function(root) { return new CustomEventTracker(root); },\n  },\n  'render-start': {\n    name: 'render-start',\n    allowedFor: ALLOWED_FOR_ALL_ROOT_TYPES.concat(['timer', 'visible']),\n    klass: function(root) { return new SignalTracker(root); },\n  },\n  'ini-load': {\n    name: 'ini-load',\n    allowedFor: ALLOWED_FOR_ALL_ROOT_TYPES.concat(['timer', 'visible']),\n    klass: function(root) { return new IniLoadTracker(root); },\n  },\n  'timer': {\n    name: 'timer',\n    allowedFor: ALLOWED_FOR_ALL_ROOT_TYPES,\n    klass: function(root) { return new TimerEventTracker(root); },\n  },\n  'visible': {\n    name: 'visible',\n    allowedFor: ALLOWED_FOR_ALL_ROOT_TYPES.concat(['timer']),\n    klass: function(root) { return new VisibilityTracker(root); },\n  },\n  'hidden': {\n    name: 'visible', // Reuse tracker with visibility\n    allowedFor: ALLOWED_FOR_ALL_ROOT_TYPES.concat(['timer']),\n    klass: function(root) { return new VisibilityTracker(root); },\n  },\n  'video': {\n    name: 'video',\n    allowedFor: ALLOWED_FOR_ALL_ROOT_TYPES.concat(['timer']),\n    klass: function(root) { return new VideoEventTracker(root); },\n  },\n});\n\n/**\n * @param {string} triggerType\n * @return {boolean}\n */\nfunction isVideoTriggerType(triggerType) {\n  return startsWith(triggerType, 'video');\n}\n\n/**\n * @param {string} triggerType\n * @return {boolean}\n */\nfunction isReservedTriggerType(triggerType) {\n  return !!TRACKER_TYPE[triggerType] ||\n      isEnumValue(AnalyticsEventType, triggerType);\n}\n\n/**\n * @param {string} eventType\n * @return {string}\n */\nexport function getTrackerKeyName(eventType) {\n  if (isVideoTriggerType(eventType)) {\n    return 'video';\n  }\n  if (!isReservedTriggerType(eventType)) {\n    return 'custom';\n  }\n  return hasOwn(TRACKER_TYPE, eventType) ?\n    TRACKER_TYPE[eventType].name : eventType;\n}\n\n/**\n * @param {string} parentType\n * @return {!Object<string, function(new:EventTracker)>}\n */\nexport function getTrackerTypesForParentType(parentType) {\n  const filtered = {};\n  Object.keys(TRACKER_TYPE).forEach(key => {\n    if (hasOwn(TRACKER_TYPE, key) &&\n        TRACKER_TYPE[key].allowedFor.indexOf(parentType) != -1) {\n      filtered[key] = TRACKER_TYPE[key].klass;\n    }\n  }, this);\n  return filtered;\n}\n\n/**\n * @interface\n */\nclass SignalTrackerDef {\n  /**\n   * @param {string} unusedEventType\n   * @return {!Promise}\n   */\n  getRootSignal(unusedEventType) {}\n\n  /**\n   * @param {string} unusedEventType\n   * @param {!Element} unusedElement\n   * @return {!Promise}\n   */\n  getElementSignal(unusedEventType, unusedElement) {}\n}\n\n/**\n * The analytics event.\n */\nexport class AnalyticsEvent {\n  /**\n   * @param {!Element} target The most relevant target element.\n   * @param {string} type The type of event.\n   * @param {!Object<string, string>=} opt_vars A map of vars and their values.\n   */\n  constructor(target, type, opt_vars) {\n    /** @const */\n    this.target = target;\n    /** @const */\n    this.type = type;\n    /** @const */\n    this.vars = opt_vars || Object.create(null);\n  }\n}\n\n\n/**\n * The base class for all trackers. A tracker tracks all events of the same\n * type for a single analytics root.\n *\n * @implements {../../../src/service.Disposable}\n * @abstract\n * @visibleForTesting\n */\nexport class EventTracker {\n  /**\n   * @param {!./analytics-root.AnalyticsRoot} root\n   */\n  constructor(root) {\n    /** @const */\n    this.root = root;\n  }\n\n  /** @override @abstract */\n  dispose() {}\n\n  /**\n   * @param {!Element} unusedContext\n   * @param {string} unusedEventType\n   * @param {!JsonObject} unusedConfig\n   * @param {function(!AnalyticsEvent)} unusedListener\n   * @return {!UnlistenDef}\n   * @abstract\n   */\n  add(unusedContext, unusedEventType, unusedConfig, unusedListener) {}\n}\n\n\n/**\n * Tracks custom events.\n */\nexport class CustomEventTracker extends EventTracker {\n  /**\n   * @param {!./analytics-root.AnalyticsRoot} root\n   */\n  constructor(root) {\n    super(root);\n\n    /** @const @private {!Object<string, !Observable<!AnalyticsEvent>>} */\n    this.observables_ = {};\n\n    /**\n     * Early events have to be buffered because there's no way to predict\n     * how fast all `amp-analytics` elements will be instrumented.\n     * @private {!Object<string, !Array<!AnalyticsEvent>>|undefined}\n     */\n    this.buffer_ = {};\n\n    /**\n     * Sandbox events get their own buffer, because handler to those events will\n     * be added after parent element's layout. (Time varies, can be later than\n     * 10s) sandbox events buffer will never expire but will cleared when\n     * handler is ready.\n     * @private {!Object<string, !Array<!AnalyticsEvent>|undefined>|undefined}\n     */\n    this.sandboxBuffer_ = {};\n\n    // Stop buffering of custom events after 10 seconds. Assumption is that all\n    // `amp-analytics` elements will have been instrumented by this time.\n    setTimeout(() => {\n      this.buffer_ = undefined;\n    }, 10000);\n  }\n\n  /** @override */\n  dispose() {\n    this.buffer_ = undefined;\n    this.sandboxBuffer_ = undefined;\n    for (const k in this.observables_) {\n      this.observables_[k].removeAll();\n    }\n  }\n\n  /** @override */\n  add(context, eventType, config, listener) {\n    let selector = config['selector'];\n    if (!selector) {\n      selector = ':root';\n    }\n    const selectionMethod = config['selectionMethod'] || null;\n\n    const targetReady =\n        this.root.getElement(context, selector, selectionMethod);\n\n    const isSandboxEvent = startsWith(eventType, 'sandbox-');\n\n    // Push recent events if any.\n    const buffer = isSandboxEvent ?\n      this.sandboxBuffer_ && this.sandboxBuffer_[eventType] :\n      this.buffer_ && this.buffer_[eventType];\n\n    if (buffer) {\n      const bufferLength = buffer.length;\n      targetReady.then(target => {\n        setTimeout(() => {\n          for (let i = 0; i < bufferLength; i++) {\n            const event = buffer[i];\n            if (target.contains(event.target)) {\n              listener(event);\n            }\n          }\n          if (isSandboxEvent) {\n            // We assume sandbox event will only has single listener.\n            // It is safe to clear buffer once handler is ready.\n            this.sandboxBuffer_[eventType] = undefined;\n          }\n        }, 1);\n      });\n    }\n\n    let observables = this.observables_[eventType];\n    if (!observables) {\n      observables = new Observable();\n      this.observables_[eventType] = observables;\n    }\n\n    return this.observables_[eventType].add(event => {\n      // Wait for target selected\n      targetReady.then(target => {\n        if (target.contains(event.target)) {\n          listener(event);\n        }\n      });\n    });\n  }\n\n  /**\n   * Triggers a custom event for the associated root.\n   * @param {!AnalyticsEvent} event\n   */\n  trigger(event) {\n    const eventType = event.type;\n    const isSandboxEvent = startsWith(eventType, 'sandbox-');\n    const observables = this.observables_[eventType];\n\n    // If listeners already present - trigger right away.\n    if (observables) {\n      observables.fire(event);\n      if (isSandboxEvent) {\n        // No need to buffer sandbox event if handler ready\n        return;\n      }\n    }\n\n    // Create buffer and enqueue buffer if needed\n    if (isSandboxEvent) {\n      this.sandboxBuffer_[eventType] = this.sandboxBuffer_[eventType] || [];\n      this.sandboxBuffer_[eventType].push(event);\n    } else {\n      // Check if buffer has expired\n      if (this.buffer_) {\n        this.buffer_[eventType] = this.buffer_[eventType] || [];\n        this.buffer_[eventType].push(event);\n      }\n    }\n  }\n}\n\n\n/**\n * Tracks click events.\n */\nexport class ClickEventTracker extends EventTracker {\n  /**\n   * @param {!./analytics-root.AnalyticsRoot} root\n   */\n  constructor(root) {\n    super(root);\n\n    /** @private {!Observable<!Event>} */\n    this.clickObservable_ = new Observable();\n\n    /** @private @const {function(!Event)} */\n    this.boundOnClick_ = this.clickObservable_.fire.bind(this.clickObservable_);\n    this.root.getRoot().addEventListener('click', this.boundOnClick_);\n  }\n\n  /** @override */\n  dispose() {\n    this.root.getRoot().removeEventListener('click', this.boundOnClick_);\n    this.clickObservable_.removeAll();\n  }\n\n  /** @override */\n  add(context, eventType, config, listener) {\n    const selector = user().assert(config['selector'],\n        'Missing required selector on click trigger');\n    const selectionMethod = config['selectionMethod'] || null;\n    return this.clickObservable_.add(this.root.createSelectiveListener(\n        this.handleClick_.bind(this, listener),\n        (context.parentElement || context),\n        selector,\n        selectionMethod));\n  }\n\n  /**\n   * @param {function(!AnalyticsEvent)} listener\n   * @param {!Element} target\n   * @param {!Event} unusedEvent\n   * @private\n   */\n  handleClick_(listener, target, unusedEvent) {\n    const params = getDataParamsFromAttributes(\n        target,\n        /* computeParamNameFunc */ undefined,\n        VARIABLE_DATA_ATTRIBUTE_KEY);\n    listener(new AnalyticsEvent(target, 'click', params));\n  }\n}\n\n\n/**\n * Tracks events based on signals.\n * @implements {SignalTrackerDef}\n */\nexport class SignalTracker extends EventTracker {\n  /**\n   * @param {!./analytics-root.AnalyticsRoot} root\n   */\n  constructor(root) {\n    super(root);\n  }\n\n  /** @override */\n  dispose() {\n  }\n\n  /** @override */\n  add(context, eventType, config, listener) {\n    let target;\n    let signalsPromise;\n    const selector = config['selector'] || ':root';\n    if (selector == ':root' || selector == ':host') {\n      // Root selectors are delegated to analytics roots.\n      target = this.root.getRootElement();\n      signalsPromise = this.getRootSignal(eventType);\n    } else {\n      // Look for the AMP-element. Wait for DOM to be fully parsed to avoid\n      // false missed searches.\n      const selectionMethod = config['selectionMethod'];\n      signalsPromise = this.root.getAmpElement(\n          (context.parentElement || context),\n          selector,\n          selectionMethod\n      ).then(element => {\n        target = element;\n        return this.getElementSignal(eventType, target);\n      });\n    }\n\n    // Wait for the target and the event signal.\n    signalsPromise.then(() => {\n      listener(new AnalyticsEvent(target, eventType));\n    });\n    return NO_UNLISTEN;\n  }\n\n  /** @override */\n  getRootSignal(eventType) {\n    return this.root.signals().whenSignal(eventType);\n  }\n\n  /** @override */\n  getElementSignal(eventType, element) {\n    if (typeof element.signals != 'function') {\n      return Promise.resolve();\n    }\n    return element.signals().whenSignal(eventType);\n  }\n}\n\n/**\n * Tracks when the elements in the first viewport has been loaded - \"ini-load\".\n * @implements {SignalTrackerDef}\n */\nexport class IniLoadTracker extends EventTracker {\n  /**\n   * @param {!./analytics-root.AnalyticsRoot} root\n   */\n  constructor(root) {\n    super(root);\n  }\n\n  /** @override */\n  dispose() {\n  }\n\n  /** @override */\n  add(context, eventType, config, listener) {\n    let target;\n    let promise;\n    const selector = config['selector'] || ':root';\n    if (selector == ':root' || selector == ':host') {\n      // Root selectors are delegated to analytics roots.\n      target = this.root.getRootElement();\n      promise = this.getRootSignal();\n    } else {\n      // An AMP-element. Wait for DOM to be fully parsed to avoid\n      // false missed searches.\n      const selectionMethod = config['selectionMethod'];\n      promise = this.root.getAmpElement(\n          (context.parentElement || context),\n          selector,\n          selectionMethod\n      ).then(element => {\n        target = element;\n        return this.getElementSignal('ini-load', target);\n      });\n    }\n    // Wait for the target and the event.\n    promise.then(() => {\n      listener(new AnalyticsEvent(target, eventType));\n    });\n    return NO_UNLISTEN;\n  }\n\n  /** @override */\n  getRootSignal() {\n    return this.root.whenIniLoaded();\n  }\n\n  /** @override */\n  getElementSignal(unusedEventType, element) {\n    if (typeof element.signals != 'function') {\n      return Promise.resolve();\n    }\n    const signals = element.signals();\n    return Promise.race([\n      signals.whenSignal(CommonSignals.INI_LOAD),\n      signals.whenSignal(CommonSignals.LOAD_END),\n    ]);\n  }\n}\n\n\n/**\n * Timer event handler.\n */\nclass TimerEventHandler {\n  /**\n   * @param {JsonObject} timerSpec The timer specification.\n   * @param {function(): UnlistenDef=} opt_startBuilder Factory for building\n   *     start trackers for this timer.\n   * @param {function(): UnlistenDef=} opt_stopBuilder Factory for building stop\n   *     trackers for this timer.\n   */\n  constructor(timerSpec, opt_startBuilder, opt_stopBuilder) {\n    /** @private {number|undefined} */\n    this.intervalId_ = undefined;\n\n    user().assert('interval' in timerSpec,\n        'Timer interval specification required');\n    /** @private @const {number} */\n    this.intervalLength_ = Number(timerSpec['interval']) || 0;\n    user().assert(this.intervalLength_ >= MIN_TIMER_INTERVAL_SECONDS,\n        'Bad timer interval specification');\n\n    /** @private @const {number} */\n    this.maxTimerLength_ = 'maxTimerLength' in timerSpec ?\n      Number(timerSpec['maxTimerLength']) : DEFAULT_MAX_TIMER_LENGTH_SECONDS;\n    user().assert(this.maxTimerLength_ > 0, 'Bad maxTimerLength specification');\n\n    /** @private @const {boolean} */\n    this.maxTimerInSpec_ = 'maxTimerLength' in timerSpec;\n\n    /** @private @const {boolean} */\n    this.callImmediate_ = 'immediate' in timerSpec ?\n      Boolean(timerSpec['immediate']) : true;\n\n    /** @private {?function()} */\n    this.intervalCallback_ = null;\n\n    /** @private {?UnlistenDef} */\n    this.unlistenStart_ = null;\n\n    /** @private {?UnlistenDef} */\n    this.unlistenStop_ = null;\n\n    /** @private @const {?function(): UnlistenDef} */\n    this.startBuilder_ = opt_startBuilder || null;\n\n    /** @private @const {?function(): UnlistenDef} */\n    this.stopBuilder_ = opt_stopBuilder || null;\n\n    /** @private {number|undefined} */\n    this.startTime_ = undefined; // milliseconds\n\n    /** @private {number|undefined} */\n    this.lastRequestTime_ = undefined; // milliseconds\n  }\n\n  /**\n   * @param {function()} startTimer\n   */\n  init(startTimer) {\n    if (!this.startBuilder_) {\n      // Timer starts on load.\n      startTimer();\n    } else {\n      // Timer starts on event.\n      this.listenForStart_();\n    }\n  }\n\n  /**\n   * Unlistens for start and stop.\n   */\n  dispose() {\n    this.unlistenForStop_();\n    this.unlistenForStart_();\n  }\n\n  /** @private */\n  listenForStart_() {\n    if (this.startBuilder_) {\n      this.unlistenStart_ = this.startBuilder_();\n    }\n  }\n\n  /** @private */\n  unlistenForStart_() {\n    if (this.unlistenStart_) {\n      this.unlistenStart_();\n      this.unlistenStart_ = null;\n    }\n  }\n\n  /** @private */\n  listenForStop_() {\n    if (this.stopBuilder_) {\n      try {\n        this.unlistenStop_ = this.stopBuilder_();\n      } catch (e) {\n        this.dispose(); // Stop timer and then throw error.\n        throw e;\n      }\n    }\n  }\n\n  /** @private */\n  unlistenForStop_() {\n    if (this.unlistenStop_) {\n      this.unlistenStop_();\n      this.unlistenStop_ = null;\n    }\n  }\n\n  /** @return {boolean} */\n  isRunning() {\n    return !!this.intervalId_;\n  }\n\n  /**\n   * @param {!Window} win\n   * @param {function()} timerCallback\n   * @param {function()} timeoutCallback\n   */\n  startIntervalInWindow(win, timerCallback, timeoutCallback) {\n    if (this.isRunning()) {\n      return;\n    }\n    this.startTime_ = Date.now();\n    this.lastRequestTime_ = undefined;\n    this.intervalCallback_ = timerCallback;\n    this.intervalId_ = win.setInterval(() => {\n      timerCallback();\n    }, this.intervalLength_ * 1000);\n\n    // If there's no way to turn off the timer, cap it.\n    if (!this.stopBuilder_ || (this.stopBuilder_ && this.maxTimerInSpec_)) {\n      win.setTimeout(() => {\n        timeoutCallback();\n      }, this.maxTimerLength_ * 1000);\n    }\n\n    this.unlistenForStart_();\n    if (this.callImmediate_) {\n      timerCallback();\n    }\n    this.listenForStop_();\n  }\n\n  /**\n   * @param {!Window} win\n   * @restricted\n   */\n  stopTimer_(win) {\n    if (!this.isRunning()) {\n      return;\n    }\n    this.intervalCallback_();\n    this.intervalCallback_ = null;\n    win.clearInterval(this.intervalId_);\n    this.intervalId_ = undefined;\n    this.lastRequestTime_ = undefined;\n    this.unlistenForStop_();\n    this.listenForStart_();\n  }\n\n  /** @private @return {number} */\n  calculateDuration_() {\n    if (this.startTime_) {\n      return Date.now() - (this.lastRequestTime_ || this.startTime_);\n    }\n    return 0;\n  }\n\n  /** @return {{timerDuration: number, timerStart: number}} */\n  getTimerVars() {\n    let timerDuration = 0;\n    if (this.isRunning()) {\n      timerDuration = this.calculateDuration_();\n      this.lastRequestTime_ = Date.now();\n    }\n    return {\n      'timerDuration': timerDuration,\n      'timerStart': this.startTime_ || 0,\n    };\n  }\n}\n\n\n/**\n * Tracks timer events.\n */\nexport class TimerEventTracker extends EventTracker {\n  /**\n   * @param {!./analytics-root.AnalyticsRoot} root\n   */\n  constructor(root) {\n    super(root);\n    /** @const @private {!Object<number, TimerEventHandler>} */\n    this.trackers_ = {};\n\n    /** @private {number} */\n    this.timerIdSequence_ = 1;\n  }\n\n  /**\n   * @return {!Array<number>}\n   * @visibleForTesting\n   */\n  getTrackedTimerKeys() {\n    return /** @type {!Array<number>} */ (Object.keys(this.trackers_));\n  }\n\n  /** @override */\n  dispose() {\n    this.getTrackedTimerKeys().forEach(timerId => {\n      this.removeTracker_(timerId);\n    });\n  }\n\n  /** @override */\n  add(context, eventType, config, listener) {\n    const timerSpec = config['timerSpec'];\n    user().assert(timerSpec && typeof timerSpec == 'object',\n        'Bad timer specification');\n    const timerStart = 'startSpec' in timerSpec ? timerSpec['startSpec'] : null;\n    user().assert(!timerStart || typeof timerStart == 'object',\n        'Bad timer start specification');\n    const timerStop = 'stopSpec' in timerSpec ? timerSpec['stopSpec'] : null;\n    user().assert((!timerStart && !timerStop) || typeof timerStop == 'object',\n        'Bad timer stop specification');\n\n    const timerId = this.generateTimerId_();\n    let startBuilder;\n    let stopBuilder;\n    if (timerStart) {\n      const startTracker = this.getTracker_(timerStart);\n      user().assert(startTracker, 'Cannot track timer start');\n      startBuilder = startTracker.add.bind(startTracker, context,\n          timerStart['on'], timerStart,\n          this.handleTimerToggle_.bind(this, timerId, eventType, listener));\n    }\n    if (timerStop) {\n      const stopTracker = this.getTracker_(timerStop);\n      user().assert(stopTracker, 'Cannot track timer stop');\n      stopBuilder = stopTracker.add.bind(stopTracker, context,\n          timerStop['on'], timerStop,\n          this.handleTimerToggle_.bind(this, timerId, eventType, listener));\n    }\n\n    const timerHandler = new TimerEventHandler(\n        timerSpec, startBuilder, stopBuilder);\n    this.trackers_[timerId] = timerHandler;\n\n    timerHandler.init(\n        this.startTimer_.bind(this, timerId, eventType, listener));\n    return () => {\n      this.removeTracker_(timerId);\n    };\n  }\n\n  /**\n   * @return {number}\n   * @private\n   */\n  generateTimerId_() {\n    return ++this.timerIdSequence_;\n  }\n\n  /**\n   * @param {!JsonObject} config\n   * @return {?EventTracker}\n   * @private\n   */\n  getTracker_(config) {\n    const eventType = user().assertString(config['on']);\n    const trackerKey = getTrackerKeyName(eventType);\n\n    return this.root.getTrackerForWhitelist(\n        trackerKey, getTrackerTypesForParentType('timer'));\n  }\n\n  /**\n   * Toggles which listeners are active depending on timer state, so no race\n   * conditions can occur in the case where the timer starts and stops on the\n   * same event type from the same target.\n   * @param {number} timerId\n   * @param {string} eventType\n   * @param {function(!AnalyticsEvent)} listener\n   * @private\n   */\n  handleTimerToggle_(timerId, eventType, listener) {\n    const timerHandler = this.trackers_[timerId];\n    if (!timerHandler) {\n      return;\n    }\n    if (timerHandler.isRunning()) {\n      this.stopTimer_(timerId);\n    } else {\n      this.startTimer_(timerId, eventType, listener);\n    }\n  }\n\n  /**\n   * @param {number} timerId\n   * @param {string} eventType\n   * @param {function(!AnalyticsEvent)} listener\n   * @private\n   */\n  startTimer_(timerId, eventType, listener) {\n    const timerHandler = this.trackers_[timerId];\n    const timerCallback = () => {\n      listener(this.createEvent_(timerId, eventType));\n    };\n    timerHandler.startIntervalInWindow(this.root.ampdoc.win, timerCallback,\n        this.removeTracker_.bind(this, timerId));\n  }\n\n  /**\n   * @param {number} timerId\n   * @private\n   */\n  stopTimer_(timerId) {\n    this.trackers_[timerId].stopTimer_(this.root.ampdoc.win);\n  }\n\n  /**\n   * @param {number} timerId\n   * @param {string} eventType\n   * @return {!AnalyticsEvent}\n   * @private\n   */\n  createEvent_(timerId, eventType) {\n    return new AnalyticsEvent(this.root.getRootElement(), eventType,\n        this.trackers_[timerId].getTimerVars());\n  }\n\n  /**\n   * @param {number} timerId\n   * @private\n   */\n  removeTracker_(timerId) {\n    if (this.trackers_[timerId]) {\n      this.stopTimer_(timerId);\n      this.trackers_[timerId].dispose();\n      delete this.trackers_[timerId];\n    }\n  }\n}\n\n\n/**\n * Tracks video session events\n */\nexport class VideoEventTracker extends EventTracker {\n  /**\n   * @param {!./analytics-root.AnalyticsRoot} root\n   */\n  constructor(root) {\n    super(root);\n\n    /** @private {?Observable<!Event>} */\n    this.sessionObservable_ = new Observable();\n\n    /** @private {?function(!Event)} */\n    this.boundOnSession_ =\n        this.sessionObservable_.fire.bind(this.sessionObservable_);\n\n    Object.keys(VideoAnalyticsEvents).forEach(key => {\n      this.root.getRoot().addEventListener(\n          VideoAnalyticsEvents[key], this.boundOnSession_);\n    });\n  }\n\n  /** @override */\n  dispose() {\n    const root = this.root.getRoot();\n    Object.keys(VideoAnalyticsEvents).forEach(key => {\n      root.removeEventListener(VideoAnalyticsEvents[key], this.boundOnSession_);\n    });\n    this.boundOnSession_ = null;\n    this.sessionObservable_ = null;\n  }\n\n  /** @override */\n  add(context, eventType, config, listener) {\n    const videoSpec = config['videoSpec'] || {};\n    const selector = config['selector'] || videoSpec['selector'];\n    const selectionMethod = config['selectionMethod'] || null;\n    const targetReady =\n        this.root.getElement(context, selector, selectionMethod);\n\n    const endSessionWhenInvisible = videoSpec['end-session-when-invisible'];\n    const excludeAutoplay = videoSpec['exclude-autoplay'];\n    const interval = videoSpec['interval'];\n    const on = config['on'];\n\n    let intervalCounter = 0;\n\n    return this.sessionObservable_.add(event => {\n      const {type} = event;\n      const isVisibleType = (type === VideoAnalyticsEvents.SESSION_VISIBLE);\n      const normalizedType =\n          isVisibleType ? VideoAnalyticsEvents.SESSION : type;\n      const details = /** @type {!VideoAnalyticsDetailsDef} */ (getData(event));\n\n      if (normalizedType !== on) {\n        return;\n      }\n\n      if (normalizedType === VideoAnalyticsEvents.SECONDS_PLAYED && !interval) {\n        user().error(TAG, 'video-seconds-played requires interval spec ' +\n            'with non-zero value');\n        return;\n      }\n\n      if (normalizedType === VideoAnalyticsEvents.SECONDS_PLAYED) {\n        intervalCounter++;\n        if (intervalCounter % interval !== 0) {\n          return;\n        }\n      }\n\n      if (isVisibleType && !endSessionWhenInvisible) {\n        return;\n      }\n\n      if (excludeAutoplay && details['state'] === PlayingStates.PLAYING_AUTO) {\n        return;\n      }\n\n      const el = dev().assertElement(event.target,\n          'No target specified by video session event.');\n      targetReady.then(target => {\n        if (target.contains(el)) {\n          listener(new AnalyticsEvent(target, normalizedType, details));\n        }\n      });\n    });\n  }\n}\n\n\n/**\n * Tracks visibility events.\n */\nexport class VisibilityTracker extends EventTracker {\n  /**\n   * @param {!./analytics-root.AnalyticsRoot} root\n   */\n  constructor(root) {\n    super(root);\n\n    /** @private */\n    this.waitForTrackers_ = {};\n  }\n\n  /** @override */\n  dispose() {\n  }\n\n  /** @override */\n  add(context, eventType, config, listener) {\n    const visibilitySpec = config['visibilitySpec'] || {};\n    const selector = config['selector'] || visibilitySpec['selector'];\n    const waitForSpec = visibilitySpec['waitFor'];\n    const visibilityManager = this.root.getVisibilityManager();\n    // special polyfill for eventType: 'hidden'\n    let createReadyReportPromiseFunc = null;\n    if (eventType == 'hidden') {\n      createReadyReportPromiseFunc = this.createReportReadyPromise_.bind(this);\n    }\n\n    // Root selectors are delegated to analytics roots.\n    if (!selector || selector == ':root' || selector == ':host') {\n      // When `selector` is specified, we always use \"ini-load\" signal as\n      // a \"ready\" signal.\n      return visibilityManager.listenRoot(\n          visibilitySpec,\n          this.getReadyPromise(waitForSpec, selector),\n          createReadyReportPromiseFunc,\n          this.onEvent_.bind(\n              this, eventType, listener, this.root.getRootElement()));\n    }\n\n    // An AMP-element. Wait for DOM to be fully parsed to avoid\n    // false missed searches.\n    const selectionMethod = config['selectionMethod'] ||\n          visibilitySpec['selectionMethod'];\n    const unlistenPromise = this.root.getAmpElement(\n        (context.parentElement || context),\n        selector,\n        selectionMethod\n    ).then(element => {\n      return visibilityManager.listenElement(\n          element,\n          visibilitySpec,\n          this.getReadyPromise(waitForSpec, selector, element),\n          createReadyReportPromiseFunc,\n          this.onEvent_.bind(this, eventType, listener, element));\n    });\n    return function() {\n      unlistenPromise.then(unlisten => {\n        unlisten();\n      });\n    };\n  }\n\n  /**\n   * @return {!Promise}\n   */\n  createReportReadyPromise_() {\n    const viewer = this.root.getViewer();\n\n    if (!viewer.isVisible()) {\n      return Promise.resolve();\n    }\n\n    return new Promise(resolve => {\n      viewer.onVisibilityChanged(() => {\n        if (!viewer.isVisible()) {\n          resolve();\n        }\n      });\n    });\n  }\n\n  /**\n   * @param {string|undefined} waitForSpec\n   * @param {string|undefined} selector\n   * @param {Element=} opt_element\n   * @return {?Promise}\n   * @visibleForTesting\n   */\n  getReadyPromise(waitForSpec, selector, opt_element) {\n    if (!waitForSpec) {\n      // Default case:\n      if (!selector) {\n        // waitFor selector is not defined, wait for nothing\n        return null;\n      } else {\n        // otherwise wait for ini-load by default\n        waitForSpec = 'ini-load';\n      }\n    }\n\n    const trackerWhitelist = getTrackerTypesForParentType('visible');\n    user().assert(waitForSpec == 'none' ||\n        trackerWhitelist[waitForSpec] !== undefined,\n    'waitFor value %s not supported', waitForSpec);\n\n    const waitForTracker = this.waitForTrackers_[waitForSpec] ||\n        this.root.getTrackerForWhitelist(waitForSpec, trackerWhitelist);\n    if (waitForTracker) {\n      this.waitForTrackers_[waitForSpec] = waitForTracker;\n    } else {\n      return null;\n    }\n\n    // Wait for root signal if there's no element selected.\n    return opt_element ?\n      waitForTracker.getElementSignal(waitForSpec, opt_element)\n      : waitForTracker.getRootSignal(waitForSpec);\n  }\n\n  /**\n   * @param {string} eventType\n   * @param {function(!AnalyticsEvent)} listener\n   * @param {!Element} target\n   * @param {!Object<string, *>} state\n   * @private\n   */\n  onEvent_(eventType, listener, target, state) {\n    const attr = getDataParamsFromAttributes(\n        target,\n        /* computeParamNameFunc */ undefined,\n        VARIABLE_DATA_ATTRIBUTE_KEY);\n    for (const key in attr) {\n      state[key] = attr[key];\n    }\n    listener(new AnalyticsEvent(target, eventType, state));\n  }\n}\n","/**\n * Copyright 2017 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {MessageType} from '../../../src/3p-frame-messaging';\nimport {SubscriptionApi} from '../../../src/iframe-helper';\nimport {dev} from '../../../src/log';\n\n/** @private @const {string} */\nconst TAG_ = 'amp-analytics.IframeTransportMessageQueue';\n\n/** @private @const {number} */\nconst MAX_QUEUE_SIZE_ = 100;\n\n/**\n * @visibleForTesting\n */\nexport class IframeTransportMessageQueue {\n  /**\n   * Constructor\n   * @param {!Window} win The window element\n   * @param {!HTMLIFrameElement} frame The cross-domain iframe to send\n   * messages to\n   */\n  constructor(win, frame) {\n\n    /** @private {!HTMLIFrameElement} */\n    this.frame_ = frame;\n\n    /** @private {boolean} */\n    this.isReady_ = false;\n\n    /**\n     * @private\n     * {!Array<!../../../src/3p-frame-messaging.IframeTransportEvent>}\n     */\n    this.pendingEvents_ = [];\n\n    /** @private {!../../../src/iframe-helper.SubscriptionApi} */\n    this.postMessageApi_ = new SubscriptionApi(this.frame_,\n        MessageType.SEND_IFRAME_TRANSPORT_EVENTS,\n        true,\n        () => {\n          this.setIsReady();\n        });\n  }\n\n  /**\n   * Returns whether the queue has been marked as ready yet\n   * @return {boolean}\n   * @visibleForTesting\n   */\n  isReady() {\n    return this.isReady_;\n  }\n\n  /**\n   * Indicate that a cross-domain frame is ready to receive messages, and\n   * send all messages that were previously queued for it.\n   * @visibleForTesting\n   */\n  setIsReady() {\n    this.isReady_ = true;\n    this.flushQueue_();\n  }\n\n  /**\n   * Returns how many creativeId -> message(s) mappings there are\n   * @return {number}\n   * @visibleForTesting\n   */\n  queueSize() {\n    return this.pendingEvents_.length;\n  }\n\n  /**\n   * Enqueues an event to be sent to a cross-domain iframe.\n   * @param {!../../../src/3p-frame-messaging.IframeTransportEvent} event\n   * Identifies the event and which Transport instance (essentially which\n   * creative) is sending it.\n   */\n  enqueue(event) {\n    dev().assert(event && event.creativeId && event.message,\n        'Attempted to enqueue malformed message for: ' +\n        event.creativeId);\n    this.pendingEvents_.push(event);\n    if (this.queueSize() >= MAX_QUEUE_SIZE_) {\n      dev().warn(TAG_, 'Exceeded maximum size of queue for: ' +\n          event.creativeId);\n      this.pendingEvents_.shift();\n    }\n    this.flushQueue_();\n  }\n\n  /**\n   * Send queued data (if there is any) to a cross-domain iframe\n   * @private\n   */\n  flushQueue_() {\n    if (this.isReady() && this.queueSize()) {\n      this.postMessageApi_.send(MessageType.IFRAME_TRANSPORT_EVENTS,\n          /** @type {!JsonObject} */\n          ({events: this.pendingEvents_}));\n      this.pendingEvents_ = [];\n    }\n  }\n}\n\n","/**\n * Copyright 2018 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Vendors who have IAB viewability certification may use iframe transport\n * (see ../amp-analytics.md and ../integrating-analytics.md). In this case,\n * put only the specification of the iframe location in the object below.\n *\n * This object is separated from vendors.js to be shared with extensions\n * other than amp-analytics, for instance amp-ad-exit.\n *\n * @const {!JsonObject}\n */\nexport const IFRAME_TRANSPORTS = /** @type {!JsonObject} */ ({\n  'bg': 'https://tpc.googlesyndication.com/b4a/b4a-runner.html',\n  'moat': 'https://js.moatads.com/ampanalytics093284/iframe.html',\n});\n","/**\n * Copyright 2017 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {IframeTransportMessageQueue} from './iframe-transport-message-queue';\nimport {createElementWithAttributes} from '../../../src/dom';\nimport {dev, user} from '../../../src/log';\nimport {getMode} from '../../../src/mode';\nimport {hasOwn} from '../../../src/utils/object';\nimport {isLongTaskApiSupported} from '../../../src/service/jank-meter';\nimport {setStyles} from '../../../src/style';\nimport {urls} from '../../../src/config';\n\n/** @private @const {string} */\nconst TAG_ = 'amp-analytics.IframeTransport';\n\n/** @private @const {number} */\nconst LONG_TASK_REPORTING_THRESHOLD = 5;\n\n/** @typedef {{\n *    frame: Element,\n *    sentinel: string,\n *    usageCount: number,\n *    queue: IframeTransportMessageQueue,\n *  }} */\nexport let FrameData;\n\n/**\n * Get the URL of the client lib\n * @param {!Window} ampWin The window object of the AMP document\n * @param {boolean=} opt_forceProdUrl If true, prod URL will be returned even\n *     in local/test modes.\n * @return {string}\n */\nexport function getIframeTransportScriptUrl(ampWin, opt_forceProdUrl) {\n  if ((getMode().localDev || getMode().test) && !opt_forceProdUrl &&\n      ampWin.parent && ampWin.parent.location) {\n    const loc = ampWin.parent.location;\n    return `${loc.protocol}//${loc.host}/dist/iframe-transport-client-lib.js`;\n  }\n  return urls.thirdParty +\n      '/$internalRuntimeVersion$/iframe-transport-client-v0.js';\n}\n\n/**\n * @visibleForTesting\n */\nexport class IframeTransport {\n  /**\n   * @param {!Window} ampWin The window object of the AMP document\n   * @param {string} type The value of the amp-analytics tag's type attribute\n   * @param {!JsonObject} config\n   * @param {string} id If (potentially) using sendResponseToCreative(), it\n   *     should be something that the recipient can use to identify the\n   *     context of the message, e.g. the resourceID of a DOM element.\n   */\n  constructor(ampWin, type, config, id) {\n    /** @private @const {!Window} */\n    this.ampWin_ = ampWin;\n\n    /** @private @const {string} */\n    this.type_ = type;\n\n    /** @private @const {string} */\n    this.creativeId_ = id;\n\n    dev().assert(config && config['iframe'],\n        'Must supply iframe URL to constructor!');\n    this.frameUrl_ = config['iframe'];\n\n    /** @private {number} */\n    this.numLongTasks_ = 0;\n\n    this.processCrossDomainIframe();\n  }\n\n  /**\n   * Called when a Transport instance is being removed from the DOM\n   */\n  detach() {\n    IframeTransport.markCrossDomainIframeAsDone(this.ampWin_.document,\n        this.type_);\n  }\n\n  /**\n   * If iframe is specified in config/transport, check whether third-party\n   * iframe already exists, and if not, create it.\n   */\n  processCrossDomainIframe() {\n    let frameData;\n    if (IframeTransport.hasCrossDomainIframe(this.type_)) {\n      frameData = IframeTransport.getFrameData(this.type_);\n      ++(frameData.usageCount);\n    } else {\n      frameData = this.createCrossDomainIframe();\n      this.ampWin_.document.body.appendChild(frameData.frame);\n      this.createPerformanceObserver_();\n    }\n    dev().assert(frameData, 'Trying to use non-existent frame');\n  }\n\n  /**\n   * Create a cross-domain iframe for third-party vendor analytics\n   * @return {!FrameData}\n   * @visibleForTesting\n   */\n  createCrossDomainIframe() {\n    // Explanation of IDs:\n    // Each instance of IframeTransport (owned by a specific amp-analytics\n    // tag, in turn owned by a specific creative) has an ID\n    // (this.getCreativeId()).\n    // Each cross-domain iframe also has an ID, stored here in sentinel.\n    // These two types of IDs have different formats.\n    // There is a many-to-one relationship, in that several creatives may\n    // utilize the same analytics vendor, so perhaps two creatives might\n    // both use the same vendor iframe.\n    // Of course, a given creative may use multiple analytics vendors, but\n    // in that case it would use multiple amp-analytics tags, so the\n    // iframeTransport.getCreativeId() -> sentinel relationship is *not*\n    // many-to-many.\n    const sentinel = IframeTransport.createUniqueId_();\n    const frameName = JSON.stringify(/** @type {JsonObject} */ ({\n      scriptSrc: getIframeTransportScriptUrl(this.ampWin_),\n      sentinel,\n      type: this.type_,\n    }));\n    const frame = createElementWithAttributes(this.ampWin_.document, 'iframe',\n        /** @type {!JsonObject} */ ({\n          sandbox: 'allow-scripts allow-same-origin',\n          name: frameName,\n          'data-amp-3p-sentinel': sentinel,\n        }));\n    frame.sentinel = sentinel;\n    setStyles(frame, {\n      display: 'none',\n    });\n    frame.src = this.frameUrl_;\n    const frameData = /** @const {FrameData} */ ({\n      frame,\n      usageCount: 1,\n      queue: new IframeTransportMessageQueue(this.ampWin_,\n          /** @type {!HTMLIFrameElement} */\n          (frame)),\n    });\n    IframeTransport.crossDomainIframes_[this.type_] = frameData;\n    return frameData;\n  }\n\n  /**\n   * Uses the Long Task API to create an observer for when 3p vendor frames\n   * take more than 50ms of continuous CPU time.\n   * Currently the only action in response to that is to log. It will log\n   * once per LONG_TASK_REPORTING_THRESHOLD that a long task occurs. (This\n   * implies that there is a grace period for the first\n   * LONG_TASK_REPORTING_THRESHOLD-1 occurrences.)\n   * @private\n   */\n  createPerformanceObserver_() {\n    if (!isLongTaskApiSupported(this.ampWin_)) {\n      return;\n    }\n    // TODO(jonkeller): Consider merging with jank-meter.js\n    IframeTransport.performanceObservers_[this.type_] =\n        new this.ampWin_.PerformanceObserver(entryList => {\n          if (!entryList) {\n            return;\n          }\n          entryList.getEntries().forEach(entry => {\n            if (entry && entry['entryType'] == 'longtask' &&\n              (entry['name'] == 'cross-origin-descendant') &&\n              entry.attribution) {\n              entry.attribution.forEach(attrib => {\n                if (this.frameUrl_ == attrib.containerSrc &&\n                    ++this.numLongTasks_ % LONG_TASK_REPORTING_THRESHOLD == 0) {\n                  user().error(TAG_, `Long Task: Vendor: \"${this.type_}\"`);\n                }\n              });\n            }\n          });\n        });\n    IframeTransport.performanceObservers_[this.type_].observe({\n      entryTypes: ['longtask'],\n    });\n  }\n\n  /**\n   * Called when a creative no longer needs its cross-domain iframe (for\n   * instance, because the creative has been removed from the DOM).\n   * Once all creatives using a frame are done with it, the frame can be\n   * destroyed.\n   * @param {!HTMLDocument} ampDoc The AMP document\n   * @param {string} type The type attribute of the amp-analytics tag\n   */\n  static markCrossDomainIframeAsDone(ampDoc, type) {\n    const frameData = IframeTransport.getFrameData(type);\n    dev().assert(frameData && frameData.frame && frameData.usageCount,\n        'Marked the ' + type + ' frame as done, but there is no' +\n        ' record of it existing.');\n    if (--(frameData.usageCount)) {\n      // Some other instance is still using it\n      return;\n    }\n    ampDoc.body.removeChild(frameData.frame);\n    delete IframeTransport.crossDomainIframes_[type];\n    if (IframeTransport.performanceObservers_[type]) {\n      IframeTransport.performanceObservers_[type].disconnect();\n      IframeTransport.performanceObservers_[type] = null;\n    }\n  }\n\n  /**\n   * Returns whether this type of cross-domain frame is already known\n   * @param {string} type The type attribute of the amp-analytics tag\n   * @return {boolean}\n   * @visibleForTesting\n   */\n  static hasCrossDomainIframe(type) {\n    return hasOwn(IframeTransport.crossDomainIframes_, type);\n  }\n\n  /**\n   * Create a unique value to differentiate messages from a particular\n   * creative to the cross-domain iframe, or to identify the iframe itself.\n   * @return {string}\n   * @private\n   */\n  static createUniqueId_() {\n    return String(++(IframeTransport.nextId_));\n  }\n\n  /**\n   * Sends an AMP Analytics trigger event to a vendor's cross-domain iframe,\n   * or queues the message if the frame is not yet ready to receive messages.\n   * @param {string} event A string describing the trigger event\n   * @visibleForTesting\n   */\n  sendRequest(event) {\n    const frameData = IframeTransport.getFrameData(this.type_);\n    dev().assert(frameData, 'Trying to send message to non-existent frame');\n    dev().assert(frameData.queue,\n        'Event queue is missing for messages from ' + this.type_ +\n        ' to creative ID ' + this.creativeId_);\n    frameData.queue.enqueue(\n        /**\n         * @type {!../../../src/3p-frame-messaging.IframeTransportEvent}\n         */\n        ({creativeId: this.creativeId_, message: event}));\n  }\n\n  /**\n   * Gets the FrameData associated with a particular cross-domain frame type.\n   * @param {string} type The type attribute of the amp-analytics tag\n   * @return {FrameData}\n   * @visibleForTesting\n   */\n  static getFrameData(type) {\n    return IframeTransport.crossDomainIframes_[type];\n  }\n\n  /**\n   * Removes all knowledge of cross-domain iframes.\n   * Does not actually remove them from the DOM.\n   * @visibleForTesting\n   */\n  static resetCrossDomainIframes() {\n    IframeTransport.crossDomainIframes_ = {};\n  }\n\n  /**\n   * @return {string} Unique ID of this instance of IframeTransport\n   * @visibleForTesting\n   */\n  getCreativeId() {\n    return this.creativeId_;\n  }\n\n  /**\n   * @return {string} Type attribute of parent amp-analytics instance\n   * @visibleForTesting\n   */\n  getType() {\n    return this.type_;\n  }\n}\n\n/** @private {Object<string, FrameData>} */\nIframeTransport.crossDomainIframes_ = {};\n\n/** @private {number} */\nIframeTransport.nextId_ = 0;\n\n/** @private {Object<string, PerformanceObserver>} */\nIframeTransport.performanceObservers_ = {};\n","/**\n * Copyright 2015 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  AmpdocAnalyticsRoot,\n  EmbedAnalyticsRoot,\n} from './analytics-root';\nimport {\n  AnalyticsEvent,\n  AnalyticsEventType,\n  CustomEventTracker,\n  getTrackerKeyName,\n  getTrackerTypesForParentType,\n} from './events';\nimport {Observable} from '../../../src/observable';\nimport {Services} from '../../../src/services';\nimport {dev, user} from '../../../src/log';\nimport {\n  getFriendlyIframeEmbedOptional,\n} from '../../../src/friendly-iframe-embed';\nimport {\n  getParentWindowFrameElement,\n  getServiceForDoc,\n  getServicePromiseForDoc,\n  registerServiceBuilderForDoc,\n} from '../../../src/service';\nimport {hasOwn} from '../../../src/utils/object';\n\nconst SCROLL_PRECISION_PERCENT = 5;\nconst VAR_H_SCROLL_BOUNDARY = 'horizontalScrollBoundary';\nconst VAR_V_SCROLL_BOUNDARY = 'verticalScrollBoundary';\nconst PROP = '__AMP_AN_ROOT';\n\n\n\n/** @const {string} */\nconst TAG = 'Analytics.Instrumentation';\n\n\n/**\n * Events that can result in analytics data to be sent.\n * @const {Array<AnalyticsEventType>}\n */\nconst ALLOWED_IN_EMBED = [\n  AnalyticsEventType.VISIBLE,\n  AnalyticsEventType.CLICK,\n  AnalyticsEventType.TIMER,\n  AnalyticsEventType.HIDDEN,\n];\n\n\n/**\n * @implements {../../../src/service.Disposable}\n * @private\n * @visibleForTesting\n */\nexport class InstrumentationService {\n  /**\n   * @param {!../../../src/service/ampdoc-impl.AmpDoc} ampdoc\n   */\n  constructor(ampdoc) {\n    /** @const */\n    this.ampdoc = ampdoc;\n\n    /** @const */\n    this.ampdocRoot_ = new AmpdocAnalyticsRoot(this.ampdoc);\n\n    /** @const {!../../../src/service/viewport/viewport-impl.Viewport} */\n    this.viewport_ = Services.viewportForDoc(this.ampdoc);\n\n    /** @private {boolean} */\n    this.scrollHandlerRegistered_ = false;\n\n    /** @private {!Observable<\n      !../../../src/service/viewport/viewport-impl.ViewportChangedEventDef>} */\n    this.scrollObservable_ = new Observable();\n  }\n\n  /** @override */\n  dispose() {\n    this.ampdocRoot_.dispose();\n  }\n\n  /**\n   * @param {!Node} context\n   * @return {!./analytics-root.AnalyticsRoot}\n   */\n  getAnalyticsRoot(context) {\n    return this.findRoot_(context);\n  }\n\n  /**\n   * @param {!Element} analyticsElement\n   * @return {!AnalyticsGroup}\n   */\n  createAnalyticsGroup(analyticsElement) {\n    const root = this.findRoot_(analyticsElement);\n    return new AnalyticsGroup(root, analyticsElement, this);\n  }\n\n  /**\n   * Triggers the analytics event with the specified type.\n   *\n   * @param {!Element} target\n   * @param {string} eventType\n   * @param {!Object<string, string>=} opt_vars A map of vars and their values.\n   */\n  triggerEventForTarget(target, eventType, opt_vars) {\n    // TODO(dvoytenko): rename to `triggerEvent`.\n    const event = new AnalyticsEvent(target, eventType, opt_vars);\n    const root = this.findRoot_(target);\n    const tracker = /** @type {!CustomEventTracker} */ (\n      root.getTracker('custom', CustomEventTracker));\n    tracker.trigger(event);\n  }\n\n  /**\n   * @param {!Node} context\n   * @return {!./analytics-root.AnalyticsRoot}\n   */\n  findRoot_(context) {\n    // FIE\n    const frame = getParentWindowFrameElement(context, this.ampdoc.win);\n    if (frame) {\n      const embed = getFriendlyIframeEmbedOptional(frame);\n      if (embed) {\n        const embedNotNull = embed;\n        return this.getOrCreateRoot_(embed, () => {\n          return new EmbedAnalyticsRoot(this.ampdoc, embedNotNull,\n              this.ampdocRoot_);\n        });\n      }\n    }\n\n    // Ampdoc root\n    return this.ampdocRoot_;\n  }\n\n  /**\n   * @param {!Object} holder\n   * @param {function():!./analytics-root.AnalyticsRoot} factory\n   * @return {!./analytics-root.AnalyticsRoot}\n   */\n  getOrCreateRoot_(holder, factory) {\n    let root = /** @type {?./analytics-root.AnalyticsRoot} */ (holder[PROP]);\n    if (!root) {\n      root = factory();\n      holder[PROP] = root;\n    }\n    return root;\n  }\n\n  /**\n   * @param {!JsonObject} config Configuration for instrumentation.\n   * @param {function(!AnalyticsEvent)} listener The callback to call when the event\n   *  occurs.\n   * @param {!Element} analyticsElement The element associated with the\n   *  config.\n   * @private\n   * @restricted\n   */\n  addListenerDepr_(config, listener, analyticsElement) {\n    const eventType = config['on'];\n    if (!this.isTriggerAllowed_(eventType, analyticsElement)) {\n      user().error(TAG, 'Trigger type \"' + eventType + '\" is not ' +\n        'allowed in the embed.');\n      return;\n    }\n    if (eventType === AnalyticsEventType.SCROLL) {\n      if (!config['scrollSpec']) {\n        user().error(TAG, 'Missing scrollSpec on scroll trigger.');\n        return;\n      }\n      this.registerScrollTrigger_(config['scrollSpec'], listener);\n\n      // Trigger an event to fire events that might have already happened.\n      const size = this.viewport_.getSize();\n      this.onScroll_({\n        top: this.viewport_.getScrollTop(),\n        left: this.viewport_.getScrollLeft(),\n        width: size.width,\n        height: size.height,\n        relayoutAll: false,\n        velocity: 0, // Hack for typing.\n      });\n    }\n  }\n\n  /**\n   * @param {string} type\n   * @param {!Object<string, string>=} opt_vars\n   * @return {!AnalyticsEvent}\n   * @private\n   */\n  createEventDepr_(type, opt_vars) {\n    // TODO(dvoytenko): Remove when Tracker migration is complete.\n    return new AnalyticsEvent(\n        this.ampdocRoot_.getRootElement(), type, opt_vars);\n  }\n\n  /**\n   * @param {!../../../src/service/viewport/viewport-impl.ViewportChangedEventDef} e\n   * @private\n   */\n  onScroll_(e) {\n    this.scrollObservable_.fire(e);\n  }\n\n  /**\n   * Register for a listener to be called when the boundaries specified in\n   * config are reached.\n   * @param {!JsonObject} config the config that specifies the boundaries.\n   * @param {function(!AnalyticsEvent)} listener\n   * @private\n   */\n  registerScrollTrigger_(config, listener) {\n    if (!Array.isArray(config['verticalBoundaries']) &&\n        !Array.isArray(config['horizontalBoundaries'])) {\n      user().error(TAG, 'Boundaries are required for the scroll ' +\n          'trigger to work.');\n      return;\n    }\n\n    // Ensure that the scroll events are being listened to.\n    if (!this.scrollHandlerRegistered_) {\n      this.scrollHandlerRegistered_ = true;\n      this.viewport_.onChanged(this.onScroll_.bind(this));\n    }\n\n    /**\n     * @param {!Object<number, boolean>} bounds\n     * @param {number} scrollPos Number representing the current scroll\n     * @param {string} varName variable name to assign to the bound that\n     * triggers the event\n     * position.\n     */\n    const triggerScrollEvents = (bounds, scrollPos, varName) => {\n      if (!scrollPos) {\n        return;\n      }\n      // Goes through each of the boundaries and fires an event if it has not\n      // been fired so far and it should be.\n      for (const b in bounds) {\n        if (!hasOwn(bounds, b)) {\n          continue;\n        }\n        const bound = parseInt(b, 10);\n        if (bound > scrollPos || bounds[bound]) {\n          continue;\n        }\n        bounds[bound] = true;\n        const vars = Object.create(null);\n        vars[varName] = b;\n        listener(this.createEventDepr_(AnalyticsEventType.SCROLL, vars));\n      }\n    };\n\n    const boundsV = this.normalizeBoundaries_(config['verticalBoundaries']);\n    const boundsH = this.normalizeBoundaries_(config['horizontalBoundaries']);\n    this.scrollObservable_.add(e => {\n      // Calculates percentage scrolled by adding screen height/width to\n      // top/left and dividing by the total scroll height/width.\n      triggerScrollEvents(boundsV,\n          (e.top + e.height) * 100 / this.viewport_.getScrollHeight(),\n          VAR_V_SCROLL_BOUNDARY);\n      triggerScrollEvents(boundsH,\n          (e.left + e.width) * 100 / this.viewport_.getScrollWidth(),\n          VAR_H_SCROLL_BOUNDARY);\n    });\n  }\n\n  /**\n   * Rounds the boundaries for scroll trigger to nearest\n   * SCROLL_PRECISION_PERCENT and returns an object with normalized boundaries\n   * as keys and false as values.\n   *\n   * @param {!Array<number>} bounds array of bounds.\n   * @return {!Object<number,boolean>} Object with normalized bounds as keys\n   * and false as value.\n   * @private\n   */\n  normalizeBoundaries_(bounds) {\n    const result = {};\n    if (!bounds || !Array.isArray(bounds)) {\n      return result;\n    }\n\n    for (let b = 0; b < bounds.length; b++) {\n      let bound = bounds[b];\n      if (typeof bound !== 'number' || !isFinite(bound)) {\n        user().error(TAG, 'Scroll trigger boundaries must be finite.');\n        return result;\n      }\n\n      bound = Math.min(Math.round(bound / SCROLL_PRECISION_PERCENT) *\n          SCROLL_PRECISION_PERCENT, 100);\n      result[bound] = false;\n    }\n    return result;\n  }\n\n  /**\n   * Checks to confirm that a given trigger type is allowed for the element.\n   * Specifically, it confirms that if the element is in the embed, only a\n   * subset of the trigger types are allowed.\n   * @param  {!AnalyticsEventType} triggerType\n   * @param  {!Element} element\n   * @return {boolean} True if the trigger is allowed. False otherwise.\n   */\n  isTriggerAllowed_(triggerType, element) {\n    if (element.ownerDocument.defaultView != this.ampdoc.win) {\n      return ALLOWED_IN_EMBED.includes(triggerType);\n    }\n    return true;\n  }\n}\n\n\n/**\n * Represents the group of analytics triggers for a single config. All triggers\n * are declared and released at the same time.\n *\n * @implements {../../../src/service.Disposable}\n */\nexport class AnalyticsGroup {\n  /**\n   * @param {!./analytics-root.AnalyticsRoot} root\n   * @param {!Element} analyticsElement\n   * @param {!InstrumentationService} service\n   */\n  constructor(root, analyticsElement, service) {\n    // TODO(dvoytenko): remove `service` as soon as migration is complete.\n\n    /** @const */\n    this.root_ = root;\n    /** @const */\n    this.analyticsElement_ = analyticsElement;\n    /** @const */\n    this.service_ = service;\n\n    /** @private @const {!Array<!UnlistenDef>} */\n    this.listeners_ = [];\n  }\n\n  /** @override */\n  dispose() {\n    this.listeners_.forEach(listener => {\n      listener();\n    });\n  }\n\n  /**\n   * Adds a trigger with the specified config and listener. The config must\n   * contain `on` property specifying the type of the event.\n   *\n   * Triggers registered on a group are automatically released when the\n   * group is disposed.\n   *\n   * @param {!JsonObject} config\n   * @param {function(!AnalyticsEvent)} handler\n   */\n  addTrigger(config, handler) {\n    const eventType = dev().assertString(config['on']);\n    const trackerKey = getTrackerKeyName(eventType);\n    const trackerWhitelist = getTrackerTypesForParentType(this.root_.getType());\n\n    if (this.isDeprecatedListenerEvent(trackerKey)) {\n      // TODO(dvoytenko): remove this use and `addListenerDepr_` once all\n      // triggers have been migrated..\n      this.service_.addListenerDepr_(config, handler, this.analyticsElement_);\n      return;\n    }\n\n    const tracker = this.root_.getTrackerForWhitelist(\n        trackerKey, trackerWhitelist);\n    user().assert(!!tracker,\n        'Trigger type \"%s\" is not allowed in the %s', eventType,\n        this.root_.getType());\n    const unlisten = tracker.add(this.analyticsElement_, eventType, config,\n        handler);\n    this.listeners_.push(unlisten);\n  }\n\n  /**\n   * @param {string} triggerType\n   * @return {boolean}\n   */\n  isDeprecatedListenerEvent(triggerType) {\n    return triggerType == 'scroll';\n  }\n}\n\n\n/**\n * It's important to resolve instrumentation asynchronously in elements that\n * depends on it in multi-doc scope. Otherwise an element life-cycle could\n * resolve way before we have the service available.\n *\n * @param {!Element|!../../../src/service/ampdoc-impl.AmpDoc} elementOrAmpDoc\n * @return {!Promise<InstrumentationService>}\n */\nexport function instrumentationServicePromiseForDoc(elementOrAmpDoc) {\n  return /** @type {!Promise<InstrumentationService>} */ (\n    getServicePromiseForDoc(elementOrAmpDoc, 'amp-analytics-instrumentation'));\n}\n\n/**\n * @param {!Element|!../../../src/service/ampdoc-impl.AmpDoc} elementOrAmpDoc\n * @return {!InstrumentationService}\n */\nexport function instrumentationServiceForDocForTesting(elementOrAmpDoc) {\n  registerServiceBuilderForDoc(\n      elementOrAmpDoc, 'amp-analytics-instrumentation', InstrumentationService);\n  return getServiceForDoc(elementOrAmpDoc, 'amp-analytics-instrumentation');\n}\n","/**\n * Copyright 2017 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {BatchingPluginFunctions, batchSegmentDef} from './batching-plugins';\nimport {\n  ExpansionOptions,\n  variableServiceFor,\n} from './variables';\nimport {SANDBOX_AVAILABLE_VARS} from './sandbox-vars-whitelist';\nimport {Services} from '../../../src/services';\nimport {appendEncodedParamStringToUrl} from '../../../src/url';\nimport {dev, user} from '../../../src/log';\nimport {dict} from '../../../src/utils/object';\nimport {filterSplice} from '../../../src/utils/array';\nimport {isArray, isFiniteNumber} from '../../../src/types';\nimport {map} from '../../../src/utils/object';\nimport {parseQueryString} from '../../../src/url';\n\nconst TAG = 'AMP-ANALYTICS';\n\nconst BATCH_INTERVAL_MIN = 200;\n\nexport class RequestHandler {\n  /**\n   * @param {!Element} ampAnalyticsElement\n   * @param {!JsonObject} request\n   * @param {!../../../src/preconnect.Preconnect} preconnect\n   * @param {function(string, !JsonObject)} handler\n   * @param {boolean} isSandbox\n   */\n  constructor(ampAnalyticsElement, request, preconnect, handler, isSandbox) {\n\n    /** @const {!Window} */\n    this.win = ampAnalyticsElement.getAmpDoc().win;\n\n    /** @const {string} */\n    this.baseUrl = dev().assert(request['baseUrl']);\n\n    /** @private {Array<number>|number|undefined} */\n    this.batchInterval_ = request['batchInterval']; //unit is sec\n\n    /** @private {?number} */\n    this.reportWindow_ = Number(request['reportWindow']) || null; // unit is sec\n\n    /** @private {?number} */\n    this.batchIntervalPointer_ = null;\n\n    /** @private @const {string} */\n    this.batchPluginId_ = request['batchPlugin'];\n\n    user().assert((this.batchPluginId_ ? this.batchInterval_ : true),\n        'Invalid request: batchPlugin cannot be set on non-batched request');\n\n    /** @const {?function(string, !Array<!batchSegmentDef>)} */\n    this.batchingPlugin_ = this.batchPluginId_\n      ? user().assert(BatchingPluginFunctions[this.batchPluginId_],\n          `Invalid request: unsupported batch plugin ${this.batchPluginId_}`)\n      : null;\n\n    /** @private {!./variables.VariableService} */\n    this.variableService_ = variableServiceFor(this.win);\n\n    /** @private {!../../../src/service/url-replacements-impl.UrlReplacements} */\n    this.urlReplacementService_ =\n      Services.urlReplacementsForDoc(ampAnalyticsElement);\n\n    /** @private {?Promise<string>} */\n    this.baseUrlPromise_ = null;\n\n    /** @private {?Promise<string>} */\n    this.baseUrlTemplatePromise_ = null;\n\n    /** @private {!Array<!Promise<string>>}*/\n    this.extraUrlParamsPromise_ = [];\n\n    /** @private {!Array<!Promise<!batchSegmentDef>>} */\n    this.batchSegmentPromises_ = [];\n\n    /** @private {!../../../src/preconnect.Preconnect} */\n    this.preconnect_ = preconnect;\n\n    /** @private {function(string, !JsonObject)} */\n    this.handler_ = handler;\n\n    /** @const @private {!Object|undefined} */\n    this.whiteList_ = isSandbox ? SANDBOX_AVAILABLE_VARS : undefined;\n\n    /** @private {?number} */\n    this.batchIntervalTimeoutId_ = null;\n\n    /** @private {?number} */\n    this.reportWindowTimeoutId_ = null;\n\n    /** @private {boolean} */\n    this.reportRequest_ = true;\n\n    /** @private {?JsonObject} */\n    this.lastTrigger_ = null;\n\n    /** @private {number} */\n    this.queueSize_ = 0;\n\n    this.initReportWindow_();\n    this.initBatchInterval_();\n  }\n\n  /**\n   * Exposed method to send a request on event.\n   * Real ping may be batched and send out later.\n   * @param {?JsonObject} configParams\n   * @param {!JsonObject} trigger\n   * @param {!./variables.ExpansionOptions} expansionOption\n   * @param {!Object<string, *>} dynamicBindings A mapping of variables to\n   *     stringable values. For example, values could be strings, functions that\n   *     return strings, promises, etc.\n   */\n  send(configParams, trigger, expansionOption, dynamicBindings) {\n    const isImportant = trigger['important'];\n\n    const isImmediate =\n        (trigger['important'] === true) || (!this.batchInterval_);\n    if (!this.reportRequest_ && !isImportant) {\n      // Ignore non important trigger out reportWindow\n      return;\n    }\n\n    this.queueSize_++;\n    this.lastTrigger_ = trigger;\n    const triggerParams = trigger['extraUrlParams'];\n\n    const macros = this.variableService_.getMacros();\n    const bindings = Object.assign({}, dynamicBindings, macros);\n\n    if (!this.baseUrlPromise_) {\n      expansionOption.freezeVar('extraUrlParams');\n      this.baseUrlTemplatePromise_ =\n          this.variableService_.expandTemplate(this.baseUrl, expansionOption);\n      this.baseUrlPromise_ = this.baseUrlTemplatePromise_.then(baseUrl => {\n        return this.urlReplacementService_.expandUrlAsync(\n            baseUrl, bindings, this.whiteList_);\n      });\n    }\n\n    const extraUrlParamsPromise = this.expandExtraUrlParams_(\n        configParams, triggerParams, expansionOption)\n        .then(expandExtraUrlParams => {\n          // Construct the extraUrlParamsString: Remove null param and encode\n          // component\n          const expandedExtraUrlParamsStr =\n              this.getExtraUrlParamsString_(expandExtraUrlParams);\n          return this.urlReplacementService_.expandUrlAsync(\n              expandedExtraUrlParamsStr, bindings, this.whiteList_);\n        });\n\n    if (this.batchingPlugin_) {\n      const batchSegment = dict({\n        'trigger': trigger['on'],\n        'timestamp': this.win.Date.now(),\n        'extraUrlParams': null,\n      });\n      this.batchSegmentPromises_.push(extraUrlParamsPromise.then(str => {\n        batchSegment['extraUrlParams'] =\n                parseQueryString(str);\n        return batchSegment;\n      }));\n    }\n\n    this.extraUrlParamsPromise_.push(extraUrlParamsPromise);\n    this.trigger_(isImmediate);\n  }\n\n  /**\n   * Dispose function that clear request handler state.\n   */\n  dispose() {\n    this.reset_();\n\n    // Clear batchInterval timeout\n    if (this.batchIntervalTimeoutId_) {\n      this.win.clearTimeout(this.batchIntervalTimeoutId_);\n      this.batchIntervalTimeoutId_ = null;\n    }\n\n    if (this.reportWindowTimeoutId_) {\n      this.win.clearTimeout(this.reportWindowTimeoutId_);\n      this.reportWindowTimeoutId_ = null;\n    }\n  }\n\n  /**\n   * Function that schedule the actual request send.\n   * @param {boolean} isImmediate\n   * @private\n   */\n  trigger_(isImmediate) {\n    if (this.queueSize_ == 0) {\n      // Do nothing if no request in queue\n      return;\n    }\n\n    if (isImmediate) {\n      // If not batched, or batchInterval scheduler schedule trigger immediately\n      this.fire_();\n      return;\n    }\n  }\n\n  /**\n   * Send out request. Should only be called by `trigger_` function\n   * @private\n   */\n  fire_() {\n    const {\n      extraUrlParamsPromise_: extraUrlParamsPromise,\n      baseUrlTemplatePromise_: baseUrlTemplatePromise,\n      baseUrlPromise_: baseUrlPromise,\n      batchSegmentPromises_: batchSegmentsPromise,\n    } = this;\n    const lastTrigger = /** @type {!JsonObject} */ (this.lastTrigger_);\n    this.reset_();\n\n    baseUrlTemplatePromise.then(preUrl => {\n      this.preconnect_.url(preUrl, true);\n      baseUrlPromise.then(baseUrl => {\n        let requestUrlPromise;\n        if (this.batchingPlugin_) {\n          requestUrlPromise =\n              this.constructBatchSegments_(baseUrl, batchSegmentsPromise);\n        } else {\n          requestUrlPromise =\n              this.constructExtraUrlParamStrs_(baseUrl, extraUrlParamsPromise);\n        }\n        requestUrlPromise.then(requestUrl => {\n          this.handler_(requestUrl, lastTrigger);\n        });\n      });\n    });\n  }\n\n  /**\n   * Construct the final requestUrl with baseUrl and extraUrlParams\n   * @param {string} baseUrl\n   * @param {!Array<!Promise<string>>} extraUrlParamStrsPromise\n   */\n  constructExtraUrlParamStrs_(baseUrl, extraUrlParamStrsPromise) {\n    return Promise.all(extraUrlParamStrsPromise).then(paramStrs => {\n      filterSplice(paramStrs, item => {return !!item;});\n      const extraUrlParamsStr = paramStrs.join('&');\n      let requestUrl;\n      if (baseUrl.indexOf('${extraUrlParams}') >= 0) {\n        requestUrl = baseUrl.replace('${extraUrlParams}', extraUrlParamsStr);\n      } else {\n        requestUrl = appendEncodedParamStringToUrl(baseUrl, extraUrlParamsStr);\n      }\n      return requestUrl;\n    });\n  }\n\n  /**\n   * Construct the final requestUrl by calling the batch plugin function\n   * @param {string} baseUrl\n   * @param {!Array<!Promise<batchSegmentDef>>} batchSegmentsPromise\n   */\n  constructBatchSegments_(baseUrl, batchSegmentsPromise) {\n    dev().assert(this.batchingPlugin_ &&\n        typeof this.batchingPlugin_ == 'function', 'Should never call ' +\n        'constructBatchSegments_ with invalid batchingPlugin function');\n\n    return Promise.all(batchSegmentsPromise).then(batchSegments => {\n      try {\n        return this.batchingPlugin_(baseUrl, batchSegments);\n      } catch (e) {\n        dev().error(TAG,\n            `Error: batchPlugin function ${this.batchPluginId_}`, e);\n        return '';\n      }\n    });\n  }\n\n  /**\n   * Reset batching status\n   * @private\n   */\n  reset_() {\n    this.queueSize_ = 0;\n    this.baseUrlPromise_ = null;\n    this.baseUrlTemplatePromise_ = null;\n    this.extraUrlParamsPromise_ = [];\n    this.batchSegmentPromises_ = [];\n    this.lastTrigger_ = null;\n  }\n\n  /**\n   * Function that handler extraUrlParams from config and trigger.\n   * @param {?JsonObject} configParams\n   * @param {?JsonObject} triggerParams\n   * @param {!./variables.ExpansionOptions} expansionOption\n   * @return {!Promise<!JsonObject>}\n   * @private\n   */\n  expandExtraUrlParams_(configParams, triggerParams, expansionOption) {\n    const requestPromises = [];\n    const params = map();\n    // Don't encode param values here,\n    // as we'll do it later in the getExtraUrlParamsString_ call.\n    const option = new ExpansionOptions(\n        expansionOption.vars,\n        expansionOption.iterations,\n        true /* noEncode */);\n    // Add any given extraUrlParams as query string param\n    if (configParams || triggerParams) {\n      Object.assign(params, configParams, triggerParams);\n      for (const k in params) {\n        if (typeof params[k] == 'string') {\n          requestPromises.push(\n              this.variableService_.expandTemplate(params[k], option)\n                  .then(value => { params[k] = value; }));\n        }\n      }\n    }\n    return Promise.all(requestPromises).then(() => {\n      return params;\n    });\n  }\n\n  /**\n   * Handle the params map and form the final extraUrlParams string\n   * @param {!Object} params\n   * @return {string}\n   */\n  getExtraUrlParamsString_(params) {\n    const s = [];\n    for (const k in params) {\n      const v = params[k];\n      if (v == null) {\n        continue;\n      } else {\n        const sv = this.variableService_.encodeVars(k, v);\n        s.push(`${encodeURIComponent(k)}=${sv}`);\n      }\n    }\n    return s.join('&');\n  }\n\n  /**\n   * Handle batchInterval\n   */\n  initBatchInterval_() {\n    if (!this.batchInterval_) {\n      return;\n    }\n\n    this.batchInterval_ = isArray(this.batchInterval_) ?\n      this.batchInterval_ : [this.batchInterval_];\n\n    for (let i = 0; i < this.batchInterval_.length; i++) {\n      let interval = this.batchInterval_[i];\n      user().assert(isFiniteNumber(interval),\n          `Invalid batchInterval value: ${this.batchInterval_}` +\n          'interval must be a number');\n      interval = Number(interval) * 1000;\n      user().assert(interval >= BATCH_INTERVAL_MIN,\n          `Invalid batchInterval value: ${this.batchInterval_}, ` +\n          `interval value must be greater than ${BATCH_INTERVAL_MIN}ms.`);\n      this.batchInterval_[i] = interval;\n    }\n\n    this.batchIntervalPointer_ = 0;\n\n    this.refreshBatchInterval_();\n  }\n\n  /**\n   * Initializes report window.\n   */\n  initReportWindow_() {\n    if (this.reportWindow_) {\n      this.reportWindowTimeoutId_ = this.win.setTimeout(() => {\n        // Flush batch queue;\n        this.trigger_(true);\n        this.reportRequest_ = false;\n        // Clear batchInterval timeout\n        if (this.batchIntervalTimeoutId_) {\n          this.win.clearTimeout(this.batchIntervalTimeoutId_);\n          this.batchIntervalTimeoutId_ = null;\n        }\n      }, this.reportWindow_ * 1000);\n    }\n  }\n\n  /**\n   * Schedule sending request regarding to batchInterval\n   */\n  refreshBatchInterval_() {\n    dev().assert(this.batchIntervalPointer_ != null,\n        'Should not start batchInterval without pointer');\n    const interval = this.batchIntervalPointer_ < this.batchInterval_.length ?\n      this.batchInterval_[this.batchIntervalPointer_++] :\n      this.batchInterval_[this.batchInterval_.length - 1];\n\n    this.batchIntervalTimeoutId_ = this.win.setTimeout(() => {\n      this.trigger_(true);\n      this.refreshBatchInterval_();\n    }, interval);\n  }\n}\n","/**\n * Copyright 2018 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {ExpansionOptions, variableServiceFor} from './variables';\nimport {findIndex} from '../../../src/utils/array';\nimport {isObject} from '../../../src/types';\nimport {parseUrlDeprecated} from '../../../src/url';\nimport {user} from '../../../src/log';\n\n/**\n * A user-supplied JSON object that defines a resource to be reported. It is\n * expected to have some fields.\n * A resource timing enty will match against this resource if all of the\n * following properties match.\n * @property {string=} host A string whose value should be a RegExp. It defines\n *     a host or set of hosts to match against. By default, the RegExp will\n *     match all hosts if omitted.\n * @property {string=} path A string whose value should be a RegExp. It defines\n *     a path or set of paths to match against. By default, the RegExp will\n *     match all paths if omitted.\n * @property {string=} query A string whose value should be a RegExp. It defines\n *     a query string or set of query strings to match against. By default, the\n *     RegExp will match all query strings if omitted.\n * @typedef {!JsonObject}\n */\nlet IndividualResourceSpecDef;\n\n/**\n * A parsed resource spec for a specific host or sets of hosts (as defined by\n * the hostPattern).\n * @typedef{{\n *   hostPattern: !RegExp,\n *   resouces: !Array<{\n *     name: string,\n *     pathPattern: !RegExp,\n *     queryPattern: !RegExp,\n *   }>,\n * }}\n */\nlet ResourceSpecForHostDef;\n\n/**\n * The default maximum buffer size for resource timing entries. After the limit\n * has been reached, the browser will stop recording resource timing entries.\n * This number is chosen by the spec: https://w3c.github.io/resource-timing.\n * @const {number}\n */\nconst RESOURCE_TIMING_BUFFER_SIZE = 150;\n\n/**\n * Yields the thread before running the function to avoid causing jank. (i.e. a\n * task that takes over 16ms.)\n * @param {function(): OUT} fn\n * @return {!Promise<OUT>}\n * @template OUT\n */\nfunction yieldThread(fn) {\n  return new Promise(resolve => {\n    setTimeout(() => resolve(fn()));\n  });\n}\n\n/**\n * Checks whether the given object is a valid resource timing spec.\n * @param {!JsonObject} spec\n * @return {boolean}\n */\nfunction validateResourceTimingSpec(spec) {\n  if (!isObject(spec['resources'])) {\n    user().warn('ANALYTICS', 'resourceTimingSpec missing \"resources\" field');\n    return false;\n  }\n  if (!spec['encoding'] || !spec['encoding']['entry'] ||\n      !spec['encoding']['delim']) {\n    user().warn(\n        'ANALYTICS',\n        'resourceTimingSpec is missing or has incomplete encoding options');\n    return false;\n  }\n  if (spec['encoding']['base'] < 2 || spec['encoding']['base'] > 36) {\n    user().warn(\n        'ANALYTICS',\n        'resource timing variables only supports bases between 2 and 36');\n    return false;\n  }\n  if (spec['responseAfter'] != null &&\n      typeof spec['responseAfter'] != 'number') {\n    user().warn(\n        'ANALYTICS', 'resourceTimingSpec[\"responseAfter\"] must be a number');\n    return false;\n  }\n  return true;\n}\n\n/**\n * Gets all resource timing entries from the given window.\n * @param {!Window} win\n * @return {!Array<!PerformanceResourceTiming>}\n */\nfunction getResourceTimingEntries(win) {\n  return /** @type {!Array<!PerformanceResourceTiming>} */ (\n    win.performance.getEntriesByType('resource'));\n}\n\n/**\n * Converts a resource timing entry to the variables for this resource.\n * @param {!PerformanceResourceTiming} entry\n * @param {string} name Name of the resource set by the resourceTimingSpec.\n * @param {function(number, number=): string} format A function to format\n *    timestamps and intervals. (Two numbers will be passed in for intervals.)\n * @return {!ExpansionOptions}\n */\nfunction entryToExpansionOptions(entry, name, format) {\n  const vars = {\n    // ${key} is the name of the resource from the resourceTimingSpec. i.e. it's\n    // the key of the object that specifies the host and path patterns that this\n    // resource matched against.\n    'key': name,\n    'startTime': format(entry.startTime),\n    'redirectTime': format(entry.redirectEnd, entry.redirectStart),\n    'domainLookupTime': format(entry.domainLookupEnd, entry.domainLookupStart),\n    'tcpConnectTime': format(entry.connectEnd, entry.connectStart),\n    'serverResponseTime': format(entry.responseStart, entry.requestStart),\n    'networkTransferTime': format(entry.responseEnd, entry.responseStart),\n    'transferSize': format(entry.transferSize || 0),\n    'encodedBodySize': format(entry.encodedBodySize || 0),\n    'decodedBodySize': format(entry.decodedBodySize || 0),\n    'duration': format(entry.duration),\n    'initiatorType': entry.initiatorType,\n  };\n  return new ExpansionOptions(vars, 1 /* opt_iterations */);\n}\n\n/**\n * Returns the variables for the given resource timing entry if it matches one\n * of the defined resources, or null otherwise.\n * @param {!PerformanceResourceTiming} entry\n * @param {!Array<!ResourceSpecForHostDef>} resourcesByHost An array of resource\n *     specs to match against.\n * @return {?string} The name of the entry, or null if no matching name exists.\n */\nfunction nameForEntry(entry, resourcesByHost) {\n  const url = parseUrlDeprecated(entry.name);\n  for (let i = 0; i < resourcesByHost.length; ++i) {\n    const {hostPattern, resources} = resourcesByHost[i];\n    if (!hostPattern.test(url.host)) {\n      continue;\n    }\n    const index = findIndex(\n        resources,\n        res => res.pathPattern.test(url.pathname) &&\n            res.queryPattern.test(url.search));\n    if (index != -1) {\n      return resources[index].name;\n    }\n  }\n  return null; // No match.\n}\n\n/**\n * Groups all resource specs (which are defined in terms of {host, path, query}\n * patterns) by host pattern. This is used downstream to avoid running RegExps\n * for host patterns multiple times because we expect multiple resources to\n * use the same host pattern.\n * @param {!Object<string, !IndividualResourceSpecDef>} resourceDefs A map of\n *     names to the resource spec for that name.\n * @return {!Array<!ResourceSpecForHostDef>}\n */\nfunction groupSpecsByHost(resourceDefs) {\n  const byHost = {};\n  for (const name in resourceDefs) {\n    const host = resourceDefs[name]['host'] || '';\n    const path = resourceDefs[name]['path'] || '';\n    const query = resourceDefs[name]['query'] || '';\n    const pattern = {\n      name,\n      pathPattern: new RegExp(path),\n      queryPattern: new RegExp(query),\n    };\n    if (byHost[host]) {\n      byHost[host].resources.push(pattern);\n    } else {\n      byHost[host] = {\n        hostPattern: new RegExp(host),\n        resources: [pattern],\n      };\n    }\n  }\n  const byHostArray = [];\n  for (const host in byHost) {\n    byHostArray.push(byHost[host]);\n  }\n  return byHostArray;\n}\n\n/**\n * Filters out resource timing entries that don't have a name defined in\n * resourceDefs. It returns a new array where each element contains a\n * resource timing entry and the corresponding name.\n * @param {!Array<!PerformanceResourceTiming>} entries\n * @param {!Object<string, !IndividualResourceSpecDef>} resourceDefs\n * @return {!Array<{entry: !PerformanceResourceTiming, name: string}>}\n */\nfunction filterEntries(entries, resourceDefs) {\n  // Group resource timing definitions by host since we expect multiple\n  // definitions to have the same host.\n  const byHost = groupSpecsByHost(resourceDefs);\n  const results = [];\n  entries.forEach(entry => {\n    const name = nameForEntry(entry, byHost);\n    if (name) {\n      results.push({entry, name});\n    }\n  });\n  return results;\n}\n\n/**\n * Serializes resource timing entries that match the resourceTimingSpec into a\n * single string.\n * @param {!Array<!PerformanceResourceTiming>} entries\n * @param {!JsonObject} resourceTimingSpec\n * @param {!Window} win\n * @return {!Promise<string>}\n */\nfunction serialize(entries, resourceTimingSpec, win) {\n  const resources = resourceTimingSpec['resources'];\n  const encoding = resourceTimingSpec['encoding'];\n\n  const variableService = variableServiceFor(win);\n  const format = (val, relativeTo = 0) =>\n    Math.round(val - relativeTo).toString(encoding['base'] || 10);\n\n  const promises =\n      filterEntries(entries, resources)\n          .map(({entry, name}) => entryToExpansionOptions(entry, name, format))\n          .map(\n              expansion =>\n                variableService.expandTemplate(encoding['entry'], expansion));\n  return Promise.all(promises).then(vars => vars.join(encoding['delim']));\n}\n\n/**\n * Serializes resource timing entries according to the resource timing spec.\n * @param {!Window} win\n * @param {!JsonObject} resourceTimingSpec\n * @return {!Promise<string>}\n */\nexport function serializeResourceTiming(win, resourceTimingSpec) {\n  // Check that the performance timing API exists before and that the spec is\n  // valid before proceeding. If not, we simply return an empty string.\n  if (resourceTimingSpec['done'] || !win.performance || !win.performance.now ||\n      !win.performance.getEntriesByType ||\n      !validateResourceTimingSpec(resourceTimingSpec)) {\n    resourceTimingSpec['done'] = true;\n    return Promise.resolve('');\n  }\n  let entries = getResourceTimingEntries(win);\n  if (entries.length >= RESOURCE_TIMING_BUFFER_SIZE) {\n    // We've exceeded the maximum buffer size so no additional metrics will be\n    // reported for this resourceTimingSpec.\n    resourceTimingSpec['done'] = true;\n  }\n\n  const responseAfter = resourceTimingSpec['responseAfter'] || 0;\n  // Update responseAfter for next time to avoid reporting the same resource\n  // multiple times.\n  resourceTimingSpec['responseAfter'] =\n      Math.max(responseAfter, win.performance.now());\n\n  // Filter resources that are too early.\n  entries = entries.filter(e => e.startTime + e.duration >= responseAfter);\n  if (!entries.length) {\n    return Promise.resolve('');\n  }\n  // Yield the thread in case iterating over all resources takes a long time.\n  return yieldThread(() => serialize(entries, resourceTimingSpec, win));\n}\n","/**\n * Copyright 2017 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Used for inserted scoped analytics element.\n * @const {!Object<string, boolean>}\n */\nexport const SANDBOX_AVAILABLE_VARS = {\n  'RANDOM': true,\n  'CANONICAL_URL': true,\n  'CANONICAL_HOST': true,\n  'CANONICAL_HOSTNAME': true,\n  'CANONICAL_PATH': true,\n  'AMPDOC_URL': true,\n  'AMPDOC_HOST': true,\n  'AMPDOC_HOSTNAME': true,\n  'SOURCE_URL': true,\n  'SOURCE_HOST': true,\n  'SOURCE_HOSTNAME': true,\n  'SOURCE_PATH': true,\n  'TIMESTAMP': true,\n  'TIMEZONE': true,\n  'TIMEZONE_CODE': true,\n  'VIEWPORT_HEIGHT': true,\n  'VIEWPORT_WIDTH': true,\n  'SCREEN_WIDTH': true,\n  'SCREEN_HEIGHT': true,\n  'AVAILABLE_SCREEN_HEIGHT': true,\n  'AVAILABLE_SCREEN_WIDTH': true,\n  'SCREEN_COLOR_DEPTH': true,\n  'DOCUMENT_CHARSET': true,\n  'BROWSER_LANGUAGE': true,\n  'AMP_VERSION': true,\n  'BACKGROUND_STATE': true,\n  'USER_AGENT': true,\n  'FIRST_CONTENTFUL_PAINT': true,\n  'FIRST_VIEWPORT_READY': true,\n  'MAKE_BODY_VISIBLE': true,\n};\n","/**\n * Copyright 2017 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Services} from '../../../src/services';\nimport {\n  assertHttpsUrl,\n  checkCorsUrl,\n  parseUrlDeprecated,\n} from '../../../src/url';\nimport {createPixel} from '../../../src/pixel';\nimport {dev, user} from '../../../src/log';\nimport {loadPromise} from '../../../src/event-helper';\nimport {removeElement} from '../../../src/dom';\nimport {setStyle} from '../../../src/style';\n\n/** @const {string} */\nconst TAG_ = 'amp-analytics.Transport';\n\n/**\n * @param {!Window} win\n * @param {string} request\n * @param {!Object<string, string|boolean>} transportOptions\n */\nexport function sendRequest(win, request, transportOptions) {\n  assertHttpsUrl(request, 'amp-analytics request');\n  checkCorsUrl(request);\n\n  const referrerPolicy = transportOptions['referrerPolicy'];\n\n  if (referrerPolicy === 'no-referrer') {\n    transportOptions['beacon'] = false;\n    transportOptions['xhrpost'] = false;\n  }\n\n  if (transportOptions['beacon'] &&\n      Transport.sendRequestUsingBeacon(win, request)) {\n    return;\n  }\n  if (transportOptions['xhrpost'] &&\n      Transport.sendRequestUsingXhr(win, request)) {\n    return;\n  }\n  const image = transportOptions['image'];\n  if (image) {\n    const suppressWarnings = (typeof image == 'object' &&\n        image['suppressWarnings']);\n    Transport.sendRequestUsingImage(\n        win, request, suppressWarnings, /** @type {string|undefined} */ (referrerPolicy));\n    return;\n  }\n  user().warn(TAG_, 'Failed to send request', request, transportOptions);\n}\n\n/**\n * @visibleForTesting\n */\nexport class Transport {\n\n  /**\n   * @param {!Window} win\n   * @param {string} request\n   * @param {boolean} suppressWarnings\n   * @param {string|undefined} referrerPolicy\n   */\n  static sendRequestUsingImage(win, request, suppressWarnings, referrerPolicy) {\n    const image = createPixel(win, request, referrerPolicy);\n    loadPromise(image).then(() => {\n      dev().fine(TAG_, 'Sent image request', request);\n    }).catch(() => {\n      if (!suppressWarnings) {\n        user().warn(TAG_, 'Response unparseable or failed to send image ' +\n            'request', request);\n      }\n    });\n  }\n\n  /**\n   * @param {!Window} win\n   * @param {string} request\n   * @return {boolean} True if this browser supports navigator.sendBeacon.\n   */\n  static sendRequestUsingBeacon(win, request) {\n    if (!win.navigator.sendBeacon) {\n      return false;\n    }\n    const result = win.navigator.sendBeacon(request, '');\n    if (result) {\n      dev().fine(TAG_, 'Sent beacon request', request);\n    }\n    return result;\n  }\n\n  /**\n   * @param {!Window} win\n   * @param {string} request\n   * @return {boolean} True if this browser supports cross-domain XHR.\n   */\n  static sendRequestUsingXhr(win, request) {\n    if (!win.XMLHttpRequest) {\n      return false;\n    }\n    /** @const {XMLHttpRequest} */\n    const xhr = new win.XMLHttpRequest();\n    if (!('withCredentials' in xhr)) {\n      return false; // Looks like XHR level 1 - CORS is not supported.\n    }\n    xhr.open('POST', request, true);\n    xhr.withCredentials = true;\n\n    // Prevent pre-flight HEAD request.\n    xhr.setRequestHeader('Content-Type', 'text/plain');\n\n    xhr.onreadystatechange = () => {\n      if (xhr.readyState == 4) {\n        dev().fine(TAG_, 'Sent XHR request', request);\n      }\n    };\n\n    xhr.send('');\n    return true;\n  }\n}\n\n/**\n * Sends a ping request using an iframe, that is removed 5 seconds after\n * it is loaded.\n * This is not available as a standard transport, but rather used for\n * specific, whitelisted requests.\n * Note that this is unrelated to the cross-domain iframe use case above in\n * sendRequestUsingCrossDomainIframe()\n * @param {!Window} win\n * @param {string} request The request URL.\n */\nexport function sendRequestUsingIframe(win, request) {\n  assertHttpsUrl(request, 'amp-analytics request');\n  /** @const {!Element} */\n  const iframe = win.document.createElement('iframe');\n  setStyle(iframe, 'display', 'none');\n  iframe.onload = iframe.onerror = () => {\n    Services.timerFor(win).delay(() => {\n      removeElement(iframe);\n    }, 5000);\n  };\n  user().assert(\n      parseUrlDeprecated(request).origin !=\n        parseUrlDeprecated(win.location.href).origin,\n      'Origin of iframe request must not be equal to the document origin.' +\n      ' See https://github.com/ampproject/' +\n      ' amphtml/blob/master/spec/amp-iframe-origin-policy.md for details.');\n  iframe.setAttribute('amp-analytics', '');\n  iframe.setAttribute('sandbox', 'allow-scripts allow-same-origin');\n  iframe.src = request;\n  win.document.body.appendChild(iframe);\n  return iframe;\n}\n","/**\n * Copyright 2016 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Services} from '../../../src/services';\nimport {base64UrlEncodeFromString} from '../../../src/utils/base64';\nimport {dev, user} from '../../../src/log';\nimport {getService, registerServiceBuilder} from '../../../src/service';\nimport {isArray, isFiniteNumber} from '../../../src/types';\n// TODO(calebcordry) remove this once experiment is launched\n// also remove from dep-check-config whitelist;\nimport {isExperimentOn} from '../../../src/experiments';\n\n/** @const {string} */\nconst TAG = 'Analytics.Variables';\n\n/** @const {RegExp} */\nconst VARIABLE_ARGS_REGEXP = /^(?:([^\\s]*)(\\([^)]*\\))|[^]+)$/;\n\n/** @typedef {{name: string, argList: string}} */\nlet FunctionNameArgsDef;\n\n/**\n * The structure that contains all details needed to expand a template\n * @struct\n * @const\n * @package For type.\n */\nexport class ExpansionOptions {\n  /**\n   * @param {!Object<string, *>} vars\n   * @param {number=} opt_iterations\n   * @param {boolean=} opt_noEncode\n   */\n  constructor(vars, opt_iterations, opt_noEncode) {\n    /** @const {!Object<string, string|Array<string>>} */\n    this.vars = vars;\n    /** @const {number} */\n    this.iterations = opt_iterations === undefined ? 2 : opt_iterations;\n    /** @const {boolean} */\n    this.noEncode = !!opt_noEncode;\n    this.freezeVars = {};\n  }\n\n  /**\n   * Freeze special variable name so that they don't get expanded.\n   * For example ${extraUrlParams}\n   * @param {string} str\n   */\n  freezeVar(str) {\n    this.freezeVars[str] = true;\n  }\n}\n\n\n\n/**\n * @param {string} str\n * @param {string} s\n * @param {string=} opt_l\n * @return {string}\n */\nfunction substrMacro(str, s, opt_l) {\n  const start = Number(s);\n  let {length} = str;\n  user().assert(isFiniteNumber(start),\n      'Start index ' + start + 'in substr macro should be a number');\n  if (opt_l) {\n    length = Number(opt_l);\n    user().assert(isFiniteNumber(length),\n        'Length ' + length + ' in substr macro should be a number');\n  }\n\n  return str.substr(start, length);\n}\n\n/**\n * @param {string} value\n * @param {string} defaultValue\n * @return {string}\n */\nfunction defaultMacro(value, defaultValue) {\n  if (!value || !value.length) {\n    return user().assertString(defaultValue);\n  }\n  return value;\n}\n\n/**\n * @param {string} string input to be replaced\n * @param {string} matchPattern string representation of regex pattern\n * @param {string=} opt_newSubStr pattern to be substituted in\n * @return {string}\n */\nfunction replaceMacro(string, matchPattern, opt_newSubStr) {\n  if (!matchPattern) {\n    user().warn(TAG, 'REPLACE macro must have two or more arguments');\n  }\n  if (!opt_newSubStr) {\n    opt_newSubStr = '';\n  }\n  const regex = new RegExp(matchPattern, 'g');\n  return string.replace(regex, opt_newSubStr);\n}\n\n\n/**\n * Provides support for processing of advanced variable syntax like nested\n * expansions macros etc.\n */\nexport class VariableService {\n  /**\n   * @param {!Window} window\n   */\n  constructor(window) {\n\n    /** @private {!Window} */\n    this.win_ = window;\n\n    /** @private {!Object<string, *>} */\n    this.macros_ = {};\n\n    this.register_('$DEFAULT', defaultMacro);\n    this.register_('$SUBSTR', substrMacro);\n    this.register_('$TRIM', value => value.trim());\n    this.register_('$JSON', value => JSON.stringify(value));\n    this.register_('$TOLOWERCASE', value => value.toLowerCase());\n    this.register_('$TOUPPERCASE', value => value.toUpperCase());\n    this.register_('$NOT', value => String(!value));\n    this.register_('$BASE64', value => base64UrlEncodeFromString(value));\n    this.register_('$HASH', this.hashMacro_.bind(this));\n    this.register_('$IF',\n        (value, thenValue, elseValue) => value ? thenValue : elseValue);\n    this.register_('$REPLACE', replaceMacro);\n  }\n\n  /**\n   * @return {!Object} contains all registered macros\n   */\n  getMacros() {\n    const isV2ExpansionOn = this.win_ && isExperimentOn(this.win_,\n        'url-replacement-v2');\n    return isV2ExpansionOn ? this.macros_ : {};\n  }\n\n  /**\n   * @param {string} name\n   * @param {*} macro\n   */\n  register_(name, macro) {\n    dev().assert(!this.macros_[name], 'Macro \"' + name\n        + '\" already registered.');\n    this.macros_[name] = macro;\n  }\n\n  /**\n   * @param {string} template The template to expand\n   * @param {!ExpansionOptions} options configuration to use for expansion\n   * @return {!Promise<string>} The expanded string\n   */\n  expandTemplate(template, options) {\n    if (options.iterations < 0) {\n      user().error(TAG, 'Maximum depth reached while expanding variables. ' +\n          'Please ensure that the variables are not recursive.');\n      return Promise.resolve(template);\n    }\n\n    const replacementPromises = [];\n    let replacement = template.replace(/\\${([^}]*)}/g, (match, key) => {\n      if (!key) {\n        return Promise.resolve('');\n      }\n\n      const {name, argList} = this.getNameArgs_(key);\n      if (options.freezeVars[name]) {\n        // Do nothing with frozen params\n        return match;\n      }\n\n      const raw = options.vars[name] != null ? options.vars[name] : '';\n\n      let p;\n      if (typeof raw == 'string') {\n        // Expand string values further.\n        p = this.expandTemplate(raw,\n            new ExpansionOptions(options.vars, options.iterations - 1,\n                true /* noEncode */));\n      } else {\n        // Values can also be arrays and objects. Don't expand them.\n        p = Promise.resolve(raw);\n      }\n\n      p = p.then(finalRawValue => {\n        // Then encode the value\n        const val = options.noEncode\n          ? finalRawValue\n          : this.encodeVars(name, finalRawValue);\n        return val ? val + argList : val;\n      })\n          .then(encodedValue => {\n          // Replace it in the string\n            replacement = replacement.replace(match, encodedValue);\n          });\n\n      // Queue current replacement promise after the last replacement.\n      replacementPromises.push(p);\n\n      // Since the replacement will happen later, return the original template.\n      return match;\n    });\n\n    // Once all the promises are complete, return the expanded value.\n    return Promise.all(replacementPromises).then(() => replacement);\n  }\n\n  /**\n   * Returns an array containing two values: name and args parsed from the key.\n   *\n   * @param {string} key The key to be parsed.\n   * @return {!FunctionNameArgsDef}\n   * @private\n   */\n  getNameArgs_(key) {\n    if (!key) {\n      return {name: '', argList: ''};\n    }\n    const match = key.match(VARIABLE_ARGS_REGEXP);\n    user().assert(match, 'Variable with invalid format found: ' + key);\n    return {name: match[1] || match[0], argList: match[2] || ''};\n  }\n\n  /**\n   * @param {string} unusedName Name of the variable. Only used in tests.\n   * @param {string|!Array<string>} raw The values to URI encode.\n   * @return {string} The encoded value.\n   */\n  encodeVars(unusedName, raw) {\n    if (raw == null) {\n      return '';\n    }\n\n    if (isArray(raw)) {\n      return raw.map(this.encodeVars.bind(this, unusedName)).join(',');\n    }\n    // Separate out names and arguments from the value and encode the value.\n    const {name, argList} = this.getNameArgs_(String(raw));\n    return encodeURIComponent(name) + argList;\n  }\n\n  /**\n   * @param {string} value\n   * @return {!Promise<string>}\n   */\n  hashMacro_(value) {\n    return Services.cryptoFor(this.win_).sha384Base64(value);\n  }\n}\n\n\n/**\n * @param {!Window} win\n */\nexport function installVariableService(win) {\n  registerServiceBuilder(win, 'amp-analytics-variables', VariableService);\n}\n\n/**\n * @param {!Window} win\n * @return {!VariableService}\n */\nexport function variableServiceFor(win) {\n  return getService(win, 'amp-analytics-variables');\n}\n","/**\n * Copyright 2015 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {IFRAME_TRANSPORTS} from './iframe-transport-vendors';\nimport {hasOwn} from '../../../src/utils/object';\n\n/**\n * @const {!JsonObject}\n */\nexport const ANALYTICS_CONFIG = /** @type {!JsonObject} */ ({\n\n  // Default parent configuration applied to all amp-analytics tags.\n  'default': {\n    'transport': {'beacon': true, 'xhrpost': true, 'image': true},\n    'vars': {\n      'accessReaderId': 'ACCESS_READER_ID',\n      'adNavTiming': 'AD_NAV_TIMING', // only available in A4A embeds\n      'adNavType': 'AD_NAV_TYPE', // only available in A4A embeds\n      'adRedirectCount': 'AD_NAV_REDIRECT_COUNT', // only available in A4A\n      'ampdocHost': 'AMPDOC_HOST',\n      'ampdocHostname': 'AMPDOC_HOSTNAME',\n      'ampdocUrl': 'AMPDOC_URL',\n      'ampGeo': 'AMP_GEO',\n      'ampState': 'AMP_STATE',\n      'ampVersion': 'AMP_VERSION',\n      'ancestorOrigin': 'ANCESTOR_ORIGIN',\n      'authdata': 'AUTHDATA',\n      'availableScreenHeight': 'AVAILABLE_SCREEN_HEIGHT',\n      'availableScreenWidth': 'AVAILABLE_SCREEN_WIDTH',\n      'backgroundState': 'BACKGROUND_STATE',\n      'browserLanguage': 'BROWSER_LANGUAGE',\n      'canonicalHost': 'CANONICAL_HOST',\n      'canonicalHostname': 'CANONICAL_HOSTNAME',\n      'canonicalPath': 'CANONICAL_PATH',\n      'canonicalUrl': 'CANONICAL_URL',\n      'clientId': 'CLIENT_ID',\n      'contentLoadTime': 'CONTENT_LOAD_TIME',\n      'counter': 'COUNTER',\n      'documentCharset': 'DOCUMENT_CHARSET',\n      'documentReferrer': 'DOCUMENT_REFERRER',\n      'domainLookupTime': 'DOMAIN_LOOKUP_TIME',\n      'domInteractiveTime': 'DOM_INTERACTIVE_TIME',\n      'externalReferrer': 'EXTERNAL_REFERRER',\n      'firstContentfulPaint': 'FIRST_CONTENTFUL_PAINT',\n      'firstViewportReady': 'FIRST_VIEWPORT_READY',\n      'fragmentParam': 'FRAGMENT_PARAM',\n      'makeBodyVisible': 'MAKE_BODY_VISIBLE',\n      'htmlAttr': 'HTML_ATTR',\n      'incrementalEngagedTime': 'INCREMENTAL_ENGAGED_TIME',\n      'navRedirectCount': 'NAV_REDIRECT_COUNT',\n      'navTiming': 'NAV_TIMING',\n      'navType': 'NAV_TYPE',\n      'pageDownloadTime': 'PAGE_DOWNLOAD_TIME',\n      'pageLoadTime': 'PAGE_LOAD_TIME',\n      'pageViewId': 'PAGE_VIEW_ID',\n      'queryParam': 'QUERY_PARAM',\n      'random': 'RANDOM',\n      'redirectTime': 'REDIRECT_TIME',\n      'screenColorDepth': 'SCREEN_COLOR_DEPTH',\n      'screenHeight': 'SCREEN_HEIGHT',\n      'screenWidth': 'SCREEN_WIDTH',\n      'scrollHeight': 'SCROLL_HEIGHT',\n      'scrollLeft': 'SCROLL_LEFT',\n      'scrollTop': 'SCROLL_TOP',\n      'scrollWidth': 'SCROLL_WIDTH',\n      'serverResponseTime': 'SERVER_RESPONSE_TIME',\n      'sourceUrl': 'SOURCE_URL',\n      'sourceHost': 'SOURCE_HOST',\n      'sourceHostname': 'SOURCE_HOSTNAME',\n      'sourcePath': 'SOURCE_PATH',\n      'tcpConnectTime': 'TCP_CONNECT_TIME',\n      'timestamp': 'TIMESTAMP',\n      'timezone': 'TIMEZONE',\n      'timezoneCode': 'TIMEZONE_CODE',\n      'title': 'TITLE',\n      'totalEngagedTime': 'TOTAL_ENGAGED_TIME',\n      'userAgent': 'USER_AGENT',\n      'viewer': 'VIEWER',\n      'viewportHeight': 'VIEWPORT_HEIGHT',\n      'viewportWidth': 'VIEWPORT_WIDTH',\n    },\n  },\n  'acquialift': {\n    'vars': {\n      'decisionApiUrl': 'us-east-1-decisionapi.lift.acquia.com',\n      'accountId': 'xxxxxxxx',\n      'siteId': 'xxxxxxxx',\n    },\n    'transport': {'beacon': true, 'xhrpost': true, 'image': false},\n    'requests': {\n      'base': 'https://${decisionApiUrl}/capture?account_id=${accountId}&site_id=${siteId}',\n      'basicCapture': '${base}' +\n        '&ident=${clientId(tc_ptid)}' +\n        '&identsrc=amp' +\n        '&es=Amp' +\n        '&url=${canonicalUrl}' +\n        '&rurl=${documentReferrer}' +\n        '&cttl=${title}',\n      'pageview': '${basicCapture}' +\n        '&en=Content View',\n      'click': '${basicCapture}' +\n        '&en=Click-Through',\n    },\n    'triggers': {\n      'defaultPageview': {\n        'on': 'visible',\n        'request': 'pageview',\n      },\n    },\n  },\n\n  'afsanalytics': {\n    'vars': {\n      'server': 'www',\n      'websiteid': 'xxxxxxxx',\n      'event': 'click',\n      'clicklabel': 'clicked from AMP page',\n    },\n    'transport': {'beacon': false, 'xhrpost': false, 'image': true},\n    'requests': {\n      'host': '//${server}.afsanalytics.com',\n      'base': '${host}/cgi_bin/',\n      'pageview': '${base}connect.cgi?usr=${websiteid}Pauto' +\n        '&js=1' +\n        '&amp=1' +\n        '&title=${title}' +\n        '&url=${canonicalUrl}' +\n        '&refer=${documentReferrer}' +\n        '&resolution=${screenWidth}x${screenHeight}' +\n        '&color=${screenColorDepth}' +\n        '&Tips=${random}',\n      'click': '${base}click.cgi?usr=${websiteid}' +\n        '&event=${event}' +\n        '&exit=${clicklabel}',\n    },\n    'triggers': {\n      'defaultPageview': {\n        'on': 'visible',\n        'request': 'pageview',\n      },\n    },\n  },\n\n  'alexametrics': {\n    'requests': {\n      'base': 'https://${ampAtrkHost}/atrk.gif?account=${atrk_acct}&domain=${domain}',\n      'pageview': '${base}&jsv=amp-${ampVersion}' +\n        '&frame_height=${viewportHeight}&frame_width=${viewportWidth}' +\n        '&title=${title}&time=${timestamp}&time_zone_offset=${timezone}' +\n        '&screen_params=${screenWidth}x${screenHeight}x${screenColorDepth}' +\n        '&ref_url=${documentReferrer}&host_url=${sourceUrl}' +\n        '&random_number=${random}&user_cookie=${clientId(__auc)}' +\n        '&user_cookie_flag=0&user_lang=${browserLanguage}' +\n        '&amp_doc_url=${ampdocUrl}',\n    },\n    'vars': {\n      'atrk_acct': '',\n      'domain': '',\n      'ampAtrkHost': 'certify-amp.alexametrics.com',\n    },\n    'triggers': {\n      'trackPageview': {\n        'on': 'visible',\n        'request': 'pageview',\n      },\n    },\n    'transport': {\n      'xhrpost': false,\n      'beacon': false,\n      'image': true,\n    },\n  },\n\n  'atinternet': {\n    'transport': {'beacon': false, 'xhrpost': false, 'image': true},\n    'requests': {\n      'base': 'https://${log}${domain}/hit.xiti?s=${site}&ts=${timestamp}&r=${screenWidth}x${screenHeight}x${screenColorDepth}&re=${availableScreenWidth}x${availableScreenHeight}',\n      'suffix': '&medium=amp&${extraUrlParams}&ref=${documentReferrer}',\n      'pageview': '${base}&' +\n        'p=${title}&' +\n        's2=${level2}${suffix}',\n      'click': '${base}&' +\n        'pclick=${title}&' +\n        's2click=${level2}&' +\n        'p=${label}&' +\n        's2=${level2Click}&' +\n        'type=click&click=${type}${suffix}',\n    },\n  },\n\n  'umenganalytics': {\n    'vars': {\n      'siteid': '',\n      'initial_view_time': '',\n      'eventName': '',\n      'eventProps': '',\n    },\n    'requests': {\n      'base': 'https://b.cnzz.com/utrack?' +\n      '&_siteid=${siteid}' +\n      '&_distinct_id=${clientId(umeng_amp_id)}' +\n      '&_t=${timestamp}' +\n      '&_s=google' +\n      '&_b=web' +\n      '&_r=${externalReferrer}' +\n      '&_h=${screenHeight}' +\n      '&_w=${screenWidth}' +\n      '&_ivt=${initial_view_time}',\n      'pageview': '${base}&_ename=$w_page_view&_eprops=${eventProps}',\n      'event': '${base}&_ename=${eventName}&_eprops=${eventProps}',\n    },\n    'triggers': {\n      'defaultPageview': {\n        'on': 'visible',\n        'request': 'pageview',\n      },\n    },\n    'transport': {\n      'beacon': false,\n      'xhrpost': false,\n      'image': true,\n    },\n  },\n\n  'baiduanalytics': {\n    'requests': {\n      'host': 'https://hm.baidu.com',\n      'base': '${host}/hm.gif?' +\n          'si=${token}&nv=0&st=4&v=pixel-1.0&rnd=${timestamp}',\n      'pageview': '${base}&et=0',\n      'event': '${base}&ep=${category}*${action}*' +\n          '${label}*${value}&et=4&api=8_0',\n    },\n    'transport': {\n      'beacon': false,\n      'xhrpost': false,\n      'image': true,\n    },\n  },\n\n  'burt': {\n    'vars': {\n      'trackingKey': 'ignore',\n      'category': '',\n      'subCategory': '',\n    },\n    'requests': {\n      'host': '//${trackingKey}.c.richmetrics.com/',\n      'base': '${host}imglog?' +\n        'e=${trackingKey}&' +\n        'pi=${trackingKey}' +\n          '|${pageViewId}' +\n          '|${canonicalPath}' +\n          '|${clientId(burt-amp-user-id)}&' +\n        'ui=${clientId(burt-amp-user-id)}&' +\n        'v=amp&' +\n        'ts=${timestamp}&' +\n        'sn=${requestCount}&',\n      'pageview': '${base}' +\n        'type=page&' +\n        'ca=${category}&' +\n        'sc=${subCategory}&' +\n        'ln=${browserLanguage}&' +\n        'lr=${documentReferrer}&' +\n        'eu=${sourceUrl}&' +\n        'tz=${timezone}&' +\n        'pd=${scrollWidth}x${scrollHeight}&' +\n        'sd=${screenWidth}x${screenHeight}&' +\n        'wd=${availableScreenWidth}x${availableScreenHeight}&' +\n        'ws=${scrollLeft}x${scrollTop}',\n      'pageping': '${base}' +\n        'type=pageping',\n    },\n    'triggers': {\n      'pageview': {\n        'on': 'visible',\n        'request': 'pageview',\n      },\n      'pageping': {\n        'on': 'timer',\n        'timerSpec': {\n          'interval': 15,\n          'maxTimerLength': 1200,\n        },\n        'request': 'pageping',\n      },\n    },\n    'transport': {\n      'beacon': false,\n      'xhrpost': false,\n      'image': true,\n    },\n  },\n\n  'byside': {\n    'vars': {\n\t  'webcareZone': 'webcare',\n      'webcareId': '',\n      'channel': '',\n      'fid': '',\n\t  'lang': 'pt',\n    },\n    'requests': {\n      'host': '//${webcareZone}.byside.com/',\n      'base': '${host}BWA${webcareId}/amp/',\n      'pageview': '${base}pixel.php',\n\t  'event': '${base}signal.php?event_id=${eventId}' +\n\t    '&event_label=${eventLabel}&fields=${fields}',\n    },\n    'extraUrlParams': {\n      'webcare_id': '${webcareId}',\n      'bwch': '${channel}',\n      'lang': '${lang}',\n      'fid': '${fid}',\n      'bwit': 'A',\n      'tuid': '${clientId(byside_webcare_tuid)}',\n      'suid': '',\n      'puid': '${pageViewId}p${timestamp}',\n      'referrer': '${documentReferrer}',\n      'page': '${sourceUrl}',\n      'amppage': '${ampdocUrl}',\n      'bwpt': '${title}',\n      'bres': '${viewportWidth}x${viewportHeight}',\n      'res': '${screenWidth}x${screenHeight}',\n      'v': 'v20171116a',\n      'ampv': '${ampVersion}',\n      'viewer': '${viewer}',\n      'ua': '${userAgent}',\n      'r': '${random}',\n    },\n    'triggers': {\n      'pageview': {\n        'on': 'visible',\n        'request': 'pageview',\n      },\n    },\n    'transport': {\n      'beacon': false,\n      'xhrpost': false,\n      'image': true,\n    },\n  },\n\n  'chartbeat': {\n    'requests': {\n      'host': 'https://ping.chartbeat.net',\n      'basePrefix': '/ping?h=${domain}&' +\n        'p=${canonicalPath}&' +\n        'u=${clientId(_cb)}&' +\n        'd=${canonicalHost}&' +\n        'g=${uid}&' +\n        'g0=${sections}&' +\n        'g1=${authors}&' +\n        'g2=${zone}&' +\n        'g3=${sponsorName}&' +\n        'g4=${contentType}&' +\n        'c=120&' +\n        'x=${scrollTop}&' +\n        'y=${scrollHeight}&' +\n        'j=${decayTime}&' +\n        'R=1&' +\n        'W=0&' +\n        'I=0&' +\n        'E=${totalEngagedTime}&' +\n        'r=${documentReferrer}&' +\n        't=${pageViewId}${clientId(_cb)}&' +\n        'b=${pageLoadTime}&' +\n        'i=${title}&' +\n        'T=${timestamp}&' +\n        'tz=${timezone}&' +\n        'C=2',\n      'baseSuffix': '&_',\n      'interval': '${host}${basePrefix}${baseSuffix}',\n      'anchorClick': '${host}${basePrefix}${baseSuffix}',\n    },\n    'triggers': {\n      'trackInterval': {\n        'on': 'timer',\n        'timerSpec': {\n          'interval': 15,\n          'maxTimerLength': 7200,\n        },\n        'request': 'interval',\n        'vars': {\n          'decayTime': 30,\n        },\n      },\n      'trackAnchorClick': {\n        'on': 'click',\n        'selector': 'a',\n        'request': 'anchorClick',\n        'vars': {\n          'decayTime': 30,\n        },\n      },\n    },\n    'transport': {\n      'beacon': false,\n      'xhrpost': false,\n      'image': true,\n    },\n  },\n\n  'clicky': {\n    'vars': {\n      'site_id': '',\n    },\n    'requests': {\n      'base': 'https://in.getclicky.com/in.php?' +\n        'site_id=${site_id}',\n      'baseSuffix': '&mime=${contentType}&' +\n        'x=${random}',\n      'pageview': '${base}&' +\n        'res=${screenWidth}x${screenHeight}&' +\n        'lang=${browserLanguage}&' +\n        'secure=1&' +\n        'type=pageview&' +\n        'href=${canonicalPath}&' +\n        'title=${title}' +\n        '${baseSuffix}',\n      'interval': '${base}&' +\n        'type=ping' +\n        '${baseSuffix}',\n    },\n    'triggers': {\n      'defaultPageview': {\n        'on': 'visible',\n        'request': 'pageview',\n      },\n      'interval': {\n        'on': 'timer',\n        'timerSpec': {\n          'interval': 60,\n          'maxTimerLength': 600,\n        },\n        'request': 'interval',\n      },\n    },\n    'transport': {\n      'beacon': false,\n      'xhrpost': false,\n      'image': true,\n    },\n  },\n\n  'colanalytics': {\n    'requests': {\n      'host': 'https://ase.clmbtech.com',\n      'base': '${host}/message',\n      'pageview': '${base}?cid=${id}' +\n        '&val_101=${id}' +\n        '&val_101=${canonicalPath}' +\n        '&ch=${canonicalHost}' +\n        '&uuid=${uid}' +\n        '&au=${authors}' +\n        '&zo=${zone}' +\n        '&sn=${sponsorName}' +\n        '&ct=${contentType}' +\n        '&st=${scrollTop}' +\n        '&sh=${scrollHeight}' +\n        '&dct=${decayTime}' +\n        '&tet=${totalEngagedTime}' +\n        '&dr=${documentReferrer}' +\n        '&plt=${pageLoadTime}' +\n        '&val_108=${title}' +\n        '&val_120=3',\n    },\n    'triggers': {\n      'defaultPageview': {\n        'on': 'visible',\n        'request': 'pageview',\n      },\n    },\n    'transport': {\n      'beacon': false,\n      'xhrpost': false,\n      'image': true,\n    },\n  },\n\n  'comscore': {\n    'vars': {\n      'c2': '1000001',\n    },\n    'requests': {\n      'host': 'https://sb.scorecardresearch.com',\n      'base': '${host}/b?',\n      'pageview': '${base}c1=2' +\n        '&c2=${c2}' +\n        '&cs_pv=${pageViewId}' +\n        '&c12=${clientId(comScore)}' +\n        '&rn=${random}' +\n        '&c8=${title}' +\n        '&c7=${canonicalUrl}' +\n        '&c9=${documentReferrer}' +\n        '&cs_c7amp=${ampdocUrl}',\n    },\n    'triggers': {\n      'defaultPageview': {\n        'on': 'visible',\n        'request': 'pageview',\n      },\n    },\n    'transport': {\n      'beacon': false,\n      'xhrpost': false,\n      'image': true,\n    },\n  },\n\n  'cxense': {\n    'requests': {\n      'host': 'https://scomcluster.cxense.com',\n      'base': '${host}/Repo/rep.gif',\n      'pageview': '${base}?ver=1&typ=pgv&sid=${siteId}&ckp=${clientId(cX_P)}&' +\n          'loc=${sourceUrl}&rnd=${random}&ref=${documentReferrer}&' +\n          'ltm=${timestamp}&wsz=${screenWidth}x${screenHeight}&' +\n          'bln=${browserLanguage}&chs=${documentCharset}&' +\n          'col=${screenColorDepth}&tzo=${timezone}&cp_cx_channel=amp',\n    },\n    'triggers': {\n      'defaultPageview': {\n        'on': 'visible',\n        'request': 'pageview',\n      },\n    },\n    'transport': {\n      'beacon': false,\n      'xhrpost': false,\n      'image': true,\n    },\n  },\n\n  'dynatrace': {\n    'requests': {\n      'endpoint': '${protocol}://${tenant}${separator}${environment}:${port}/ampbf/${tenantpath}',\n      'pageview': '${endpoint}?type=js&' +\n        'flavor=amp&' +\n        'v=1&' +\n        'a=1%7C1%7C_load_%7C_load_%7C-%7C${navTiming(navigationStart)}%7C' +\n\t\t'${navTiming(domContentLoadedEventEnd)}%7C0%2C2%7C2%7C_onload_%7C' +\n\t\t'_load_%7C-%7C${navTiming(domContentLoadedEventStart)}%7C' +\n\t\t'${navTiming(domContentLoadedEventEnd)}%7C0&' +\n        'fId=${pageViewId}&' +\n        'vID=${clientId(rxVisitor)}&' +\n        'referer=${sourceUrl}&' +\n        'title=${title}&' +\n        'sw=${screenWidth}&' +\n        'sh=${screenHeight}&' +\n        'w=${viewportWidth}&' +\n        'h=${viewportHeight}&' +\n        'nt=a${navType}' +\n        'b${navTiming(navigationStart)}' +\n        'c${navTiming(navigationStart,redirectStart)}' +\n        'd${navTiming(navigationStart,redirectEnd)}' +\n        'e${navTiming(navigationStart,fetchStart)}' +\n        'f${navTiming(navigationStart,domainLookupStart)}' +\n        'g${navTiming(navigationStart,domainLookupEnd)}' +\n        'h${navTiming(navigationStart,connectStart)}' +\n        'i${navTiming(navigationStart,connectEnd)}' +\n        'j${navTiming(navigationStart,secureConnectionStart)}' +\n        'k${navTiming(navigationStart,requestStart)}' +\n        'l${navTiming(navigationStart,responseStart)}' +\n        'm${navTiming(navigationStart,responseEnd)}' +\n        'n${navTiming(navigationStart,domLoading)}' +\n        'o${navTiming(navigationStart,domInteractive)}' +\n        'p${navTiming(navigationStart,domContentLoadedEventStart)}' +\n        'q${navTiming(navigationStart,domContentLoadedEventEnd)}' +\n        'r${navTiming(navigationStart,domComplete)}' +\n        's${navTiming(navigationStart,loadEventStart)}' +\n        't${navTiming(navigationStart,loadEventEnd)}&' +\n        'app=${app}&' +\n        'time=${timestamp}',\n    },\n    'triggers': {\n      'trackPageview': {\n        'on': 'visible',\n        'request': 'pageview',\n      },\n    },\n    'transport': {\n      'beacon': false,\n      'xhrpost': false,\n      'image': true,\n    },\n    'vars': {\n      'app': 'ampapp',\n      'protocol': 'https',\n      'tenant': '',\n      'environment': 'live.dynatrace.com',\n      'port': '443',\n      'separator': '.',\n    },\n  },\n\n  'euleriananalytics': {\n    'vars': {\n      'analyticsHost': '',\n      'documentLocation': 'SOURCE_URL',\n    },\n    'requests': {\n      'base': 'https://${analyticsHost}',\n      'basePrefix': '-/${random}?' +\n        'euid-amp=${clientId(etuix)}&' +\n        'url=${documentLocation}&',\n      'pageview': '${base}/col2/${basePrefix}' +\n        'rf=${externalReferrer}&' +\n        'urlp=${pagePath}&' +\n        'ss=${screenWidth}x${screenHeight}&' +\n        'sd=${screenColorDepth}',\n      'action': '${base}/action/${basePrefix}' +\n        'eact=${actionCode}&' +\n        'actr=${actionRef}',\n      'user': '${base}/uparam/${basePrefix}' +\n        'euk${userParamKey}=${userParamVal}',\n      'contextflag': '${base}/cflag2/${basePrefix}' +\n        'ecf0k=${cflagKey}&ecf0v=${cflagVal}',\n    },\n    'transport': {\n      'beacon': false,\n      'xhrpost': false,\n      'image': true,\n    },\n  },\n\n  'facebookpixel': {\n    'vars': {\n      'pixelId': 'PIXEL-ID',\n    },\n    'requests': {\n      'host': 'https://www.facebook.com',\n      'base': '${host}/tr?noscript=1',\n      'pageview': '${base}&ev=PageView&' +\n          'id=${pixelId}',\n      'event': '${base}&ev=${eventName}&' +\n          'id=${pixelId}' +\n          '&cd[content_name]=${content_name}',\n      'eventViewContent': '${base}&ev=ViewContent&' +\n          'id=${pixelId}' +\n          '&cd[value]=${value}' +\n          '&cd[currency]=${currency}' +\n          '&cd[content_name]=${content_name}' +\n          '&cd[content_type]=${content_type}' +\n          '&cd[content_ids]=${content_ids}',\n      'eventSearch': '${base}&ev=Search&' +\n          'id=${pixelId}' +\n          '&cd[value]=${value}' +\n          '&cd[currency]=${currency}' +\n          '&cd[content_category]=${content_category}' +\n          '&cd[content_ids]=${content_ids}' +\n          '&cd[search_string]=${search_string}',\n      'eventAddToCart': '${base}&ev=AddToCart&' +\n          'id=${pixelId}' +\n          '&cd[value]=${value}' +\n          '&cd[currency]=${currency}' +\n          '&cd[content_name]=${content_name}' +\n          '&cd[content_type]=${content_type}' +\n          '&cd[content_ids]=${content_ids}',\n      'eventAddToWishlist': '${base}&ev=AddToWishlist&' +\n          'id=${pixelId}' +\n          '&cd[value]=${value}' +\n          '&cd[currency]=${currency}' +\n          '&cd[content_name]=${content_name}' +\n          '&cd[content_category]=${content_category}' +\n          '&cd[content_ids]=${content_ids}',\n      'eventInitiateCheckout': '${base}&ev=InitiateCheckout&' +\n          'id=${pixelId}' +\n          '&cd[value]=${value}' +\n          '&cd[currency]=${currency}' +\n          '&cd[content_name]=${content_name}' +\n          '&cd[content_category]=${content_category}' +\n          '&cd[num_items]=${num_items}' +\n          '&cd[content_ids]=${content_ids}',\n      'eventAddPaymentInfo': '${base}&ev=AddPaymentInfo&' +\n          'id=${pixelId}' +\n          '&cd[value]=${value}' +\n          '&cd[currency]=${currency}' +\n          '&cd[content_category]=${content_category}' +\n          '&cd[content_ids]=${content_ids}',\n      'eventPurchase': '${base}&ev=Purchase&' +\n          'id=${pixelId}' +\n          '&cd[value]=${value}' +\n          '&cd[currency]=${currency}' +\n          '&cd[content_name]=${content_name}' +\n          '&cd[content_type]=${content_type}' +\n          '&cd[content_ids]=${content_ids}' +\n          '&cd[num_items]=${num_items}',\n      'eventLead': '${base}&ev=Lead&' +\n          'id=${pixelId}' +\n          '&cd[value]=${value}' +\n          '&cd[currency]=${currency}' +\n          '&cd[content_name]=${content_name}' +\n          '&cd[content_category]=${content_category}',\n      'eventCompleteRegistration': '${base}&ev=CompleteRegistration&' +\n          'id=${pixelId}' +\n          '&cd[value]=${value}' +\n          '&cd[currency]=${currency}' +\n          '&cd[content_name]=${content_name}' +\n          '&cd[status]=${status}',\n    },\n    'triggers': {\n      'trackPageview': {\n        'on': 'visible',\n        'request': 'pageview',\n      },\n    },\n  },\n\n  'gemius': {\n    'requests': {\n      'base': 'https://${prefix}.hit.gemius.pl/_${timestamp}/redot.gif?l=91&id=${identifier}&screen=${screenWidth}x${screenHeight}&window=${viewportWidth}x${viewportHeight}&fr=1&href=${sourceUrl}&ref=${documentReferrer}&extra=gemamp%3D1%7Campid%3D${clientId(gemius)}%7C${extraparams}',\n      'pageview': '${base}&et=view&hsrc=1',\n      'event': '${base}&et=action&hsrc=3',\n    },\n    'triggers': {\n      'defaultPageview': {\n        'on': 'visible',\n        'request': 'pageview',\n      },\n    },\n    'transport': {\n      'beacon': false,\n      'xhrpost': false,\n      'image': true,\n    },\n  },\n\n  'googleadwords': { // https://developers.google.com/adwords/amp/landing-pages\n    'requests': {\n      'conversion_prefix': 'https://www.googleadservices.com/pagead/conversion/',\n      'remarketing_prefix':\n          'https://googleads.g.doubleclick.net/pagead/viewthroughconversion/',\n      'common_params': '${googleConversionId}/?' +\n          'cv=amp2&' + // Increment when making changes.\n          'label=${googleConversionLabel}&' +\n          'random=${random}&' +\n          'url=${sourceUrl}&' +\n          'ref=${documentReferrer}&' +\n          'fst=${pageViewId}&' +\n          'num=${counter(googleadwords)}&' +\n          'fmt=3&' +\n          'async=1&' +\n          'u_h=${screenHeight}&u_w=${screenWidth}&' +\n          'u_ah=${availableScreenHeight}&u_aw=${availableScreenWidth}&' +\n          'u_cd=${screenColorDepth}&' +\n          'u_tz=${timezone}&' +\n          'tiba=${title}&' +\n          'guid=ON&script=0',\n      'conversion_params': 'value=${googleConversionValue}&' +\n          'currency_code=${googleConversionCurrency}&' +\n          'bg=${googleConversionColor}&' +\n          'hl=${googleConversionLanguage}',\n      'conversion': '${conversion_prefix}${common_params}&${conversion_params}',\n      'remarketing': '${remarketing_prefix}${common_params}',\n    },\n    'transport': {\n      'beacon': false,\n      'xhrpost': false,\n      'image': true,\n    },\n  },\n\n  'gtag': {\n    'configRewriter': {\n      'url': 'https://www.googletagmanager.com/gtag/amp',\n    },\n    'vars': {\n      'eventValue': '0',\n      'documentLocation': 'SOURCE_URL',\n      'clientId': 'CLIENT_ID(AMP_ECID_GOOGLE,,_ga)',\n      'dataSource': 'AMP',\n      'anonymizeIP': 'aip',\n      'errorParam': '${errorName}-${errorMessage}',\n    },\n    'requests': {\n      'uaHost': 'https://www.google-analytics.com',\n      'uaBasePrefix':\n          'v=1&' +\n           '_v=a1&' +\n           'ds=${dataSource}&' +\n           '${anonymizeIP}&' +\n           '_s=${requestCount}&' +\n           'dt=${title}&' +\n           'sr=${screenWidth}x${screenHeight}&' +\n           'cid=${clientId}&' +\n           'tid=${trackingId}&' +\n           'dl=${documentLocation}&' +\n           'dr=${externalReferrer}&' +\n           'sd=${screenColorDepth}&' +\n           'ul=${browserLanguage}&' +\n           'de=${documentCharset}',\n      'uaBaseSuffix':\n          '&a=${pageViewId}&' +\n           'z=${random}',\n      'uaPageviewCommon':\n           '&t=pageview&' +\n           'jid=${random}&' +\n           'gjid=${random}&' +\n           '_r=1',\n      'uaPageview':\n          '${uaHost}/r/collect?${uaBasePrefix}' +\n           '${uaPageviewCommon}' +\n           '${uaBaseSuffix}',\n      'uaPageviewNpa':\n          '${uaHost}/collect?${uaBasePrefix}' +\n           '${uaPageviewCommon}' +\n           '${uaBaseSuffix}',\n      'uaEvent':\n          '${uaHost}/collect?${uaBasePrefix}&' +\n           't=event&' +\n           'jid=' +\n           '${uaBaseSuffix}',\n      'uaTiming':\n          '${uaHost}/collect?${uaBasePrefix}&' +\n           'jid=&' +\n           'plt=${pageLoadTime}&' +\n           'dns=${domainLookupTime}&' +\n           'tcp=${tcpConnectTime}&' +\n           'rrt=${redirectTime}&' +\n           'srt=${serverResponseTime}&' +\n           'pdt=${pageDownloadTime}&' +\n           'clt=${contentLoadTime}&' +\n           'dit=${domInteractiveTime}' +\n           '${uaBaseSuffix}',\n      'uaError':\n          '${uaHost}/collect?${uaBasePrefix}&' +\n           't=exception&' +\n           'exd=${errorParam}' +\n           '${uaBaseSuffix}',\n      'awConversionPrefix':\n          'https://www.googleadservices.com/pagead/conversion/',\n      'awRemarketingPrefix':\n          'https://googleads.g.doubleclick.net/pagead/viewthroughconversion/',\n      'awCommonParams':\n          '${conversionId}/?' +\n           'cv=amp3&' + // Increment when making changes.\n           'label=${conversionLabel}&' +\n           'random=${random}&' +\n           'url=${sourceUrl}&' +\n           'ref=${documentReferrer}&' +\n           'fst=${pageViewId}&' +\n           'num=${counter(googleadwords)}&' +\n           'fmt=3&' +\n           'async=1&' +\n           'u_h=${screenHeight}&u_w=${screenWidth}&' +\n           'u_ah=${availableScreenHeight}&u_aw=${availableScreenWidth}&' +\n           'u_cd=${screenColorDepth}&' +\n           'u_tz=${timezone}&' +\n           'tiba=${title}&' +\n           'guid=ON&script=0',\n      'awConversion': '${awConversionPrefix}${awCommonParams}',\n      'awRemarketing': '${awRemarketingPrefix}${awCommonParams}',\n      'flBase': 'https://ad.doubleclick.net/activity;src=${flSrc};type=${flType};cat=${flCat}',\n    },\n    'transport': {\n      'beacon': false,\n      'xhrpost': false,\n      'image': true,\n    },\n  },\n\n  'googleanalytics': {\n    'vars': {\n      'eventValue': '0',\n      'documentLocation': 'SOURCE_URL',\n      'clientId': 'CLIENT_ID(AMP_ECID_GOOGLE,,_ga)',\n      'dataSource': 'AMP',\n      'anonymizeIP': 'aip',\n      'errorParam': '${errorName}-${errorMessage}',\n    },\n    'requests': {\n      'host': 'https://www.google-analytics.com',\n      'basePrefix': 'v=1&' +\n          '_v=a1&' +\n          'ds=${dataSource}&' +\n          '${anonymizeIP}&' +\n          '_s=${requestCount}&' +\n          'dt=${title}&' +\n          'sr=${screenWidth}x${screenHeight}&' +\n          '_utmht=${timestamp}&' +\n          'cid=${clientId}&' +\n          'tid=${account}&' +\n          'dl=${documentLocation}&' +\n          'dr=${externalReferrer}&' +\n          'sd=${screenColorDepth}&' +\n          'ul=${browserLanguage}&' +\n          'de=${documentCharset}',\n      'baseSuffix': '&a=${pageViewId}&' +\n          'z=${random}',\n      'pageview': '${host}/r/collect?${basePrefix}&' +\n          't=pageview&' +\n          'jid=${random}&' +\n          '_r=1' +\n          '${baseSuffix}',\n      'event': '${host}/collect?${basePrefix}&' +\n          't=event&' +\n          'jid=&' +\n          'ec=${eventCategory}&' +\n          'ea=${eventAction}&' +\n          'el=${eventLabel}&' +\n          'ev=${eventValue}' +\n          '${baseSuffix}',\n      'social': '${host}/collect?${basePrefix}&' +\n          't=social&' +\n          'jid=&' +\n          'sa=${socialAction}&' +\n          'sn=${socialNetwork}&' +\n          'st=${socialTarget}' +\n          '${baseSuffix}',\n      'timing': '${host}/collect?${basePrefix}&' +\n          't=${timingRequestType}&' +\n          'jid=&' +\n          'plt=${pageLoadTime}&' +\n          'dns=${domainLookupTime}&' +\n          'tcp=${tcpConnectTime}&' +\n          'rrt=${redirectTime}&' +\n          'srt=${serverResponseTime}&' +\n          'pdt=${pageDownloadTime}&' +\n          'clt=${contentLoadTime}&' +\n          'dit=${domInteractiveTime}' +\n          '${baseSuffix}',\n      'error': '${host}/collect?${basePrefix}&' +\n          't=exception&' +\n          'exd=${errorParam}' +\n          '${baseSuffix}',\n    },\n    'triggers': {\n      'performanceTiming': {\n        'on': 'visible',\n        'request': 'timing',\n        'sampleSpec': {\n          'sampleOn': '${clientId}',\n          'threshold': 1,\n        },\n        'vars': {\n          'timingRequestType': 'timing',\n        },\n      },\n      'adwordsTiming': {\n        'on': 'visible',\n        'request': 'timing',\n        'enabled': '${queryParam(gclid)}',\n        'vars': {\n          'timingRequestType': 'adtiming',\n        },\n      },\n    },\n    'extraUrlParamsReplaceMap': {\n      'dimension': 'cd',\n      'metric': 'cm',\n    },\n    'optout': '_gaUserPrefs.ioo',\n  },\n\n  'lotame': {\n    'requests': {\n      'pageview': 'https://bcp.crwdcntrl.net/amp?c=${account}&pv=y',\n    },\n    'triggers': {\n      'track pageview': {\n        'on': 'visible',\n        'request': 'pageview',\n      },\n    },\n    'transport': {\n      'beacon': false,\n      'xhrpost': false,\n      'image': true,\n    },\n  },\n\n  'marinsoftware': {\n    'requests': {\n      'base': 'https://tracker.marinsm.com/tp',\n      'baseParams': 'cid=${trackerId}' +\n        '&ampVersion=${ampVersion}' +\n        '&ds=AMP' +\n        '&ref=${externalReferrer}' +\n        '&page=${sourceUrl}' +\n        '&uuid=${clientId(marin_amp_id)}' +\n        '&rnd=${random}',\n      'pageView': '${base}?' +\n        '${baseParams}' +\n        '&act=1',\n      'conversion': '${base}?' +\n        '${baseParams}' +\n        '&act=2' +\n        '&trans=UTM:I' +\n          '|${orderId}' +\n          '|${marinConversionType}' +\n          '|${productName}' +\n          '|${category}' +\n          '|${price}' +\n          '|${quantity}',\n    },\n    'transport': {\n      'beacon': true,\n      'xhrpost': false,\n      'image': true,\n    },\n  },\n\n  'mediametrie': {\n    'requests': {\n      'host': 'https://prof.estat.com/m/web',\n      'pageview': '${host}/${serial}?' +\n        'c=${level1}' +\n        '&dom=${ampdocUrl}' +\n        '&enc=${documentCharset}' +\n        '&l3=${level3}' +\n        '&l4=${level4}' +\n        '&n=${random}' +\n        '&p=${level2}' +\n        '&r=${documentReferrer}' +\n        '&sch=${screenHeight}' +\n        '&scw=${screenWidth}' +\n        '&tn=amp' +\n        '&v=1' +\n        '&vh=${availableScreenHeight}' +\n        '&vw=${availableScreenWidth}',\n    },\n    'triggers': {\n      'trackPageview': {\n        'on': 'visible',\n        'request': 'pageview',\n      },\n    },\n    'transport': {\n      'beacon': false,\n      'xhrpost': false,\n      'image': true,\n    },\n  },\n\n  'mediarithmics': {\n    'vars': {\n      'domain': 'events.mediarithmics.com',\n      'url': 'SOURCE_URL',\n      'event_name': '$page_view',\n      'referrer': 'DOCUMENT_REFERRER',\n    },\n    'requests': {\n      'host': 'https://${domain}',\n      'pageview': '${host}/v1/visits/pixel?' +\n        '$site_token=${site_token}' +\n        '&$url=${url}' +\n        '&$ev=${event_name}' +\n        '&$referrer=${referrer}',\n    },\n    'triggers': {\n      'trackPageview': {\n        'on': 'visible',\n        'request': 'pageview',\n      },\n    },\n    'transport': {\n      'beacon': false,\n      'xhrpost': false,\n      'image': true,\n    },\n  },\n\n  'mediator': {\n    'requests': {\n      'host': '//collector.mediator.media/script/${mediator_id}/amp/',\n      'renderstart': '${host}init/?url=${canonicalUrl}',\n      'prefix': '${host}register/?url=${canonicalUrl}' +\n                '&ref=${documentReferrer}&',\n      'suffix': 'vh=${viewportHeight}&sh=${scrollHeight}&st=${scrollTop}',\n      'pageview': '${prefix}e=v',\n      'timer': '${prefix}e=t&${suffix}',\n      's0': '${prefix}e=s0',\n      's1': '${prefix}e=s1',\n      's2': '${prefix}e=s2',\n      's3': '${prefix}e=s3',\n    },\n    'vars': {\n      'mediator_id': '',\n    },\n    'triggers': {\n      'renderStart': {\n        'on': 'render-start',\n        'request': 'renderstart',\n      },\n      'trackPageview': {\n        'on': 'visible',\n        'request': 'pageview',\n      },\n      'scrollPing0': {\n        'on': 'scroll',\n        'scrollSpec': {\n          'verticalBoundaries': [\n            5,\n          ],\n        },\n        'request': 's0',\n      },\n      'scrollPing1': {\n        'on': 'scroll',\n        'scrollSpec': {\n          'verticalBoundaries': [\n            35,\n          ],\n        },\n        'request': 's1',\n      },\n      'scrollPing2': {\n        'on': 'scroll',\n        'scrollSpec': {\n          'verticalBoundaries': [\n            65,\n          ],\n        },\n        'request': 's2',\n      },\n      'scrollPing3': {\n        'on': 'scroll',\n        'scrollSpec': {\n          'verticalBoundaries': [\n            95,\n          ],\n        },\n        'request': 's3',\n      },\n      'pageTimer': {\n        'on': 'timer',\n        'timerSpec': {\n          'interval': 5,\n          'maxTimerLength': 600,\n          'immediate': false,\n        },\n        'request': 'timer',\n      },\n    },\n  },\n\n  'metrika': {\n    'transport': {'beacon': true, 'xhrpost': true, 'image': false},\n    'requests': {\n      'pageview': '${_watch}?browser-info=${_brInfo}&${_siteInfo}&${_suffix}',\n      'notBounce': '${_watch}?browser-info=ar%3A1%3Anb%3A1%3A${_brInfo}' +\n        '&${_suffix}',\n      'externalLink': '${_watch}?browser-info=ln%3A1%3A${_brInfo}&${_suffix}',\n      'reachGoal': '${_watch}?browser-info=ar%3A1%3A${_brInfo}&${_siteInfo}' +\n        '&${_goalSuffix}',\n      '_domain': 'https://mc.yandex.ru',\n      '_watch': '${_domain}/watch/${counterId}',\n      '_suffix': 'page-url=${sourceUrl}&page-ref=${documentReferrer}',\n      '_goalSuffix': 'page-url=goal%3A%2F%2F${sourceHost}%2F${goalId}' +\n      '&page-ref=${sourceUrl}',\n      '_techInfo': [\n        'amp%3A1%3Az%3A${timezone}%3Ai%3A${timestamp}%3Arn%3A${random}',\n        'la%3A${browserLanguage}%3Aen%3A${documentCharset}',\n        'rqn%3A${requestCount}',\n        's%3A${screenWidth}x${screenHeight}x${screenColorDepth}',\n        'w%3A${availableScreenWidth}x${availableScreenHeight}',\n        'ds%3A${_timings}%3Auid%3A${clientId(_ym_uid)}%3Apvid%3A${pageViewId}',\n      ].join('%3A'),\n      '_timings': [\n        '${domainLookupTime}%2C${tcpConnectTime}',\n        '${serverResponseTime}%2C${pageDownloadTime}',\n        '${redirectTime}%2C${navTiming(redirectStart,redirectEnd)}',\n        '${navRedirectCount}%2C${navTiming(domLoading,domInteractive)}',\n        '${navTiming(domContentLoadedEventStart,domContentLoadedEventEnd)}',\n        '${navTiming(navigationStart,domComplete)}',\n        '${pageLoadTime}%2C${navTiming(loadEventStart,loadEventEnd)}',\n        '${contentLoadTime}',\n      ].join('%2C'),\n      '_brInfo': '${_techInfo}%3A${_title}',\n      '_title': 't%3A${title}',\n      '_siteInfo': 'site-info=${yaParams}',\n    },\n    'triggers': {\n      'pageview': {\n        'on': 'visible',\n        'request': 'pageview',\n      },\n    },\n  },\n\n  'mobify': {\n    'vars': {\n      'projectSlug': 'mobify-project-id',\n      'templateName': 'page-type',\n    },\n    'requests': {\n      '_host': 'https://engagement-collector.mobify.net',\n      '_dimensions': [\n        '%22platform%22%3a%22AMP%22',\n        '%22client_id%22%3a%22${clientId(sandy-client-id)}%22',\n        '%22title%22%3a%22${title}%22',\n        '%22location%22%3a%22${sourceUrl}%22',\n        '%22page%22%3a%22${sourcePath}%22',\n        '%22src_location%22%3a%22${ampdocUrl}%22',\n        '%22referrer%22%3a%22${documentReferrer}%22',\n        '%22templateName%22%3a%22${templateName}%22',\n      ].join('%2c'),\n      '_basePrefix': '${_host}/s.gif?' +\n        'slug=${projectSlug}&' +\n        'timestamp_local=${timestamp}&' +\n        'channel=web&' +\n        'dimensions=%7b${_dimensions}%7d',\n      'ampstart': '${_basePrefix}&data=%7b%22category%22%3a%22timing%22%2c' +\n        '%22action%22%3a%22ampStart%22%2c%22value%22' +\n        '%3a${navTiming(navigationStart,domLoading)}%7d',\n      'pageview': '${_basePrefix}&data=%7b%22action%22%3a%22pageview%22%7d',\n      'pageload': '${_basePrefix}&data=%7b%22category%22%3a%22timing%22%2c' +\n        '%22action%22%3a%22load%22%2c%22value%22%3a${pageLoadTime}%7d',\n      'pagedcl': '${_basePrefix}&data=%7b%22category%22%3a%22timing%22%2c' +\n        '%22action%22%3a%22DOMContentLoaded%22%2c%22value%22' +\n        '%3a${contentLoadTime}%7d',\n    },\n    'triggers': {\n      'triggerName': {\n        'on': 'visible',\n        'request': ['ampstart', 'pageload', 'pagedcl'],\n      },\n      'pageview': {\n        'on': 'ini-load',\n        'request': 'pageview',\n      },\n    },\n    'transport': {\n      'beacon': true,\n      'xhrpost': false,\n      'image': true,\n    },\n  },\n\n  'mparticle': {\n    'vars': {\n      'eventType': 'Unknown',\n      'debug': false,\n      'amp_clientId': 'CLIENT_ID(mparticle_amp_id)',\n    },\n    'requests': {\n      'host': 'https://pixels.mparticle.com',\n      'endpointPath': '/v1/${apiKey}/Pixel',\n      'baseParams': 'et=${eventType}&' +\n          'amp_id=${amp_clientId}&' +\n          'attrs_k=${eventAttributes_Keys}&' +\n          'attrs_v=${eventAttributes_Values}&' +\n          'ua_k=${userAttributes_Keys}&' +\n          'ua_v=${userAttributes_Values}&' +\n          'ui_t=${userIdentities_Types}&' +\n          'ui_v=${userIdentities_Values}&' +\n          'flags_k=${customFlags_Keys}&' +\n          'flags_v=${customFlags_Values}&' +\n          'ct=${timestamp}&' +\n          'dbg=${debug}&' +\n          'lc=${location}&' +\n          'av=${appVersion}',\n      'pageview': '${host}${endpointPath}?' +\n          'dt=ScreenView&' +\n          'n=${canonicalPath}&' +\n          'hn=${ampdocUrl}&' +\n          'ttl=${title}&' +\n          '${baseParams}',\n      'event': '${host}${endpointPath}?' +\n          'dt=AppEvent&' +\n          'n=${eventName}&' +\n          '${baseParams}',\n    },\n    'transport': {\n      'beacon': false,\n      'xhrpost': false,\n      'image': true,\n    },\n  },\n\n  'newrelic': {\n    'requests': {\n      'pageview': 'https://${beacon}/amp?appId=${appId}' +\n        '&licenseKey=${licenseKey}' +\n        '&ampUrl=${ampdocUrl}' +\n        '&canonicalUrl=${canonicalUrl}' +\n        '&timeToDomContentLoadedEventEnd=' +\n          '${navTiming(domContentLoadedEventEnd)}' +\n        '&timeToDomInteractive=${navTiming(domInteractive)}' +\n        '&timeToDomComplete=${navTiming(domComplete)}' +\n        '&timeToDomLoading=${navTiming(domLoading)}' +\n        '&timeToResponseStart=${navTiming(responseStart)}' +\n        '&timeToResponseEnd=${navTiming(responseEnd)}' +\n        '&timeToLoadEventStart=${navTiming(loadEventStart)}' +\n        '&timeToLoadEventEnd=${navTiming(loadEventEnd)}' +\n        '&timeToConnectStart=${navTiming(connectStart)}' +\n        '&timeToConnectEnd=${navTiming(connectEnd)}' +\n        '&timeToFetchStart=${navTiming(fetchStart)}' +\n        '&timeToRequestStart=${navTiming(requestStart)}' +\n        '&timeToUnloadEventStart=${navTiming(unloadEventStart)}' +\n        '&timeToUnloadEventEnd=${navTiming(unloadEventEnd)}' +\n        '&timeToDomainLookupStart=${navTiming(domainLookupStart)}' +\n        '&timeToDomainLookupEnd=${navTiming(domainLookupEnd)}' +\n        '&timeToRedirectStart=${navTiming(redirectStart)}' +\n        '&timeToRedirectEnd=${navTiming(redirectEnd)}' +\n        '&timeToSecureConnection=${navTiming(secureConnectionStart)}' +\n        '&timestamp=${timestamp}' +\n        '&ampVersion=${ampVersion}' +\n        '&pageLoadTime=${pageLoadTime}',\n    },\n    'vars': {\n      'beacon': 'bam.nr-data.net',\n      'appId': [],\n      'licenseKey': '',\n    },\n    'triggers': {\n      'trackPageview': {\n        'on': 'ini-load',\n        'request': 'pageview',\n      },\n    },\n  },\n\n  'nielsen': {\n    'vars': {\n      'sessionId': 'CLIENT_ID(imrworldwide)',\n      'prefix': '',\n    },\n    'requests': {\n      'session': 'https://${prefix}uaid-linkage.imrworldwide.com/cgi-bin/gn?prd=session&c13=asid,P${apid}&sessionId=${sessionId}_${pageViewId}&pingtype=4&enc=false&c61=createtm,${timestamp}&rnd=${random}',\n      'cloudapi': 'https://${prefix}cloudapi.imrworldwide.com/nmapi/v2/${apid}/${sessionId}_${pageViewId}/a?b=%7B%22devInfo%22%3A%7B%22devId%22%3A%22${sessionId}_${pageViewId}%22%2C%22apn%22%3A%22${apn}%22%2C%22apv%22%3A%22${apv}%22%2C%22apid%22%3A%22${apid}%22%7D%2C%22metadata%22%3A%7B%22static%22%3A%7B%22type%22%3A%22static%22%2C%22section%22%3A%22${section}%22%2C%22assetid%22%3A%22${pageViewId}%22%2C%22segA%22%3A%22${segA}%22%2C%22segB%22%3A%22${segB}%22%2C%22segC%22%3A%22${segC}%22%2C%22adModel%22%3A%220%22%2C%22dataSrc%22%3A%22cms%22%7D%2C%22content%22%3A%7B%7D%2C%22ad%22%3A%7B%7D%7D%2C%22event%22%3A%22playhead%22%2C%22position%22%3A%22${timestamp}%22%2C%22data%22%3A%7B%22hidden%22%3A%22${backgroundState}%22%2C%22blur%22%3A%22${backgroundState}%22%2C%22position%22%3A%22${timestamp}%22%7D%2C%22type%22%3A%22static%22%2C%22utc%22%3A%22${timestamp}%22%2C%22index%22%3A%22${requestCount}%22%7D',\n    },\n    'triggers': {\n      'visible': {\n        'on': 'visible',\n        'request': ['session', 'cloudapi'],\n      },\n      'hidden': {\n        'on': 'hidden',\n        'request': 'cloudapi',\n      },\n      'duration': {\n        'on': 'timer',\n        'timerSpec': {\n          'interval': 10,\n          'maxTimerLength': 86400,\n          'immediate': false,\n        },\n        'request': 'cloudapi',\n      },\n    },\n    'transport': {\n      'beacon': false,\n      'xhrpost': false,\n      'image': true,\n      'referrerPolicy': 'no-referrer',\n    },\n  },\n\n  'nielsen-marketing-cloud': {\n    'transport': {\n      'beacon': false,\n      'xhrpost': false,\n      'image': true,\n    },\n    'vars': {\n      'pubId': '',\n      'siteId': '',\n    },\n    'requests': {\n      'host': 'loadeu.exelator.com',\n      'pathPrefix': 'load/',\n      'trackurl': 'https://${host}/${pathPrefix}?p=${pubId}&g=${siteId}&j=0',\n    },\n    'triggers': {\n      'defaultPageview': {\n        'on': 'visible',\n        'request': 'trackurl',\n      },\n    },\n  },\n\n  'oewadirect': {\n    'transport': {'beacon': false, 'xhrpost': false, 'image': true},\n    'requests': {\n      'pageview': 'https://${s}.oewabox.at/j0=,,,r=${canonicalUrl};+,amp=1+cp=${cp}+ssl=1+hn=${canonicalHost};;;?lt=${pageViewId}&x=${screenWidth}x${screenHeight}x24&c=CLIENT_ID(oewa)',\n    },\n    'triggers': {\n      'pageview': {\n        'on': 'visible',\n        'request': 'pageview',\n      },\n    },\n  },\n\n  'oewa': {\n    'transport': {'beacon': false, 'xhrpost': false, 'image': true},\n    'requests': {\n      'pageview': '${url}?s=${s}' +\n        '&amp=1' +\n        '&cp=${cp}' +\n        '&host=${canonicalHost}' +\n        '&path=${canonicalPath}',\n    },\n    'triggers': {\n      'pageview': {\n        'on': 'visible',\n        'request': 'pageview',\n      },\n    },\n  },\n  'parsely': {\n    'requests': {\n      'host': 'https://srv.pixel.parsely.com',\n      'basePrefix': '${host}/plogger/?' +\n        'rand=${timestamp}&' +\n        'idsite=${apikey}&' +\n        'url=${ampdocUrl}&' +\n        'urlref=${documentReferrer}&' +\n        'screen=${screenWidth}x${screenHeight}%7C' +\n          '${availableScreenWidth}x${availableScreenHeight}%7C' +\n          '${screenColorDepth}&' +\n        'title=${title}&' +\n        'date=${timestamp}&' +\n        'ampid=${clientId(_parsely_visitor)}',\n      'pageview': '${basePrefix}&action=pageview',\n      'heartbeat': '${basePrefix}&action=heartbeat' +\n      '&tt=${totalEngagedTime}&inc=${incrementalEngagedTime(parsely-js)}',\n    },\n    'triggers': {\n      'defaultPageview': {\n        'on': 'visible',\n        'request': 'pageview',\n      },\n      'defaultHeartbeat': {\n        'on': 'timer',\n        'enabled': '${incrementalEngagedTime(parsely-js,false)}',\n        'timerSpec': {\n          'interval': 10,\n          'maxTimerLength': 7200,\n        },\n        'request': 'heartbeat',\n      },\n    },\n    'transport': {\n      'beacon': false,\n      'xhrpost': false,\n      'image': true,\n    },\n  },\n\n  'piano': {\n    'requests': {\n      'host': 'https://api-v3.tinypass.com',\n      'basePrefix': '/api/v3',\n      'baseSuffix': '&pageview_id=${pageViewId}&rand=${random}&' +\n        'amp_client_id=${clientId}&aid=${aid}',\n      'pageview': '${host}${basePrefix}/page/track?url=${canonicalUrl}&' +\n        'referer=${documentReferrer}&content_created=${contentCreated}&' +\n        'content_author=${contentAuthor}&content_section=${contentSection}&' +\n        'timezone_offset=${timezone}&tags=${tags}&amp_url=${ampdocUrl}&' +\n        'screen=${screenWidth}x${screenHeight}${baseSuffix}',\n    },\n  },\n\n  'piStats': {\n    'requests': {\n      'host': 'https://events.pi-stats.com',\n      'basePrefix': '${host}/eventsamp/?' +\n          'e=PageLoad&' +\n          'pid=${property}&' +\n          'url=${ampdocUrl}&' +\n          'cnt=${cntId}&' +\n          'lang=${language}&' +\n          'ref=${documentReferrer}&' +\n          'id=${clientId(piStatsDEVICEID)}&' +\n          'ua=${userAgent}&' +\n          'ctype=web&' +\n          'blang=${browserLanguage}&' +\n          'v=2.0&' +\n          'dist=Javascript',\n      'pageview': '${basePrefix}&eventtype=pageview',\n    },\n    'triggers': {\n      'defaultPageview': {\n        'on': 'visible',\n        'request': 'pageview',\n      },\n    },\n    'transport': {\n      'beacon': false,\n      'xhrpost': false,\n      'image': true,\n    },\n  },\n\n  'quantcast': {\n    'vars': {\n      'labels': '',\n    },\n    'requests': {\n      'host': 'https://pixel.quantserve.com/pixel',\n      'pageview': '${host};r=${random};a=${pcode};labels=${labels};' +\n        'fpan=;fpa=${clientId(__qca)};ns=0;ce=1;cm=;je=0;' +\n        'sr=${screenWidth}x${screenHeight}x${screenColorDepth};' +\n        'enc=n;et=${timestamp};ref=${documentReferrer};url=${canonicalUrl}',\n    },\n    'triggers': {\n      'defaultPageview': {\n        'on': 'visible',\n        'request': 'pageview',\n      },\n    },\n    'transport': {\n      'beacon': false,\n      'xhrpost': false,\n      'image': true,\n    },\n  },\n\n  'adobeanalytics': {\n    'transport': {'xhrpost': false, 'beacon': false, 'image': true},\n    'vars': {\n      'pageName': 'TITLE',\n      'host': '',\n      'reportSuites': '',\n      'linkType': 'o',\n      'linkUrl': '',\n      'linkName': '',\n    },\n    'requests': {\n      'requestPath': '/b/ss/${reportSuites}/0/amp-1.0/s${random}',\n      // vid starts with z to work around #2198\n      'basePrefix': 'vid=z${clientId(adobe_amp_id)}' +\n          '&ndh=0' +\n          '&ce=${documentCharset}' +\n          '&pageName=${pageName}' +\n          '&g=${ampdocUrl}' +\n          '&r=${documentReferrer}' +\n          '&bh=${availableScreenHeight}' +\n          '&bw=${availableScreenWidth}' +\n          '&c=${screenColorDepth}' +\n          '&j=amp' +\n          '&s=${screenWidth}x${screenHeight}',\n      'pageview': 'https://${host}${requestPath}?${basePrefix}',\n      'click': 'https://${host}${requestPath}?${basePrefix}&pe=lnk_${linkType}&pev1=${linkUrl}&pev2=${linkName}',\n    },\n  },\n\n  'adobeanalytics_nativeConfig': {\n    'triggers': {\n      'pageLoad': {\n        'on': 'visible',\n        'request': 'iframeMessage',\n      },\n    },\n  },\n\n  'infonline': {\n    'vars': {\n      'sv': 'ke',\n      'ap': '1',\n    },\n    'transport': {'beacon': false, 'xhrpost': false, 'image': true},\n    'requests': {\n      'pageview': '${url}?st=${st}' +\n        '&sv=${sv}' +\n        '&ap=${ap}' +\n        '&co=${co}' +\n        '&cp=${cp}' +\n        '&host=${canonicalHost}' +\n        '&path=${canonicalPath}',\n    },\n    'triggers': {\n      'pageview': {\n        'on': 'visible',\n        'request': 'pageview',\n      },\n    },\n  },\n  'simplereach': {\n    'vars': {\n      'pid': '',\n      'published_at': '',\n      'authors': [],\n      'channels': [],\n      'tags': [],\n    },\n    'requests': {\n      'host': 'https://edge.simplereach.com',\n      'baseParams': 'amp=true' +\n        '&pid=${pid}' +\n        '&title=${title}' +\n        '&url=${canonicalUrl}' +\n        '&date=${published_at}' +\n        '&authors=${authors}' +\n        '&channels=${categories}' +\n        '&tags=${tags}' +\n        '&referrer=${documentReferrer}' +\n        '&page_url=${sourceUrl}' +\n        '&user_id=${clientId(sr_amp_id)}' +\n        '&domain=${canonicalHost}' +\n        '&article_id=${article_id}' +\n        '&ignore_metadata=${ignore_metadata}',\n      'visible': '${host}/n?${baseParams}',\n      'timer': '${host}/t?${baseParams}' +\n        '&t=5000' +\n        '&e=5000',\n    },\n    'triggers': {\n      'visible': {\n        'on': 'visible',\n        'request': 'visible',\n      },\n      'timer': {\n        'on': 'timer',\n        'timerSpec': {\n          'interval': 5,\n          'maxTimerLength': 1200,\n        },\n        'request': 'timer',\n      },\n    },\n  },\n\n  'segment': {\n    'transport': {\n      'beacon': false,\n      'xhrpost': false,\n      'image': true,\n    },\n    'vars': {\n      'anonymousId': 'CLIENT_ID(segment_amp_id)',\n    },\n    'requests': {\n      'host': 'https://api.segment.io/v1/pixel',\n      'base': '?writeKey=${writeKey}' +\n        '&context.library.name=amp' +\n        '&anonymousId=${anonymousId}' +\n        '&context.locale=${browserLanguage}' +\n        '&context.page.path=${canonicalPath}' +\n        '&context.page.url=${canonicalUrl}' +\n        '&context.page.referrer=${documentReferrer}' +\n        '&context.page.title=${title}' +\n        '&context.screen.width=${screenWidth}' +\n        '&context.screen.height=${screenHeight}',\n      'page': '${host}/page${base}&name=${name}',\n      'track': '${host}/track${base}&event=${event}',\n    },\n    'triggers': {\n      'page': {\n        'on': 'visible',\n        'request': 'page',\n      },\n    },\n  },\n\n  'shinystat': {\n    'transport': {\n      'beacon': false,\n      'xhrpost': false,\n      'image': true,\n    },\n    'requests': {\n      'base': 'https://amp.shinystat.com/cgi-bin/shinyamp.cgi',\n      'commpar': 'AMP=1&RM=${random}' +\n                 '&USER=${account}' +\n                 '&PAG=${page}' +\n                 '&HR=${sourceUrl}' +\n                 '&REFER=${documentReferrer}' +\n                 '&RES=${screenWidth}X${screenHeight}' +\n                 '&COLOR=${screenColorDepth}' +\n                 '&CID=${clientId(AMP_CID)}' +\n                 '&PAGID=${pageViewId}' +\n                 '&TITL=${title}' +\n                 '&RQC=${requestCount}',\n      'pagepar': '&VIE=${viewer}' +\n                 '&PLT=${pageLoadTime}',\n      'eventpar': '&SSXL=1',\n      'linkpar': '&LINK=${outboundLink}',\n      'pageview': '${base}?${commpar}${pagepar}',\n      'event': '${base}?${commpar}${eventpar}',\n      'link': '${base}?${commpar}${linkpar}',\n    },\n    'triggers': {\n      'pageview': {\n        'on': 'visible',\n        'request': 'pageview',\n      },\n    },\n  },\n\n  'snowplow': {\n    'vars': {\n      'duid': 'CLIENT_ID(_sp_id)',\n    },\n    'requests': {\n      'aaVersion': 'amp-0.2',\n      'basePrefix': 'https://${collectorHost}/i?url=${canonicalUrl}&page=${title}&' +\n          'res=${screenWidth}x${screenHeight}&stm=${timestamp}&' +\n          'tz=${timezone}&aid=${appId}&p=web&tv=${aaVersion}&' +\n          'cd=${screenColorDepth}&cs=${documentCharset}&' +\n          'duid=${duid}&' +\n          'lang=${browserLanguage}&refr=${documentReferrer}&stm=${timezone}&' +\n          'vp=${viewportWidth}x${viewportHeight}',\n      'pageView': '${basePrefix}&e=pv',\n      'structEvent': '${basePrefix}&e=se&' +\n          'se_ca=${structEventCategory}&se_ac=${structEventAction}&' +\n          'se_la=${structEventLabel}&se_pr=${structEventProperty}&' +\n          'se_va=${structEventValue}',\n    },\n    'transport': {\n      'beacon': false,\n      'xhrpost': false,\n      'image': true,\n    },\n  },\n\n  'top100': {\n    'vars': {\n      'pid': '',\n      'rid': 'PAGE_VIEW_ID',\n      'ruid': 'CLIENT_ID(ruid)',\n      'version': '1.0.0',\n    },\n    'requests': {\n      'host': 'https://kraken.rambler.ru',\n      'base': '${host}/cnt/?pid=${pid}' +\n                          '&rid=${rid}' +\n                          '&v=${version}' +\n                          '&rn=${random}' +\n                          '&ruid=${ruid}' +\n                          '&ct=amp',\n      'pageview': '${base}&et=pv' +\n                  '${_pageData}' +\n                  '${_screenData}',\n      '_screenData': '&sr=${screenWidth}x${screenHeight}' +\n                     '&cd=${screenColorDepth}-bit' +\n                     '&bs=${scrollWidth}x${scrollHeight}',\n      '_pageData': '&pt=${title}' +\n                   '&rf=${documentReferrer}' +\n                   '&en=${documentCharset}' +\n                   '&la=${browserLanguage}' +\n                   '&tz=${timezone}',\n    },\n    'triggers': {\n      'trackPageview': {\n        'on': 'visible',\n        'request': 'pageview',\n      },\n    },\n    'transport': {\n      'beacon': false,\n      'xhrpost': false,\n      'image': true,\n    },\n  },\n\n  'treasuredata': {\n    'vars': {\n      'host': 'in.treasuredata.com',\n      'writeKey': '',\n      'database': '',\n      'table': 'events',\n    },\n    'requests': {\n      'base': 'https://${host}/postback/v3/event/${database}',\n      'baseParams': 'td_write_key=${writeKey}' +\n        '&td_global_id=td_global_id' +\n        '&td_client_id=CLIENT_ID(_td)' +\n        '&td_charset=DOCUMENT_CHARSET' +\n        '&td_language=BROWSER_LANGUAGE' +\n        '&td_color=SCREEN_COLOR_DEPTH' +\n        '&td_screen=${screenWidth}x${scrollHeight}' +\n        '&td_viewport=${availableScreenWidth}x${availableScreenHeight}' +\n        '&td_title=TITLE' +\n        '&td_url=SOURCE_URL' +\n        '&td_user_agent=USER_AGENT' +\n        '&td_host=SOURCE_HOST' +\n        '&td_path=SOURCE_PATH' +\n        '&td_referrer=DOCUMENT_REFERRER' +\n        '&td_ip=td_ip',\n      'pageview': '${base}/${table}?${baseParams}',\n      'event': '${base}/${table}?${baseParams}',\n    },\n  },\n\n  'webtrekk': {\n    'requests': {\n      'trackURL': 'https://${trackDomain}/${trackId}/wt',\n      'parameterPrefix': '?p=432,${contentId},1,' +\n        '${screenWidth}x${screenHeight},${screenColorDepth},1,' +\n        '${timestamp},${documentReferrer},${viewportWidth}x' +\n        '${viewportHeight},0&tz=${timezone}' +\n        '&eid=${clientId(amp-wt3-eid)}&la=${browserLanguage}',\n      'parameterSuffix': '&pu=${sourceUrl}',\n      'pageParameter': '&cp1=${pageParameter1}' +\n        '&cp2=${pageParameter2}&cp3=${pageParameter3}' +\n        '&cp4=${pageParameter4}&cp5=${pageParameter5}' +\n        '&cp6=${pageParameter6}&cp7=${pageParameter7}' +\n        '&cp8=${pageParameter8}&cp9=${pageParameter9}' +\n        '&cp10=${pageParameter10}',\n      'pageCategories': '&cg1=${pageCategory1}' +\n        '&cg2=${pageCategory2}&cg3=${pageCategory3}' +\n        '&cg4=${pageCategory4}&cg5=${pageCategory5}' +\n        '&cg6=${pageCategory6}&cg7=${pageCategory7}' +\n        '&cg8=${pageCategory8}&cg9=${pageCategory9}' +\n        '&cg10=${pageCategory10}',\n      'pageview': '${trackURL}${parameterPrefix}${pageParameter}' +\n        '${pageCategories}${parameterSuffix}',\n      'actionParameter': '&ck1=${actionParameter1}' +\n        '&ck2=${actionParameter2}&ck3=${actionParameter3}' +\n        '&ck4=${actionParameter4}&ck5=${actionParameter5}',\n      'event': '${trackURL}${parameterPrefix}&ct=${actionName}' +\n        '${actionParameter}${parameterSuffix}',\n    },\n    'transport': {\n      'beacon': false,\n      'xhrpost': false,\n      'image': true,\n    },\n  },\n\n  'webtrekk_v2': {\n    'vars': {\n      'actionName': 'webtrekk_ignore',\n      'contentId': '${title}',\n      'mediaName': '${id}',\n      'everId': '${clientId(amp-wt3-eid)}',\n    },\n    'requests': {\n      'trackURL': 'https://${trackDomain}/${trackId}/wt',\n      'basePrefix': '?p=440,${contentId},1,' +\n        '${screenWidth}x${screenHeight},${screenColorDepth},1,',\n      'baseSuffix': ',${documentReferrer},' +\n        '${viewportWidth}x${viewportHeight},0' +\n        '&tz=${timezone}&eid=${everId}&la=${browserLanguage}',\n      'parameterPrefix': '${basePrefix}${timestamp}${baseSuffix}',\n      'parameterSuffix': '&pu=${sourceUrl}&eor=1',\n      'pageview': '${trackURL}${parameterPrefix}&${extraUrlParams}' +\n        '&cp570=${pageLoadTime}${parameterSuffix}',\n      'event': '${trackURL}${parameterPrefix}&ct=${actionName}' +\n        '&${extraUrlParams}${parameterSuffix}',\n      'scroll': '${trackURL}${parameterPrefix}&ct=${actionName}' +\n        '&ck540=${verticalScrollBoundary}${parameterSuffix}',\n      'mediaPrefix': '${trackURL}${basePrefix}${baseSuffix}' +\n        '&mi=${mediaName}',\n      'mediaSuffix': '&mt1=${currentTime}&mt2=${duration}' +\n        '&${extraUrlParams}${parameterSuffix}&x=${playedTotal}',\n      'mediaPlay': '${mediaPrefix}&mk=play${mediaSuffix}',\n      'mediaPause': '${mediaPrefix}&mk=pause${mediaSuffix}',\n      'mediaPosition': '${mediaPrefix}&mk=pos${mediaSuffix}',\n      'mediaEnded': '${mediaPrefix}&mk=eof${mediaSuffix}',\n    },\n    'extraUrlParamsReplaceMap': {\n      'pageParameter': 'cp',\n      'contentGroup': 'cg',\n      'actionParameter': 'ck',\n      'sessionParameter': 'cs',\n      'ecommerceParameter': 'cb',\n      'urmCategory': 'uc',\n      'campaignParameter': 'cc',\n      'mediaCategory': 'mg',\n    },\n    'transport': {\n      'beacon': false,\n      'xhrpost': false,\n      'image': true,\n    },\n  },\n\n  'mpulse': {\n    'requests': {\n      'onvisible': 'https://${beacon_url}?' +\n        'h.d=${h.d}' +\n        '&h.key=${h.key}' +\n        '&h.t=${h.t}' +\n        '&h.cr=${h.cr}' +\n        '&rt.start=navigation' +\n        '&rt.si=${clientId(amp_mpulse)}' +\n        '&rt.ss=${timestamp}' +\n        '&rt.end=${timestamp}' +\n        '&t_resp=${navTiming(navigationStart,responseStart)}' +\n        '&t_page=${navTiming(responseStart,loadEventStart)}' +\n        '&t_done=${navTiming(navigationStart,loadEventStart)}' +\n        '&nt_nav_type=${navType}' +\n        '&nt_red_cnt=${navRedirectCount}' +\n        '&nt_nav_st=${navTiming(navigationStart)}' +\n        '&nt_red_st=${navTiming(redirectStart)}' +\n        '&nt_red_end=${navTiming(redirectEnd)}' +\n        '&nt_fet_st=${navTiming(fetchStart)}' +\n        '&nt_dns_st=${navTiming(domainLookupStart)}' +\n        '&nt_dns_end=${navTiming(domainLookupEnd)}' +\n        '&nt_con_st=${navTiming(connectStart)}' +\n        '&nt_ssl_st=${navTiming(secureConnectionStart)}' +\n        '&nt_con_end=${navTiming(connectEnd)}' +\n        '&nt_req_st=${navTiming(requestStart)}' +\n        '&nt_res_st=${navTiming(responseStart)}' +\n        '&nt_unload_st=${navTiming(unloadEventStart)}' +\n        '&nt_unload_end=${navTiming(unloadEventEnd)}' +\n        '&nt_domloading=${navTiming(domLoading)}' +\n        '&nt_res_end=${navTiming(responseEnd)}' +\n        '&nt_domint=${navTiming(domInteractive)}' +\n        '&nt_domcontloaded_st=${navTiming(domContentLoadedEventStart)}' +\n        '&nt_domcontloaded_end=${navTiming(domContentLoadedEventEnd)}' +\n        '&nt_domcomp=${navTiming(domComplete)}' +\n        '&nt_load_st=${navTiming(loadEventStart)}' +\n        '&nt_load_end=${navTiming(loadEventEnd)}' +\n        '&v=1' +\n        '&http.initiator=amp' +\n        '&u=${sourceUrl}' +\n        '&amp.u=${ampdocUrl}' +\n        '&r2=${documentReferrer}' +\n        '&scr.xy=${screenWidth}x${screenHeight}',\n    },\n\n    'triggers': {\n      'onvisible': {\n        'on': 'visible',\n        'request': 'onvisible',\n      },\n    },\n\n    'transport': {\n      'beacon': false,\n      'xhrpost': false,\n      'image': true,\n    },\n\n    'extraUrlParamsReplaceMap': {\n      'ab_test': 'h.ab',\n      'page_group': 'h.pg',\n      'custom_dimension.': 'cdim.',\n      'custom_metric.': 'cmet.',\n    },\n  },\n\n  'linkpulse': {\n    'vars': {\n      'id': '',\n      'pageUrl': 'CANONICAL_URL',\n      'title': 'TITLE',\n      'section': '',\n      'channel': 'amp',\n      'type': '',\n      'host': 'pp.lp4.io',\n      'empty': '',\n    },\n    'requests': {\n      'base': 'https://${host}',\n      'pageview': '${base}/p?i=${id}' +\n                '&r=${documentReferrer}' +\n                '&p=${pageUrl}' +\n                '&s=${section}' +\n                '&t=${type}' +\n                '&c=${channel}' +\n                '&mt=${title}' +\n                '&_t=amp' +\n                '&_r=${random}',\n      'pageload': '${base}/pl?i=${id}' +\n                '&ct=${domInteractiveTime}' +\n                '&rt=${pageDownloadTime}' +\n                '&pt=${pageLoadTime}' +\n                '&p=${pageUrl}' +\n                '&c=${channel}' +\n                '&t=${type}' +\n                '&s=${section}' +\n                '&_t=amp' +\n                '&_r=${random}',\n      'ping': '${base}/u?i=${id}' +\n                '&u=${clientId(_lp4_u)}' +\n                '&p=${pageUrl}' +\n                '&uActive=true' +\n                '&isPing=yes' +\n                '&c=${channel}' +\n                '&t=${type}' +\n                '&s=${section}' +\n                '&_t=amp' +\n                '&_r=${random}',\n    },\n    'triggers': {\n      'pageview': {\n        'on': 'visible',\n        'request': 'pageview',\n      },\n      'pageload': {\n        'on': 'visible',\n        'request': 'pageload',\n      },\n      'ping': {\n        'on': 'timer',\n        'timerSpec': {\n          'interval': 30,\n          'maxTimerLength': 7200,\n        },\n        'request': 'ping',\n\n      },\n    },\n    'transport': {\n      'beacon': false,\n      'xhrpost': false,\n      'image': true,\n    },\n  },\n  'rakam': {\n    'vars': {\n      'deviceId': 'CLIENT_ID(rakam_device_id)',\n    },\n    'requests': {\n      'base': '?api.api_key=${writeKey}' +\n        '&prop._platform=amp' +\n        '&prop._device_id=${deviceId}' +\n        '&prop.locale=${browserLanguage}' +\n        '&prop.path=${canonicalPath}' +\n        '&prop.url=${canonicalUrl}' +\n        '&prop.color_depth=${screenColorDepth}' +\n        '&prop._referrer=${documentReferrer}' +\n        '&prop.title=${title}' +\n        '&prop.timezone=${timezone}' +\n        '&prop._time=${timestamp}' +\n        '&prop.resolution=${screenWidth} × ${screenHeight}',\n      'pageview': 'https://${apiEndpoint}/event/pixel${base}&collection=${pageViewName}',\n      'custom': 'https://${apiEndpoint}/event/pixel${base}&collection=${collection}',\n    },\n  },\n  'ibeatanalytics': {\n    'requests': {\n      'host': 'https://ibeat.indiatimes.com',\n      'base': 'https://ibeat.indiatimes.com/iBeat/pageTrendlogAmp.html',\n      'pageview': '${base}?' +\n                '&h=${h}' +\n                '&d=${h}' +\n                '&url=${url}' +\n                '&k=${key}' +\n                '&ts=${time}' +\n                '&ch=${channel}' +\n                '&sid=${uid}' +\n                '&at=${agentType}' +\n                '&ref=${documentReferrer}' +\n                '&aid=${aid}' +\n                '&loc=1' +\n                '&ct=1' +\n                '&cat=${cat}' +\n                '&scat=${scat}' +\n                '&ac=1' +\n                '&tg=${tags}' +\n                '&ctids=${catIds}' +\n                '&pts=${pagePublishTime}' +\n                '&auth=${author}' +\n                '&pos=${position}' +\n                '&iBeatField=${ibeatFields}' +\n                '&cid=${clientId(MSCSAuthDetails)}',\n    },\n    'triggers': {\n      'defaultPageview': {\n        'on': 'visible',\n        'request': 'pageview',\n      },\n    },\n  },\n\n  'topmailru': {\n    'transport': {\n      'beacon': false,\n      'xhrpost': false,\n      'image': true,\n    },\n    'vars': {\n      'url': '${sourceUrl}',\n      'referrer': '${documentReferrer}',\n    },\n    'requests': {\n      'pageView': '${_domain}/counter?${_basicMessage};title=${title}',\n      'reachGoal': '${_domain}/tracker?${_basicMessage};title=${title}' +\n                   ';e=RG%3A${value}%2F${goal}',\n      'sendEvent': '${_domain}/tracker?${_basicMessage}' +\n                   ';e=CE%3A${value}%2F${category}%3B${action}%3B${label}',\n      '_domain': 'https://top-fwz1.mail.ru',\n      '_basicMessage': 'js=13;id=${id};u=${url};r=${referrer}' +\n                       ';s=${screenWidth}*${screenHeight}' +\n                       ';vp=${viewportWidth}*${viewportHeight}' +\n                       ';st=${start};gender=${gender};age=${age}' +\n                       ';pid=${pid};userid=${userid};device=${device}' +\n                       ';params=${params};_=${random}',\n    },\n    'triggers': {\n      'pageView': {\n        'on': 'visible',\n        'request': 'pageView',\n      },\n    },\n  },\n\n  'moat': {\n    'vars': {\n      'element': ':root',\n    },\n    'requests': {\n      'load': JSON.stringify(/** @type {!JsonObject} */ ({\n        'type': 'load',\n        'pcode': '${pcode}',\n        'l0t': '${l0t}',\n        'acctType': '${acctType}',\n        'adType': '${adType}',\n        'qs': '${qs}',\n        'element': {\n          'src': '${htmlAttr(img,src,width)}',\n          'viewer': '${viewer}',\n        },\n        'document': {\n          'AMPDocumentHostname': '${ampdocHostname}',\n          'AMPDocumentURL': '${ampdocUrl}',\n          'canonicalHost': '${canonicalHost}',\n          'canonicalHostname': '${canonicalHostname}',\n          'canonicalPath': '${canonicalPath}',\n          'canonicalURL': '${canonicalUrl}',\n          'documentCharset': '${documentCharset}',\n          'documentReferrer': '${documentReferrer}',\n          'externalReferrer': '${externalReferrer}',\n          'sourceURL': '${sourceUrl}',\n          'sourceHost': '${sourceHost}',\n          'sourceHostname': '${sourceHostname}',\n          'sourcePath': '${sourcePath}',\n          'title': '${title}',\n          'viewer': '${viewer}',\n        },\n        'device': {\n          'availableScreenHeight': '${availableScreenHeight}',\n          'availableScreenWidth': '${availableScreenWidth}',\n          'browserLanguage': '${browserLanguage}',\n          'screenColorDepth': '${screenColorDepth}',\n          'screenHeight': '${screenHeight}',\n          'screenWidth': '${screenWidth}',\n          'scrollHeight': '${scrollHeight}',\n          'scrollWidth': '${scrollWidth}',\n          'scrollLeft': '${scrollLeft}',\n          'scrollTop': '${scrollTop}',\n          'timezone': '${timezone}',\n          'userAgent': '${userAgent}',\n          'viewportHeight': '${viewportHeight}',\n          'viewportWidth': '${viewportWidth}',\n        },\n        'requestCount': '${requestCount}',\n        'timeStamp': '${timestamp}',\n      })),\n      'unload': JSON.stringify(/** @type {!JsonObject} */ ({\n        'type': 'unload',\n        'pcode': '${pcode}',\n        'l0t': '${l0t}',\n        'requestCount': '${requestCount}',\n        'timeStamp': '${timestamp}',\n      })),\n      'click': JSON.stringify(/** @type {!JsonObject} */ ({\n        'type': 'click',\n        'pcode': '${pcode}',\n        'l0t': '${l0t}',\n        'requestCount': '${requestCount}',\n        'timeStamp': '${timestamp}',\n      })),\n      'viewability': JSON.stringify(/** @type {!JsonObject} */ ({\n        'type': 'viewability',\n        'pcode': '${pcode}',\n        'l0t': '${l0t}',\n        'backgroundState': '${backgroundState}',\n        'intersectionRect': '${intersectionRect}',\n        'intersectionRatio': '${intersectionRatio}',\n        'maxVisiblePercentage': '${maxVisiblePercentage}',\n        'minVisiblePercentage': '${minVisiblePercentage}',\n        'x': '${elementX}',\n        'y': '${elementY}',\n        'height': '${elementHeight}',\n        'width': '${elementWidth}',\n        'viewportHeight': '${viewportHeight}',\n        'viewportWidth': '${viewportWidth}',\n        'opacity': '${opacity}',\n        'timeStamp': '${timestamp}',\n        'requestCount': '${requestCount}',\n      })),\n      'iframe': JSON.stringify(/** @type {!JsonObject} */ ({\n        'type': 'iframe',\n        'pcode': '${pcode}',\n        'height': '${elementHeight}',\n        'width': '${elementWidth}',\n        'x': '${elementX}',\n        'y': '${elementY}',\n        'requestCount': '${requestCount}',\n      })),\n    },\n    'triggers': {\n      'load': {\n        'on': 'ini-load',\n        'request': 'load',\n      },\n      'unload': {\n        'on': 'ad-refresh',\n        'selector': '${element}',\n        'request': 'unload',\n      },\n      'click': {\n        'on': 'click',\n        'selector': '${element}',\n        'request': 'click',\n      },\n      'viewability': {\n        'on': 'visible',\n        'selector': '${element}',\n        'request': 'viewability',\n        'visibilitySpec': {\n          'repeat': true,\n          'visiblePercentageThresholds': [\n            [0,0],[0,5],[5,10],[10,15],[15,20],[20,25],\n            [25,30],[30,35],[35,40],[40,45],[45,50],\n            [50,55],[55,60],[60,65],[65,70],[70,75],\n            [75,80],[80,85],[85,90],[90,95],[95,100],[100,100],\n          ],\n        },\n      },\n      'iframe': {\n        'on': 'visible',\n        'selector': ':root',\n        'request': 'iframe',\n        'visibilitySpec': {\n          'repeat': true,\n          'visiblePercentageThresholds': [[0,0]],\n        },\n      },\n    },\n  },\n\n  'bg': {\n  },\n});\n\nANALYTICS_CONFIG['infonline']['triggers']['pageview']['iframe' +\n/* TEMPORARY EXCEPTION */ 'Ping'] = true;\n\nANALYTICS_CONFIG['adobeanalytics_nativeConfig']\n    ['triggers']['pageLoad']['iframe' +\n    /* TEMPORARY EXCEPTION */ 'Ping'] = true;\n\nANALYTICS_CONFIG['oewa']['triggers']['pageview']['iframe' +\n/* TEMPORARY EXCEPTION */ 'Ping'] = true;\n\nmergeIframeTransportConfig(ANALYTICS_CONFIG, IFRAME_TRANSPORTS);\n\n/**\n * Merges iframe transport config.\n *\n * @param {!JsonObject} config\n * @param {!JsonObject} iframeTransportConfig\n */\nfunction mergeIframeTransportConfig(config, iframeTransportConfig) {\n  for (const vendor in iframeTransportConfig) {\n    if (hasOwn(iframeTransportConfig, vendor)) {\n      const url = iframeTransportConfig[vendor];\n      config[vendor]['transport'] =\n          Object.assign({}, config[vendor]['transport'], {'iframe': url});\n    }\n  }\n}\n","/**\n * Copyright 2017 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  DEFAULT_THRESHOLD,\n  IntersectionObserverPolyfill,\n  nativeIntersectionObserverSupported,\n} from '../../../src/intersection-observer-polyfill';\nimport {Services} from '../../../src/services';\nimport {VisibilityModel} from './visibility-model';\nimport {dev, user} from '../../../src/log';\nimport {getMode} from '../../../src/mode';\nimport {isArray, isFiniteNumber} from '../../../src/types';\nimport {layoutRectLtwh} from '../../../src/layout-rect';\nimport {map} from '../../../src/utils/object';\n\nconst TAG = 'VISIBILITY-MANAGER';\n\nconst VISIBILITY_ID_PROP = '__AMP_VIS_ID';\n\n/** @type {number} */\nlet visibilityIdCounter = 1;\n\n\n/**\n * @param {!Element} element\n * @return {number}\n */\nfunction getElementId(element) {\n  let id = element[VISIBILITY_ID_PROP];\n  if (!id) {\n    id = ++visibilityIdCounter;\n    element[VISIBILITY_ID_PROP] = id;\n  }\n  return id;\n}\n\n\n/**\n * A base class for `VisibilityManagerForDoc` and `VisibilityManagerForEmbed`.\n * The instance of this class corresponds 1:1 to `AnalyticsRoot`. It represents\n * a collection of all visibility triggers declared within the `AnalyticsRoot`.\n * @implements {../../../src/service.Disposable}\n * @abstract\n */\nexport class VisibilityManager {\n  /**\n   * @param {?VisibilityManager} parent\n   * @param {!../../../src/service/ampdoc-impl.AmpDoc} ampdoc\n   */\n  constructor(parent, ampdoc) {\n    /** @const @protected */\n    this.parent = parent;\n\n    /** @const @protected */\n    this.ampdoc = ampdoc;\n\n    /** @const @private */\n    this.resources_ = Services.resourcesForDoc(ampdoc);\n\n    /** @private {number} */\n    this.rootVisibility_ = 0;\n\n    /** @const @private {!Array<!VisibilityModel>}> */\n    this.models_ = [];\n\n    /** @private {?Array<!VisibilityManager>} */\n    this.children_ = null;\n\n    /** @const @private {!Array<!UnlistenDef>} */\n    this.unsubscribe_ = [];\n\n    if (this.parent) {\n      this.parent.addChild_(this);\n    }\n  }\n\n  /**\n   * @param {!VisibilityManager} child\n   * @private\n   */\n  addChild_(child) {\n    if (!this.children_) {\n      this.children_ = [];\n    }\n    this.children_.push(child);\n  }\n\n  /**\n   * @param {!VisibilityManager} child\n   * @private\n   */\n  removeChild_(child) {\n    if (this.children_) {\n      const index = this.children_.indexOf(child);\n      if (index != -1) {\n        this.children_.splice(index, 1);\n      }\n    }\n  }\n\n  /** @override */\n  dispose() {\n    // Give the chance for all events to complete.\n    this.setRootVisibility(0);\n\n    // Dispose all models.\n    for (let i = this.models_.length - 1; i >= 0; i--) {\n      this.models_[i].dispose();\n    }\n\n    // Unsubscribe everything else.\n    this.unsubscribe_.forEach(unsubscribe => {\n      unsubscribe();\n    });\n    this.unsubscribe_.length = 0;\n\n    if (this.parent) {\n      this.parent.removeChild_(this);\n    }\n    if (this.children_) {\n      for (let i = 0; i < this.children_.length; i++) {\n        this.children_[i].dispose();\n      }\n    }\n  }\n\n  /**\n   * @param {!UnlistenDef} handler\n   */\n  unsubscribe(handler) {\n    this.unsubscribe_.push(handler);\n  }\n\n  /**\n   * The start time from which all visibility events and times are measured.\n   * @return {number}\n   * @abstract\n   */\n  getStartTime() {}\n\n  /**\n   * Whether the visibility root is currently in the background.\n   * @return {boolean}\n   * @abstract\n   */\n  isBackgrounded() {}\n\n  /**\n   * Whether the visibility root has been created in the background mode.\n   * @return {boolean}\n   * @abstract\n   */\n  isBackgroundedAtStart() {}\n\n  /**\n   * Returns the root's layout rect.\n   * @return {!../../../src/layout-rect.LayoutRectDef}}\n   * @abstract\n   */\n  getRootLayoutBox() {}\n\n  /**\n   * @return {number}\n   */\n  getRootVisibility() {\n    if (!this.parent) {\n      return this.rootVisibility_;\n    }\n    return this.parent.getRootVisibility() > 0 ? this.rootVisibility_ : 0;\n  }\n\n  /**\n   * @param {number} visibility\n   */\n  setRootVisibility(visibility) {\n    this.rootVisibility_ = visibility;\n    this.updateModels_();\n    if (this.children_) {\n      for (let i = 0; i < this.children_.length; i++) {\n        this.children_[i].updateModels_();\n      }\n    }\n  }\n\n  /** @private */\n  updateModels_() {\n    for (let i = 0; i < this.models_.length; i++) {\n      this.models_[i].update();\n    }\n  }\n\n  /**\n   * Listens to the visibility events on the root as the whole and the given\n   * visibility spec. The visibility tracking can be deferred until\n   * `readyPromise` is resolved, if specified.\n   * @param {!Object<string, *>} spec\n   * @param {?Promise} readyPromise\n   * @param {?function():!Promise} createReportPromiseFunc\n   * @param {function(!Object<string, *>)} callback\n   * @return {!UnlistenDef}\n   */\n  listenRoot(spec, readyPromise, createReportPromiseFunc, callback) {\n    const calcVisibility = this.getRootVisibility.bind(this);\n    return this.createModelAndListen_(calcVisibility, spec, readyPromise,\n        createReportPromiseFunc, callback);\n  }\n\n  /**\n   * Listens to the visibility events for the specified element and the given\n   * visibility spec. The visibility tracking can be deferred until\n   * `readyPromise` is resolved, if specified.\n   * @param {!Element} element\n   * @param {!Object<string, *>} spec\n   * @param {?Promise} readyPromise\n   * @param {?function():!Promise} createReportPromiseFunc\n   * @param {function(!Object<string, *>)} callback\n   * @return {!UnlistenDef}\n   */\n  listenElement(\n    element, spec, readyPromise, createReportPromiseFunc, callback) {\n    const calcVisibility = this.getElementVisibility.bind(this, element);\n    return this.createModelAndListen_(calcVisibility, spec, readyPromise,\n        createReportPromiseFunc, callback, element);\n  }\n\n  /**\n   * Create visibilityModel and listen to visible events.\n   * @param {function():number} calcVisibility\n   * @param {!Object<string, *>} spec\n   * @param {?Promise} readyPromise\n   * @param {?function():!Promise} createReportPromiseFunc\n   * @param {function(!Object<string, *>)} callback\n   * @param {!Element=} opt_element\n   * @return {!UnlistenDef}\n   */\n  createModelAndListen_(calcVisibility, spec,\n    readyPromise, createReportPromiseFunc, callback, opt_element) {\n    if (spec['visiblePercentageThresholds'] &&\n        spec['visiblePercentageMin'] == undefined &&\n        spec['visiblePercentageMax'] == undefined) {\n      const unlisteners = [];\n      const ranges = spec['visiblePercentageThresholds'];\n      if (!ranges || !isArray(ranges)) {\n        user().error(TAG, 'invalid visiblePercentageThresholds');\n        return () => {};\n      }\n      for (let i = 0; i < ranges.length; i++) {\n        const percents = ranges[i];\n        if (!isArray(percents) || percents.length != 2) {\n          user().error(TAG,\n              'visiblePercentageThresholds entry length is not 2');\n          continue;\n        }\n        if (!isFiniteNumber(percents[0]) || !isFiniteNumber(percents[1])) {\n          // not valid number\n          user().error(TAG,\n              'visiblePercentageThresholds entry is not valid number');\n          continue;\n        }\n        const min = Number(percents[0]);\n        const max = Number(percents[1]);\n        // Min and max must be valid percentages. Min may not be more than max.\n        // Max is inclusive. Min is usually exclusive, but there are two\n        // special cases: if min and max are both 0, or both 100, then both\n        // are inclusive. Otherwise it would not be possible to trigger an\n        // event on exactly 0% or 100%.\n        if (min < 0 || max > 100 || min > max ||\n            (min == max && min != 100 && max != 0)) {\n          user().error(TAG,\n              'visiblePercentageThresholds entry invalid min/max value');\n          continue;\n        }\n        const newSpec = spec;\n        newSpec['visiblePercentageMin'] = min;\n        newSpec['visiblePercentageMax'] = max;\n        const model = new VisibilityModel(newSpec, calcVisibility);\n        unlisteners.push(this.listen_(model, spec, readyPromise,\n            createReportPromiseFunc, callback, opt_element));\n      }\n      return () => {\n        unlisteners.forEach(unlistener => unlistener());\n      };\n    }\n\n    const model = new VisibilityModel(spec, calcVisibility);\n    return this.listen_(model, spec, readyPromise,\n        createReportPromiseFunc, callback, opt_element);\n  }\n\n  /**\n   * @param {!VisibilityModel} model\n   * @param {!Object<string, *>} spec\n   * @param {?Promise} readyPromise\n   * @param {?function():!Promise} createReportPromiseFunc\n   * @param {function(!Object<string, *>)} callback\n   * @param {!Element=} opt_element\n   * @return {!UnlistenDef}\n   * @private\n   */\n  listen_(model, spec,\n    readyPromise, createReportPromiseFunc, callback, opt_element) {\n    // Block visibility.\n    if (readyPromise) {\n      model.setReady(false);\n      readyPromise.then(() => {\n        model.setReady(true);\n      });\n    }\n\n    if (createReportPromiseFunc) {\n      model.setReportReady(createReportPromiseFunc);\n    }\n\n    // Process the event.\n    model.onTriggerEvent(() => {\n      const startTime = this.getStartTime();\n      const state = model.getState(startTime);\n\n      // Additional doc-level state.\n      state['backgrounded'] = this.isBackgrounded() ? 1 : 0;\n      state['backgroundedAtStart'] = this.isBackgroundedAtStart() ? 1 : 0;\n      state['totalTime'] = Date.now() - startTime;\n\n      // Optionally, element-level state.\n      let layoutBox;\n      if (opt_element) {\n        const resource =\n            this.resources_.getResourceForElementOptional(opt_element);\n        layoutBox =\n            resource ?\n              resource.getLayoutBox() :\n              Services.viewportForDoc(this.ampdoc).getLayoutRect(opt_element);\n        const intersectionRatio = this.getElementVisibility(opt_element);\n        const intersectionRect = this.getElementIntersectionRect(opt_element);\n        Object.assign(state, {\n          'intersectionRatio': intersectionRatio,\n          'intersectionRect': JSON.stringify(intersectionRect),\n        });\n\n      } else {\n        layoutBox = this.getRootLayoutBox();\n      }\n      model.maybeDispose();\n\n      if (layoutBox) {\n        Object.assign(state, {\n          'elementX': layoutBox.left,\n          'elementY': layoutBox.top,\n          'elementWidth': layoutBox.width,\n          'elementHeight': layoutBox.height,\n        });\n      }\n      callback(state);\n    });\n\n    this.models_.push(model);\n    model.unsubscribe(() => {\n      const index = this.models_.indexOf(model);\n      if (index != -1) {\n        this.models_.splice(index, 1);\n      }\n    });\n\n    // Observe the element via InOb.\n    if (opt_element) {\n      // It's important that this happens after all the setup is done, b/c\n      // intersection observer can fire immedidately. Per spec, this should\n      // NOT happen. However, all of the existing InOb polyfills, as well as\n      // some versions of native implementations, make this mistake.\n      model.unsubscribe(this.observe(opt_element, () => model.update()));\n    }\n\n    // Start update.\n    model.update();\n    return function() {\n      model.dispose();\n    };\n  }\n\n  /**\n   * Observes the intersections of the specified element in the viewport.\n   * @param {!Element} unusedElement\n   * @param {function(number)} unusedListener\n   * @return {!UnlistenDef}\n   * @protected\n   * @abstract\n   */\n  observe(unusedElement, unusedListener) {}\n\n  /**\n   * @param {!Element} unusedElement\n   * @return {number}\n   * @abstract\n   */\n  getElementVisibility(unusedElement) {}\n\n  /**\n   * @param {!Element} unusedElement\n   * @return {?JsonObject}\n   * @abstract\n   */\n  getElementIntersectionRect(unusedElement) {}\n}\n\n\n/**\n * The implementation of `VisibilityManager` for an AMP document. Two\n * distinct modes are supported: the main AMP doc and a in-a-box doc.\n */\nexport class VisibilityManagerForDoc extends VisibilityManager {\n  /**\n   * @param {!../../../src/service/ampdoc-impl.AmpDoc} ampdoc\n   */\n  constructor(ampdoc) {\n    super(/* parent */ null, ampdoc);\n\n    /** @const @private */\n    this.viewer_ = Services.viewerForDoc(ampdoc);\n\n    /** @const @private */\n    this.viewport_ = Services.viewportForDoc(ampdoc);\n\n    /** @private {boolean} */\n    this.backgrounded_ = !this.viewer_.isVisible();\n\n    /** @const @private {boolean} */\n    this.backgroundedAtStart_ = this.isBackgrounded();\n\n    /**\n     * @const\n     * @private {!Object<number, {\n     *   element: !Element,\n     *   intersectionRatio: number,\n     *   listeners: !Array<function(number)>\n     * }>}\n     */\n    this.trackedElements_ = map();\n\n    /** @private {?IntersectionObserver|?IntersectionObserverPolyfill} */\n    this.intersectionObserver_ = null;\n\n    if (getMode(this.ampdoc.win).runtime == 'inabox') {\n      // In-a-box: visibility depends on the InOb.\n      const root = this.ampdoc.getRootNode();\n      const rootElement = dev().assertElement(\n          root.documentElement || root.body || root);\n      this.unsubscribe(this.observe(\n          rootElement,\n          this.setRootVisibility.bind(this)));\n    } else {\n      // Main document: visibility is based on the viewer.\n      this.setRootVisibility(this.viewer_.isVisible() ? 1 : 0);\n      this.unsubscribe(this.viewer_.onVisibilityChanged(() => {\n        const isVisible = this.viewer_.isVisible();\n        if (!isVisible) {\n          this.backgrounded_ = true;\n        }\n        this.setRootVisibility(isVisible ? 1 : 0);\n      }));\n    }\n  }\n\n  /** @override */\n  dispose() {\n    super.dispose();\n    if (this.intersectionObserver_) {\n      this.intersectionObserver_.disconnect();\n      this.intersectionObserver_ = null;\n    }\n  }\n\n  /** @override */\n  getStartTime() {\n    return dev().assertNumber(this.viewer_.getFirstVisibleTime());\n  }\n\n  /** @override */\n  isBackgrounded() {\n    return this.backgrounded_;\n  }\n\n  /** @override */\n  isBackgroundedAtStart() {\n    return this.backgroundedAtStart_;\n  }\n\n  /** @override */\n  getRootLayoutBox() {\n    // This code is the same for \"in-a-box\" and standalone doc.\n    const root = this.ampdoc.getRootNode();\n    const rootElement = dev().assertElement(\n        root.documentElement || root.body || root);\n    return this.viewport_.getLayoutRect(rootElement);\n  }\n\n  /** @override */\n  observe(element, listener) {\n    this.polyfillAmpElementIfNeeded_(element);\n\n    const id = getElementId(element);\n    let trackedElement = this.trackedElements_[id];\n    if (!trackedElement) {\n      trackedElement = {\n        element,\n        intersectionRatio: 0,\n        intersectionRect: null,\n        listeners: [],\n      };\n      this.trackedElements_[id] = trackedElement;\n    } else if (trackedElement.intersectionRatio > 0) {\n      // This has already been tracked and the `intersectionRatio` is fresh.\n      listener(trackedElement.intersectionRatio);\n    }\n    trackedElement.listeners.push(listener);\n    this.getIntersectionObserver_().observe(element);\n    return () => {\n      const trackedElement = this.trackedElements_[id];\n      if (trackedElement) {\n        const index = trackedElement.listeners.indexOf(listener);\n        if (index != -1) {\n          trackedElement.listeners.splice(index, 1);\n        }\n        if (trackedElement.listeners.length == 0) {\n          this.intersectionObserver_.unobserve(element);\n          delete this.trackedElements_[id];\n        }\n      }\n    };\n  }\n\n  /** @override */\n  getElementVisibility(element) {\n    if (this.getRootVisibility() == 0) {\n      return 0;\n    }\n    const id = getElementId(element);\n    const trackedElement = this.trackedElements_[id];\n    return (trackedElement && trackedElement.intersectionRatio) || 0;\n  }\n\n  /**\n   * Gets the intersection element.\n   *\n   * @param {!Element} element\n   * @return {?JsonObject}\n   */\n  getElementIntersectionRect(element) {\n    if (this.getElementVisibility(element) <= 0) {\n      return null;\n    }\n    const id = getElementId(element);\n    const trackedElement = this.trackedElements_[id];\n    if (trackedElement) {\n      return /** @type {!JsonObject} */ (trackedElement.intersectionRect);\n    }\n    return null;\n  }\n\n  /**\n   * @return {!IntersectionObserver|!IntersectionObserverPolyfill}\n   * @private\n   */\n  getIntersectionObserver_() {\n    if (!this.intersectionObserver_) {\n      this.intersectionObserver_ = this.createIntersectionObserver_();\n    }\n    return this.intersectionObserver_;\n  }\n\n  /**\n   * @return {!IntersectionObserver|!IntersectionObserverPolyfill}\n   * @private\n   */\n  createIntersectionObserver_() {\n    // Native.\n    const {win} = this.ampdoc;\n    if (nativeIntersectionObserverSupported(win)) {\n      return new win.IntersectionObserver(\n          this.onIntersectionChanges_.bind(this),\n          {threshold: DEFAULT_THRESHOLD});\n    }\n\n    // Polyfill.\n    const intersectionObserverPolyfill = new IntersectionObserverPolyfill(\n        this.onIntersectionChanges_.bind(this),\n        {threshold: DEFAULT_THRESHOLD});\n    const ticker = () => {\n      intersectionObserverPolyfill.tick(this.viewport_.getRect());\n    };\n    this.unsubscribe(this.viewport_.onScroll(ticker));\n    this.unsubscribe(this.viewport_.onChanged(ticker));\n    // Tick in the next event loop. That's how native InOb works.\n    setTimeout(ticker);\n    return intersectionObserverPolyfill;\n  }\n\n  /**\n   * @param {!Element} element\n   * @private\n   */\n  polyfillAmpElementIfNeeded_(element) {\n    const {win} = this.ampdoc;\n    if (nativeIntersectionObserverSupported(win)) {\n      return;\n    }\n\n    // InOb polyfill requires partial AmpElement implementation.\n    if (typeof element.getLayoutBox == 'function') {\n      return;\n    }\n    element.getLayoutBox = () => {\n      return this.viewport_.getLayoutRect(element);\n    };\n    element.getOwner = () => null;\n  }\n\n  /**\n   * @param {!Array<!IntersectionObserverEntry>} entries\n   * @private\n   */\n  onIntersectionChanges_(entries) {\n    entries.forEach(change => {\n      let intersection = change.intersectionRect;\n      // IntersectionRect type now changed from ClientRect to DOMRectReadOnly.\n      // TODO(@zhouyx): Fix all InOb related type.\n      intersection = layoutRectLtwh(Number(intersection.left),\n          Number(intersection.top),\n          Number(intersection.width),\n          Number(intersection.height));\n      this.onIntersectionChange_(\n          change.target,\n          change.intersectionRatio,\n          intersection);\n    });\n  }\n\n  /**\n   * @param {!Element} target\n   * @param {number} intersectionRatio\n   * @param {!../../../src/layout-rect.LayoutRectDef} intersectionRect\n   * @private\n   */\n  onIntersectionChange_(target, intersectionRatio, intersectionRect) {\n    intersectionRatio = Math.min(Math.max(intersectionRatio, 0), 1);\n    const id = getElementId(target);\n    const trackedElement = this.trackedElements_[id];\n    if (trackedElement) {\n      trackedElement.intersectionRatio = intersectionRatio;\n      trackedElement.intersectionRect = intersectionRect;\n      for (let i = 0; i < trackedElement.listeners.length; i++) {\n        trackedElement.listeners[i](intersectionRatio);\n      }\n    }\n  }\n}\n\n\n/**\n * The implementation of `VisibilityManager` for a FIE embed. This visibility\n * root delegates most of tracking functions to its parent, the ampdoc root.\n */\nexport class VisibilityManagerForEmbed extends VisibilityManager {\n  /**\n   * @param {!VisibilityManager} parent\n   * @param {!../../../src/friendly-iframe-embed.FriendlyIframeEmbed} embed\n   */\n  constructor(parent, embed) {\n    super(parent, parent.ampdoc);\n\n    /** @const */\n    this.embed = embed;\n\n    /** @const @private {boolean} */\n    this.backgroundedAtStart_ = this.parent.isBackgrounded();\n\n    this.unsubscribe(this.parent.observe(\n        dev().assertElement(embed.host),\n        this.setRootVisibility.bind(this)));\n  }\n\n  /** @override */\n  getStartTime() {\n    return this.embed.getStartTime();\n  }\n\n  /** @override */\n  isBackgrounded() {\n    return this.parent.isBackgrounded();\n  }\n\n  /** @override */\n  isBackgroundedAtStart() {\n    return this.backgroundedAtStart_;\n  }\n\n  /**\n   * Gets the layout box of the embedded document. Note that this may be\n   * smaller than the size allocated by the host. In that case, the document\n   * will be centered, and the unfilled space will not be reflected in this\n   * return value.\n   * embed.iframe is used to calculate the root layoutbox, since it is more\n   * important for the embedded document to know its own size, rather than\n   * the size of the host rectangle which it may or may not entirely fill.\n   * embed.host is used to calculate the root visibility, however, since\n   * the visibility of the host element directly determines the embedded\n   * document's visibility.\n   * @override\n   */\n  getRootLayoutBox() {\n    const rootElement = dev().assertElement(this.embed.iframe);\n    return Services.viewportForDoc(this.ampdoc).getLayoutRect(rootElement);\n  }\n\n  /** @override */\n  observe(element, listener) {\n    return this.parent.observe(element, listener);\n  }\n\n  /** @override */\n  getElementVisibility(element) {\n    if (this.getRootVisibility() == 0) {\n      return 0;\n    }\n    return this.parent.getElementVisibility(element);\n  }\n\n  /**\n   * Returns intersecting element.\n   * @override\n   */\n  getElementIntersectionRect(element) {\n    if (this.getRootVisibility() == 0) {\n      return null;\n    }\n    return this.parent.getElementIntersectionRect(element);\n  }\n\n}\n","/**\n * Copyright 2017 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Deferred} from '../../../src/utils/promise';\nimport {Observable} from '../../../src/observable';\nimport {dev} from '../../../src/log';\n\n/**\n * This class implements visibility calculations based on the\n * visibility ratio. It's used for documents, embeds and individual element.\n * @implements {../../../src/service.Disposable}\n */\nexport class VisibilityModel {\n  /**\n   * @param {!Object<string, *>} spec\n   * @param {function():number} calcVisibility\n   */\n  constructor(spec, calcVisibility) {\n    /** @const @private */\n    this.calcVisibility_ = calcVisibility;\n\n    /**\n     * Spec parameters.\n     * @private {{\n     *   visiblePercentageMin: number,\n     *   visiblePercentageMax: number,\n     *   totalTimeMin: number,\n     *   totalTimeMax: number,\n     *   continuousTimeMin: number,\n     *   continuousTimeMax: number,\n     * }}\n     */\n    this.spec_ = {\n      visiblePercentageMin: Number(spec['visiblePercentageMin']) / 100 || 0,\n      visiblePercentageMax: Number(spec['visiblePercentageMax']) / 100 || 1,\n      totalTimeMin: Number(spec['totalTimeMin']) || 0,\n      totalTimeMax: Number(spec['totalTimeMax']) || Infinity,\n      continuousTimeMin: Number(spec['continuousTimeMin']) || 0,\n      continuousTimeMax: Number(spec['continuousTimeMax']) || Infinity,\n    };\n    // Above, if visiblePercentageMax was not specified, assume 100%.\n    // Here, do allow 0% to be the value if that is what was specified.\n    if (String(spec['visiblePercentageMax']).trim() === '0') {\n      this.spec_.visiblePercentageMax = 0;\n    }\n\n    /** @private {boolean} */\n    this.repeat_ = spec['repeat'] === true;\n\n    /** @private {?Observable} */\n    this.onTriggerObservable_ = new Observable();\n\n    const deferred = new Deferred();\n\n    /** @private */\n    this.eventPromise_ = deferred.promise;\n\n    /** @private {?function()} */\n    this.eventResolver_ = deferred.resolve;\n\n    this.eventPromise_.then(() => {\n      this.onTriggerObservable_.fire();\n    });\n\n    /** @private {!Array<!UnlistenDef>} */\n    this.unsubscribe_ = [];\n\n    /** @const @private {time} */\n    this.createdTime_ = Date.now();\n\n    /** @private {boolean} */\n    this.ready_ = true;\n\n    /** @private {boolean} */\n    this.reportReady_ = true;\n\n    /** @private {?function():!Promise} */\n    this.createReportReadyPromise_ = null;\n\n    /** @private {?number} */\n    this.scheduledUpdateTimeoutId_ = null;\n\n    /** @private {boolean} */\n    this.matchesVisibility_ = false;\n\n    /** @private {boolean} */\n    this.everMatchedVisibility_ = false;\n\n    /** @private {time} duration in milliseconds */\n    this.continuousTime_ = 0;\n\n    /** @private {time} duration in milliseconds */\n    this.maxContinuousVisibleTime_ = 0;\n\n    /** @private {time} duration in milliseconds */\n    this.totalVisibleTime_ = 0;\n\n    /** @private {time} milliseconds since epoch */\n    this.firstSeenTime_ = 0;\n\n    /** @private {time} milliseconds since epoch */\n    this.lastSeenTime_ = 0;\n\n    /** @private {time} milliseconds since epoch */\n    this.firstVisibleTime_ = 0;\n\n    /** @private {time} milliseconds since epoch */\n    this.lastVisibleTime_ = 0;\n\n    /** @private {time} percent value in a [0, 1] range */\n    this.loadTimeVisibility_ = 0;\n\n    /** @private {number} percent value in a [0, 1] range */\n    this.minVisiblePercentage_ = 0;\n\n    /** @private {number} percent value in a [0, 1] range */\n    this.maxVisiblePercentage_ = 0;\n\n    /** @private {time} milliseconds since epoch */\n    this.lastVisibleUpdateTime_ = 0;\n\n    /** @private {boolean} */\n    this.waitToReset_ = false;\n\n    /** @private {?number} */\n    this.scheduleRepeatId_ = null;\n  }\n\n  /**\n   * Refresh counter on visible reset.\n   * TODO: Right now all state value are scoped state values that gets reset.\n   * We may need to add support to global state values,\n   * that never reset like globalTotalVisibleTime.\n   * Note: loadTimeVisibility is an exception.\n   * @private\n   */\n  reset_() {\n    dev().assert(!this.eventResolver_,\n        'Attempt to refresh visible event before previous one resolve');\n    const deferred = new Deferred();\n    this.eventPromise_ = deferred.promise;\n    this.eventResolver_ = deferred.resolve;\n\n    this.eventPromise_.then(() => {\n      this.onTriggerObservable_.fire();\n    });\n    this.scheduleRepeatId_ = null;\n    this.everMatchedVisibility_ = false;\n    this.matchesVisibility_ = false;\n    this.continuousTime_ = 0;\n    this.maxContinuousVisibleTime_ = 0;\n    this.totalVisibleTime_ = 0;\n    this.firstVisibleTime_ = 0;\n    this.firstSeenTime_ = 0;\n    this.lastSeenTime_ = 0;\n    this.lastVisibleTime_ = 0;\n    this.minVisiblePercentage_ = 0;\n    this.maxVisiblePercentage_ = 0;\n    this.lastVisibleUpdateTime_ = 0;\n    this.waitToReset_ = false;\n  }\n\n  /**\n   * Function that visibilityManager can used to dispose model or reset model\n   */\n  maybeDispose() {\n    if (!this.repeat_) {\n      this.dispose();\n    }\n  }\n\n  /** @override */\n  dispose() {\n    if (this.scheduledUpdateTimeoutId_) {\n      clearTimeout(this.scheduledUpdateTimeoutId_);\n      this.scheduledUpdateTimeoutId_ = null;\n    }\n    if (this.scheduleRepeatId_) {\n      clearTimeout(this.scheduleRepeatId_);\n      this.scheduleRepeatId_ = null;\n    }\n    this.unsubscribe_.forEach(unsubscribe => {\n      unsubscribe();\n    });\n    this.unsubscribe_.length = 0;\n    this.eventResolver_ = null;\n    if (this.onTriggerObservable_) {\n      this.onTriggerObservable_.removeAll();\n      this.onTriggerObservable_ = null;\n    }\n  }\n\n  /**\n   * Adds the unsubscribe handler that will be called when this visibility\n   * model is destroyed.\n   * @param {!UnlistenDef} handler\n   */\n  unsubscribe(handler) {\n    this.unsubscribe_.push(handler);\n  }\n\n  /**\n   * Adds the event handler that will be called when all visibility conditions\n   * have been met.\n   * @param {function()} handler\n   */\n  onTriggerEvent(handler) {\n    if (this.onTriggerObservable_) {\n      this.onTriggerObservable_.add(handler);\n    }\n    if (this.eventPromise_ && !this.eventResolver_) {\n      // If eventPromise has already resolved, need to call handler manually.\n      handler();\n    }\n  }\n\n  /**\n   * Sets whether this object is ready. Ready means that visibility is\n   * ready to be calculated, e.g. because an element has been\n   * sufficiently rendered.\n   * @param {boolean} ready\n   */\n  setReady(ready) {\n    this.ready_ = ready;\n    this.update();\n  }\n\n  /**\n   * Sets that the model needs to wait on extra report ready promise\n   * after all visibility conditions have been met to call report handler\n   * @param {function():!Promise} callback\n   */\n  setReportReady(callback) {\n    this.reportReady_ = false;\n    this.createReportReadyPromise_ = callback;\n  }\n\n  /**\n   * @return {number}\n   * @private\n   */\n  getVisibility_() {\n    return this.ready_ ? this.calcVisibility_() : 0;\n  }\n\n  /**\n   * Runs the calculation cycle.\n   */\n  update() {\n    this.update_(this.getVisibility_());\n  }\n\n  /**\n   * Returns the calculated state of visibility.\n   * @param {time} startTime\n   * @return {!Object<string, string|number>}\n   */\n  getState(startTime) {\n    return {\n      // Observed times, relative to the `startTime`.\n      firstSeenTime: timeBase(this.firstSeenTime_, startTime),\n      lastSeenTime: timeBase(this.lastSeenTime_, startTime),\n      lastVisibleTime: timeBase(this.lastVisibleTime_, startTime),\n      firstVisibleTime: timeBase(this.firstVisibleTime_, startTime),\n\n      // Durations.\n      maxContinuousVisibleTime: this.maxContinuousVisibleTime_,\n      totalVisibleTime: this.totalVisibleTime_,\n\n      // Visibility percents.\n      loadTimeVisibility: this.loadTimeVisibility_ * 100 || 0,\n      minVisiblePercentage: this.minVisiblePercentage_ * 100,\n      maxVisiblePercentage: this.maxVisiblePercentage_ * 100,\n    };\n  }\n\n  /**\n   * @param {number} visibility\n   * @private\n   */\n  update_(visibility) {\n    // Update state and check if all conditions are satisfied\n    if (this.waitToReset_) {\n      if (!this.isVisibilityMatch_(visibility)) {\n        // We were waiting for a condition to become unmet, and now it has\n        this.reset_();\n      }\n      return;\n    }\n    if (!this.eventResolver_) {\n      return;\n    }\n    const conditionsMet = this.updateCounters_(visibility);\n    if (conditionsMet) {\n      if (this.scheduledUpdateTimeoutId_) {\n        clearTimeout(this.scheduledUpdateTimeoutId_);\n        this.scheduledUpdateTimeoutId_ = null;\n      }\n      if (this.reportReady_) {\n        // TODO(jonkeller): Can we eliminate eventResolver_?\n        this.eventResolver_();\n        this.eventResolver_ = null;\n        if (this.repeat_) {\n          this.waitToReset_ = true;\n          this.continuousTime_ = 0;\n        }\n      } else if (this.createReportReadyPromise_) {\n        // Report when report ready promise resolve\n        const reportReadyPromise = this.createReportReadyPromise_();\n        this.createReportReadyPromise_ = null;\n        reportReadyPromise.then(() => {\n          this.reportReady_ = true;\n          // Need to update one more time in case time exceeds\n          // maxContinuousVisibleTime.\n          this.update();\n        });\n      }\n    } else if (this.matchesVisibility_ && !this.scheduledUpdateTimeoutId_) {\n      // There is unmet duration condition, schedule a check\n      const timeToWait = this.computeTimeToWait_();\n      if (timeToWait > 0) {\n        this.scheduledUpdateTimeoutId_ = setTimeout(() => {\n          this.scheduledUpdateTimeoutId_ = null;\n          this.update();\n        }, timeToWait);\n      }\n    } else if (!this.matchesVisibility_ && this.scheduledUpdateTimeoutId_) {\n      clearTimeout(this.scheduledUpdateTimeoutId_);\n      this.scheduledUpdateTimeoutId_ = null;\n    }\n  }\n\n  /**\n   * Check if visibility fall into the percentage range\n   * @param {number} visibility\n   * @return {boolean}\n   */\n  isVisibilityMatch_(visibility) {\n    dev().assert(visibility >= 0 && visibility <= 1,\n        'invalid visibility value: %s', visibility);\n    // Special case: If visiblePercentageMin is 100%, then it doesn't make\n    // sense to do the usual (min, max] since that would never be true.\n    if (this.spec_.visiblePercentageMin == 1) {\n      return visibility == 1;\n    }\n    // Special case: If visiblePercentageMax is 0%, then we\n    // want to ping when the creative becomes not visible.\n    if (this.spec_.visiblePercentageMax == 0) {\n      return visibility == 0;\n    }\n    return visibility > this.spec_.visiblePercentageMin &&\n        visibility <= this.spec_.visiblePercentageMax;\n  }\n\n  /**\n   * @param {number} visibility\n   * @return {boolean} true\n   * @private\n   */\n  updateCounters_(visibility) {\n    dev().assert(visibility >= 0 && visibility <= 1,\n        'invalid visibility value: %s', visibility);\n    const now = Date.now();\n\n    if (visibility > 0) {\n      this.firstSeenTime_ = this.firstSeenTime_ || now;\n      this.lastSeenTime_ = now;\n      // Consider it as load time visibility if this happens within 300ms of\n      // page load.\n      if (!this.loadTimeVisibility_ && (now - this.createdTime_) < 300) {\n        this.loadTimeVisibility_ = visibility;\n      }\n    }\n\n    const prevMatchesVisibility = this.matchesVisibility_;\n    const timeSinceLastUpdate =\n        this.lastVisibleUpdateTime_ ? now - this.lastVisibleUpdateTime_ : 0;\n    this.matchesVisibility_ = this.isVisibilityMatch_(visibility);\n    if (this.matchesVisibility_) {\n      this.everMatchedVisibility_ = true;\n      if (prevMatchesVisibility) {\n        // Keep counting.\n        this.totalVisibleTime_ += timeSinceLastUpdate;\n        this.continuousTime_ += timeSinceLastUpdate;\n        this.maxContinuousVisibleTime_ =\n            Math.max(this.maxContinuousVisibleTime_, this.continuousTime_);\n      } else {\n        // The resource came into view: start counting.\n        dev().assert(!this.lastVisibleUpdateTime_);\n        this.firstVisibleTime_ = this.firstVisibleTime_ || now;\n      }\n      this.lastVisibleUpdateTime_ = now;\n      this.minVisiblePercentage_ =\n          this.minVisiblePercentage_ > 0 ?\n            Math.min(this.minVisiblePercentage_, visibility) :\n            visibility;\n      this.maxVisiblePercentage_ =\n          Math.max(this.maxVisiblePercentage_, visibility);\n      this.lastVisibleTime_ = now;\n    } else if (prevMatchesVisibility) {\n      // The resource went out of view. Do final calculations and reset state.\n      dev().assert(this.lastVisibleUpdateTime_ > 0);\n\n      this.maxContinuousVisibleTime_ = Math.max(\n          this.maxContinuousVisibleTime_,\n          this.continuousTime_ + timeSinceLastUpdate);\n\n      // Reset for next visibility event.\n      this.lastVisibleUpdateTime_ = 0;\n      this.totalVisibleTime_ += timeSinceLastUpdate;\n      this.continuousTime_ = 0; // Clear only after max is calculated above.\n      this.lastVisibleTime_ = now;\n    }\n\n    return this.everMatchedVisibility_ &&\n        (this.totalVisibleTime_ >= this.spec_.totalTimeMin) &&\n        (this.totalVisibleTime_ <= this.spec_.totalTimeMax) &&\n        (this.maxContinuousVisibleTime_ >= this.spec_.continuousTimeMin) &&\n        (this.maxContinuousVisibleTime_ <= this.spec_.continuousTimeMax);\n  }\n\n  /**\n   * Computes time, assuming the object is currently visible, that it'd take\n   * it to match all timing requirements.\n   * @return {time}\n   * @private\n   */\n  computeTimeToWait_() {\n    const waitForContinuousTime = Math.max(\n        this.spec_.continuousTimeMin - this.continuousTime_, 0);\n    const waitForTotalTime = Math.max(\n        this.spec_.totalTimeMin - this.totalVisibleTime_, 0);\n    const maxWaitTime = Math.max(waitForContinuousTime, waitForTotalTime);\n    return Math.min(\n        maxWaitTime,\n        waitForContinuousTime || Infinity,\n        waitForTotalTime || Infinity);\n  }\n}\n\n\n/**\n * Calculates the specified time based on the given `baseTime`.\n * @param {time} time\n * @param {time} baseTime\n * @return {time}\n */\nfunction timeBase(time, baseTime) {\n  return time >= baseTime ? time - baseTime : 0;\n}\n","/*!\n\nCopyright (C) 2014-2016 by Andrea Giammarchi - @WebReflection\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\n*/\n// global window Object\n// optional polyfill info\n//    'auto' used by default, everything is feature detected\n//    'force' use the polyfill even if not fully needed\nfunction installCustomElements(window, polyfill) {'use strict';\n\n  // DO NOT USE THIS FILE DIRECTLY, IT WON'T WORK\n  // THIS IS A PROJECT BASED ON A BUILD SYSTEM\n  // THIS FILE IS JUST WRAPPED UP RESULTING IN\n  // build/document-register-element.node.js\n\n  var\n    document = window.document,\n    Object = window.Object\n  ;\n\n  var htmlClass = (function (info) {\n    // (C) Andrea Giammarchi - @WebReflection - MIT Style\n    var\n      catchClass = /^[A-Z]+[a-z]/,\n      filterBy = function (re) {\n        var arr = [], tag;\n        for (tag in register) {\n          if (re.test(tag)) arr.push(tag);\n        }\n        return arr;\n      },\n      add = function (Class, tag) {\n        tag = tag.toLowerCase();\n        if (!(tag in register)) {\n          register[Class] = (register[Class] || []).concat(tag);\n          register[tag] = (register[tag.toUpperCase()] = Class);\n        }\n      },\n      register = (Object.create || Object)(null),\n      htmlClass = {},\n      i, section, tags, Class\n    ;\n    for (section in info) {\n      for (Class in info[section]) {\n        tags = info[section][Class];\n        register[Class] = tags;\n        for (i = 0; i < tags.length; i++) {\n          register[tags[i].toLowerCase()] =\n          register[tags[i].toUpperCase()] = Class;\n        }\n      }\n    }\n    htmlClass.get = function get(tagOrClass) {\n      return typeof tagOrClass === 'string' ?\n        (register[tagOrClass] || (catchClass.test(tagOrClass) ? [] : '')) :\n        filterBy(tagOrClass);\n    };\n    htmlClass.set = function set(tag, Class) {\n      return (catchClass.test(tag) ?\n        add(tag, Class) :\n        add(Class, tag)\n      ), htmlClass;\n    };\n    return htmlClass;\n  }({\n    \"collections\": {\n      \"HTMLAllCollection\": [\n        \"all\"\n      ],\n      \"HTMLCollection\": [\n        \"forms\"\n      ],\n      \"HTMLFormControlsCollection\": [\n        \"elements\"\n      ],\n      \"HTMLOptionsCollection\": [\n        \"options\"\n      ]\n    },\n    \"elements\": {\n      \"Element\": [\n        \"element\"\n      ],\n      \"HTMLAnchorElement\": [\n        \"a\"\n      ],\n      \"HTMLAppletElement\": [\n        \"applet\"\n      ],\n      \"HTMLAreaElement\": [\n        \"area\"\n      ],\n      \"HTMLAttachmentElement\": [\n        \"attachment\"\n      ],\n      \"HTMLAudioElement\": [\n        \"audio\"\n      ],\n      \"HTMLBRElement\": [\n        \"br\"\n      ],\n      \"HTMLBaseElement\": [\n        \"base\"\n      ],\n      \"HTMLBodyElement\": [\n        \"body\"\n      ],\n      \"HTMLButtonElement\": [\n        \"button\"\n      ],\n      \"HTMLCanvasElement\": [\n        \"canvas\"\n      ],\n      \"HTMLContentElement\": [\n        \"content\"\n      ],\n      \"HTMLDListElement\": [\n        \"dl\"\n      ],\n      \"HTMLDataElement\": [\n        \"data\"\n      ],\n      \"HTMLDataListElement\": [\n        \"datalist\"\n      ],\n      \"HTMLDetailsElement\": [\n        \"details\"\n      ],\n      \"HTMLDialogElement\": [\n        \"dialog\"\n      ],\n      \"HTMLDirectoryElement\": [\n        \"dir\"\n      ],\n      \"HTMLDivElement\": [\n        \"div\"\n      ],\n      \"HTMLDocument\": [\n        \"document\"\n      ],\n      \"HTMLElement\": [\n        \"element\",\n        \"abbr\",\n        \"address\",\n        \"article\",\n        \"aside\",\n        \"b\",\n        \"bdi\",\n        \"bdo\",\n        \"cite\",\n        \"code\",\n        \"command\",\n        \"dd\",\n        \"dfn\",\n        \"dt\",\n        \"em\",\n        \"figcaption\",\n        \"figure\",\n        \"footer\",\n        \"header\",\n        \"i\",\n        \"kbd\",\n        \"mark\",\n        \"nav\",\n        \"noscript\",\n        \"rp\",\n        \"rt\",\n        \"ruby\",\n        \"s\",\n        \"samp\",\n        \"section\",\n        \"small\",\n        \"strong\",\n        \"sub\",\n        \"summary\",\n        \"sup\",\n        \"u\",\n        \"var\",\n        \"wbr\"\n      ],\n      \"HTMLEmbedElement\": [\n        \"embed\"\n      ],\n      \"HTMLFieldSetElement\": [\n        \"fieldset\"\n      ],\n      \"HTMLFontElement\": [\n        \"font\"\n      ],\n      \"HTMLFormElement\": [\n        \"form\"\n      ],\n      \"HTMLFrameElement\": [\n        \"frame\"\n      ],\n      \"HTMLFrameSetElement\": [\n        \"frameset\"\n      ],\n      \"HTMLHRElement\": [\n        \"hr\"\n      ],\n      \"HTMLHeadElement\": [\n        \"head\"\n      ],\n      \"HTMLHeadingElement\": [\n        \"h1\",\n        \"h2\",\n        \"h3\",\n        \"h4\",\n        \"h5\",\n        \"h6\"\n      ],\n      \"HTMLHtmlElement\": [\n        \"html\"\n      ],\n      \"HTMLIFrameElement\": [\n        \"iframe\"\n      ],\n      \"HTMLImageElement\": [\n        \"img\"\n      ],\n      \"HTMLInputElement\": [\n        \"input\"\n      ],\n      \"HTMLKeygenElement\": [\n        \"keygen\"\n      ],\n      \"HTMLLIElement\": [\n        \"li\"\n      ],\n      \"HTMLLabelElement\": [\n        \"label\"\n      ],\n      \"HTMLLegendElement\": [\n        \"legend\"\n      ],\n      \"HTMLLinkElement\": [\n        \"link\"\n      ],\n      \"HTMLMapElement\": [\n        \"map\"\n      ],\n      \"HTMLMarqueeElement\": [\n        \"marquee\"\n      ],\n      \"HTMLMediaElement\": [\n        \"media\"\n      ],\n      \"HTMLMenuElement\": [\n        \"menu\"\n      ],\n      \"HTMLMenuItemElement\": [\n        \"menuitem\"\n      ],\n      \"HTMLMetaElement\": [\n        \"meta\"\n      ],\n      \"HTMLMeterElement\": [\n        \"meter\"\n      ],\n      \"HTMLModElement\": [\n        \"del\",\n        \"ins\"\n      ],\n      \"HTMLOListElement\": [\n        \"ol\"\n      ],\n      \"HTMLObjectElement\": [\n        \"object\"\n      ],\n      \"HTMLOptGroupElement\": [\n        \"optgroup\"\n      ],\n      \"HTMLOptionElement\": [\n        \"option\"\n      ],\n      \"HTMLOutputElement\": [\n        \"output\"\n      ],\n      \"HTMLParagraphElement\": [\n        \"p\"\n      ],\n      \"HTMLParamElement\": [\n        \"param\"\n      ],\n      \"HTMLPictureElement\": [\n        \"picture\"\n      ],\n      \"HTMLPreElement\": [\n        \"pre\"\n      ],\n      \"HTMLProgressElement\": [\n        \"progress\"\n      ],\n      \"HTMLQuoteElement\": [\n        \"blockquote\",\n        \"q\",\n        \"quote\"\n      ],\n      \"HTMLScriptElement\": [\n        \"script\"\n      ],\n      \"HTMLSelectElement\": [\n        \"select\"\n      ],\n      \"HTMLShadowElement\": [\n        \"shadow\"\n      ],\n      \"HTMLSlotElement\": [\n        \"slot\"\n      ],\n      \"HTMLSourceElement\": [\n        \"source\"\n      ],\n      \"HTMLSpanElement\": [\n        \"span\"\n      ],\n      \"HTMLStyleElement\": [\n        \"style\"\n      ],\n      \"HTMLTableCaptionElement\": [\n        \"caption\"\n      ],\n      \"HTMLTableCellElement\": [\n        \"td\",\n        \"th\"\n      ],\n      \"HTMLTableColElement\": [\n        \"col\",\n        \"colgroup\"\n      ],\n      \"HTMLTableElement\": [\n        \"table\"\n      ],\n      \"HTMLTableRowElement\": [\n        \"tr\"\n      ],\n      \"HTMLTableSectionElement\": [\n        \"thead\",\n        \"tbody\",\n        \"tfoot\"\n      ],\n      \"HTMLTemplateElement\": [\n        \"template\"\n      ],\n      \"HTMLTextAreaElement\": [\n        \"textarea\"\n      ],\n      \"HTMLTimeElement\": [\n        \"time\"\n      ],\n      \"HTMLTitleElement\": [\n        \"title\"\n      ],\n      \"HTMLTrackElement\": [\n        \"track\"\n      ],\n      \"HTMLUListElement\": [\n        \"ul\"\n      ],\n      \"HTMLUnknownElement\": [\n        \"unknown\",\n        \"vhgroupv\",\n        \"vkeygen\"\n      ],\n      \"HTMLVideoElement\": [\n        \"video\"\n      ]\n    },\n    \"nodes\": {\n      \"Attr\": [\n        \"node\"\n      ],\n      \"Audio\": [\n        \"audio\"\n      ],\n      \"CDATASection\": [\n        \"node\"\n      ],\n      \"CharacterData\": [\n        \"node\"\n      ],\n      \"Comment\": [\n        \"#comment\"\n      ],\n      \"Document\": [\n        \"#document\"\n      ],\n      \"DocumentFragment\": [\n        \"#document-fragment\"\n      ],\n      \"DocumentType\": [\n        \"node\"\n      ],\n      \"HTMLDocument\": [\n        \"#document\"\n      ],\n      \"Image\": [\n        \"img\"\n      ],\n      \"Option\": [\n        \"option\"\n      ],\n      \"ProcessingInstruction\": [\n        \"node\"\n      ],\n      \"ShadowRoot\": [\n        \"#shadow-root\"\n      ],\n      \"Text\": [\n        \"#text\"\n      ],\n      \"XMLDocument\": [\n        \"xml\"\n      ]\n    }\n  }));\n  \n  \n    \n  // passed at runtime, configurable\n  // via nodejs module\n  if (!polyfill) polyfill = 'auto';\n  \n  var\n    // V0 polyfill entry\n    REGISTER_ELEMENT = 'registerElement',\n  \n    // IE < 11 only + old WebKit for attributes + feature detection\n    EXPANDO_UID = '__' + REGISTER_ELEMENT + (window.Math.random() * 10e4 >> 0),\n  \n    // shortcuts and costants\n    ADD_EVENT_LISTENER = 'addEventListener',\n    ATTACHED = 'attached',\n    CALLBACK = 'Callback',\n    DETACHED = 'detached',\n    EXTENDS = 'extends',\n  \n    ATTRIBUTE_CHANGED_CALLBACK = 'attributeChanged' + CALLBACK,\n    ATTACHED_CALLBACK = ATTACHED + CALLBACK,\n    CONNECTED_CALLBACK = 'connected' + CALLBACK,\n    DISCONNECTED_CALLBACK = 'disconnected' + CALLBACK,\n    CREATED_CALLBACK = 'created' + CALLBACK,\n    DETACHED_CALLBACK = DETACHED + CALLBACK,\n  \n    ADDITION = 'ADDITION',\n    MODIFICATION = 'MODIFICATION',\n    REMOVAL = 'REMOVAL',\n  \n    DOM_ATTR_MODIFIED = 'DOMAttrModified',\n    DOM_CONTENT_LOADED = 'DOMContentLoaded',\n    DOM_SUBTREE_MODIFIED = 'DOMSubtreeModified',\n  \n    PREFIX_TAG = '<',\n    PREFIX_IS = '=',\n  \n    // valid and invalid node names\n    validName = /^[A-Z][A-Z0-9]*(?:-[A-Z0-9]+)+$/,\n    invalidNames = [\n      'ANNOTATION-XML',\n      'COLOR-PROFILE',\n      'FONT-FACE',\n      'FONT-FACE-SRC',\n      'FONT-FACE-URI',\n      'FONT-FACE-FORMAT',\n      'FONT-FACE-NAME',\n      'MISSING-GLYPH'\n    ],\n  \n    // registered types and their prototypes\n    types = [],\n    protos = [],\n  \n    // to query subnodes\n    query = '',\n  \n    // html shortcut used to feature detect\n    documentElement = document.documentElement,\n  \n    // ES5 inline helpers || basic patches\n    indexOf = types.indexOf || function (v) {\n      for(var i = this.length; i-- && this[i] !== v;){}\n      return i;\n    },\n  \n    // other helpers / shortcuts\n    OP = Object.prototype,\n    hOP = OP.hasOwnProperty,\n    iPO = OP.isPrototypeOf,\n  \n    defineProperty = Object.defineProperty,\n    empty = [],\n    gOPD = Object.getOwnPropertyDescriptor,\n    gOPN = Object.getOwnPropertyNames,\n    gPO = Object.getPrototypeOf,\n    sPO = Object.setPrototypeOf,\n  \n    // jshint proto: true\n    hasProto = !!Object.__proto__,\n  \n    // V1 helpers\n    fixGetClass = false,\n    DRECEV1 = '__dreCEv1',\n    customElements = window.customElements,\n    usableCustomElements = polyfill !== 'force' && !!(\n      customElements &&\n      customElements.define &&\n      customElements.get &&\n      customElements.whenDefined\n    ),\n    Dict = Object.create || Object,\n    Map = window.Map || function Map() {\n      var K = [], V = [], i;\n      return {\n        get: function (k) {\n          return V[indexOf.call(K, k)];\n        },\n        set: function (k, v) {\n          i = indexOf.call(K, k);\n          if (i < 0) V[K.push(k) - 1] = v;\n          else V[i] = v;\n        }\n      };\n    },\n    Promise = window.Promise || function (fn) {\n      var\n        notify = [],\n        done = false,\n        p = {\n          'catch': function () {\n            return p;\n          },\n          'then': function (cb) {\n            notify.push(cb);\n            if (done) setTimeout(resolve, 1);\n            return p;\n          }\n        }\n      ;\n      function resolve(value) {\n        done = true;\n        while (notify.length) notify.shift()(value);\n      }\n      fn(resolve);\n      return p;\n    },\n    justCreated = false,\n    constructors = Dict(null),\n    waitingList = Dict(null),\n    nodeNames = new Map(),\n    secondArgument = function (is) {\n      return is.toLowerCase();\n    },\n  \n    // used to create unique instances\n    create = Object.create || function Bridge(proto) {\n      // silly broken polyfill probably ever used but short enough to work\n      return proto ? ((Bridge.prototype = proto), new Bridge()) : this;\n    },\n  \n    // will set the prototype if possible\n    // or copy over all properties\n    setPrototype = sPO || (\n      hasProto ?\n        function (o, p) {\n          o.__proto__ = p;\n          return o;\n        } : (\n      (gOPN && gOPD) ?\n        (function(){\n          function setProperties(o, p) {\n            for (var\n              key,\n              names = gOPN(p),\n              i = 0, length = names.length;\n              i < length; i++\n            ) {\n              key = names[i];\n              if (!hOP.call(o, key)) {\n                defineProperty(o, key, gOPD(p, key));\n              }\n            }\n          }\n          return function (o, p) {\n            do {\n              setProperties(o, p);\n            } while ((p = gPO(p)) && !iPO.call(p, o));\n            return o;\n          };\n        }()) :\n        function (o, p) {\n          for (var key in p) {\n            o[key] = p[key];\n          }\n          return o;\n        }\n    )),\n  \n    // DOM shortcuts and helpers, if any\n  \n    MutationObserver = window.MutationObserver ||\n                       window.WebKitMutationObserver,\n  \n    HTMLElementPrototype = (\n      window.HTMLElement ||\n      window.Element ||\n      window.Node\n    ).prototype,\n  \n    IE8 = !iPO.call(HTMLElementPrototype, documentElement),\n  \n    safeProperty = IE8 ? function (o, k, d) {\n      o[k] = d.value;\n      return o;\n    } : defineProperty,\n  \n    isValidNode = IE8 ?\n      function (node) {\n        return node.nodeType === 1;\n      } :\n      function (node) {\n        return iPO.call(HTMLElementPrototype, node);\n      },\n  \n    targets = IE8 && [],\n  \n    attachShadow = HTMLElementPrototype.attachShadow,\n    cloneNode = HTMLElementPrototype.cloneNode,\n    dispatchEvent = HTMLElementPrototype.dispatchEvent,\n    getAttribute = HTMLElementPrototype.getAttribute,\n    hasAttribute = HTMLElementPrototype.hasAttribute,\n    removeAttribute = HTMLElementPrototype.removeAttribute,\n    setAttribute = HTMLElementPrototype.setAttribute,\n  \n    // replaced later on\n    createElement = document.createElement,\n    patchedCreateElement = createElement,\n  \n    // shared observer for all attributes\n    attributesObserver = MutationObserver && {\n      attributes: true,\n      characterData: true,\n      attributeOldValue: true\n    },\n  \n    // useful to detect only if there's no MutationObserver\n    DOMAttrModified = MutationObserver || function(e) {\n      doesNotSupportDOMAttrModified = false;\n      documentElement.removeEventListener(\n        DOM_ATTR_MODIFIED,\n        DOMAttrModified\n      );\n    },\n  \n    // will both be used to make DOMNodeInserted asynchronous\n    asapQueue,\n    asapTimer = 0,\n  \n    // internal flags\n    V0 = REGISTER_ELEMENT in document,\n    setListener = true,\n    justSetup = false,\n    doesNotSupportDOMAttrModified = true,\n    dropDomContentLoaded = true,\n  \n    // needed for the innerHTML helper\n    notFromInnerHTMLHelper = true,\n  \n    // optionally defined later on\n    onSubtreeModified,\n    callDOMAttrModified,\n    getAttributesMirror,\n    observer,\n    observe,\n  \n    // based on setting prototype capability\n    // will check proto or the expando attribute\n    // in order to setup the node once\n    patchIfNotAlready,\n    patch\n  ;\n  \n  // only if needed\n  if (!V0) {\n  \n    if (sPO || hasProto) {\n        patchIfNotAlready = function (node, proto) {\n          if (!iPO.call(proto, node)) {\n            setupNode(node, proto);\n          }\n        };\n        patch = setupNode;\n    } else {\n        patchIfNotAlready = function (node, proto) {\n          if (!node[EXPANDO_UID]) {\n            node[EXPANDO_UID] = Object(true);\n            setupNode(node, proto);\n          }\n        };\n        patch = patchIfNotAlready;\n    }\n  \n    if (IE8) {\n      doesNotSupportDOMAttrModified = false;\n      (function (){\n        var\n          descriptor = gOPD(HTMLElementPrototype, ADD_EVENT_LISTENER),\n          addEventListener = descriptor.value,\n          patchedRemoveAttribute = function (name) {\n            var e = new CustomEvent(DOM_ATTR_MODIFIED, {bubbles: true});\n            e.attrName = name;\n            e.prevValue = getAttribute.call(this, name);\n            e.newValue = null;\n            e[REMOVAL] = e.attrChange = 2;\n            removeAttribute.call(this, name);\n            dispatchEvent.call(this, e);\n          },\n          patchedSetAttribute = function (name, value) {\n            var\n              had = hasAttribute.call(this, name),\n              old = had && getAttribute.call(this, name),\n              e = new CustomEvent(DOM_ATTR_MODIFIED, {bubbles: true})\n            ;\n            setAttribute.call(this, name, value);\n            e.attrName = name;\n            e.prevValue = had ? old : null;\n            e.newValue = value;\n            if (had) {\n              e[MODIFICATION] = e.attrChange = 1;\n            } else {\n              e[ADDITION] = e.attrChange = 0;\n            }\n            dispatchEvent.call(this, e);\n          },\n          onPropertyChange = function (e) {\n            // jshint eqnull:true\n            var\n              node = e.currentTarget,\n              superSecret = node[EXPANDO_UID],\n              propertyName = e.propertyName,\n              event\n            ;\n            if (superSecret.hasOwnProperty(propertyName)) {\n              superSecret = superSecret[propertyName];\n              event = new CustomEvent(DOM_ATTR_MODIFIED, {bubbles: true});\n              event.attrName = superSecret.name;\n              event.prevValue = superSecret.value || null;\n              event.newValue = (superSecret.value = node[propertyName] || null);\n              if (event.prevValue == null) {\n                event[ADDITION] = event.attrChange = 0;\n              } else {\n                event[MODIFICATION] = event.attrChange = 1;\n              }\n              dispatchEvent.call(node, event);\n            }\n          }\n        ;\n        descriptor.value = function (type, handler, capture) {\n          if (\n            type === DOM_ATTR_MODIFIED &&\n            this[ATTRIBUTE_CHANGED_CALLBACK] &&\n            this.setAttribute !== patchedSetAttribute\n          ) {\n            this[EXPANDO_UID] = {\n              className: {\n                name: 'class',\n                value: this.className\n              }\n            };\n            this.setAttribute = patchedSetAttribute;\n            this.removeAttribute = patchedRemoveAttribute;\n            addEventListener.call(this, 'propertychange', onPropertyChange);\n          }\n          addEventListener.call(this, type, handler, capture);\n        };\n        defineProperty(HTMLElementPrototype, ADD_EVENT_LISTENER, descriptor);\n      }());\n    } else if (!MutationObserver) {\n      documentElement[ADD_EVENT_LISTENER](DOM_ATTR_MODIFIED, DOMAttrModified);\n      documentElement.setAttribute(EXPANDO_UID, 1);\n      documentElement.removeAttribute(EXPANDO_UID);\n      if (doesNotSupportDOMAttrModified) {\n        onSubtreeModified = function (e) {\n          var\n            node = this,\n            oldAttributes,\n            newAttributes,\n            key\n          ;\n          if (node === e.target) {\n            oldAttributes = node[EXPANDO_UID];\n            node[EXPANDO_UID] = (newAttributes = getAttributesMirror(node));\n            for (key in newAttributes) {\n              if (!(key in oldAttributes)) {\n                // attribute was added\n                return callDOMAttrModified(\n                  0,\n                  node,\n                  key,\n                  oldAttributes[key],\n                  newAttributes[key],\n                  ADDITION\n                );\n              } else if (newAttributes[key] !== oldAttributes[key]) {\n                // attribute was changed\n                return callDOMAttrModified(\n                  1,\n                  node,\n                  key,\n                  oldAttributes[key],\n                  newAttributes[key],\n                  MODIFICATION\n                );\n              }\n            }\n            // checking if it has been removed\n            for (key in oldAttributes) {\n              if (!(key in newAttributes)) {\n                // attribute removed\n                return callDOMAttrModified(\n                  2,\n                  node,\n                  key,\n                  oldAttributes[key],\n                  newAttributes[key],\n                  REMOVAL\n                );\n              }\n            }\n          }\n        };\n        callDOMAttrModified = function (\n          attrChange,\n          currentTarget,\n          attrName,\n          prevValue,\n          newValue,\n          action\n        ) {\n          var e = {\n            attrChange: attrChange,\n            currentTarget: currentTarget,\n            attrName: attrName,\n            prevValue: prevValue,\n            newValue: newValue\n          };\n          e[action] = attrChange;\n          onDOMAttrModified(e);\n        };\n        getAttributesMirror = function (node) {\n          for (var\n            attr, name,\n            result = {},\n            attributes = node.attributes,\n            i = 0, length = attributes.length;\n            i < length; i++\n          ) {\n            attr = attributes[i];\n            name = attr.name;\n            if (name !== 'setAttribute') {\n              result[name] = attr.value;\n            }\n          }\n          return result;\n        };\n      }\n    }\n  \n    // set as enumerable, writable and configurable\n    document[REGISTER_ELEMENT] = function registerElement(type, options) {\n      upperType = type.toUpperCase();\n      if (setListener) {\n        // only first time document.registerElement is used\n        // we need to set this listener\n        // setting it by default might slow down for no reason\n        setListener = false;\n        if (MutationObserver) {\n          observer = (function(attached, detached){\n            function checkEmAll(list, callback) {\n              for (var i = 0, length = list.length; i < length; callback(list[i++])){}\n            }\n            return new MutationObserver(function (records) {\n              for (var\n                current, node, newValue,\n                i = 0, length = records.length; i < length; i++\n              ) {\n                current = records[i];\n                if (current.type === 'childList') {\n                  checkEmAll(current.addedNodes, attached);\n                  checkEmAll(current.removedNodes, detached);\n                } else {\n                  node = current.target;\n                  if (notFromInnerHTMLHelper &&\n                      node[ATTRIBUTE_CHANGED_CALLBACK] &&\n                      current.attributeName !== 'style') {\n                    newValue = getAttribute.call(node, current.attributeName);\n                    if (newValue !== current.oldValue) {\n                      node[ATTRIBUTE_CHANGED_CALLBACK](\n                        current.attributeName,\n                        current.oldValue,\n                        newValue\n                      );\n                    }\n                  }\n                }\n              }\n            });\n          }(executeAction(ATTACHED), executeAction(DETACHED)));\n          observe = function (node) {\n            observer.observe(\n              node,\n              {\n                childList: true,\n                subtree: true\n              }\n            );\n            return node;\n          };\n          observe(document);\n          if (attachShadow) {\n            HTMLElementPrototype.attachShadow = function () {\n              return observe(attachShadow.apply(this, arguments));\n            };\n          }\n        } else {\n          asapQueue = [];\n          document[ADD_EVENT_LISTENER]('DOMNodeInserted', onDOMNode(ATTACHED));\n          document[ADD_EVENT_LISTENER]('DOMNodeRemoved', onDOMNode(DETACHED));\n        }\n  \n        document[ADD_EVENT_LISTENER](DOM_CONTENT_LOADED, onReadyStateChange);\n        document[ADD_EVENT_LISTENER]('readystatechange', onReadyStateChange);\n  \n        HTMLElementPrototype.cloneNode = function (deep) {\n          var\n            node = cloneNode.call(this, !!deep),\n            i = getTypeIndex(node)\n          ;\n          if (-1 < i) patch(node, protos[i]);\n          if (deep && query.length) loopAndSetup(node.querySelectorAll(query));\n          return node;\n        };\n      }\n  \n      if (justSetup) return (justSetup = false);\n  \n      if (-2 < (\n        indexOf.call(types, PREFIX_IS + upperType) +\n        indexOf.call(types, PREFIX_TAG + upperType)\n      )) {\n        throwTypeError(type);\n      }\n  \n      if (!validName.test(upperType) || -1 < indexOf.call(invalidNames, upperType)) {\n        throw new Error('The type ' + type + ' is invalid');\n      }\n  \n      var\n        constructor = function () {\n          return extending ?\n            document.createElement(nodeName, upperType) :\n            document.createElement(nodeName);\n        },\n        opt = options || OP,\n        extending = hOP.call(opt, EXTENDS),\n        nodeName = extending ? options[EXTENDS].toUpperCase() : upperType,\n        upperType,\n        i\n      ;\n  \n      if (extending && -1 < (\n        indexOf.call(types, PREFIX_TAG + nodeName)\n      )) {\n        throwTypeError(nodeName);\n      }\n  \n      i = types.push((extending ? PREFIX_IS : PREFIX_TAG) + upperType) - 1;\n  \n      query = query.concat(\n        query.length ? ',' : '',\n        extending ? nodeName + '[is=\"' + type.toLowerCase() + '\"]' : nodeName\n      );\n  \n      constructor.prototype = (\n        protos[i] = hOP.call(opt, 'prototype') ?\n          opt.prototype :\n          create(HTMLElementPrototype)\n      );\n  \n      if (query.length) loopAndVerify(\n        document.querySelectorAll(query),\n        ATTACHED\n      );\n  \n      return constructor;\n    };\n  \n    document.createElement = (patchedCreateElement = function (localName, typeExtension) {\n      var\n        is = getIs(typeExtension),\n        node = is ?\n          createElement.call(document, localName, secondArgument(is)) :\n          createElement.call(document, localName),\n        name = '' + localName,\n        i = indexOf.call(\n          types,\n          (is ? PREFIX_IS : PREFIX_TAG) +\n          (is || name).toUpperCase()\n        ),\n        setup = -1 < i\n      ;\n      if (is) {\n        node.setAttribute('is', is = is.toLowerCase());\n        if (setup) {\n          setup = isInQSA(name.toUpperCase(), is);\n        }\n      }\n      notFromInnerHTMLHelper = !document.createElement.innerHTMLHelper;\n      if (setup) patch(node, protos[i]);\n      return node;\n    });\n  \n  }\n  \n  function ASAP() {\n    var queue = asapQueue.splice(0, asapQueue.length);\n    asapTimer = 0;\n    while (queue.length) {\n      queue.shift().call(\n        null, queue.shift()\n      );\n    }\n  }\n  \n  function loopAndVerify(list, action) {\n    for (var i = 0, length = list.length; i < length; i++) {\n      verifyAndSetupAndAction(list[i], action);\n    }\n  }\n  \n  function loopAndSetup(list) {\n    for (var i = 0, length = list.length, node; i < length; i++) {\n      node = list[i];\n      patch(node, protos[getTypeIndex(node)]);\n    }\n  }\n  \n  function executeAction(action) {\n    return function (node) {\n      if (isValidNode(node)) {\n        verifyAndSetupAndAction(node, action);\n        if (query.length) loopAndVerify(\n          node.querySelectorAll(query),\n          action\n        );\n      }\n    };\n  }\n  \n  function getTypeIndex(target) {\n    var\n      is = getAttribute.call(target, 'is'),\n      nodeName = target.nodeName.toUpperCase(),\n      i = indexOf.call(\n        types,\n        is ?\n            PREFIX_IS + is.toUpperCase() :\n            PREFIX_TAG + nodeName\n      )\n    ;\n    return is && -1 < i && !isInQSA(nodeName, is) ? -1 : i;\n  }\n  \n  function isInQSA(name, type) {\n    return -1 < query.indexOf(name + '[is=\"' + type + '\"]');\n  }\n  \n  function onDOMAttrModified(e) {\n    var\n      node = e.currentTarget,\n      attrChange = e.attrChange,\n      attrName = e.attrName,\n      target = e.target,\n      addition = e[ADDITION] || 2,\n      removal = e[REMOVAL] || 3\n    ;\n    if (notFromInnerHTMLHelper &&\n        (!target || target === node) &&\n        node[ATTRIBUTE_CHANGED_CALLBACK] &&\n        attrName !== 'style' && (\n          e.prevValue !== e.newValue ||\n          // IE9, IE10, and Opera 12 gotcha\n          e.newValue === '' && (\n            attrChange === addition ||\n            attrChange === removal\n          )\n    )) {\n      node[ATTRIBUTE_CHANGED_CALLBACK](\n        attrName,\n        attrChange === addition ? null : e.prevValue,\n        attrChange === removal ? null : e.newValue\n      );\n    }\n  }\n  \n  function onDOMNode(action) {\n    var executor = executeAction(action);\n    return function (e) {\n      asapQueue.push(executor, e.target);\n      if (asapTimer) clearTimeout(asapTimer);\n      asapTimer = setTimeout(ASAP, 1);\n    };\n  }\n  \n  function onReadyStateChange(e) {\n    if (dropDomContentLoaded) {\n      dropDomContentLoaded = false;\n      e.currentTarget.removeEventListener(DOM_CONTENT_LOADED, onReadyStateChange);\n    }\n    if (query.length) loopAndVerify(\n      (e.target || document).querySelectorAll(query),\n      e.detail === DETACHED ? DETACHED : ATTACHED\n    );\n    if (IE8) purge();\n  }\n  \n  function patchedSetAttribute(name, value) {\n    // jshint validthis:true\n    var self = this;\n    setAttribute.call(self, name, value);\n    onSubtreeModified.call(self, {target: self});\n  }\n  \n  function setupNode(node, proto) {\n    setPrototype(node, proto);\n    if (observer) {\n      observer.observe(node, attributesObserver);\n    } else {\n      if (doesNotSupportDOMAttrModified) {\n        node.setAttribute = patchedSetAttribute;\n        node[EXPANDO_UID] = getAttributesMirror(node);\n        node[ADD_EVENT_LISTENER](DOM_SUBTREE_MODIFIED, onSubtreeModified);\n      }\n      node[ADD_EVENT_LISTENER](DOM_ATTR_MODIFIED, onDOMAttrModified);\n    }\n    if (node[CREATED_CALLBACK] && notFromInnerHTMLHelper) {\n      node.created = true;\n      node[CREATED_CALLBACK]();\n      node.created = false;\n    }\n  }\n  \n  function purge() {\n    for (var\n      node,\n      i = 0,\n      length = targets.length;\n      i < length; i++\n    ) {\n      node = targets[i];\n      if (!documentElement.contains(node)) {\n        length--;\n        targets.splice(i--, 1);\n        verifyAndSetupAndAction(node, DETACHED);\n      }\n    }\n  }\n  \n  function throwTypeError(type) {\n    throw new Error('A ' + type + ' type is already registered');\n  }\n  \n  function verifyAndSetupAndAction(node, action) {\n    var\n      fn,\n      i = getTypeIndex(node)\n    ;\n    if (-1 < i) {\n      patchIfNotAlready(node, protos[i]);\n      i = 0;\n      if (action === ATTACHED && !node[ATTACHED]) {\n        node[DETACHED] = false;\n        node[ATTACHED] = true;\n        i = 1;\n        if (IE8 && indexOf.call(targets, node) < 0) {\n          targets.push(node);\n        }\n      } else if (action === DETACHED && !node[DETACHED]) {\n        node[ATTACHED] = false;\n        node[DETACHED] = true;\n        i = 1;\n      }\n      if (i && (fn = node[action + CALLBACK])) fn.call(node);\n    }\n  }\n  \n  \n  \n  // V1 in da House!\n  function CustomElementRegistry() {}\n  \n  CustomElementRegistry.prototype = {\n    constructor: CustomElementRegistry,\n    // a workaround for the stubborn WebKit\n    define: usableCustomElements ?\n      function (name, Class, options) {\n        if (options) {\n          CERDefine(name, Class, options);\n        } else {\n          var NAME = name.toUpperCase();\n          constructors[NAME] = {\n            constructor: Class,\n            create: [NAME]\n          };\n          nodeNames.set(Class, NAME);\n          customElements.define(name, Class);\n        }\n      } :\n      CERDefine,\n    get: usableCustomElements ?\n      function (name) {\n        return customElements.get(name) || get(name);\n      } :\n      get,\n    whenDefined: usableCustomElements ?\n      function (name) {\n        return Promise.race([\n          customElements.whenDefined(name),\n          whenDefined(name)\n        ]);\n      } :\n      whenDefined\n  };\n  \n  function CERDefine(name, Class, options) {\n    var\n      is = options && options[EXTENDS] || '',\n      CProto = Class.prototype,\n      proto = create(CProto),\n      attributes = Class.observedAttributes || empty,\n      definition = {prototype: proto}\n    ;\n    // TODO: is this needed at all since it's inherited?\n    // defineProperty(proto, 'constructor', {value: Class});\n    safeProperty(proto, CREATED_CALLBACK, {\n        value: function () {\n          if (justCreated) justCreated = false;\n          else if (!this[DRECEV1]) {\n            this[DRECEV1] = true;\n            new Class(this);\n            if (CProto[CREATED_CALLBACK])\n              CProto[CREATED_CALLBACK].call(this);\n            var info = constructors[nodeNames.get(Class)];\n            if (!usableCustomElements || info.create.length > 1) {\n              notifyAttributes(this);\n            }\n          }\n      }\n    });\n    safeProperty(proto, ATTRIBUTE_CHANGED_CALLBACK, {\n      value: function (name) {\n        if (-1 < indexOf.call(attributes, name))\n          CProto[ATTRIBUTE_CHANGED_CALLBACK].apply(this, arguments);\n      }\n    });\n    if (CProto[CONNECTED_CALLBACK]) {\n      safeProperty(proto, ATTACHED_CALLBACK, {\n        value: CProto[CONNECTED_CALLBACK]\n      });\n    }\n    if (CProto[DISCONNECTED_CALLBACK]) {\n      safeProperty(proto, DETACHED_CALLBACK, {\n        value: CProto[DISCONNECTED_CALLBACK]\n      });\n    }\n    if (is) definition[EXTENDS] = is;\n    name = name.toUpperCase();\n    constructors[name] = {\n      constructor: Class,\n      create: is ? [is, secondArgument(name)] : [name]\n    };\n    nodeNames.set(Class, name);\n    document[REGISTER_ELEMENT](name.toLowerCase(), definition);\n    whenDefined(name);\n    waitingList[name].r();\n  }\n  \n  function get(name) {\n    var info = constructors[name.toUpperCase()];\n    return info && info.constructor;\n  }\n  \n  function getIs(options) {\n    return typeof options === 'string' ?\n        options : (options && options.is || '');\n  }\n  \n  function notifyAttributes(self) {\n    var\n      callback = self[ATTRIBUTE_CHANGED_CALLBACK],\n      attributes = callback ? self.attributes : empty,\n      i = attributes.length,\n      attribute\n    ;\n    while (i--) {\n      attribute =  attributes[i]; // || attributes.item(i);\n      callback.call(\n        self,\n        attribute.name || attribute.nodeName,\n        null,\n        attribute.value || attribute.nodeValue\n      );\n    }\n  }\n  \n  function whenDefined(name) {\n    name = name.toUpperCase();\n    if (!(name in waitingList)) {\n      waitingList[name] = {};\n      waitingList[name].p = new Promise(function (resolve) {\n        waitingList[name].r = resolve;\n      });\n    }\n    return waitingList[name].p;\n  }\n  \n  function polyfillV1() {\n    if (customElements) delete window.customElements;\n    defineProperty(window, 'customElements', {\n      configurable: true,\n      value: new CustomElementRegistry()\n    });\n    defineProperty(window, 'CustomElementRegistry', {\n      configurable: true,\n      value: CustomElementRegistry\n    });\n    for (var\n      patchClass = function (name) {\n        var Class = window[name];\n        if (Class) {\n          window[name] = function CustomElementsV1(self) {\n            var info, isNative;\n            if (!self) self = this;\n            if (!self[DRECEV1]) {\n              justCreated = true;\n              info = constructors[nodeNames.get(self.constructor)];\n              isNative = usableCustomElements && info.create.length === 1;\n              self = isNative ?\n                Reflect.construct(Class, empty, info.constructor) :\n                document.createElement.apply(document, info.create);\n              self[DRECEV1] = true;\n              justCreated = false;\n              if (!isNative) notifyAttributes(self);\n            }\n            return self;\n          };\n          window[name].prototype = Class.prototype;\n          try {\n            Class.prototype.constructor = window[name];\n          } catch(WebKit) {\n            fixGetClass = true;\n            defineProperty(Class, DRECEV1, {value: window[name]});\n          }\n        }\n      },\n      Classes = htmlClass.get(/^HTML[A-Z]*[a-z]/),\n      i = Classes.length;\n      i--;\n      patchClass(Classes[i])\n    ) {}\n    (document.createElement = function (name, options) {\n      var is = getIs(options);\n      return is ?\n        patchedCreateElement.call(this, name, secondArgument(is)) :\n        patchedCreateElement.call(this, name);\n    });\n    if (!V0) {\n      justSetup = true;\n      document[REGISTER_ELEMENT]('');\n    }\n  }\n  \n  // if customElements is not there at all\n  if (!customElements || polyfill === 'force') polyfillV1();\n  else {\n    // if available test extends work as expected\n    try {\n      (function (DRE, options, name) {\n        options[EXTENDS] = 'a';\n        DRE.prototype = create(HTMLAnchorElement.prototype);\n        DRE.prototype.constructor = DRE;\n        window.customElements.define(name, DRE, options);\n        if (\n          getAttribute.call(document.createElement('a', {is: name}), 'is') !== name ||\n          (usableCustomElements && getAttribute.call(new DRE(), 'is') !== name)\n        ) {\n          throw options;\n        }\n      }(\n        function DRE() {\n          return Reflect.construct(HTMLAnchorElement, [], DRE);\n        },\n        {},\n        'document-register-element-a'\n      ));\n    } catch(o_O) {\n      // or force the polyfill if not\n      // and keep internal original reference\n      polyfillV1();\n    }\n  }\n  \n  try {\n    createElement.call(document, 'a', 'a');\n  } catch(FireFox) {\n    secondArgument = function (is) {\n      return {is: is.toLowerCase()};\n    };\n  }\n  \n}\n\nexports.installCustomElements = installCustomElements;\n\n","'use strict';\n\n/**\n * Constructs a ES6/Promises A+ Promise instance.\n *\n * @constructor\n * @param {function(function(*=), function (*=))} resolver\n */\nfunction Promise(resolver) {\n  if (!(this instanceof Promise)) {\n    throw new TypeError('Constructor Promise requires `new`');\n  }\n  if (!isFunction(resolver)) {\n    throw new TypeError('Must pass resolver function');\n  }\n\n  /**\n   * @type {function(this:Promise,*=,function(*=),function(*=),Deferred):!Promise}\n   * @private\n   */\n  this._state = PendingPromise;\n\n  /**\n   * @type {*}\n   * @private\n   */\n  this._value = [];\n\n  /**\n   * @type {boolean}\n   * @private\n   */\n  this._isChainEnd = true;\n\n  doResolve(\n    this,\n    adopter(this, FulfilledPromise),\n    adopter(this, RejectedPromise),\n    { then: resolver }\n  );\n}\n\n/****************************\n  Public Instance Methods\n ****************************/\n\n/**\n * Creates a new promise instance that will receive the result of this promise\n * as inputs to the onFulfilled or onRejected callbacks.\n *\n * @param {function(*)} onFulfilled\n * @param {function(*)} onRejected\n */\nPromise.prototype.then = function(onFulfilled, onRejected) {\n  onFulfilled = isFunction(onFulfilled) ? onFulfilled : void 0;\n  onRejected = isFunction(onRejected) ? onRejected : void 0;\n\n  if (onFulfilled || onRejected) {\n    this._isChainEnd = false;\n  }\n\n  return this._state(\n    this._value,\n    onFulfilled,\n    onRejected\n  );\n};\n\n/**\n * Creates a new promise that will handle the rejected state of this promise.\n *\n * @param {function(*)} onRejected\n * @returns {!Promise}\n */\nPromise.prototype.catch = function(onRejected) {\n  return this.then(void 0, onRejected);\n};\n\n/****************************\n  Public Static Methods\n ****************************/\n\n/**\n * Creates a fulfilled Promise of value. If value is itself a then-able,\n * resolves with the then-able's value.\n *\n * @this {!Promise}\n * @param {*=} value\n * @returns {!Promise}\n */\nPromise.resolve = function(value) {\n  var Constructor = this;\n  var promise;\n\n  if (isObject(value) && value instanceof this) {\n    promise = value;\n  } else {\n    promise = new Constructor(function(resolve) {\n      resolve(value);\n    });\n  }\n\n  return /** @type {!Promise} */(promise);\n};\n\n/**\n * Creates a rejected Promise of reason.\n *\n * @this {!Promise}\n * @param {*=} reason\n * @returns {!Promise}\n */\nPromise.reject = function(reason) {\n  var Constructor = this;\n  var promise = new Constructor(function(_, reject) {\n    reject(reason);\n  });\n\n  return /** @type {!Promise} */(promise);\n};\n\n/**\n * Creates a Promise that will resolve with an array of the values of the\n * passed in promises. If any promise rejects, the returned promise will\n * reject.\n *\n * @this {!Promise}\n * @param {!Array<Promise|*>} promises\n * @returns {!Promise}\n */\nPromise.all = function(promises) {\n  var Constructor = this;\n  var promise = new Constructor(function(resolve, reject) {\n    var length = promises.length;\n    var values = new Array(length);\n\n    if (length === 0) {\n      return resolve(values);\n    }\n\n    each(promises, function(promise, index) {\n      Constructor.resolve(promise).then(function(value) {\n        values[index] = value;\n        if (--length === 0) {\n          resolve(values);\n        }\n      }, reject);\n    });\n  });\n\n  return /** @type {!Promise} */(promise);\n};\n\n/**\n * Creates a Promise that will resolve or reject based on the first\n * resolved or rejected promise.\n *\n * @this {!Promise}\n * @param {!Array<Promise|*>} promises\n * @returns {!Promise}\n */\nPromise.race = function(promises) {\n  var Constructor = this;\n  var promise = new Constructor(function(resolve, reject) {\n    for (var i = 0; i < promises.length; i++) {\n      Constructor.resolve(promises[i]).then(resolve, reject);\n    }\n  });\n\n  return /** @type {!Promise} */(promise);\n};\n\nvar onPossiblyUnhandledRejection = function(reason, promise) {\n  throw reason;\n};\n\n/**\n * An internal use static function.\n */\nPromise._overrideUnhandledExceptionHandler = function(handler) {\n  onPossiblyUnhandledRejection = handler;\n};\n\n/****************************\n  Private functions\n ****************************/\n\n/**\n * The Fulfilled Promise state. Calls onFulfilled with the resolved value of\n * this promise, creating a new promise.\n *\n * If there is no onFulfilled, returns the current promise to avoid an promise\n * instance.\n *\n * @this {!Promise} The current promise\n * @param {*=} value The current promise's resolved value.\n * @param {function(*=)=} onFulfilled\n * @param {function(*=)=} unused\n * @param {Deferred} deferred A deferred object that holds a promise and its\n *     resolve and reject functions. It IS NOT passed when called from\n *     Promise#then to save an object instance (since we may return the current\n *     promise). It IS passed in when adopting the Fulfilled state from the\n *     Pending state.\n * @returns {!Promise}\n */\nfunction FulfilledPromise(value, onFulfilled, unused, deferred) {\n  if (!onFulfilled) {\n    deferredAdopt(deferred, FulfilledPromise, value);\n    return this;\n  }\n  if (!deferred) {\n    deferred = new Deferred(this.constructor);\n  }\n  defer(tryCatchDeferred(deferred, onFulfilled, value));\n  return deferred.promise;\n}\n\n/**\n * The Rejected Promise state. Calls onRejected with the resolved value of\n * this promise, creating a new promise.\n *\n * If there is no onRejected, returns the current promise to avoid an promise\n * instance.\n *\n * @this {!Promise} The current promise\n * @param {*=} reason The current promise's rejection reason.\n * @param {function(*=)=} unused\n * @param {function(*=)=} onRejected\n * @param {Deferred} deferred A deferred object that holds a promise and its\n *     resolve and reject functions. It IS NOT passed when called from\n *     Promise#then to save an object instance (since we may return the current\n *     promise). It IS passed in when adopting the Rejected state from the\n *     Pending state.\n * @returns {!Promise}\n */\nfunction RejectedPromise(reason, unused, onRejected, deferred) {\n  if (!onRejected) {\n    deferredAdopt(deferred, RejectedPromise, reason);\n    return this;\n  }\n  if (!deferred) {\n    deferred = new Deferred(this.constructor);\n  }\n  defer(tryCatchDeferred(deferred, onRejected, reason));\n  return deferred.promise;\n}\n\n/**\n * The Pending Promise state. Eventually calls onFulfilled once the promise has\n * resolved, or onRejected once the promise rejects.\n *\n * If there is no onFulfilled and no onRejected, returns the current promise to\n * avoid an promise instance.\n *\n * @this {!Promise} The current promise\n * @param {*=} queue The current promise's pending promises queue.\n * @param {function(*=)=} onFulfilled\n * @param {function(*=)=} onRejected\n * @param {Deferred} deferred A deferred object that holds a promise and its\n *     resolve and reject functions. It IS NOT passed when called from\n *     Promise#then to save an object instance (since we may return the current\n *     promise). It IS passed in when adopting the Pending state from the\n *     Pending state of another promise.\n * @returns {!Promise}\n */\nfunction PendingPromise(queue, onFulfilled, onRejected, deferred) {\n  if (!deferred) {\n    if (!onFulfilled && !onRejected) { return this; }\n    deferred = new Deferred(this.constructor);\n  }\n  queue.push({\n    deferred: deferred,\n    onFulfilled: onFulfilled || deferred.resolve,\n    onRejected: onRejected || deferred.reject\n  });\n  return deferred.promise;\n}\n\n/**\n * Constructs a deferred instance that holds a promise and its resolve and\n * reject functions.\n *\n * @constructor\n */\nfunction Deferred(Promise) {\n  var deferred = this;\n  /** @type {!Promise} */\n  this.promise = new Promise(function(resolve, reject) {\n    /** @type {function(*=)} */\n    deferred.resolve = resolve;\n\n    /** @type {function(*=)} */\n    deferred.reject = reject;\n  });\n  return deferred;\n}\n\n/**\n * Transitions the state of promise to another state. This is only ever called\n * on with a promise that is currently in the Pending state.\n *\n * @param {!Promise} promise\n * @param {function(this:Promise,*=,function(*=),function(*=),Deferred):!Promise} state\n * @param {*=} value\n */\nfunction adopt(promise, state, value, adoptee) {\n  var queue = promise._value;\n  promise._state = state;\n  promise._value = value;\n\n  if (adoptee && state === PendingPromise) {\n    adoptee._state(value, void 0, void 0, {\n      promise: promise,\n      resolve: void 0,\n      reject: void 0\n    });\n  }\n\n  for (var i = 0; i < queue.length; i++) {\n    var next = queue[i];\n    promise._state(\n      value,\n      next.onFulfilled,\n      next.onRejected,\n      next.deferred\n    );\n  }\n  queue.length = 0;\n\n  // Determine if this rejected promise will be \"handled\".\n  if (state === RejectedPromise && promise._isChainEnd) {\n    setTimeout(function() {\n      if (promise._isChainEnd) {\n        onPossiblyUnhandledRejection(value, promise);\n      }\n    }, 0);\n  }\n}\n\n/**\n * A partial application of adopt.\n *\n * @param {!Promise} promise\n * @param {function(this:Promise,*=,function(*=),function(*=),Deferred):!Promise} state\n * @returns {function(*=)}\n */\nfunction adopter(promise, state) {\n  return function(value) {\n    adopt(promise, state, value);\n  };\n}\n\n/**\n * Updates a deferred promises state. Necessary for updating an adopting\n * promise's state when the adoptee resolves.\n *\n * @param {?Deferred} deferred\n * @param {function(this:Promise,*=,function(*=),function(*=),Deferred):!Promise} state\n * @param {*=} value\n */\nfunction deferredAdopt(deferred, state, value) {\n  if (deferred) {\n    var promise = deferred.promise;\n    promise._state = state;\n    promise._value = value;\n  }\n}\n\n/**\n * A no-op function to prevent double resolving.\n */\nfunction noop() {}\n\n/**\n * Tests if fn is a Function\n *\n * @param {*} fn\n * @returns {boolean}\n */\nfunction isFunction(fn) {\n  return typeof fn === 'function';\n}\n\n/**\n * Tests if fn is an Object\n *\n * @param {*} obj\n * @returns {boolean}\n */\nfunction isObject(obj) {\n  return obj === Object(obj);\n}\n\n/**\n * Iterates over each element of an array, calling the iterator with the\n * element and its index.\n *\n * @param {!Array} collection\n * @param {function(*=,number)} iterator\n */\nfunction each(collection, iterator) {\n  for (var i = 0; i < collection.length; i++) {\n    iterator(collection[i], i);\n  }\n}\n\n/**\n * Creates a function that will attempt to resolve the deferred with the return\n * of fn. If any error is raised, rejects instead.\n *\n * @param {!Deferred} deferred\n * @param {function(*=)} fn\n * @param {*} arg\n * @returns {function()}\n */\nfunction tryCatchDeferred(deferred, fn, arg) {\n  var promise = deferred.promise;\n  var resolve = deferred.resolve;\n  var reject = deferred.reject;\n  return function() {\n    try {\n      var result = fn(arg);\n      doResolve(promise, resolve, reject, result, result);\n    } catch (e) {\n      reject(e);\n    }\n  };\n}\n\n/**\n * Queues and executes multiple deferred functions on another run loop.\n */\nvar defer = (function() {\n  /**\n   * Defers fn to another run loop.\n   */\n  var scheduleFlush;\n  if (typeof window !== 'undefined' && window.postMessage) {\n    window.addEventListener('message', flush);\n    scheduleFlush = function() {\n      window.postMessage('macro-task', '*');\n    };\n  } else {\n    scheduleFlush = function() {\n      setTimeout(flush, 0);\n    };\n  }\n\n  var queue = new Array(16);\n  var length = 0;\n\n  function flush() {\n    for (var i = 0; i < length; i++) {\n      var fn = queue[i];\n      queue[i] = null;\n      fn();\n    }\n    length = 0;\n  }\n\n  /**\n   * @param {function()} fn\n   */\n  function defer(fn) {\n    if (length === 0) { scheduleFlush(); }\n    queue[length++] = fn;\n  }\n\n  return defer;\n})();\n\n/**\n * The Promise resolution procedure.\n * https://github.com/promises-aplus/promises-spec#the-promise-resolution-procedure\n *\n * @param {!Promise} promise\n * @param {function(*=)} resolve\n * @param {function(*=)} reject\n * @param {*} value\n * @param {*=} context\n */\nfunction doResolve(promise, resolve, reject, value, context) {\n  var _reject = reject;\n  var then;\n  var _resolve;\n  try {\n    if (value === promise) {\n      throw new TypeError('Cannot fulfill promise with itself');\n    }\n    var isObj = isObject(value);\n    if (isObj && value instanceof promise.constructor) {\n      adopt(promise, value._state, value._value, value);\n    } else if (isObj && (then = value.then) && isFunction(then)) {\n      _resolve = function(value) {\n        _resolve = _reject = noop;\n        doResolve(promise, resolve, reject, value, value);\n      };\n      _reject = function(reason) {\n        _resolve = _reject = noop;\n        reject(reason);\n      };\n      then.call(\n        context,\n        function(value) { _resolve(value); },\n        function(reason) { _reject(reason); }\n      );\n    } else {\n      resolve(value);\n    }\n  } catch (e) {\n    _reject(e);\n  }\n}\n\nmodule.exports = Promise;\n","/**\n * Copyright 2017 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {dev} from './log';\nimport {dict} from './utils/object';\nimport {internalListenImplementation} from './event-helper-listen';\nimport {parseJson} from './json';\n\n\n/** @const */\nconst AMP_MESSAGE_PREFIX = 'amp-';\nexport const CONSTANTS = {\n  responseTypeSuffix: '-result',\n  messageIdFieldName: 'messageId',\n  payloadFieldName: 'payload',\n  contentFieldName: 'content',\n};\n\n/** @enum {string} */\nexport const MessageType = {\n  // For amp-ad\n  SEND_EMBED_STATE: 'send-embed-state',\n  EMBED_STATE: 'embed-state',\n  SEND_EMBED_CONTEXT: 'send-embed-context',\n  EMBED_CONTEXT: 'embed-context',\n  SEND_INTERSECTIONS: 'send-intersections',\n  INTERSECTION: 'intersection',\n  EMBED_SIZE: 'embed-size',\n  EMBED_SIZE_CHANGED: 'embed-size-changed',\n  EMBED_SIZE_DENIED: 'embed-size-denied',\n  NO_CONTENT: 'no-content',\n  GET_HTML: 'get-html',\n  GET_CONSENT_STATE: 'get-consent-state',\n\n  // For the frame to be placed in full overlay mode for lightboxes\n  FULL_OVERLAY_FRAME: 'full-overlay-frame',\n  FULL_OVERLAY_FRAME_RESPONSE: 'full-overlay-frame-response',\n  CANCEL_FULL_OVERLAY_FRAME: 'cancel-full-overlay-frame',\n  CANCEL_FULL_OVERLAY_FRAME_RESPONSE: 'cancel-full-overlay-frame-response',\n\n  // For amp-inabox\n  SEND_POSITIONS: 'send-positions',\n  POSITION: 'position',\n\n  // For amp-analytics' iframe-transport\n  SEND_IFRAME_TRANSPORT_EVENTS: 'send-iframe-transport-events',\n  IFRAME_TRANSPORT_EVENTS: 'iframe-transport-events',\n  IFRAME_TRANSPORT_RESPONSE: 'iframe-transport-response',\n\n  // For user-error-in-iframe\n  USER_ERROR_IN_IFRAME: 'user-error-in-iframe',\n};\n\n/**\n * Listens for the specified event on the element.\n * @param {!EventTarget} element\n * @param {string} eventType\n * @param {function(!Event)} listener\n * @param {Object=} opt_evtListenerOpts\n * @return {!UnlistenDef}\n */\nexport function listen(element, eventType, listener, opt_evtListenerOpts) {\n  return internalListenImplementation(\n      element, eventType, listener, opt_evtListenerOpts);\n}\n\n\n/**\n * Serialize an AMP post message. Output looks like:\n * 'amp-011481323099490{\"type\":\"position\",\"sentinel\":\"12345\",\"foo\":\"bar\"}'\n * @param {string} type\n * @param {string} sentinel\n * @param {JsonObject=} data\n * @param {?string=} rtvVersion\n * @return {string}\n */\nexport function serializeMessage(type, sentinel, data = dict(),\n  rtvVersion = null) {\n  // TODO: consider wrap the data in a \"data\" field. { type, sentinal, data }\n  const message = data;\n  message['type'] = type;\n  message['sentinel'] = sentinel;\n  return AMP_MESSAGE_PREFIX + (rtvVersion || '') + JSON.stringify(message);\n}\n\n\n/**\n * Deserialize an AMP post message.\n * Returns null if it's not valid AMP message format.\n *\n * @param {*} message\n * @return {?JsonObject|undefined}\n */\nexport function deserializeMessage(message) {\n  if (!isAmpMessage(message)) {\n    return null;\n  }\n  const startPos = message.indexOf('{');\n  dev().assert(startPos != -1, 'JSON missing in %s', message);\n  try {\n    return parseJson(message.substr(startPos));\n  } catch (e) {\n    dev().error('MESSAGING', 'Failed to parse message: ' + message, e);\n    return null;\n  }\n}\n\n\n/**\n *  Returns true if message looks like it is an AMP postMessage\n *  @param {*} message\n *  @return {boolean}\n */\nexport function isAmpMessage(message) {\n  return (typeof message == 'string' &&\n      message.indexOf(AMP_MESSAGE_PREFIX) == 0 &&\n      message.indexOf('{') != -1);\n}\n\n/** @typedef {{creativeId: string, message: string}} */\nexport let IframeTransportEvent;\n// An event, and the transport ID of the amp-analytics tags that\n// generated it. For instance if the creative with transport\n// ID 2 sends \"hi\", then an IframeTransportEvent would look like:\n// { creativeId: \"2\", message: \"hi\" }\n// If the creative with transport ID 2 sent that, and also sent \"hello\",\n// and the creative with transport ID 3 sends \"goodbye\" then an *array* of 3\n// AmpAnalyticsIframeTransportEvent would be sent to the 3p frame like so:\n// [\n//   { creativeId: \"2\", message: \"hi\" }, // An AmpAnalyticsIframeTransportEvent\n//   { creativeId: \"2\", message: \"hello\" }, // Another\n//   { creativeId: \"3\", message: \"goodbye\" } // And another\n// ]\n","/**\n * Copyright 2016 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {computedStyle} from './style';\nimport {dev} from './log';\nimport {getParentWindowFrameElement} from './service';\n\nconst AD_CONTAINER_PROP = '__AMP__AD_CONTAINER';\n\n/**\n * Tags that are allowed to have fixed positioning\n * @const {!Object<string, boolean>}\n */\nconst CONTAINERS = {\n  'AMP-FX-FLYING-CARPET': true,\n  'AMP-LIGHTBOX': true,\n  'AMP-STICKY-AD': true,\n  'AMP-LIGHTBOX-GALLERY': true,\n};\n\n/**\n * Determines if an element is fixed-positioned.\n * OK to use, because it's only called from onLayoutMeasure\n * @param {!Element} el\n * @param {!Window} win\n * @return {boolean}\n */\nfunction isPositionFixed(el, win) {\n  const {position} = computedStyle(win, el);\n  // We consider sticky positions as fixed, since they can be fixed.\n  return position == 'fixed' || position == 'sticky';\n}\n\n/**\n * @param {!Element} element\n * @param {!Window} win\n * @return {boolean} whether the element position is allowed. If the element\n * belongs to CONTAINERS, it is allowed to be position fixed.\n * If the element has a position fixed ancestor, it is not allowed.\n * This should only be called when a layout on the page was just forced\n * anyway.\n */\nexport function isAdPositionAllowed(element, win) {\n  let hasFixedAncestor = false;\n  let containers = 0;\n  let el = element;\n  do {\n    if (CONTAINERS[el.tagName]) {\n      // The containers must not themselves be contained in a fixed-position\n      // element. Continue the search.\n      containers++;\n      hasFixedAncestor = false;\n    } else if (isPositionFixed(dev().assertElement(el), win)) {\n      // Because certain blessed elements may contain a position fixed\n      // container (which contain an ad), we continue to search the\n      // ancestry tree.\n      hasFixedAncestor = true;\n    }\n    el = el.parentElement;\n  } while (el && el.tagName != 'BODY');\n  return !hasFixedAncestor && containers <= 1;\n}\n\n/**\n * Returns the blessed container element tagName if the ad is contained by one.\n * This is called during layout measure.\n * @param {!Element} element\n * @return {?string}\n */\nexport function getAdContainer(element) {\n  if (element[AD_CONTAINER_PROP] === undefined) {\n    let el = element.parentElement;\n    while (el && el.tagName != 'BODY') {\n      if (CONTAINERS[el.tagName]) {\n        return element[AD_CONTAINER_PROP] = el.tagName;\n      }\n      el = el.parentElement;\n    }\n    element[AD_CONTAINER_PROP] = null;\n  }\n  return element[AD_CONTAINER_PROP];\n}\n\n/**\n * Gets the resource ID of the amp-ad element containing the passed node.\n * If there is no containing amp-ad tag, then null will be returned.\n * TODO(jonkeller): Investigate whether non-A4A use case is needed. Issue 11436\n * @param {!Element} node\n * @param {!Window} topWin\n * @return {?string}\n */\nexport function getAmpAdResourceId(node, topWin) {\n  try {\n    const frameParent = getParentWindowFrameElement(node, topWin).parentElement;\n    if (frameParent.nodeName == 'AMP-AD') {\n      return String(frameParent.getResourceId());\n    }\n  } catch (e) {\n  }\n  // Whether we entered the catch above (e.g. due to attempt to access\n  // across xdomain boundary), or failed to enter the if further above, the\n  // node is not within a friendly amp-ad tag. So, there is no amp-ad\n  // resource ID. How to handle that is up to the caller, but see TODO above.\n  return null;\n}\n\n","/**\n * Copyright 2017 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n/**\n * Commonly used signals across different elements and documents.\n * @enum {string}\n */\nexport const CommonSignals = {\n\n  /**\n   * The element has been built.\n   */\n  BUILT: 'built',\n\n  /**\n   * The initial contents of an element/document/embed have been loaded.\n   */\n  INI_LOAD: 'ini-load',\n\n  /**\n   * The element has been loaded.\n   */\n  LOAD_END: 'load-end',\n\n  /**\n   * The element has started loading.\n   */\n  LOAD_START: 'load-start',\n\n  /**\n   * Rendering has been confirmed to have been started.\n   */\n  RENDER_START: 'render-start',\n\n  /**\n   * The element has been unlaid out.\n   */\n  UNLOAD: 'unload',\n};\n","/**\n * Copyright 2016 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Allows for runtime configuration. Internally, the runtime should\n * use the src/config.js module for various constants. We can use the\n * AMP_CONFIG global to translate user-defined configurations to this\n * module.\n * @type {!Object<string, string>}\n */\nconst env = self.AMP_CONFIG || {};\n\nconst thirdPartyFrameRegex = typeof env['thirdPartyFrameRegex'] == 'string' ?\n  new RegExp(env['thirdPartyFrameRegex']) : env['thirdPartyFrameRegex'];\n\nconst cdnProxyRegex = typeof env['cdnProxyRegex'] == 'string' ?\n  new RegExp(env['cdnProxyRegex']) : env['cdnProxyRegex'];\n\n/** @type {!Object<string, string|boolean|RegExp>} */\nexport const urls = {\n  thirdParty: env['thirdPartyUrl'] || 'https://3p.ampproject.net',\n  thirdPartyFrameHost: env['thirdPartyFrameHost'] || 'ampproject.net',\n  thirdPartyFrameRegex: thirdPartyFrameRegex || /^d-\\d+\\.ampproject\\.net$/,\n  cdn: env['cdnUrl'] || 'https://cdn.ampproject.org',\n  /* Note that cdnProxyRegex is only ever checked against origins\n   * (proto://host[:port]) so does not need to consider path\n   */\n  cdnProxyRegex: cdnProxyRegex ||\n      /^https:\\/\\/([a-zA-Z0-9_-]+\\.)?cdn\\.ampproject\\.org$/,\n  localhostRegex: /^https?:\\/\\/localhost(:\\d+)?$/,\n  errorReporting: env['errorReportingUrl'] ||\n      'https://amp-error-reporting.appspot.com/r',\n  localDev: env['localDev'] || false,\n};\n\nexport const config = {\n  urls,\n};\n","/**\n * Copyright 2015 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {endsWith} from './string';\nimport {\n  isProxyOrigin,\n  parseUrlDeprecated,\n  tryDecodeUriComponent,\n} from './url';\nimport {urls} from './config';\n\n\n/**\n * Returns the value of the cookie. The cookie access is restricted and must\n * go through the privacy review. Before using this method please file a\n * GitHub issue with \"Privacy Review\" label.\n *\n * Returns the cookie's value or `null`.\n *\n * @param {!Window} win\n * @param {string} name\n * @return {?string}\n */\nexport function getCookie(win, name) {\n  const cookieString = tryGetDocumentCookieNoInline(win);\n  if (!cookieString) {\n    return null;\n  }\n  const cookies = cookieString.split(';');\n  for (let i = 0; i < cookies.length; i++) {\n    const cookie = cookies[i].trim();\n    const eq = cookie.indexOf('=');\n    if (eq == -1) {\n      continue;\n    }\n    if (tryDecodeUriComponent(cookie.substring(0, eq).trim()) == name) {\n      const value = cookie.substring(eq + 1).trim();\n      return tryDecodeUriComponent(value, value);\n    }\n  }\n  return null;\n}\n\n/**\n * This method should not be inlined to prevent TryCatch deoptimization.\n * NoInline keyword at the end of function name also prevents Closure compiler\n * from inlining the function.\n * @param {!Window} win\n * @return {string}\n */\nfunction tryGetDocumentCookieNoInline(win) {\n  try {\n    return win.document.cookie;\n  } catch (e) {\n    // Act as if no cookie is available. Exceptions can be thrown when\n    // AMP docs are opened on origins that do not allow setting\n    // cookies such as null origins.\n    return '';\n  }\n}\n\n/**\n * Sets the value of the cookie. The cookie access is restricted and must\n * go through the privacy review. Before using this method please file a\n * GitHub issue with \"Privacy Review\" label.\n *\n * @param {!Window} win\n * @param {string} name\n * @param {string} value\n * @param {time} expirationTime\n * @param {{\n *   highestAvailableDomain:(boolean|undefined),\n *   domain:(string|undefined)\n * }=} opt_options\n *     - highestAvailableDomain: If true, set the cookie at the widest domain\n *       scope allowed by the browser. E.g. on example.com if we are currently\n *       on www.example.com.\n *     - domain: Explicit domain to set.\n *     - allowOnProxyOrigin: Allow setting a cookie on the AMP Cache.\n */\nexport function setCookie(win, name, value, expirationTime, opt_options) {\n  checkOriginForSettingCookie(win, opt_options, name);\n  if (opt_options && opt_options.highestAvailableDomain) {\n    const parts = win.location.hostname.split('.');\n    let domain = parts[parts.length - 1];\n    for (let i = parts.length - 2; i >= 0; i--) {\n      domain = parts[i] + '.' + domain;\n      trySetCookie(win, name, value, expirationTime, domain);\n      if (getCookie(win, name) == value) {\n        return;\n      }\n    }\n  }\n  let domain = undefined;\n  if (opt_options && opt_options.domain) {\n    domain = opt_options.domain;\n  }\n  trySetCookie(win, name, value, expirationTime, domain);\n}\n\n/**\n * Attempt to set a cookie with the given params.\n *\n * @param {!Window} win\n * @param {string} name\n * @param {string} value\n * @param {time} expirationTime\n * @param {string|undefined} domain\n */\nfunction trySetCookie(win, name, value, expirationTime, domain) {\n  // We do not allow setting cookies on the domain that contains both\n  // the cdn. and www. hosts.\n  if (domain == 'ampproject.org') {\n    // Actively delete them.\n    value = 'delete';\n    expirationTime = 0;\n  }\n  const cookie = encodeURIComponent(name) + '=' +\n      encodeURIComponent(value) +\n      '; path=/' +\n      (domain ? '; domain=' + domain : '') +\n      '; expires=' + new Date(expirationTime).toUTCString();\n  try {\n    win.document.cookie = cookie;\n  } catch (ignore) {\n    // Do not throw if setting the cookie failed Exceptions can be thrown\n    // when AMP docs are opened on origins that do not allow setting\n    // cookies such as null origins.\n  }\n}\n\n/**\n * Throws if a given cookie should not be set on the given origin.\n * This is a defense-in-depth. Callers should never run into this.\n *\n * @param {!Window} win\n * @param {!Object|undefined} options\n * @param {string} name For the error message.\n */\nfunction checkOriginForSettingCookie(win, options, name) {\n  if (options && options.allowOnProxyOrigin) {\n    return;\n  }\n  if (isProxyOrigin(win.location.href)) {\n    throw new Error('Should never attempt to set cookie on proxy origin: '\n        + name);\n  }\n\n  const current = parseUrlDeprecated(win.location.href).hostname.toLowerCase();\n  const proxy = parseUrlDeprecated(urls.cdn).hostname.toLowerCase();\n  if (current == proxy || endsWith(current, '.' + proxy)) {\n    throw new Error('Should never attempt to set cookie on proxy origin.'\n        + ' (in depth check): ' + name);\n  }\n}\n","/**\n * Copyright 2016 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n/**\n * Whether the document is ready.\n * @param {!Document} doc\n * @return {boolean}\n */\nexport function isDocumentReady(doc) {\n  return doc.readyState != 'loading' && doc.readyState != 'uninitialized';\n}\n\n/**\n * Whether the document has loaded all the css and sub-resources.\n * @param {!Document} doc\n * @return {boolean}\n */\nfunction isDocumentComplete(doc) {\n  return doc.readyState == 'complete';\n}\n\n/**\n * Calls the callback when document is ready.\n * @param {!Document} doc\n * @param {function(!Document)} callback\n */\nexport function onDocumentReady(doc, callback) {\n  onDocumentState(doc, isDocumentReady, callback);\n}\n\n/**\n * Calls the callback when document's state satisfies the stateFn.\n * @param {!Document} doc\n * @param {function(!Document):boolean} stateFn\n * @param {function(!Document)} callback\n */\nfunction onDocumentState(doc, stateFn, callback) {\n  let ready = stateFn(doc);\n  if (ready) {\n    callback(doc);\n  } else {\n    const readyListener = () => {\n      if (stateFn(doc)) {\n        if (!ready) {\n          ready = true;\n          callback(doc);\n        }\n        doc.removeEventListener('readystatechange', readyListener);\n      }\n    };\n    doc.addEventListener('readystatechange', readyListener);\n  }\n}\n\n/**\n * Returns a promise that is resolved when document is ready.\n * @param {!Document} doc\n * @return {!Promise<!Document>}\n */\nexport function whenDocumentReady(doc) {\n  return new Promise(resolve => {\n    onDocumentReady(doc, resolve);\n  });\n}\n\n/**\n * Returns a promise that is resolved when document is complete.\n * @param {!Document} doc\n * @return {!Promise<!Document>}\n */\nexport function whenDocumentComplete(doc) {\n  return new Promise(resolve => {\n    onDocumentState(doc, isDocumentComplete, resolve);\n  });\n}\n","/**\n * Copyright 2015 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Deferred} from './utils/promise';\nimport {cssEscape} from '../third_party/css-escape/css-escape';\nimport {dev} from './log';\nimport {dict} from './utils/object';\nimport {startsWith} from './string';\nimport {toWin} from './types';\n\nconst HTML_ESCAPE_CHARS = {\n  '&': '&amp;',\n  '<': '&lt;',\n  '>': '&gt;',\n  '\"': '&quot;',\n  \"'\": '&#x27;',\n  '`': '&#x60;',\n};\nconst HTML_ESCAPE_REGEX = /(&|<|>|\"|'|`)/g;\n\n/** @const {string} */\nexport const UPGRADE_TO_CUSTOMELEMENT_PROMISE =\n    '__AMP_UPG_PRM';\n\n/** @const {string} */\nexport const UPGRADE_TO_CUSTOMELEMENT_RESOLVER =\n    '__AMP_UPG_RES';\n\n/**\n * Waits until the child element is constructed. Once the child is found, the\n * callback is executed.\n * @param {!Element} parent\n * @param {function(!Element):boolean} checkFunc\n * @param {function()} callback\n */\nexport function waitForChild(parent, checkFunc, callback) {\n  if (checkFunc(parent)) {\n    callback();\n    return;\n  }\n  /** @const {!Window} */\n  const win = toWin(parent.ownerDocument.defaultView);\n  if (win.MutationObserver) {\n    /** @const {MutationObserver} */\n    const observer = new win.MutationObserver(() => {\n      if (checkFunc(parent)) {\n        observer.disconnect();\n        callback();\n      }\n    });\n    observer.observe(parent, {childList: true});\n  } else {\n    /** @const {number} */\n    const interval = win.setInterval(() => {\n      if (checkFunc(parent)) {\n        win.clearInterval(interval);\n        callback();\n      }\n    }, /* milliseconds */ 5);\n  }\n}\n\n/**\n * Waits until the child element is constructed. Once the child is found, the\n * promise is resolved.\n * @param {!Element} parent\n * @param {function(!Element):boolean} checkFunc\n * @return {!Promise}\n */\nexport function waitForChildPromise(parent, checkFunc) {\n  return new Promise(resolve => {\n    waitForChild(parent, checkFunc, resolve);\n  });\n}\n\n/**\n * Waits for document's body to be available.\n * Will be deprecated soon; use {@link AmpDoc#whenBodyAvailable} or\n * @{link DocumentState#onBodyAvailable} instead.\n * @param {!Document} doc\n * @param {function()} callback\n */\nexport function waitForBody(doc, callback) {\n  waitForChild(doc.documentElement, () => !!doc.body, callback);\n}\n\n\n/**\n * Waits for document's body to be available.\n * @param {!Document} doc\n * @return {!Promise}\n */\nexport function waitForBodyPromise(doc) {\n  return new Promise(resolve => {\n    waitForBody(doc, resolve);\n  });\n}\n\n\n/**\n * Removes the element.\n * @param {!Element} element\n */\nexport function removeElement(element) {\n  if (element.parentElement) {\n    element.parentElement.removeChild(element);\n  }\n}\n\n\n/**\n * Removes all child nodes of the specified element.\n * @param {!Element} parent\n */\nexport function removeChildren(parent) {\n  while (parent.firstChild) {\n    parent.removeChild(parent.firstChild);\n  }\n}\n\n\n/**\n * Copies all children nodes of element \"from\" to element \"to\". Child nodes\n * are deeply cloned. Notice, that this method should be used with care and\n * preferably on smaller subtrees.\n * @param {!Element} from\n * @param {!Element|!DocumentFragment} to\n */\nexport function copyChildren(from, to) {\n  const frag = to.ownerDocument.createDocumentFragment();\n  for (let n = from.firstChild; n; n = n.nextSibling) {\n    frag.appendChild(n.cloneNode(true));\n  }\n  to.appendChild(frag);\n}\n\n/**\n * Insert the element in the root after the element named after or\n * if that is null at the beginning.\n * @param {!Element|!ShadowRoot} root\n * @param {!Element} element\n * @param {?Node} after\n */\nexport function insertAfterOrAtStart(root, element, after) {\n  const before = after ? after.nextSibling : root.firstChild;\n  root.insertBefore(element, before);\n}\n\n/**\n * Add attributes to an element.\n * @param {!Element} element\n * @param {!JsonObject<string, string>} attributes\n * @return {!Element} created element\n */\nexport function addAttributesToElement(element, attributes) {\n  for (const attr in attributes) {\n    element.setAttribute(attr, attributes[attr]);\n  }\n  return element;\n}\n\n/**\n * Create a new element on document with specified tagName and attributes.\n * @param {!Document} doc\n * @param {string} tagName\n * @param {!JsonObject<string, string>} attributes\n * @return {!Element} created element\n */\nexport function createElementWithAttributes(doc, tagName, attributes) {\n  const element = doc.createElement(tagName);\n  return addAttributesToElement(element, attributes);\n}\n\n/**\n * Returns true if node is connected (attached).\n * @param {!Node} node\n * @return {boolean}\n * @see https://dom.spec.whatwg.org/#connected\n */\nexport function isConnectedNode(node) {\n  const connected = node.isConnected;\n  if (connected !== undefined) {\n    return connected;\n  }\n\n  // \"An element is connected if its shadow-including root is a document.\"\n  let n = node;\n  do {\n    n = rootNodeFor(n);\n    if (n.host) {\n      n = n.host;\n    } else {\n      break;\n    }\n  } while (true);\n  return n.nodeType === Node.DOCUMENT_NODE;\n}\n\n/**\n * Returns the root for a given node. Does not cross shadow DOM boundary.\n * @param {!Node} node\n * @return {!Node}\n */\nexport function rootNodeFor(node) {\n  if (Node.prototype.getRootNode) {\n    // Type checker says `getRootNode` may return null.\n    return node.getRootNode() || node;\n  }\n  let n;\n  for (n = node; !!n.parentNode; n = n.parentNode) {}\n  return n;\n}\n\n/**\n * Finds the closest element that satisfies the callback from this element\n * up the DOM subtree.\n * @param {!Element} element\n * @param {function(!Element):boolean} callback\n * @param {Element=} opt_stopAt optional elemnt to stop the search at.\n * @return {?Element}\n */\nexport function closest(element, callback, opt_stopAt) {\n  for (let el = element; el && el !== opt_stopAt; el = el.parentElement) {\n    if (callback(el)) {\n      return el;\n    }\n  }\n  return null;\n}\n\n\n/**\n * Finds the closest node that satisfies the callback from this node\n * up the DOM subtree.\n * @param {!Node} node\n * @param {function(!Node):boolean} callback\n * @return {?Node}\n */\nexport function closestNode(node, callback) {\n  for (let n = node; n; n = n.parentNode) {\n    if (callback(n)) {\n      return n;\n    }\n  }\n  return null;\n}\n\n\n/**\n * Finds the closest element with the specified name from this element\n * up the DOM subtree.\n * @param {!Element} element\n * @param {string} tagName\n * @return {?Element}\n */\nexport function closestByTag(element, tagName) {\n  if (element.closest) {\n    return element.closest(tagName);\n  }\n  tagName = tagName.toUpperCase();\n  return closest(element, el => {\n    return el.tagName == tagName;\n  });\n}\n\n/**\n * Finds the closest element with the specified selector from this element\n * @param {!Element} element\n * @param {string} selector\n * @return {?Element} closest ancestor if found.\n */\nexport function closestBySelector(element, selector) {\n  if (element.closest) {\n    return element.closest(selector);\n  }\n\n  return closest(element, el => {\n    return matches(el, selector);\n  });\n}\n\n/**\n * Checks if the given element matches the selector\n * @param  {!Element} el The element to verify\n * @param  {string} selector The selector to check against\n * @return {boolean} True if the element matched the selector. False otherwise.\n */\nexport function matches(el, selector) {\n  const matcher = el.matches ||\n      el.webkitMatchesSelector ||\n      el.mozMatchesSelector ||\n      el.msMatchesSelector ||\n      el.oMatchesSelector;\n  if (matcher) {\n    return matcher.call(el, selector);\n  }\n  return false; // IE8 always returns false.\n}\n\n/**\n * Finds the first descendant element with the specified name.\n * @param {!Element|!Document|!ShadowRoot} element\n * @param {string} tagName\n * @return {?Element}\n */\nexport function elementByTag(element, tagName) {\n  let elements;\n  // getElementsByTagName() is not supported on ShadowRoot.\n  if (typeof element.getElementsByTagName === 'function') {\n    elements = element.getElementsByTagName(tagName);\n  } else {\n    elements = element./*OK*/querySelectorAll(tagName);\n  }\n  return (elements && elements[0]) || null;\n}\n\n\n/**\n * Finds the first child element that satisfies the callback.\n * @param {!Element} parent\n * @param {function(!Element):boolean} callback\n * @return {?Element}\n */\nexport function childElement(parent, callback) {\n  for (let child = parent.firstElementChild; child;\n    child = child.nextElementSibling) {\n    if (callback(child)) {\n      return child;\n    }\n  }\n  return null;\n}\n\n\n/**\n * Finds all child elements that satisfy the callback.\n * @param {!Element} parent\n * @param {function(!Element):boolean} callback\n * @return {!Array<!Element>}\n */\nexport function childElements(parent, callback) {\n  const children = [];\n  for (let child = parent.firstElementChild; child;\n    child = child.nextElementSibling) {\n    if (callback(child)) {\n      children.push(child);\n    }\n  }\n  return children;\n}\n\n\n/**\n * Finds the last child element that satisfies the callback.\n * @param {!Element} parent\n * @param {function(!Element):boolean} callback\n * @return {?Element}\n */\nexport function lastChildElement(parent, callback) {\n  for (let child = parent.lastElementChild; child;\n    child = child.previousElementSibling) {\n    if (callback(child)) {\n      return child;\n    }\n  }\n  return null;\n}\n\n/**\n * Finds all child nodes that satisfy the callback.\n * These nodes can include Text, Comment and other child nodes.\n * @param {!Node} parent\n * @param {function(!Node):boolean} callback\n * @return {!Array<!Node>}\n */\nexport function childNodes(parent, callback) {\n  const nodes = [];\n  for (let child = parent.firstChild; child;\n    child = child.nextSibling) {\n    if (callback(child)) {\n      nodes.push(child);\n    }\n  }\n  return nodes;\n}\n\n/**\n * @type {boolean|undefined}\n * @visibleForTesting\n */\nlet scopeSelectorSupported;\n\n/**\n * @param {boolean|undefined} val\n * @visibleForTesting\n */\nexport function setScopeSelectorSupportedForTesting(val) {\n  scopeSelectorSupported = val;\n}\n\n/**\n * Test that the :scope selector is supported and behaves correctly.\n * @param {!Element} parent\n * @return {boolean}\n */\nfunction isScopeSelectorSupported(parent) {\n  const doc = parent.ownerDocument;\n  try {\n    const testElement = doc.createElement('div');\n    const testChild = doc.createElement('div');\n    testElement.appendChild(testChild);\n    // NOTE(cvializ, #12383): Firefox's implementation is incomplete,\n    // therefore we test actual functionality of`:scope` as well.\n    return testElement./*OK*/querySelector(':scope div') === testChild;\n  } catch (e) {\n    return false;\n  }\n}\n\n/**\n * Finds the first child element that has the specified attribute.\n * @param {!Element} parent\n * @param {string} attr\n * @return {?Element}\n */\nexport function childElementByAttr(parent, attr) {\n  return scopedQuerySelector/*OK*/(parent, `> [${attr}]`);\n}\n\n\n/**\n * Finds the last child element that has the specified attribute.\n * @param {!Element} parent\n * @param {string} attr\n * @return {?Element}\n */\nexport function lastChildElementByAttr(parent, attr) {\n  return lastChildElement(parent, el => {\n    return el.hasAttribute(attr);\n  });\n}\n\n\n/**\n * Finds all child elements that has the specified attribute.\n * @param {!Element} parent\n * @param {string} attr\n * @return {!NodeList<!Element>}\n */\nexport function childElementsByAttr(parent, attr) {\n  return scopedQuerySelectorAll/*OK*/(parent, `> [${attr}]`);\n}\n\n\n/**\n * Finds the first child element that has the specified tag name.\n * @param {!Element} parent\n * @param {string} tagName\n * @return {?Element}\n */\nexport function childElementByTag(parent, tagName) {\n  return scopedQuerySelector/*OK*/(parent, `> ${tagName}`);\n}\n\n\n/**\n * Finds all child elements with the specified tag name.\n * @param {!Element} parent\n * @param {string} tagName\n * @return {!NodeList<!Element>}\n */\nexport function childElementsByTag(parent, tagName) {\n  return scopedQuerySelectorAll/*OK*/(parent, `> ${tagName}`);\n}\n\n\n/**\n * Finds the first element that matches `selector`, scoped inside `root`.\n * Note: in IE, this causes a quick mutation of the element's class list.\n * @param {!Element} root\n * @param {string} selector\n * @return {?Element}\n */\nexport function scopedQuerySelector(root, selector) {\n  if (scopeSelectorSupported == null) {\n    scopeSelectorSupported = isScopeSelectorSupported(root);\n  }\n  if (scopeSelectorSupported) {\n    return root./*OK*/querySelector(`:scope ${selector}`);\n  }\n\n  // Only IE.\n  const unique = 'i-amphtml-scoped';\n  root.classList.add(unique);\n  const element = root./*OK*/querySelector(`.${unique} ${selector}`);\n  root.classList.remove(unique);\n  return element;\n}\n\n\n/**\n * Finds the every element that matches `selector`, scoped inside `root`.\n * Note: in IE, this causes a quick mutation of the element's class list.\n * @param {!Element} root\n * @param {string} selector\n * @return {!NodeList<!Element>}\n */\nexport function scopedQuerySelectorAll(root, selector) {\n  if (scopeSelectorSupported == null) {\n    scopeSelectorSupported = isScopeSelectorSupported(root);\n  }\n  if (scopeSelectorSupported) {\n    return root./*OK*/querySelectorAll(`:scope ${selector}`);\n  }\n\n  // Only IE.\n  const unique = 'i-amphtml-scoped';\n  root.classList.add(unique);\n  const elements = root./*OK*/querySelectorAll(`.${unique} ${selector}`);\n  root.classList.remove(unique);\n  return elements;\n}\n\n\n/**\n * Returns element data-param- attributes as url parameters key-value pairs.\n * e.g. data-param-some-attr=value -> {someAttr: value}.\n * @param {!Element} element\n * @param {function(string):string=} opt_computeParamNameFunc to compute the\n *    parameter name, get passed the camel-case parameter name.\n * @param {!RegExp=} opt_paramPattern Regex pattern to match data attributes.\n * @return {!JsonObject}\n */\nexport function getDataParamsFromAttributes(element, opt_computeParamNameFunc,\n  opt_paramPattern) {\n  const computeParamNameFunc = opt_computeParamNameFunc || (key => key);\n  const {dataset} = element;\n  const params = dict();\n  const paramPattern = opt_paramPattern ? opt_paramPattern : /^param(.+)/;\n  for (const key in dataset) {\n    const matches = key.match(paramPattern);\n    if (matches) {\n      const param = matches[1][0].toLowerCase() + matches[1].substr(1);\n      params[computeParamNameFunc(param)] = dataset[key];\n    }\n  }\n  return params;\n}\n\n/**\n * Whether the element have a next node in the document order.\n * This means either:\n *  a. The element itself has a nextSibling.\n *  b. Any of the element ancestors has a nextSibling.\n * @param {!Element} element\n * @param {?Node} opt_stopNode\n * @return {boolean}\n */\nexport function hasNextNodeInDocumentOrder(element, opt_stopNode) {\n  let currentElement = element;\n  do {\n    if (currentElement.nextSibling) {\n      return true;\n    }\n  } while ((currentElement = currentElement.parentNode) &&\n            currentElement != opt_stopNode);\n  return false;\n}\n\n\n/**\n * Finds all ancestor elements that satisfy predicate.\n * @param {!Element} child\n * @param {function(!Element):boolean} predicate\n * @return {!Array<!Element>}\n */\nexport function ancestorElements(child, predicate) {\n  const ancestors = [];\n  for (let ancestor = child.parentElement; ancestor;\n    ancestor = ancestor.parentElement) {\n    if (predicate(ancestor)) {\n      ancestors.push(ancestor);\n    }\n  }\n  return ancestors;\n}\n\n\n/**\n * Finds all ancestor elements that has the specified tag name.\n * @param {!Element} child\n * @param {string} tagName\n * @return {!Array<!Element>}\n */\nexport function ancestorElementsByTag(child, tagName) {\n  tagName = tagName.toUpperCase();\n  return ancestorElements(child, el => {\n    return el.tagName == tagName;\n  });\n}\n\n/**\n * Returns a clone of the content of a template element.\n *\n * Polyfill to replace .content access for browsers that do not support\n * HTMLTemplateElements natively.\n *\n * @param {!HTMLTemplateElement|!Element} template\n * @return {!DocumentFragment}\n */\nexport function templateContentClone(template) {\n  if ('content' in template) {\n    return template.content.cloneNode(true);\n  } else {\n    const content = template.ownerDocument.createDocumentFragment();\n    copyChildren(template, content);\n    return content;\n  }\n}\n\n/**\n * Iterate over an array-like. Some collections like NodeList are\n * lazily evaluated in some browsers, and accessing `length` forces full\n * evaluation. We can improve performance by iterating until an element is\n * `undefined` to avoid checking the `length` property.\n * Test cases: https://jsperf.com/iterating-over-collections-of-elements\n * @param {!IArrayLike<T>} iterable\n * @param {function(T, number)} cb\n * @template T\n */\nexport function iterateCursor(iterable, cb) {\n  for (let i = 0, value; (value = iterable[i]) !== undefined; i++) {\n    cb(value, i);\n  }\n}\n\n/**\n * This method wraps around window's open method. It first tries to execute\n * `open` call with the provided target and if it fails, it retries the call\n * with the `_top` target. This is necessary given that in some embedding\n * scenarios, such as iOS' WKWebView, navigation to `_blank` and other targets\n * is blocked by default.\n *\n * @param {!Window} win\n * @param {string} url\n * @param {string} target\n * @param {string=} opt_features\n * @return {?Window}\n */\nexport function openWindowDialog(win, url, target, opt_features) {\n  // Try first with the specified target. If we're inside the WKWebView or\n  // a similar environments, this method is expected to fail by default for\n  // all targets except `_top`.\n  let res;\n  try {\n    res = win.open(url, target, opt_features);\n  } catch (e) {\n    dev().error('DOM', 'Failed to open url on target: ', target, e);\n  }\n\n  // Then try with `_top` target.\n  if (!res && target != '_top') {\n    res = win.open(url, '_top');\n  }\n  return res;\n}\n\n/**\n * Whether the element is a script tag with application/json type.\n * @param {!Element} element\n * @return {boolean}\n */\nexport function isJsonScriptTag(element) {\n  return element.tagName == 'SCRIPT' &&\n            element.getAttribute('type').toUpperCase() == 'APPLICATION/JSON';\n}\n\n/**\n * Whether the element is a script tag with application/json type.\n * @param {!Element} element\n * @return {boolean}\n */\nexport function isJsonLdScriptTag(element) {\n  return element.tagName == 'SCRIPT' &&\n      element.getAttribute('type').toUpperCase() == 'APPLICATION/LD+JSON';\n}\n\n/**\n * Whether the page's direction is right to left or not.\n * @param {!Document} doc\n * @return {boolean}\n */\nexport function isRTL(doc) {\n  const dir = doc.body.getAttribute('dir')\n                 || doc.documentElement.getAttribute('dir')\n                 || 'ltr';\n  return dir == 'rtl';\n}\n\n\n/**\n * Escapes an ident (ID or a class name) to be used as a CSS selector.\n *\n * See https://drafts.csswg.org/cssom/#serialize-an-identifier.\n *\n * @param {string} ident\n * @return {string}\n */\nexport function escapeCssSelectorIdent(ident) {\n  return cssEscape(ident);\n}\n\n/**\n * Escapes an ident in a way that can be used by :nth-child() psuedo-class.\n *\n * See https://github.com/w3c/csswg-drafts/issues/2306.\n *\n * @param {string|number} ident\n * @return {string}\n */\nexport function escapeCssSelectorNth(ident) {\n  const escaped = String(ident);\n  // Ensure it doesn't close the nth-child psuedo class.\n  dev().assert(escaped.indexOf(')') === -1);\n  return escaped;\n}\n\n/**\n * Escapes `<`, `>` and other HTML charcaters with their escaped forms.\n * @param {string} text\n * @return {string}\n */\nexport function escapeHtml(text) {\n  if (!text) {\n    return text;\n  }\n  return text.replace(HTML_ESCAPE_REGEX, escapeHtmlChar);\n}\n\n/**\n * @param {string} c\n * @return {string}\n */\nfunction escapeHtmlChar(c) {\n  return HTML_ESCAPE_CHARS[c];\n}\n\n/**\n * Tries to focus on the given element; fails silently if browser throws an\n * exception.\n * @param {!Element} element\n */\nexport function tryFocus(element) {\n  try {\n    element./*OK*/focus();\n  } catch (e) {\n    // IE <= 7 may throw exceptions when focusing on hidden items.\n  }\n}\n\n/**\n * Whether the given window is in an iframe or not.\n * @param {!Window} win\n * @return {boolean}\n */\nexport function isIframed(win) {\n  return win.parent && win.parent != win;\n}\n\n/**\n * Determines if this element is an AMP element\n * @param {!Element} element\n * @return {boolean}\n */\nexport function isAmpElement(element) {\n  const tag = element.tagName;\n  // Use prefix to recognize AMP element. This is necessary because stub\n  // may not be attached yet.\n  return startsWith(tag, 'AMP-') &&\n      // Some \"amp-*\" elements are not really AMP elements. :smh:\n      !(tag == 'AMP-STICKY-AD-TOP-PADDING' || tag == 'AMP-BODY');\n}\n\n/**\n * Return a promise that resolve when an AMP element upgrade from HTMLElement\n * to CustomElement\n * @param {!Element} element\n * @return {!Promise<!Element>}\n */\nexport function whenUpgradedToCustomElement(element) {\n  dev().assert(isAmpElement(element), 'element is not AmpElement');\n  if (element.createdCallback) {\n    // Element already is CustomElement;\n    return Promise.resolve(element);\n  }\n  // If Element is still HTMLElement, wait for it to upgrade to customElement\n  // Note: use pure string to avoid obfuscation between versions.\n  if (!element[UPGRADE_TO_CUSTOMELEMENT_PROMISE]) {\n    const deferred = new Deferred();\n    element[UPGRADE_TO_CUSTOMELEMENT_PROMISE] = deferred.promise;\n    element[UPGRADE_TO_CUSTOMELEMENT_RESOLVER] = deferred.resolve;\n\n  }\n\n  return element[UPGRADE_TO_CUSTOMELEMENT_PROMISE];\n}\n\n/**\n * Replacement for `Element.requestFullscreen()` method.\n * https://developer.mozilla.org/en-US/docs/Web/API/Element/requestFullscreen\n * @param {!Element} element\n */\nexport function fullscreenEnter(element) {\n  const requestFs = element.requestFullscreen\n   || element.requestFullScreen\n   || element.webkitRequestFullscreen\n   || element.webkitRequestFullScreen\n   || element.webkitEnterFullscreen\n   || element.webkitEnterFullScreen\n   || element.msRequestFullscreen\n   || element.msRequestFullScreen\n   || element.mozRequestFullscreen\n   || element.mozRequestFullScreen;\n  if (requestFs) {\n    requestFs.call(element);\n  }\n}\n\n/**\n * Replacement for `Document.exitFullscreen()` method.\n * https://developer.mozilla.org/en-US/docs/Web/API/Document/exitFullscreen\n * @param {!Element} element\n */\nexport function fullscreenExit(element) {\n  let exitFs = element.cancelFullScreen\n               || element.exitFullscreen\n               || element.exitFullScreen\n               || element.webkitExitFullscreen\n               || element.webkitExitFullScreen\n               || element.webkitCancelFullScreen\n               || element.mozCancelFullScreen\n               || element.msExitFullscreen;\n  if (exitFs) {\n    exitFs.call(element);\n    return;\n  }\n  if (element.ownerDocument) {\n    exitFs = element.ownerDocument.cancelFullScreen\n             || element.ownerDocument.exitFullscreen\n             || element.ownerDocument.exitFullScreen\n             || element.ownerDocument.webkitExitFullscreen\n             || element.ownerDocument.webkitExitFullScreen\n             || element.ownerDocument.webkitCancelFullScreen\n             || element.ownerDocument.mozCancelFullScreen\n             || element.ownerDocument.msExitFullscreen;\n  }\n  if (exitFs) {\n    exitFs.call(element.ownerDocument);\n    return;\n  }\n}\n\n\n/**\n * Replacement for `Document.fullscreenElement`.\n * https://developer.mozilla.org/en-US/docs/Web/API/Document/fullscreenElement\n * @param {!Element} element\n * @return {boolean}\n */\nexport function isFullscreenElement(element) {\n  const isFullscreen = element.webkitDisplayingFullscreen;\n  if (isFullscreen) {\n    return true;\n  }\n  if (element.ownerDocument) {\n    const fullscreenElement = element.ownerDocument.fullscreenElement\n             || element.ownerDocument.webkitFullscreenElement\n             || element.ownerDocument.mozFullScreenElement\n             || element.webkitCurrentFullScreenElement;\n    if (fullscreenElement == element) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/**\n * Returns true if node is not disabled.\n *\n * IE8 can return false positives, see {@link matches}.\n * @param {!Element} element\n * @return {boolean}\n * @see https://www.w3.org/TR/html5/forms.html#concept-fe-disabled\n */\nexport function isEnabled(element) {\n  return !(element.disabled || matches(element, ':disabled'));\n}\n","/**\n * Copyright 2016 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as dom from './dom';\nimport {\n  getAmpdoc,\n  getExistingServiceForDocInEmbedScope,\n  getService,\n  getServicePromise,\n  getServicePromiseForDoc,\n  getServicePromiseOrNull,\n  getServicePromiseOrNullForDoc,\n  getTopWindow,\n} from './service';\nimport {toWin} from './types';\nimport {user} from './log';\n\n/**\n * Returns a promise for a service for the given id and window. Also expects an\n * element that has the actual implementation. The promise resolves when the\n * implementation loaded. Users should typically wrap this as a special purpose\n * function (e.g. Services.viewportForDoc(...)) for type safety and because the\n * factory should not be passed around.\n * @param {!Window} win\n * @param {string} id of the service.\n * @param {string} extension Name of the custom extension that provides the\n *     implementation of this service.\n * @param {boolean=} opt_element Whether this service is provided by an element,\n *     not the extension.\n * @return {!Promise<*>}\n */\nexport function getElementService(win, id, extension, opt_element) {\n  return getElementServiceIfAvailable(win, id, extension, opt_element).then(\n      service => assertService(service, id, extension));\n}\n\n/**\n * Same as getElementService but produces null if the given element is not\n * actually available on the current page.\n * @param {!Window} win\n * @param {string} id of the service.\n * @param {string} extension Name of the custom extension that provides the\n *     implementation of this service.\n * @param {boolean=} opt_element Whether this service is provided by an\n *     element, not the extension.\n * @return {!Promise<?Object>}\n */\nexport function getElementServiceIfAvailable(win, id, extension, opt_element) {\n  const s = getServicePromiseOrNull(win, id);\n  if (s) {\n    return /** @type {!Promise<?Object>} */ (s);\n  }\n  return getElementServicePromiseOrNull(win, id, extension, opt_element);\n}\n\n/**\n * @param {!Window} win\n * @param {string} elementName Name of an extended custom element.\n * @return {boolean} Whether this element is scheduled to be loaded.\n */\nfunction isElementScheduled(win, elementName) {\n  // Set in custom-element.js\n  if (!win.ampExtendedElements) {\n    return false;\n  }\n  return !!win.ampExtendedElements[elementName];\n}\n\n\n/**\n * Returns a promise for a service for the given id and window. Also expects an\n * element that has the actual implementation. The promise resolves when the\n * implementation loaded. Users should typically wrap this as a special purpose\n * function (e.g. Services.viewportForDoc(...)) for type safety and because the\n * factory should not be passed around.\n * @param {!Element|!./service/ampdoc-impl.AmpDoc} elementOrAmpDoc\n * @param {string} id of the service.\n * @param {string} extension Name of the custom extension that provides the\n *     implementation of this service.\n * @param {boolean=} opt_element Whether this service is provided by an element,\n *     not the extension.\n * @return {!Promise<*>}\n */\nexport function getElementServiceForDoc(elementOrAmpDoc, id, extension,\n  opt_element) {\n  return getElementServiceIfAvailableForDoc(\n      elementOrAmpDoc, id, extension, opt_element)\n      .then(service => assertService(service, id, extension));\n}\n\n/**\n * Same as getElementService but produces null if the given element is not\n * actually available on the current page.\n * @param {!Element|!./service/ampdoc-impl.AmpDoc} elementOrAmpDoc\n * @param {string} id of the service.\n * @param {string} extension Name of the custom extension that provides the\n *     implementation of this service.\n * @param {boolean=} opt_element Whether this service is provided by an\n *     element, not the extension.\n * @return {!Promise<?Object>}\n */\nexport function getElementServiceIfAvailableForDoc(\n  elementOrAmpDoc, id, extension, opt_element) {\n  const ampdoc = getAmpdoc(elementOrAmpDoc);\n  const s = getServicePromiseOrNullForDoc(elementOrAmpDoc, id);\n  if (s) {\n    return /** @type {!Promise<?Object>} */ (s);\n  }\n\n  return ampdoc.whenBodyAvailable()\n      .then(() => waitForExtensionIfPresent(\n          ampdoc.win, extension,\n          ampdoc.getHeadNode()))\n      .then(() => {\n        // If this service is provided by an element, then we can't depend on\n        // the service (they may not use the element).\n        if (opt_element) {\n          return getServicePromiseOrNullForDoc(elementOrAmpDoc, id);\n        } else if (isElementScheduled(ampdoc.win, extension)) {\n          return getServicePromiseForDoc(elementOrAmpDoc, id);\n        }\n        return null;\n      });\n}\n\n/**\n * Returns a promise for service for the given id in the embed scope of\n * a given node, if it exists. Otherwise, falls back to ampdoc scope IFF\n * the given node is in the top-level window.\n * @param {!Element|!./service/ampdoc-impl.AmpDoc} elementOrAmpDoc\n * @param {string} id of the service.\n * @param {string} extension Name of the custom element that provides\n *     the implementation of this service.\n * @return {!Promise<?Object>}\n */\nexport function getElementServiceIfAvailableForDocInEmbedScope(\n  elementOrAmpDoc, id, extension) {\n  const s = getExistingServiceForDocInEmbedScope(elementOrAmpDoc, id);\n  if (s) {\n    return /** @type {!Promise<?Object>} */ (Promise.resolve(s));\n  }\n  // Return embed-scope element service promise if scheduled.\n  if (elementOrAmpDoc.nodeType) {\n    const win = toWin(elementOrAmpDoc.ownerDocument.defaultView);\n    const topWin = getTopWindow(win);\n    // In embeds, doc-scope services are window-scope. But make sure to\n    // only do this for embeds (not the top window), otherwise we'd grab\n    // a promise from the wrong service holder which would never resolve.\n    if (win !== topWin) {\n      return getElementServicePromiseOrNull(win, id, extension);\n    } else {\n      // Fallback to ampdoc IFF the given node is _not_ FIE.\n      return getElementServiceIfAvailableForDoc(elementOrAmpDoc, id, extension);\n    }\n  }\n  return /** @type {!Promise<?Object>} */ (Promise.resolve(null));\n}\n\n/**\n * Throws user error if `service` is null.\n * @param {Object} service\n * @param {string} id\n * @param {string} extension\n * @return {!Object}\n * @private\n */\nfunction assertService(service, id, extension) {\n  return /** @type {!Object} */ (user().assert(service,\n      'Service %s was requested to be provided through %s, ' +\n      'but %s is not loaded in the current page. To fix this ' +\n      'problem load the JavaScript file for %s in this page.',\n      id, extension, extension, extension));\n}\n\n/**\n * Get list of all the extension JS files\n * @param {HTMLHeadElement|Element|ShadowRoot} head\n * @return {!Array<string>}\n */\nexport function extensionScriptsInNode(head) {\n  // ampdoc.getHeadNode() can return null\n  if (!head) {\n    return [];\n  }\n  const scripts = [];\n  const list = head.querySelectorAll('script[custom-element]');\n  for (let i = 0; i < list.length; i++) {\n    scripts.push(list[i].getAttribute('custom-element'));\n  }\n  return scripts;\n}\n\n/**\n * Waits for body to be present then verifies that an extension script is\n * present in head for installation.\n * @param {!./service/ampdoc-impl.AmpDoc} ampdoc\n * @param {string} extensionId\n * @return {!Promise<boolean>}\n */\nexport function isExtensionScriptInNode(ampdoc, extensionId) {\n  return ampdoc.whenBodyAvailable()\n      .then(() => {\n        return extensionScriptInNode(\n            ampdoc.getHeadNode(), extensionId);\n      });\n}\n\n/**\n * Verifies that an extension script is present in head for\n * installation.\n * @param {HTMLHeadElement|Element|ShadowRoot} head\n * @param {string} extensionId\n * @private\n */\nfunction extensionScriptInNode(head, extensionId) {\n  return extensionScriptsInNode(head).includes(extensionId);\n}\n\n/**\n * Waits for an extension if its script is present\n * @param {!Window} win\n * @param {string} extension\n * @param {HTMLHeadElement|Element|ShadowRoot} head\n * @return {!Promise}\n * @private\n */\nfunction waitForExtensionIfPresent(win, extension, head) {\n  /**\n   * If there is an extension script wait for it to load before trying\n   * to get the service. Prevents a race condition when everything but\n   * the extensions is in cache. If there is no script then it's either\n   * not present, or the service was defined by a test. In those cases\n   * we don't wait around for an extension that does not exist.\n   */\n\n  // TODO(jpettitt) investigate registerExtension to short circuit\n  // the dom call in extensionScriptsInNode()\n  if (!extensionScriptInNode(head, extension)) {\n    return Promise.resolve();\n  }\n\n  const extensions = getService(win, 'extensions');\n  return /** @type {!Promise<?Object>} */ (\n    extensions.waitForExtension(win, extension));\n}\n\n/**\n * Returns the promise for service with `id` on the given window if available.\n * Otherwise, resolves with null (service was not registered).\n * @param {!Window} win\n * @param {string} id\n * @param {string} extension\n * @param {boolean=} opt_element\n * @return {!Promise<Object>}\n * @private\n */\nfunction getElementServicePromiseOrNull(win, id, extension, opt_element) {\n  return dom.waitForBodyPromise(win.document)\n      .then(() => waitForExtensionIfPresent(win, extension, win.document.head))\n      .then(() => {\n        // If this service is provided by an element, then we can't depend on\n        // the service (they may not use the element).\n        if (opt_element) {\n          return getServicePromiseOrNull(win, id);\n        } else if (isElementScheduled(win, extension)) {\n          return getServicePromise(win, id);\n        }\n        return null;\n      });\n}\n","/**\n * Copyright 2017 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n  * Whether addEventListener supports options or only takes capture as a boolean\n  * @type {boolean|undefined}\n  * @visibleForTesting\n  */\nlet optsSupported;\n\n/**\n * Listens for the specified event on the element.\n *\n * Do not use this directly. This method is implemented as a shared\n * dependency. Use `listen()` in either `event-helper` or `3p-frame-messaging`,\n * depending on your use case.\n *\n * @param {!EventTarget} element\n * @param {string} eventType\n * @param {function(!Event)} listener\n * @param {Object=} opt_evtListenerOpts\n * @return {!UnlistenDef}\n */\nexport function internalListenImplementation(element, eventType, listener,\n  opt_evtListenerOpts) {\n  let localElement = element;\n  let localListener = listener;\n  /**\n   * @type {?Function}\n   */\n  let wrapped;\n\n  wrapped = event => {\n    try {\n      return localListener(event);\n    } catch (e) {\n      // reportError is installed globally per window in the entry point.\n      self.reportError(e);\n      throw e;\n    }\n  };\n  const optsSupported = detectEvtListenerOptsSupport();\n  let capture = false;\n  if (opt_evtListenerOpts) {\n    capture = opt_evtListenerOpts.capture;\n  }\n  localElement.addEventListener(\n      eventType,\n      wrapped,\n      optsSupported ? opt_evtListenerOpts : capture\n  );\n  return () => {\n    if (localElement) {\n      localElement.removeEventListener(\n          eventType,\n          wrapped,\n          optsSupported ? opt_evtListenerOpts : capture\n      );\n    }\n    // Ensure these are GC'd\n    localListener = null;\n    localElement = null;\n    wrapped = null;\n  };\n}\n\n/**\n * Tests whether the browser supports options as an argument of addEventListener\n * or not.\n *\n * @return {boolean}\n */\nexport function detectEvtListenerOptsSupport() {\n  // Only run the test once\n  if (optsSupported !== undefined) {\n    return optsSupported;\n  }\n\n  optsSupported = false;\n  try {\n    // Test whether browser supports EventListenerOptions or not\n    const options = {\n      get capture() {\n        optsSupported = true;\n      },\n    };\n    self.addEventListener('test-options', null, options);\n    self.removeEventListener('test-options', null, options);\n  } catch (err) {\n    // EventListenerOptions are not supported\n  }\n  return optsSupported;\n}\n\n/**\n  * Resets the test for whether addEventListener supports options or not.\n  */\nexport function resetEvtListenerOptsSupportForTesting() {\n  optsSupported = undefined;\n}\n","/**\n * Copyright 2015 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {internalListenImplementation} from './event-helper-listen';\nimport {user} from './log';\n\n/** @const {string}  */\nconst LOAD_FAILURE_PREFIX = 'Failed to load:';\n\n/**\n * Returns a CustomEvent with a given type and detail; supports fallback for IE.\n * @param {!Window} win\n * @param {string} type\n * @param {!JsonObject|string|undefined|null} detail\n * @param {EventInit=} opt_eventInit\n * @return {!Event}\n */\nexport function createCustomEvent(win, type, detail, opt_eventInit) {\n  const eventInit = /** @type {!CustomEventInit} */ ({detail});\n  Object.assign(eventInit, opt_eventInit);\n  // win.CustomEvent is a function on Edge, Chrome, FF, Safari but\n  // is an object on IE 11.\n  if (typeof win.CustomEvent == 'function') {\n    return new win.CustomEvent(type, eventInit);\n  } else {\n    // Deprecated fallback for IE.\n    const e = win.document.createEvent('CustomEvent');\n    e.initCustomEvent(\n        type, !!eventInit.bubbles, !!eventInit.cancelable, detail);\n    return e;\n  }\n}\n\n/**\n * Listens for the specified event on the element.\n * @param {!EventTarget} element\n * @param {string} eventType\n * @param {function(!Event)} listener\n * @param {Object=} opt_evtListenerOpts\n * @return {!UnlistenDef}\n */\nexport function listen(element, eventType, listener, opt_evtListenerOpts) {\n  return internalListenImplementation(\n      element, eventType, listener, opt_evtListenerOpts);\n}\n\n/**\n * Returns the data property of an event with the correct type.\n * @param {!Event|{data: !JsonObject}} event\n * @return {?JsonObject|string|undefined}\n */\nexport function getData(event) {\n  return /** @type {?JsonObject|string|undefined} */ (event.data);\n}\n\n/**\n * Returns the detail property of an event with the correct type.\n * @param {!Event|{detail: !JsonObject}} event\n * @return {?JsonObject|string|undefined}\n */\nexport function getDetail(event) {\n  return /** @type {?JsonObject|string|undefined} */ (event.detail);\n}\n\n/**\n * Listens for the specified event on the element and removes the listener\n * as soon as event has been received.\n * @param {!EventTarget} element\n * @param {string} eventType\n * @param {function(!Event)} listener\n * @param {Object=} opt_evtListenerOpts\n * @return {!UnlistenDef}\n */\nexport function listenOnce(element, eventType, listener, opt_evtListenerOpts) {\n  let localListener = listener;\n  const unlisten = internalListenImplementation(element, eventType, event => {\n    try {\n      localListener(event);\n    } finally {\n      // Ensure listener is GC'd\n      localListener = null;\n      unlisten();\n    }\n  }, opt_evtListenerOpts);\n  return unlisten;\n}\n\n\n/**\n * Returns  a promise that will resolve as soon as the specified event has\n * fired on the element.\n * @param {!EventTarget} element\n * @param {string} eventType\n * @param {Object=} opt_evtListenerOpts\n * @param {function(!UnlistenDef)=} opt_cancel An optional function that, when\n *     provided, will be called with the unlistener. This gives the caller\n *     access to the unlistener, so it may be called manually when necessary.\n * @return {!Promise<!Event>}\n */\nexport function listenOncePromise(element, eventType, opt_evtListenerOpts,\n  opt_cancel) {\n  let unlisten;\n  const eventPromise = new Promise(resolve => {\n    unlisten = listenOnce(element, eventType, resolve, opt_evtListenerOpts);\n  });\n  eventPromise.then(unlisten, unlisten);\n  if (opt_cancel) {\n    opt_cancel(unlisten);\n  }\n  return eventPromise;\n}\n\n\n/**\n * Whether the specified element/window has been loaded already.\n * @param {!Element|!Window} eleOrWindow\n * @return {boolean}\n */\nexport function isLoaded(eleOrWindow) {\n  return !!(eleOrWindow.complete || eleOrWindow.readyState == 'complete'\n      // If the passed in thing is a Window, infer loaded state from\n      //\n      || (eleOrWindow.document\n          && eleOrWindow.document.readyState == 'complete'));\n}\n\n/**\n * Returns a promise that will resolve or fail based on the eleOrWindow's 'load'\n * and 'error' events. Optionally this method takes a timeout, which will reject\n * the promise if the resource has not loaded by then.\n * @param {T} eleOrWindow Supports both Elements and as a special case Windows.\n * @return {!Promise<T>}\n * @template T\n */\nexport function loadPromise(eleOrWindow) {\n  let unlistenLoad;\n  let unlistenError;\n  if (isLoaded(eleOrWindow)) {\n    return Promise.resolve(eleOrWindow);\n  }\n  const loadingPromise = new Promise((resolve, reject) => {\n    // Listen once since IE 5/6/7 fire the onload event continuously for\n    // animated GIFs.\n    const {tagName} = eleOrWindow;\n    if (tagName === 'AUDIO' || tagName === 'VIDEO') {\n      unlistenLoad = listenOnce(eleOrWindow, 'loadstart', resolve);\n    } else {\n      unlistenLoad = listenOnce(eleOrWindow, 'load', resolve);\n    }\n    // For elements, unlisten on error (don't for Windows).\n    if (tagName) {\n      unlistenError = listenOnce(eleOrWindow, 'error', reject);\n    }\n  });\n\n  return loadingPromise.then(() => {\n    if (unlistenError) {\n      unlistenError();\n    }\n    return eleOrWindow;\n  }, () => {\n    if (unlistenLoad) {\n      unlistenLoad();\n    }\n    failedToLoad(eleOrWindow);\n  });\n}\n\n/**\n * Emit error on load failure.\n * @param {!Element|!Window} eleOrWindow Supports both Elements and as a special\n *     case Windows.\n */\nfunction failedToLoad(eleOrWindow) {\n  // Report failed loads as user errors so that they automatically go\n  // into the \"document error\" bucket.\n  let target = eleOrWindow;\n  if (target && target.src) {\n    target = target.src;\n  }\n  throw user().createError(LOAD_FAILURE_PREFIX, target);\n}\n\n/**\n * Returns true if this error message is was created for a load error.\n * @param {string} message An error message\n * @return {boolean}\n */\nexport function isLoadErrorMessage(message) {\n  return message.indexOf(LOAD_FAILURE_PREFIX) != -1;\n}\n","/**\n * Copyright 2015 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Experiments system allows a developer to opt-in to test\n * features that are not yet fully tested.\n *\n * Experiments page: https://cdn.ampproject.org/experiments.html *\n */\n\nimport {getCookie, setCookie} from './cookies';\nimport {hasOwn} from './utils/object';\nimport {parseQueryString} from './url';\n\n/** @const {string} */\nconst COOKIE_NAME = 'AMP_EXP';\n\n/** @const {number} */\nconst COOKIE_MAX_AGE_DAYS = 180; // 6 month\n\n/** @const {time} */\nconst COOKIE_EXPIRATION_INTERVAL = COOKIE_MAX_AGE_DAYS * 24 * 60 * 60 * 1000;\n\n/** @const {string} */\nconst TOGGLES_WINDOW_PROPERTY = '__AMP__EXPERIMENT_TOGGLES';\n\n/**\n * @typedef {{\n *   isTrafficEligible: function(!Window):boolean,\n *   branches: !Array<string>\n * }}\n */\nexport let ExperimentInfo;\n\n/**\n * Whether we are in canary.\n * @param {!Window} win\n * @return {boolean}\n */\nexport function isCanary(win) {\n  return !!(win.AMP_CONFIG && win.AMP_CONFIG.canary);\n}\n\n/**\n * Returns binary type, e.g., canary, control, or production.\n * @param {!Window} win\n * @return {string}\n */\nexport function getBinaryType(win) {\n  return win.AMP_CONFIG && win.AMP_CONFIG.type ?\n    win.AMP_CONFIG.type : 'unknown';\n}\n\n/**\n * Whether the specified experiment is on or off.\n * @param {!Window} win\n * @param {string} experimentId\n * @return {boolean}\n */\nexport function isExperimentOn(win, experimentId) {\n  const toggles = experimentToggles(win);\n  return !!toggles[experimentId];\n}\n\n/**\n * Toggles the experiment on or off. Returns the actual value of the experiment\n * after toggling is done.\n * @param {!Window} win\n * @param {string} experimentId\n * @param {boolean=} opt_on\n * @param {boolean=} opt_transientExperiment  Whether to toggle the\n *     experiment state \"transiently\" (i.e., for this page load only) or\n *     durably (by saving the experiment IDs to the cookie after toggling).\n *     Default: false (save durably).\n * @return {boolean} New state for experimentId.\n */\nexport function toggleExperiment(win, experimentId, opt_on,\n  opt_transientExperiment) {\n  const currentlyOn = isExperimentOn(win, /*OK*/experimentId);\n  const on = !!(opt_on !== undefined ? opt_on : !currentlyOn);\n  if (on != currentlyOn) {\n    const toggles = experimentToggles(win);\n    toggles[experimentId] = on;\n\n    if (!opt_transientExperiment) {\n      const cookieToggles = getExperimentTogglesFromCookie(win);\n      cookieToggles[experimentId] = on;\n      saveExperimentTogglesToCookie(win, cookieToggles);\n    }\n  }\n  return on;\n}\n\n/**\n * Calculate whether the experiment is on or off based off of the\n * cookieFlag or the global config frequency given.\n * @param {!Window} win\n * @return {!Object<string, boolean>}\n */\nexport function experimentToggles(win) {\n  if (win[TOGGLES_WINDOW_PROPERTY]) {\n    return win[TOGGLES_WINDOW_PROPERTY];\n  }\n  win[TOGGLES_WINDOW_PROPERTY] = Object.create(null);\n  const toggles = win[TOGGLES_WINDOW_PROPERTY];\n\n  // Read the default config of this build.\n  if (win.AMP_CONFIG) {\n    for (const experimentId in win.AMP_CONFIG) {\n      const frequency = win.AMP_CONFIG[experimentId];\n      if (typeof frequency === 'number' && frequency >= 0 && frequency <= 1) {\n        toggles[experimentId] = Math.random() < frequency;\n      }\n    }\n  }\n  // Read document level override from meta tag.\n  if (win.AMP_CONFIG\n      && Array.isArray(win.AMP_CONFIG['allow-doc-opt-in'])\n      && win.AMP_CONFIG['allow-doc-opt-in'].length > 0) {\n    const allowed = win.AMP_CONFIG['allow-doc-opt-in'];\n    const meta =\n        win.document.head.querySelector('meta[name=\"amp-experiments-opt-in\"]');\n    if (meta) {\n      const optedInExperiments = meta.getAttribute('content').split(',');\n      for (let i = 0; i < optedInExperiments.length; i++) {\n        if (allowed.indexOf(optedInExperiments[i]) != -1) {\n          toggles[optedInExperiments[i]] = true;\n        }\n      }\n    }\n  }\n\n  Object.assign(toggles, getExperimentTogglesFromCookie(win));\n\n  if (win.AMP_CONFIG\n      && Array.isArray(win.AMP_CONFIG['allow-url-opt-in'])\n      && win.AMP_CONFIG['allow-url-opt-in'].length > 0) {\n    const allowed = win.AMP_CONFIG['allow-url-opt-in'];\n    const hash = win.location.originalHash || win.location.hash;\n    const params = parseQueryString(hash);\n    for (let i = 0; i < allowed.length; i++) {\n      const param = params[`e-${allowed[i]}`];\n      if (param == '1') {\n        toggles[allowed[i]] = true;\n      }\n      if (param == '0') {\n        toggles[allowed[i]] = false;\n      }\n    }\n  }\n  return toggles;\n}\n\n/**\n * Returns the cached experiments toggles, or null if they have not been\n * computed yet.\n * @param {!Window} win\n * @return {Object<string, boolean>}\n */\nexport function experimentTogglesOrNull(win) {\n  return win[TOGGLES_WINDOW_PROPERTY] || null;\n}\n\n/**\n * Returns a set of experiment IDs currently on.\n * @param {!Window} win\n * @return {!Object<string, boolean>}\n */\nfunction getExperimentTogglesFromCookie(win) {\n  const experimentCookie = getCookie(win, COOKIE_NAME);\n  const tokens = experimentCookie ? experimentCookie.split(/\\s*,\\s*/g) : [];\n\n  const toggles = Object.create(null);\n  for (let i = 0; i < tokens.length; i++) {\n    if (tokens[i].length == 0) {\n      continue;\n    }\n    if (tokens[i][0] == '-') {\n      toggles[tokens[i].substr(1)] = false;\n    } else {\n      toggles[tokens[i]] = true;\n    }\n  }\n\n  return toggles;\n}\n\n/**\n * Saves a set of experiment IDs currently on.\n * @param {!Window} win\n * @param {!Object<string, boolean>} toggles\n */\nfunction saveExperimentTogglesToCookie(win, toggles) {\n  const experimentIds = [];\n  for (const experiment in toggles) {\n    experimentIds.push((toggles[experiment] === false ? '-' : '') + experiment);\n  }\n\n  setCookie(win, COOKIE_NAME, experimentIds.join(','),\n      Date.now() + COOKIE_EXPIRATION_INTERVAL, {\n        // Set explicit domain, so the cookie gets send to sub domains.\n        domain: win.location.hostname,\n        allowOnProxyOrigin: true,\n      });\n}\n\n/**\n * See getExperimentTogglesFromCookie().\n * @param {!Window} win\n * @return {!Object<string, boolean>}\n * @visibleForTesting\n */\nexport function getExperimentToglesFromCookieForTesting(win) {\n  return getExperimentTogglesFromCookie(win);\n}\n\n/**\n * Resets the experimentsToggle cache for testing purposes.\n * @param {!Window} win\n * @visibleForTesting\n */\nexport function resetExperimentTogglesForTesting(win) {\n  setCookie(win, COOKIE_NAME, '', 0, {\n    domain: win.location.hostname,\n  });\n  win[TOGGLES_WINDOW_PROPERTY] = null;\n}\n\n/**\n * In some browser implementations of Math.random(), sequential calls of\n * Math.random() are correlated and can cause a bias.  In particular,\n * if the previous random() call was < 0.001 (as it will be if we select\n * into an experiment), the next value could be less than 0.5 more than\n * 50.7% of the time.  This provides an implementation that roots down into\n * the crypto API, when available, to produce less biased samples.\n *\n * @return {number} Pseudo-random floating-point value on the range [0, 1).\n */\nfunction slowButAccuratePrng() {\n  // TODO(tdrl): Implement.\n  return Math.random();\n}\n\n/**\n * Container for alternate random number generator implementations.  This\n * allows us to set an \"accurate\" PRNG for branch selection, but to mock it\n * out easily in tests.\n *\n * @visibleForTesting\n * @const {!{accuratePrng: function():number}}\n */\nexport const RANDOM_NUMBER_GENERATORS = {\n  accuratePrng: slowButAccuratePrng,\n};\n\n/**\n * Selects, uniformly at random, a single item from the array.\n * @param {!Array<string>} arr Object to select from.\n * @return {?string} Single item from arr or null if arr was empty.\n */\nfunction selectRandomItem(arr) {\n  const rn = RANDOM_NUMBER_GENERATORS.accuratePrng();\n  return arr[Math.floor(rn * arr.length)] || null;\n}\n\n/**\n * Selects which page-level experiment branches are enabled. If a given\n * experiment name is already set (including to the null / no branches selected\n * state), this won't alter its state.\n *\n * Check whether a given experiment is set using isExperimentOn(win,\n * experimentName) and, if it is on, look for which branch is selected in\n * win.experimentBranches[experimentName].\n *\n * @param {!Window} win Window context on which to save experiment\n *     selection state.\n * @param {!Object<string, !ExperimentInfo>} experiments  Set of experiments to\n *     configure for this page load.\n * @return {!Object<string, string>} Map of experiment names to selected\n *     branches.\n */\nexport function randomlySelectUnsetExperiments(win, experiments) {\n  win.experimentBranches = win.experimentBranches || {};\n  const selectedExperiments = {};\n  for (const experimentName in experiments) {\n    // Skip experimentName if it is not a key of experiments object or if it\n    // has already been populated by some other property.\n    if (!hasOwn(experiments, experimentName)) {\n      continue;\n    }\n    if (hasOwn(win.experimentBranches, experimentName)) {\n      selectedExperiments[experimentName] =\n          win.experimentBranches[experimentName];\n      continue;\n    }\n\n    if (!experiments[experimentName].isTrafficEligible ||\n        !experiments[experimentName].isTrafficEligible(win)) {\n      win.experimentBranches[experimentName] = null;\n      continue;\n    }\n\n    // If we're in the experiment, but we haven't already forced a specific\n    // experiment branch (e.g., via a test setup), then randomize the branch\n    // choice.\n    if (!win.experimentBranches[experimentName] &&\n      isExperimentOn(win, /*OK*/experimentName)) {\n      const {branches} = experiments[experimentName];\n      win.experimentBranches[experimentName] = selectRandomItem(branches);\n      selectedExperiments[experimentName] =\n          win.experimentBranches[experimentName];\n    }\n  }\n  return selectedExperiments;\n}\n\n/**\n * Returns the experiment branch enabled for the given experiment ID.\n * For example, 'control' or 'experiment'.\n *\n * @param {!Window} win Window context to check for experiment state.\n * @param {string} experimentName Name of the experiment to check.\n * @return {?string} Active experiment branch ID for experimentName (possibly\n *     null if experimentName has been tested but no branch was enabled).\n */\nexport function getExperimentBranch(win, experimentName) {\n  return win.experimentBranches ? win.experimentBranches[experimentName] : null;\n}\n\n/**\n * Force enable (or disable) a specific branch of a given experiment name.\n * Disables the experiment name altogether if branchId is falseish.\n *\n * @param {!Window} win Window context to check for experiment state.\n * @param {string} experimentName Name of the experiment to check.\n * @param {?string} branchId ID of branch to force or null to disable\n *     altogether.\n * @visibleForTesting\n */\nexport function forceExperimentBranch(win, experimentName, branchId) {\n  win.experimentBranches = win.experimentBranches || {};\n  toggleExperiment(win, experimentName, !!branchId, true);\n  win.experimentBranches[experimentName] = branchId;\n}\n","/**\n * Copyright 2016 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {CommonSignals} from './common-signals';\nimport {Observable} from './observable';\nimport {Services} from './services';\nimport {Signals} from './utils/signals';\nimport {closestBySelector, escapeHtml} from './dom';\nimport {dev, rethrowAsync, user} from './log';\nimport {disposeServicesForEmbed, getTopWindow} from './service';\nimport {isDocumentReady} from './document-ready';\nimport {layoutRectLtwh, moveLayoutRect} from './layout-rect';\nimport {loadPromise} from './event-helper';\nimport {\n  px,\n  resetStyles,\n  setImportantStyles,\n  setStyle,\n  setStyles,\n} from './style';\nimport {toWin} from './types';\n\n\n/** @const {string} */\nconst EMBED_PROP = '__AMP_EMBED__';\n\n/** @const {!Array<string>} */\nconst EXCLUDE_INI_LOAD =\n    ['AMP-AD', 'AMP-ANALYTICS', 'AMP-PIXEL', 'AMP-AD-EXIT'];\n\n\n/**\n * Parameters used to create the new \"friendly iframe\" embed.\n * - html: The complete content of an AMP embed, which is itself an AMP\n *   document. Can include whatever is normally allowed in an AMP document,\n *   except for AMP `<script>` declarations. Those should be passed as an\n *   array of `extensionIds`.\n * - extensionsIds: An optional array of AMP extension IDs used in this embed.\n * - fonts: An optional array of fonts used in this embed.\n *\n * @typedef {{\n *   host: (?AmpElement|undefined),\n *   url: string,\n *   html: string,\n *   extensionIds: (?Array<string>|undefined),\n *   fonts: (?Array<string>|undefined),\n * }}\n */\nexport let FriendlyIframeSpec;\n\n\n/**\n * @type {boolean|undefined}\n * @visibleForTesting\n */\nlet srcdocSupported;\n\n/**\n * @param {boolean|undefined} val\n * @visibleForTesting\n */\nexport function setSrcdocSupportedForTesting(val) {\n  srcdocSupported = val;\n}\n\n/**\n * Returns `true` if the Friendly Iframes are supported.\n * @return {boolean}\n */\nfunction isSrcdocSupported() {\n  if (srcdocSupported === undefined) {\n    srcdocSupported = 'srcdoc' in HTMLIFrameElement.prototype;\n  }\n  return srcdocSupported;\n}\n\n\n/**\n * Sets whether the embed is currently visible. The interpretation of visibility\n * is up to the embed parent. However, most of typical cases would rely on\n * whether the embed is currently in the viewport.\n * @param {!FriendlyIframeEmbed} embed\n * @param {boolean} visible\n * TODO(dvoytenko): Re-evaluate and probably drop once layers are ready.\n */\nexport function setFriendlyIframeEmbedVisible(embed, visible) {\n  embed.setVisible_(visible);\n}\n\n\n/**\n * Returns the embed created using `installFriendlyIframeEmbed` or `null`.\n * Caution: This will only return the FIE after the iframe has 'loaded'. If you\n * are checking before this signal you may be in a race condition that returns\n * null.\n * @param {!HTMLIFrameElement} iframe\n * @return {?FriendlyIframeEmbed}\n */\nexport function getFriendlyIframeEmbedOptional(iframe) {\n  return /** @type {?FriendlyIframeEmbed} */ (iframe[EMBED_PROP]);\n}\n\n\n/**\n * Creates the requested \"friendly iframe\" embed. Returns the promise that\n * will be resolved as soon as the embed is available. The actual\n * initialization of the embed will start as soon as the `iframe` is added\n * to the DOM.\n * @param {!HTMLIFrameElement} iframe\n * @param {!Element} container\n * @param {!FriendlyIframeSpec} spec\n * @param {function(!Window)=} opt_preinstallCallback\n * @return {!Promise<!FriendlyIframeEmbed>}\n */\nexport function installFriendlyIframeEmbed(iframe, container, spec,\n  opt_preinstallCallback) {\n  /** @const {!Window} */\n  const win = getTopWindow(toWin(iframe.ownerDocument.defaultView));\n  /** @const {!./service/extensions-impl.Extensions} */\n  const extensions = Services.extensionsFor(win);\n\n  setStyle(iframe, 'visibility', 'hidden');\n  iframe.setAttribute('referrerpolicy', 'unsafe-url');\n\n  // Pre-load extensions.\n  if (spec.extensionIds) {\n    spec.extensionIds.forEach(\n        extensionId => extensions.preloadExtension(extensionId));\n  }\n\n  const html = mergeHtml(spec);\n\n  // Receive the signal when iframe is ready: it's document is formed.\n  iframe.onload = () => {\n    // Chrome does not reflect the iframe readystate.\n    iframe.readyState = 'complete';\n  };\n  const registerViolationListener = () => {\n    iframe.contentWindow.addEventListener('securitypolicyviolation',\n        violationEvent => {\n          dev().warn('FIE', 'security policy violation', violationEvent);\n        });\n  };\n  let loadedPromise;\n  if (isSrcdocSupported()) {\n    iframe.srcdoc = html;\n    loadedPromise = loadPromise(iframe);\n    container.appendChild(iframe);\n    registerViolationListener();\n  } else {\n    iframe.src = 'about:blank';\n    container.appendChild(iframe);\n    const childDoc = iframe.contentWindow.document;\n    childDoc.open();\n    registerViolationListener();\n    childDoc.write(html);\n    // With document.write, `iframe.onload` arrives almost immediately, thus\n    // we need to wait for child's `window.onload`.\n    loadedPromise = loadPromise(iframe.contentWindow);\n    childDoc.close();\n  }\n\n  // Wait for document ready signal.\n  // This is complicated due to crbug.com/649201 on Chrome and a similar issue\n  // on Safari where newly created document's `readyState` immediately equals\n  // `complete`, even though the document itself is not yet available. There's\n  // no other reliable signal for `readyState` in a child window and thus\n  // we have to fallback to polling.\n  let readyPromise;\n  if (isIframeReady(iframe)) {\n    readyPromise = Promise.resolve();\n  } else {\n    readyPromise = new Promise(resolve => {\n      /** @const {number} */\n      const interval = win.setInterval(() => {\n        if (isIframeReady(iframe)) {\n          resolve();\n          win.clearInterval(interval);\n        }\n      }, /* milliseconds */ 5);\n\n      // For safety, make sure we definitely stop polling when child doc is\n      // loaded.\n      loadedPromise.catch(error => {\n        rethrowAsync(error);\n      }).then(() => {\n        resolve();\n        win.clearInterval(interval);\n      });\n    });\n  }\n\n  return readyPromise.then(() => {\n    const embed = new FriendlyIframeEmbed(iframe, spec, loadedPromise);\n    iframe[EMBED_PROP] = embed;\n\n    const childWin = /** @type {!Window} */ (iframe.contentWindow);\n    // Add extensions.\n    extensions.installExtensionsInChildWindow(\n        childWin, spec.extensionIds || [], opt_preinstallCallback);\n    // Ready to be shown.\n    embed.startRender_();\n    return embed;\n  });\n}\n\n\n/**\n * Returns `true` when iframe is ready.\n * @param {!HTMLIFrameElement} iframe\n * @return {boolean}\n */\nfunction isIframeReady(iframe) {\n  // This is complicated due to crbug.com/649201 on Chrome and a similar issue\n  // on Safari where newly created document's `readyState` immediately equals\n  // `complete`, even though the document itself is not yet available. There's\n  // no other reliable signal for `readyState` in a child window and thus\n  // the best way to check is to see the contents of the body.\n  const childDoc = iframe.contentWindow && iframe.contentWindow.document;\n  return !!(childDoc &&\n      isDocumentReady(childDoc) &&\n      childDoc.body &&\n      childDoc.body.firstChild);\n}\n\n\n/**\n * Merges base and fonts into html document.\n * @param {!FriendlyIframeSpec} spec\n */\nfunction mergeHtml(spec) {\n  const originalHtml = spec.html;\n  const originalHtmlUp = originalHtml.toUpperCase();\n\n  // Find the insertion point.\n  let ip = originalHtmlUp.indexOf('<HEAD');\n  if (ip != -1) {\n    ip = originalHtmlUp.indexOf('>', ip + 1) + 1;\n  }\n  if (ip == -1) {\n    ip = originalHtmlUp.indexOf('<BODY');\n  }\n  if (ip == -1) {\n    ip = originalHtmlUp.indexOf('<HTML');\n    if (ip != -1) {\n      ip = originalHtmlUp.indexOf('>', ip + 1) + 1;\n    }\n  }\n\n  const result = [];\n\n  // Preambule.\n  if (ip > 0) {\n    result.push(originalHtml.substring(0, ip));\n  }\n\n  // Add <BASE> tag.\n  result.push(`<base href=\"${escapeHtml(spec.url)}\">`);\n\n  // Load fonts.\n  if (spec.fonts) {\n    spec.fonts.forEach(font => {\n      result.push(\n          `<link href=\"${escapeHtml(font)}\" rel=\"stylesheet\" type=\"text/css\">`);\n    });\n  }\n\n  // Load CSP\n  result.push('<meta http-equiv=Content-Security-Policy ' +\n      'content=\"script-src \\'none\\';object-src \\'none\\';child-src \\'none\\'\">');\n\n  // Postambule.\n  if (ip > 0) {\n    result.push(originalHtml.substring(ip));\n  } else {\n    result.push(originalHtml);\n  }\n\n  return result.join('');\n}\n\n\n/**\n * Exposes `mergeHtml` for testing purposes.\n * @param {!FriendlyIframeSpec} spec\n * @visibleForTesting\n */\nexport function mergeHtmlForTesting(spec) {\n  return mergeHtml(spec);\n}\n\n\n/**\n * A \"friendly iframe\" embed. This is the iframe that's fully accessible to\n * the AMP runtime. It's similar to Shadow DOM in many respects, but it also\n * provides iframe/viewport measurements and enables the use of `vh`, `vw` and\n * `@media` CSS.\n *\n * The friendly iframe is managed by the top-level AMP Runtime. When it's\n * destroyed, the `destroy` method must be called to free up the shared\n * resources.\n */\nexport class FriendlyIframeEmbed {\n\n  /**\n   * @param {!HTMLIFrameElement} iframe\n   * @param {!FriendlyIframeSpec} spec\n   * @param {!Promise} loadedPromise\n   */\n  constructor(iframe, spec, loadedPromise) {\n    /** @const {!HTMLIFrameElement} */\n    this.iframe = iframe;\n\n    /** @const {!Window} */\n    this.win = /** @type{!Window} */(iframe.contentWindow);\n\n    /** @const {!FriendlyIframeSpec} */\n    this.spec = spec;\n\n    /** @const {?AmpElement} */\n    this.host = spec.host || null;\n\n    /** @const @private {time} */\n    this.startTime_ = Date.now();\n\n    /**\n     * Starts out as invisible. The interpretation of this flag is up to\n     * the emded parent.\n     * @private {boolean}\n     */\n    this.visible_ = false;\n\n    /** @private {!Observable<boolean>} */\n    this.visibilityObservable_ = new Observable();\n\n    /** @private @const */\n    this.signals_ = this.host ? this.host.signals() : new Signals();\n\n    /** @private @const {!Promise} */\n    this.winLoadedPromise_ = Promise.all([loadedPromise, this.whenReady()]);\n  }\n\n  /**\n   * Ensures that all resources from this iframe have been released.\n   */\n  destroy() {\n    Services.resourcesForDoc(this.iframe).removeForChildWindow(this.win);\n    disposeServicesForEmbed(this.win);\n  }\n\n  /**\n   * @return {time}\n   */\n  getStartTime() {\n    return this.startTime_;\n  }\n\n  /**\n   * Returns the base URL for the embedded document.\n   * @return {string}\n   */\n  getUrl() {\n    return this.spec.url;\n  }\n\n  /** @return {!Signals} */\n  signals() {\n    return this.signals_;\n  }\n\n  /**\n   * Returns a promise that will resolve when the embed document is ready.\n   * Notice that this signal coincides with the embed's `render-start`.\n   * @return {!Promise}\n   */\n  whenReady() {\n    return this.signals_.whenSignal(CommonSignals.RENDER_START);\n  }\n\n  /**\n   * Returns a promise that will resolve when the child window's `onload` event\n   * has been emitted. In friendly iframes this typically only includes font\n   * loading.\n   * @return {!Promise}\n   */\n  whenWindowLoaded() {\n    return this.winLoadedPromise_;\n  }\n\n  /**\n   * Returns a promise that will resolve when the initial load  of the embed's\n   * content has been completed.\n   * @return {!Promise}\n   */\n  whenIniLoaded() {\n    return this.signals_.whenSignal(CommonSignals.INI_LOAD);\n  }\n\n  /**\n   * @private\n   * @restricted\n   */\n  startRender_() {\n    if (this.host) {\n      this.host.renderStarted();\n    } else {\n      this.signals_.signal(CommonSignals.RENDER_START);\n    }\n    setStyle(this.iframe, 'visibility', '');\n    if (this.win.document && this.win.document.body) {\n      this.win.document.documentElement.classList.add('i-amphtml-fie');\n      setStyles(dev().assertElement(this.win.document.body), {\n        opacity: 1,\n        visibility: 'visible',\n        animation: 'none',\n      });\n    }\n\n    // Initial load signal signal.\n    let rect;\n    if (this.host) {\n      rect = this.host.getLayoutBox();\n    } else {\n      rect = layoutRectLtwh(\n          0, 0,\n          this.win./*OK*/innerWidth,\n          this.win./*OK*/innerHeight);\n    }\n    Promise.all([\n      this.whenReady(),\n      whenContentIniLoad(this.iframe, this.win, rect),\n    ]).then(() => {\n      this.signals_.signal(CommonSignals.INI_LOAD);\n    });\n  }\n\n  /**\n   * Whether the embed is currently visible. The interpretation of visibility\n   * is up to the embed parent. However, most of typical cases would rely on\n   * whether the embed is currently in the viewport.\n   * @return {boolean}\n   * TODO(dvoytenko): Re-evaluate and probably drop once layers are ready.\n   */\n  isVisible() {\n    return this.visible_;\n  }\n\n  /**\n   * See `isVisible` for more info.\n   * @param {function(boolean)} handler\n   * @return {!UnlistenDef}\n   */\n  onVisibilityChanged(handler) {\n    return this.visibilityObservable_.add(handler);\n  }\n\n  /**\n   * @param {boolean} visible\n   * @private\n   * @restricted\n   */\n  setVisible_(visible) {\n    if (this.visible_ != visible) {\n      this.visible_ = visible;\n      this.visibilityObservable_.fire(this.visible_);\n    }\n  }\n\n  /**\n   * @return {!HTMLBodyElement}\n   * @visibleForTesting\n   */\n  getBodyElement() {\n    return /** @type {!HTMLBodyElement} */ (\n      (this.iframe.contentDocument || this.iframe.contentWindow.document)\n          .body);\n  }\n\n  /**\n   * @return {!./service/resources-impl.Resources}\n   * @private\n   */\n  getResources_() {\n    return Services.resourcesForDoc(this.iframe);\n  }\n\n  /**\n   * Runs a measure/mutate cycle ensuring that the iframe change is propagated\n   * to the resource manager.\n   * @param {{measure: (function()|undefined), mutate: function()}} task\n   * @return {!Promise}\n   * @private\n   */\n  measureMutate_(task) {\n    return this.getResources_().measureMutateElement(this.iframe,\n        task.measure || null, task.mutate);\n  }\n\n  /**\n   * @return {!Promise}\n   */\n  enterFullOverlayMode() {\n    const ampAdParent = dev().assertElement(this.iframe.parentNode);\n\n    // Security assertion. Otherwise any 3p frame could request lighbox mode.\n    user().assert(ampAdParent.tagName.toLowerCase() == 'amp-ad',\n        'Only <amp-ad> is allowed to enter lightbox mode.');\n\n    const bodyStyle = {\n      'background': 'transparent',\n      'position': 'absolute',\n      'bottom': 'auto',\n      'right': 'auto',\n\n      // Set for replacing with vsync values.\n      'top': '',\n      'left': '',\n      'width': '',\n      'height': '',\n    };\n\n    const iframeStyle = {\n      'position': 'fixed',\n      'left': 0,\n      'right': 0,\n      'bottom': 0,\n      'width': '100vw',\n      'top': 0,\n      'height': '100vh',\n    };\n\n    return this.measureMutate_({\n      measure: () => {\n        const rect = this.host ?\n          this.host.getLayoutBox() :\n          this.iframe./*OK*/getBoundingClientRect();\n\n        // Offset by scroll top as iframe will be position: fixed.\n        const dy = -Services.viewportForDoc(this.iframe).getScrollTop();\n        const {top, left, width, height} = moveLayoutRect(rect, /* dx */ 0, dy);\n\n        // Offset body by header height to prevent visual jump.\n        Object.assign(bodyStyle, {\n          'top': px(top),\n          'left': px(left),\n          'width': px(width),\n          'height': px(height),\n        });\n      },\n      mutate: () => {\n        // !important to prevent abuse e.g. box @ ltwh = 0, 0, 0, 0\n        setImportantStyles(this.iframe, iframeStyle);\n\n        // We need to override runtime-level !important rules\n        setImportantStyles(this.getBodyElement(), bodyStyle);\n      },\n    });\n  }\n\n  /**\n   * @return {!Promise}\n   */\n  leaveFullOverlayMode() {\n    return this.measureMutate_({\n      mutate: () => {\n        resetStyles(this.iframe, [\n          'position',\n          'left',\n          'right',\n          'top',\n          'bottom',\n          'width',\n          'height',\n        ]);\n\n        // we're not resetting background here as we need to set it to\n        // transparent permanently.\n        resetStyles(this.getBodyElement(), [\n          'position',\n          'top',\n          'left',\n          'width',\n          'height',\n          'bottom',\n          'right',\n        ]);\n      },\n    });\n  }\n}\n\n/**\n * Returns the promise that will be resolved when all content elements\n * have been loaded in the initially visible set.\n * @param {!Element|!./service/ampdoc-impl.AmpDoc} elementOrAmpDoc\n * @param {!Window} hostWin\n * @param {!./layout-rect.LayoutRectDef} rect\n * @return {!Promise}\n */\nexport function whenContentIniLoad(elementOrAmpDoc, hostWin, rect) {\n  return Services.resourcesForDoc(elementOrAmpDoc)\n      .getResourcesInRect(hostWin, rect)\n      .then(resources => {\n        const promises = [];\n        resources.forEach(r => {\n          if (!EXCLUDE_INI_LOAD.includes(r.element.tagName)) {\n            promises.push(r.loadedOnce());\n          }\n        });\n        return Promise.all(promises);\n      });\n}\n\n/**\n * @param {!Element} element\n * @return {boolean}\n */\nexport function isInFie(element) {\n  return !!closestBySelector(element, '.i-amphtml-fie');\n}\n","/**\n * Copyright 2015 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {addAttributesToElement, closestBySelector} from './dom';\nimport {deserializeMessage, isAmpMessage} from './3p-frame-messaging';\nimport {dev} from './log';\nimport {dict} from './utils/object';\nimport {filterSplice} from './utils/array';\nimport {getData} from './event-helper';\nimport {parseUrlDeprecated} from './url';\nimport {setStyle} from './style';\nimport {tryParseJson} from './json';\n\n/**\n * Sentinel used to force unlistening after a iframe is detached.\n * @type {string}\n */\nconst UNLISTEN_SENTINEL = 'unlisten';\n\n/**\n * @typedef {{\n *   frame: !Element,\n *   events: !Object<string, !Array<function(!JsonObject)>>\n * }}\n */\nlet WindowEventsDef;\n\n/**\n * Returns a mapping from a URL's origin to an array of windows and their\n * listenFor listeners.\n * @param {?Window} parentWin the window that created the iframe\n * @param {boolean=} opt_create create the mapping if it does not exist\n * @return {?Object<string, !Array<!WindowEventsDef>>}\n */\nfunction getListenFors(parentWin, opt_create) {\n  let {listeningFors} = parentWin;\n\n  if (!listeningFors && opt_create) {\n    listeningFors = parentWin.listeningFors = Object.create(null);\n  }\n  return listeningFors || null;\n}\n\n/**\n * Returns an array of WindowEventsDef that have had any listenFor listeners\n * registered for this sentinel.\n * @param {?Window} parentWin the window that created the iframe\n * @param {string} sentinel the sentinel of the message\n * @param {boolean=} opt_create create the array if it does not exist\n * @return {?Array<!WindowEventsDef>}\n */\nfunction getListenForSentinel(parentWin, sentinel, opt_create) {\n  const listeningFors = getListenFors(parentWin, opt_create);\n  if (!listeningFors) {\n    return listeningFors;\n  }\n\n  let listenSentinel = listeningFors[sentinel];\n  if (!listenSentinel && opt_create) {\n    listenSentinel = listeningFors[sentinel] = [];\n  }\n  return listenSentinel || null;\n}\n\n/**\n * Returns an mapping of event names to listenFor listeners.\n * @param {?Window} parentWin the window that created the iframe\n * @param {!Element} iframe the iframe element who's context will trigger the\n *     event\n * @param {boolean=} opt_is3P set to true if the iframe is 3p.\n * @return {?Object<string, !Array<function(!JsonObject, !Window, string)>>}\n */\nfunction getOrCreateListenForEvents(parentWin, iframe, opt_is3P) {\n  const {origin} = parseUrlDeprecated(iframe.src);\n  const sentinel = getSentinel_(iframe, opt_is3P);\n  const listenSentinel = getListenForSentinel(parentWin, sentinel, true);\n\n  let windowEvents;\n  for (let i = 0; i < listenSentinel.length; i++) {\n    const we = listenSentinel[i];\n    if (we.frame === iframe) {\n      windowEvents = we;\n      break;\n    }\n  }\n\n  if (!windowEvents) {\n    windowEvents = {\n      frame: iframe,\n      origin,\n      events: Object.create(null),\n    };\n    listenSentinel.push(windowEvents);\n  }\n\n  return windowEvents.events;\n}\n\n/**\n * Returns an mapping of event names to listenFor listeners.\n * @param {?Window} parentWin the window that created the iframe\n * @param {string} sentinel the sentinel of the message\n * @param {string} origin the source window's origin\n * @param {?Window} triggerWin the window that triggered the event\n * @return {?Object<string, !Array<function(!JsonObject, !Window, string)>>}\n */\nfunction getListenForEvents(parentWin, sentinel, origin, triggerWin) {\n  const listenSentinel = getListenForSentinel(parentWin, sentinel);\n\n  if (!listenSentinel) {\n    return listenSentinel;\n  }\n\n  // Find the entry for the frame.\n  // TODO(@nekodo): Add a WeakMap<Window, WindowEventsDef> cache to\n  //     speed up this process.\n  let windowEvents;\n  for (let i = 0; i < listenSentinel.length; i++) {\n    const we = listenSentinel[i];\n    const {contentWindow} = we.frame;\n    if (!contentWindow) {\n      setTimeout(dropListenSentinel, 0, listenSentinel);\n    } else if (sentinel === 'amp') {\n      // A non-3P code path, origin must match.\n      if (we.origin === origin && contentWindow == triggerWin) {\n        windowEvents = we;\n        break;\n      }\n    } else if (triggerWin == contentWindow ||\n        isDescendantWindow(contentWindow, triggerWin)) {\n      // 3p code path, we may accept messages from nested frames.\n      windowEvents = we;\n      break;\n    }\n  }\n\n  return windowEvents ? windowEvents.events : null;\n}\n\n/**\n * Checks whether one window is a descendant of another by climbing\n * the parent chain.\n * @param {?Window} ancestor potential ancestor window\n * @param {?Window} descendant potential descendant window\n * @return {boolean}\n */\nfunction isDescendantWindow(ancestor, descendant) {\n  for (let win = descendant; win && win != win.parent; win = win.parent) {\n    if (win == ancestor) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/**\n * Removes any listenFors registed on listenSentinel that do not have\n * a contentWindow (the frame was removed from the DOM tree).\n * @param {!Array<!WindowEventsDef>} listenSentinel\n */\nfunction dropListenSentinel(listenSentinel) {\n  const noopData = dict({'sentinel': UNLISTEN_SENTINEL});\n\n  for (let i = listenSentinel.length - 1; i >= 0; i--) {\n    const windowEvents = listenSentinel[i];\n\n    if (!windowEvents.frame.contentWindow) {\n      listenSentinel.splice(i, 1);\n\n      const {events} = windowEvents;\n      for (const name in events) {\n        // Splice here, so that each unlisten does not shift the array\n        events[name].splice(0, Infinity).forEach(event => {\n          event(noopData);\n        });\n      }\n    }\n  }\n}\n\n/**\n * Registers the global listenFor event listener if it has yet to be.\n * @param {?Window} parentWin\n */\nfunction registerGlobalListenerIfNeeded(parentWin) {\n  if (parentWin.listeningFors) {\n    return;\n  }\n  const listenForListener = function(event) {\n    if (!getData(event)) {\n      return;\n    }\n    const data = parseIfNeeded(getData(event));\n    if (!data || !data['sentinel']) {\n      return;\n    }\n\n    const listenForEvents = getListenForEvents(\n        parentWin,\n        data['sentinel'],\n        event.origin,\n        event.source\n    );\n    if (!listenForEvents) {\n      return;\n    }\n\n    let listeners = listenForEvents[data['type']];\n    if (!listeners) {\n      return;\n    }\n\n    // We slice to avoid issues with adding another listener or unlistening\n    // during iteration. We could move to a Doubly Linked List with\n    // backtracking, but that's overly complicated.\n    listeners = listeners.slice();\n    for (let i = 0; i < listeners.length; i++) {\n      const listener = listeners[i];\n      listener(data, event.source, event.origin);\n    }\n  };\n\n  parentWin.addEventListener('message', listenForListener);\n}\n\n/**\n * Allows listening for message from the iframe. Returns an unlisten\n * function to remove the listener.\n *\n * @param {?Element} iframe\n * @param {string} typeOfMessage\n * @param {?function(!JsonObject, !Window, string)} callback Called when a\n *     message of this type arrives for this iframe.\n * @param {boolean=} opt_is3P set to true if the iframe is 3p.\n * @param {boolean=} opt_includingNestedWindows set to true if a messages from\n *     nested frames should also be accepted.\n * @return {!UnlistenDef}\n */\nexport function listenFor(\n  iframe, typeOfMessage, callback, opt_is3P, opt_includingNestedWindows) {\n  dev().assert(iframe.src, 'only iframes with src supported');\n  dev().assert(!iframe.parentNode, 'cannot register events on an attached ' +\n      'iframe. It will cause hair-pulling bugs like #2942');\n  dev().assert(callback);\n  const parentWin = iframe.ownerDocument.defaultView;\n\n  registerGlobalListenerIfNeeded(parentWin);\n\n  const listenForEvents = getOrCreateListenForEvents(\n      parentWin,\n      iframe,\n      opt_is3P\n  );\n\n\n  let events = listenForEvents[typeOfMessage] ||\n    (listenForEvents[typeOfMessage] = []);\n\n  let unlisten;\n  let listener = function(data, source, origin) {\n    // Exclude nested frames if necessary.\n    // Note that the source was already verified to be either the contentWindow\n    // of the iframe itself or a descendant window within it.\n    if (!opt_includingNestedWindows && source != iframe.contentWindow) {\n      return;\n    }\n\n    if (data.sentinel == UNLISTEN_SENTINEL) {\n      unlisten();\n      return;\n    }\n    callback(data, source, origin);\n  };\n\n  events.push(listener);\n\n  return unlisten = function() {\n    if (listener) {\n      const index = events.indexOf(listener);\n      if (index > -1) {\n        events.splice(index, 1);\n      }\n      // Make sure references to the unlisten function do not keep\n      // alive too much.\n      listener = null;\n      events = null;\n      callback = null;\n    }\n  };\n}\n\n/**\n * Returns a promise that resolves when one of given messages has been observed\n * for the first time. And remove listener for all other messages.\n * @param {!Element} iframe\n * @param {string|!Array<string>} typeOfMessages\n * @param {boolean=} opt_is3P\n * @return {!Promise<!{data: !JsonObject, source: !Window, origin: string}>}\n */\nexport function listenForOncePromise(iframe, typeOfMessages, opt_is3P) {\n  const unlistenList = [];\n  if (typeof typeOfMessages == 'string') {\n    typeOfMessages = [typeOfMessages];\n  }\n  return new Promise(resolve => {\n    for (let i = 0; i < typeOfMessages.length; i++) {\n      const message = typeOfMessages[i];\n      const unlisten = listenFor(iframe, message, (data, source, origin) => {\n        for (let i = 0; i < unlistenList.length; i++) {\n          unlistenList[i]();\n        }\n        resolve({data, source, origin});\n      }, opt_is3P);\n      unlistenList.push(unlisten);\n    }\n  });\n}\n\n/**\n * Posts a message to the iframe.\n * @param {!Element} iframe The iframe.\n * @param {string} type Type of the message.\n * @param {!JsonObject} object Message payload.\n * @param {string} targetOrigin origin of the target.\n * @param {boolean=} opt_is3P set to true if the iframe is 3p.\n */\nexport function postMessage(iframe, type, object, targetOrigin, opt_is3P) {\n  postMessageToWindows(iframe,\n      [{win: iframe.contentWindow, origin: targetOrigin}], type, object,\n      opt_is3P);\n}\n\n/**\n * Posts an identical message to multiple target windows with the same\n * sentinel.\n * The message is serialized only once.\n * @param {!Element} iframe The iframe.\n * @param {!Array<{win: !Window, origin: string}>} targets to send the message\n *     to, pairs of window and its origin.\n * @param {string} type Type of the message.\n * @param {!JsonObject} object Message payload.\n * @param {boolean=} opt_is3P set to true if the iframe is 3p.\n */\nexport function postMessageToWindows(iframe, targets, type, object, opt_is3P) {\n  if (!iframe.contentWindow) {\n    return;\n  }\n  object['type'] = type;\n  object['sentinel'] = getSentinel_(iframe, opt_is3P);\n  let payload = object;\n  if (opt_is3P) {\n    // Serialize ourselves because that is much faster in Chrome.\n    payload = 'amp-' + JSON.stringify(object);\n  }\n  for (let i = 0; i < targets.length; i++) {\n    const target = targets[i];\n    target.win./*OK*/postMessage(payload, target.origin);\n  }\n}\n\n/**\n * Gets the sentinel string.\n * @param {!Element} iframe The iframe.\n * @param {boolean=} opt_is3P set to true if the iframe is 3p.\n * @return {string} Sentinel string.\n * @private\n */\nfunction getSentinel_(iframe, opt_is3P) {\n  return opt_is3P ? iframe.getAttribute('data-amp-3p-sentinel') : 'amp';\n}\n\n/**\n * JSON parses event.data if it needs to be\n * @param {*} data\n * @return {?JsonObject} object message\n * @private\n * @visibleForTesting\n */\nexport function parseIfNeeded(data) {\n  if (typeof data == 'string') {\n    if (data.charAt(0) == '{') {\n      data = tryParseJson(data, e => {\n        dev().warn('IFRAME-HELPER',\n            'Postmessage could not be parsed. ' +\n            'Is it in a valid JSON format?', e);\n      }) || null;\n    } else if (isAmpMessage(data)) {\n      data = deserializeMessage(data);\n    } else {\n      data = null;\n    }\n  }\n  return /** @type {?JsonObject} */ (data);\n}\n\n\n\n/**\n * Manages a postMessage API for an iframe with a subscription message and\n * a way to broadcast messages to all subscribed windows, which\n * in turn must all be descendants of the contentWindow of the iframe.\n */\nexport class SubscriptionApi {\n  /**\n   * @param {!Element} iframe The iframe.\n   * @param {string} type Type of the subscription message.\n   * @param {boolean} is3p set to true if the iframe is 3p.\n   * @param {function(!JsonObject, !Window, string)} requestCallback Callback\n   *     invoked whenever a new window subscribes.\n   */\n  constructor(iframe, type, is3p, requestCallback) {\n    /** @private @const {!Element} */\n    this.iframe_ = iframe;\n    /** @private @const {boolean} */\n    this.is3p_ = is3p;\n    /** @private @const {!Array<{win: !Window, origin: string}>} */\n    this.clientWindows_ = [];\n\n    /** @private @const {!UnlistenDef} */\n    this.unlisten_ = listenFor(this.iframe_, type, (data, source, origin) => {\n      // This message might be from any window within the iframe, we need\n      // to keep track of which windows want to be sent updates.\n      if (!this.clientWindows_.some(entry => entry.win == source)) {\n        this.clientWindows_.push({win: source, origin});\n      }\n      requestCallback(data, source, origin);\n    }, this.is3p_,\n        // For 3P frames we also allow nested frames within them to subscribe..\n    this.is3p_ /* opt_includingNestedWindows */);\n  }\n\n  /**\n   * Sends a message to all subscribed windows.\n   * @param {string} type Type of the message.\n   * @param {!JsonObject} data Message payload.\n   */\n  send(type, data) {\n    // Remove clients that have been removed from the DOM.\n    filterSplice(this.clientWindows_, client => !!client.win.parent);\n    postMessageToWindows(\n        this.iframe_,\n        this.clientWindows_,\n        type,\n        data,\n        this.is3p_);\n  }\n\n  /**\n   * Destroys iframe.\n   */\n  destroy() {\n    this.unlisten_();\n    this.clientWindows_.length = 0;\n  }\n}\n\n/**\n * @param {!Element} element\n * @return {boolean}\n */\nexport function looksLikeTrackingIframe(element) {\n  const box = element.getLayoutBox();\n  // This heuristic is subject to change.\n  if (box.width > 10 || box.height > 10) {\n    return false;\n  }\n  // Iframe is not tracking iframe if open with user interaction\n  return !closestBySelector(element, '.i-amphtml-overlay');\n}\n\n// Most common ad sizes\n// Array of [width, height] pairs.\nconst adSizes = [\n  [300, 250],\n  [320, 50],\n  [300, 50],\n  [320, 100],\n];\n\n/**\n * Guess whether this element might be an ad.\n * @param {!Element} element An amp-iframe element.\n * @return {boolean}\n * @visibleForTesting\n */\nexport function isAdLike(element) {\n  const box = element.getLayoutBox();\n  const {height, width} = box;\n  for (let i = 0; i < adSizes.length; i++) {\n    const refWidth = adSizes[i][0];\n    const refHeight = adSizes[i][1];\n    if (refHeight > height) {\n      continue;\n    }\n    if (refWidth > width) {\n      continue;\n    }\n    // Fuzzy matching to account for padding.\n    if (height - refHeight <= 20 && width - refWidth <= 20) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/**\n * @param {!Element} iframe\n * @private\n */\nexport function disableScrollingOnIframe(iframe) {\n  addAttributesToElement(iframe, dict({'scrolling': 'no'}));\n\n  // This shouldn't work, but it does on Firefox.\n  // https://stackoverflow.com/a/15494969\n  setStyle(iframe, 'overflow', 'hidden');\n\n  return iframe;\n}\n","/**\n * Copyright 2016 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {SubscriptionApi} from './iframe-helper';\nimport {dev} from './log';\nimport {dict} from './utils/object';\nimport {isArray, isFiniteNumber} from './types';\nimport {layoutRectLtwh, moveLayoutRect, rectIntersection} from './layout-rect';\n\n/**\n * The structure that defines the rectangle used in intersection observers.\n *\n * @typedef {{\n *   top: number,\n *   bottom: number,\n *   left: number,\n *   right: number,\n *   width: number,\n *   height: number,\n *   x: number,\n *   y: number,\n * }}\n */\nexport let DOMRect;\n\nexport const DEFAULT_THRESHOLD =\n    [0, 0.05, 0.1, 0.15, 0.2, 0.25, 0.3, 0.35, 0.4,\n      0.45, 0.5, 0.55, 0.6, 0.65, 0.7, 0.75, 0.8, 0.85, 0.9, 0.95, 1];\n\n/** @typedef {{\n *    element: !Element,\n *    currentThresholdSlot: number,\n *  }}\n */\nlet ElementIntersectionStateDef;\n\n/** @const @private */\nconst TAG = 'INTERSECTION-OBSERVER';\n\n/** @const @private */\nconst INIT_TIME = Date.now();\n\n/**\n * A function to get the element's current IntersectionObserverEntry\n * regardless of the intersetion ratio. Only available when element is not\n * nested in a container iframe.\n * TODO: support opt_iframe if there's valid use cases.\n * @param {!./layout-rect.LayoutRectDef} element element's rect\n * @param {?./layout-rect.LayoutRectDef} owner element's owner rect\n * @param {!./layout-rect.LayoutRectDef} hostViewport hostViewport's rect\n * @return {!IntersectionObserverEntry} A change entry.\n */\nexport function getIntersectionChangeEntry(\n  element, owner, hostViewport) {\n  const intersection = rectIntersection(element, owner, hostViewport) ||\n      layoutRectLtwh(0, 0, 0, 0);\n  const ratio = intersectionRatio(intersection, element);\n  return calculateChangeEntry(\n      element, hostViewport, intersection, ratio);\n}\n\n/**\n * @param {!Window} win\n * @return {boolean}\n */\nexport function nativeIntersectionObserverSupported(win) {\n  return 'IntersectionObserver' in win &&\n      'IntersectionObserverEntry' in win &&\n      'intersectionRatio' in win.IntersectionObserverEntry.prototype;\n}\n\n/**\n * A class to help amp-iframe and amp-ad nested iframe listen to intersection\n * change.\n */\nexport class IntersectionObserverApi {\n  /**\n   * @param {!AMP.BaseElement} baseElement\n   * @param {!Element} iframe\n   * @param {boolean=} opt_is3p\n   */\n  constructor(baseElement, iframe, opt_is3p) {\n    /** @private @const {!AMP.BaseElement} */\n    this.baseElement_ = baseElement;\n\n    /** @private {?IntersectionObserverPolyfill} */\n    this.intersectionObserver_ = null;\n\n    /** @private {boolean} */\n    this.shouldObserve_ = false;\n\n    /** @private {boolean} */\n    this.isInViewport_ = false;\n\n    /** @private {?function()} */\n    this.unlistenOnDestroy_ = null;\n\n    /** @private @const {!./service/viewport/viewport-impl.Viewport} */\n    this.viewport_ = baseElement.getViewport();\n\n    /** @private {?SubscriptionApi} */\n    this.subscriptionApi_ = new SubscriptionApi(\n        iframe, 'send-intersections', opt_is3p || false, () => {\n          this.startSendingIntersection_();\n        });\n\n    this.intersectionObserver_ = new IntersectionObserverPolyfill(entries => {\n      // Remove target info from cross origin iframe.\n      for (let i = 0; i < entries.length; i++) {\n        delete entries[i]['target'];\n      }\n      this.subscriptionApi_.send('intersection', dict({'changes': entries}));\n    }, {threshold: DEFAULT_THRESHOLD});\n    this.intersectionObserver_.tick(this.viewport_.getRect());\n\n    /** @const {function()} */\n    this.fire = () => {\n      if (!this.shouldObserve_ || !this.isInViewport_) {\n        return;\n      }\n      this.intersectionObserver_.tick(this.viewport_.getRect());\n    };\n  }\n\n  /**\n   * Function to start listening to viewport event. and observer intersection\n   * change on the element.\n   */\n  startSendingIntersection_() {\n    this.shouldObserve_ = true;\n    this.intersectionObserver_.observe(this.baseElement_.element);\n    this.baseElement_.getVsync().measure(() => {\n      this.isInViewport_ = this.baseElement_.isInViewport();\n      this.fire();\n    });\n\n    const unlistenViewportScroll = this.viewport_.onScroll(this.fire);\n    const unlistenViewportChange = this.viewport_.onChanged(this.fire);\n    this.unlistenOnDestroy_ = () => {\n      unlistenViewportScroll();\n      unlistenViewportChange();\n    };\n  }\n\n  /**\n   * Enable to the PositionObserver to listen to viewport events\n   * @param {boolean} inViewport\n   */\n  onViewportCallback(inViewport) {\n    this.isInViewport_ = inViewport;\n  }\n\n  /**\n   * Clean all listenrs\n   */\n  destroy() {\n    this.shouldObserve_ = false;\n    this.intersectionObserver_ = null;\n    if (this.unlistenOnDestroy_) {\n      this.unlistenOnDestroy_();\n      this.unlistenOnDestroy_ = null;\n    }\n    this.subscriptionApi_.destroy();\n    this.subscriptionApi_ = null;\n  }\n}\n\n\n/**\n * The IntersectionObserverPolyfill class lets any element receive its\n * intersection data with the viewport. It acts like native browser supported\n * IntersectionObserver.\n * The IntersectionObserver receives a callback function and an optional option\n * as params. Whenever the element intersection ratio cross a threshold value,\n * IntersectionObserverPolyfill will call the provided callback function with\n * the change entry.\n * @visibleForTesting\n */\nexport class IntersectionObserverPolyfill {\n  /**\n   * @param {function(!Array<!IntersectionObserverEntry>)} callback\n   * @param {Object=} opt_option\n   */\n  constructor(callback, opt_option) {\n    /** @private @const {function(!Array<!IntersectionObserverEntry>)} */\n    this.callback_ = callback;\n\n    // The input threshold can be a number or an array of numbers.\n    let threshold = opt_option && opt_option.threshold;\n    if (threshold) {\n      threshold = isArray(threshold) ?\n        threshold : [threshold];\n    } else {\n      threshold = [0];\n    }\n\n    for (let i = 0; i < threshold.length; i++) {\n      dev().assert(isFiniteNumber(threshold[i]), 'Threshold should be a ' +\n          'finite number or an array of finite numbers');\n    }\n\n    /**\n     * A list of threshold, sorted in increasing numeric order\n     * @private @const {!Array}\n     */\n    this.threshold_ = threshold.sort();\n    dev().assert(this.threshold_[0] >= 0 &&\n        this.threshold_[this.threshold_.length - 1] <= 1,\n    'Threshold should be in the range from \"[0, 1]\"');\n\n    /** @private {?./layout-rect.LayoutRectDef} */\n    this.lastViewportRect_ = null;\n\n    /** @private {./layout-rect.LayoutRectDef|undefined} */\n    this.lastIframeRect_ = undefined;\n\n    /**\n     * Store a list of observed elements and their current threshold slot which\n     * their intersection ratio fills, range from [0, this.threshold_.length]\n     * @private {Array<!ElementIntersectionStateDef>}\n     */\n    this.observeEntries_ = [];\n  }\n\n  /**\n   */\n  disconnect() {\n    this.observeEntries_.length = 0;\n  }\n\n  /**\n   * Provide a way to observe the intersection change for a specific element\n   * Please note IntersectionObserverPolyfill only support AMP element now\n   * TODO: Support non AMP element\n   * @param {!Element} element\n   */\n  observe(element) {\n    // Check the element is an AMP element.\n    dev().assert(element.getLayoutBox);\n\n    // If the element already exists in current observeEntries, do nothing\n    for (let i = 0; i < this.observeEntries_.length; i++) {\n      if (this.observeEntries_[i].element === element) {\n        dev().warn(TAG, 'should observe same element once');\n        return;\n      }\n    }\n\n    const newState = {\n      element,\n      currentThresholdSlot: 0,\n    };\n\n    // Get the new observed element's first changeEntry based on last viewport\n    if (this.lastViewportRect_) {\n      const change = this.getValidIntersectionChangeEntry_(\n          newState, this.lastViewportRect_, this.lastIframeRect_);\n      if (change) {\n        this.callback_([change]);\n      }\n    }\n\n    // push new observed element\n    this.observeEntries_.push(newState);\n  }\n\n  /**\n   * Provide a way to unobserve intersection change for a specified element\n   * @param {!Element} element\n   */\n  unobserve(element) {\n    // find the unobserved element in observeEntries\n    for (let i = 0; i < this.observeEntries_.length; i++) {\n      if (this.observeEntries_[i].element === element) {\n        this.observeEntries_.splice(i, 1);\n        return;\n      }\n    }\n    dev().warn(TAG, 'unobserve non-observed element');\n  }\n\n  /**\n   * Tick function that update the DOMRect of the root of observed elements.\n   * Caller needs to make sure to pass in the correct container.\n   * Note: the opt_iframe param is the iframe position relative to the host doc,\n   * The iframe must be a non-scrollable iframe.\n   * @param {!./layout-rect.LayoutRectDef} hostViewport\n   * @param {./layout-rect.LayoutRectDef=} opt_iframe\n   */\n  tick(hostViewport, opt_iframe) {\n\n    if (opt_iframe) {\n      // If element inside an iframe. Adjust origin to the iframe.left/top.\n      hostViewport =\n          moveLayoutRect(hostViewport, -opt_iframe.left, -opt_iframe.top);\n      opt_iframe =\n          moveLayoutRect(opt_iframe, -opt_iframe.left, -opt_iframe.top);\n    }\n\n    this.lastViewportRect_ = hostViewport;\n    this.lastIframeRect_ = opt_iframe;\n\n    const changes = [];\n\n    for (let i = 0; i < this.observeEntries_.length; i++) {\n      const change = this.getValidIntersectionChangeEntry_(\n          this.observeEntries_[i], hostViewport, opt_iframe);\n      if (change) {\n        changes.push(change);\n      }\n    }\n\n    if (changes.length) {\n      this.callback_(changes);\n    }\n  }\n\n  /**\n   * Return a change entry for one element that should be compatible with\n   * IntersectionObserverEntry if it's valid with current config.\n   * When the new intersection ratio doesn't cross one of a threshold value,\n   * the function will return null.\n   *\n   * @param {!ElementIntersectionStateDef} state\n   * @param {!./layout-rect.LayoutRectDef} hostViewport hostViewport's rect\n   * @param {./layout-rect.LayoutRectDef=} opt_iframe iframe container rect\n   * @return {?IntersectionObserverEntry} A valid change entry or null if ratio\n   * @private\n   */\n  getValidIntersectionChangeEntry_(state, hostViewport, opt_iframe) {\n    const {element} = state;\n\n    // Normalize container LayoutRect to be relative to page\n    let ownerRect = null;\n\n    // If opt_iframe is provided, all LayoutRect has position relative to\n    // the iframe.\n    // If opt_iframe is not provided, all LayoutRect has position relative to\n    // the host document.\n    const elementRect = element.getLayoutBox();\n    const owner = element.getOwner();\n    ownerRect = owner && owner.getLayoutBox();\n\n    // calculate intersectionRect. that the element intersects with hostViewport\n    // and intersects with owner element and container iframe if exists.\n    const intersectionRect =\n        rectIntersection(elementRect, ownerRect, hostViewport, opt_iframe) ||\n        layoutRectLtwh(0, 0, 0, 0);\n    // calculate ratio, call callback based on new ratio value.\n    const ratio = intersectionRatio(intersectionRect, elementRect);\n    const newThresholdSlot = getThresholdSlot(this.threshold_, ratio);\n\n    if (newThresholdSlot == state.currentThresholdSlot) {\n      return null;\n    }\n    state.currentThresholdSlot = newThresholdSlot;\n\n    // To get same behavior as native IntersectionObserver set hostViewport null\n    // if inside an iframe\n    const changeEntry = calculateChangeEntry(elementRect,\n        (opt_iframe ? null : hostViewport), intersectionRect, ratio);\n    changeEntry.target = element;\n    return changeEntry;\n  }\n}\n\n/**\n * Returns the ratio of the smaller box's area to the larger box's area.\n * @param {!./layout-rect.LayoutRectDef} smaller\n * @param {!./layout-rect.LayoutRectDef} larger\n * @return {number}\n */\nfunction intersectionRatio(smaller, larger) {\n  return (smaller.width * smaller.height) / (larger.width * larger.height);\n}\n\n/**\n * Returns the slot number that the current ratio fills in.\n * @param {!Array} sortedThreshold valid sorted IoB threshold\n * @param {number} ratio Range from [0, 1]\n * @return {number} Range from [0, threshold.length]\n * @visibleForTesting\n */\nexport function getThresholdSlot(sortedThreshold, ratio) {\n  let startIdx = 0;\n  let endIdx = sortedThreshold.length;\n  // 0 is a special case that does not fit into [small, large) range\n  if (ratio == 0) {\n    return 0;\n  }\n  let mid = ((startIdx + endIdx) / 2) | 0;\n  while (startIdx < mid) {\n    const midValue = sortedThreshold[mid];\n    // In the range of [small, large)\n    if (ratio < midValue) {\n      endIdx = mid;\n    } else {\n      startIdx = mid;\n    }\n    mid = ((startIdx + endIdx) / 2) | 0;\n  }\n  return endIdx;\n}\n\n/**\n * Helper function to calculate the IntersectionObserver change entry.\n * @param {!./layout-rect.LayoutRectDef} element element's rect\n * @param {?./layout-rect.LayoutRectDef} hostViewport hostViewport's rect\n * @param {!./layout-rect.LayoutRectDef} intersection\n * @param {number} ratio\n * @return {!IntersectionObserverEntry}}\n */\nfunction calculateChangeEntry(\n  element, hostViewport, intersection, ratio) {\n  // If element not in an iframe.\n  // adjust all LayoutRect to hostViewport Origin.\n  let boundingClientRect = element;\n  let rootBounds = hostViewport;\n  // If no hostViewport is provided, element is inside an non-scrollable iframe.\n  // Every Layoutrect has already adjust their origin according to iframe\n  // rect origin. LayoutRect position is relative to iframe origin,\n  // thus relative to iframe's viewport origin because the viewport is at the\n  // iframe origin. No need to adjust position here.\n\n  if (hostViewport) {\n    // If element not in an iframe.\n    // adjust all LayoutRect to hostViewport Origin.\n    rootBounds = /** @type {!./layout-rect.LayoutRectDef} */ (rootBounds);\n    intersection = moveLayoutRect(intersection, -hostViewport.left,\n        -hostViewport.top);\n    // The element is relative to (0, 0), while the viewport moves. So, we must\n    // adjust.\n    boundingClientRect = moveLayoutRect(boundingClientRect,\n        -hostViewport.left, -hostViewport.top);\n    // Now, move the viewport to (0, 0)\n    rootBounds = moveLayoutRect(rootBounds,\n        -hostViewport.left, -hostViewport.top);\n  }\n\n  return /** @type {!IntersectionObserverEntry} */ ({\n    time: (typeof performance !== 'undefined' && performance.now) ?\n      performance.now() : Date.now() - INIT_TIME,\n    rootBounds,\n    boundingClientRect,\n    intersectionRect: intersection,\n    intersectionRatio: ratio,\n  });\n}\n","/**\n * Copyright 2015 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview This module declares JSON types as defined in the\n * {@link http://json.org/}.\n */\n\nimport {isObject} from './types';\n\n\n// NOTE Type are changed to {*} because of\n// https://github.com/google/closure-compiler/issues/1999\n\n/**\n * JSON scalar. It's either string, number or boolean.\n * @typedef {*} should be string|number|boolean\n */\nlet JSONScalarDef;\n\n\n/**\n * JSON object. It's a map with string keys and JSON values.\n * @typedef {*} should be !Object<string, ?JSONValueDef>\n */\nlet JSONObjectDef;\n\n\n/**\n * JSON array. It's an array with JSON values.\n * @typedef {*} should be !Array<?JSONValueDef>\n */\nlet JSONArrayDef;\n\n\n/**\n * JSON value. It's either a scalar, an object or an array.\n * @typedef {*} should be !JSONScalarDef|!JSONObjectDef|!JSONArrayDef\n */\nlet JSONValueDef;\n\n/**\n * Recreates objects with prototype-less copies.\n * @param {!JsonObject} obj\n * @return {!JsonObject}\n */\nexport function recreateNonProtoObject(obj) {\n  const copy = Object.create(null);\n  for (const k in obj) {\n    if (!hasOwnProperty(obj, k)) {\n      continue;\n    }\n    const v = obj[k];\n    copy[k] = isObject(v) ? recreateNonProtoObject(v) : v;\n  }\n  return /** @type {!JsonObject} */ (copy);\n}\n\n/**\n * Returns a value from an object for a field-based expression. The expression\n * is a simple nested dot-notation of fields, such as `field1.field2`. If any\n * field in a chain does not exist or is not an object or array, the returned\n * value will be `undefined`.\n *\n * @param {!JsonObject} obj\n * @param {string} expr\n * @return {*}\n */\nexport function getValueForExpr(obj, expr) {\n  // The `.` indicates \"the object itself\".\n  if (expr == '.') {\n    return obj;\n  }\n  // Otherwise, navigate via properties.\n  const parts = expr.split('.');\n  let value = obj;\n  for (let i = 0; i < parts.length; i++) {\n    const part = parts[i];\n    if (part &&\n        value &&\n        value[part] !== undefined &&\n        hasOwnProperty(value, part)\n    ) {\n      value = value[part];\n      continue;\n    }\n    value = undefined;\n    break;\n  }\n  return value;\n}\n\n/**\n * Simple wrapper around JSON.parse that casts the return value\n * to JsonObject.\n * Create a new wrapper if an array return value is desired.\n * @param {*} json JSON string to parse\n * @return {?JsonObject} May be extend to parse arrays.\n */\nexport function parseJson(json) {\n  return /** @type {?JsonObject} */(JSON.parse(/** @type {string} */ (json)));\n}\n\n/**\n * Parses the given `json` string without throwing an exception if not valid.\n * Returns `undefined` if parsing fails.\n * Returns the `Object` corresponding to the JSON string when parsing succeeds.\n * @param {*} json JSON string to parse\n * @param {function(!Error)=} opt_onFailed Optional function that will be called\n *     with the error if parsing fails.\n * @return {?JsonObject|undefined} May be extend to parse arrays.\n */\nexport function tryParseJson(json, opt_onFailed) {\n  try {\n    return parseJson(json);\n  } catch (e) {\n    if (opt_onFailed) {\n      opt_onFailed(e);\n    }\n    return undefined;\n  }\n}\n\n/**\n * Recursively checks strict equality of items in nested arrays and objects.\n *\n * @param {JSONValueDef} a\n * @param {JSONValueDef} b\n * @param {number} depth The maximum recursion depth. Must be finite.\n * @return {boolean}\n * @throws {Error} If depth argument is not finite.\n */\nexport function recursiveEquals(a, b, depth = 3) {\n  if (!isFinite(depth)) {\n    throw new Error('depth arg must be finite: ' + depth);\n  }\n  if (a === b) {\n    return true;\n  }\n  // Only check shallow equality for depth < 1.\n  if (depth < 1) {\n    return false;\n  }\n  if (typeof a !== typeof b) {\n    return false;\n  }\n  if (Array.isArray(a) && Array.isArray(b)) {\n    if (a.length !== b.length) {\n      return false;\n    }\n    for (let i = 0; i < a.length; i++) {\n      if (!recursiveEquals(a[i], b[i], depth - 1)) {\n        return false;\n      }\n    }\n    return true;\n  }\n  if (a && b && typeof a === 'object' && typeof b === 'object') {\n    const keysA = Object.keys(/** @type {!Object} */ (a));\n    const keysB = Object.keys(/** @type {!Object} */ (b));\n    if (keysA.length !== keysB.length) {\n      return false;\n    }\n    for (let i = 0; i < keysA.length; i++) {\n      const keyA = keysA[i];\n      const valueA = a[keyA];\n      const valueB = b[keyA];\n      if (!recursiveEquals(valueA, valueB, depth - 1)) {\n        return false;\n      }\n    }\n    return true;\n  }\n  return false;\n}\n\n\n/**\n * @param {*} obj\n * @param {string} key\n * @return {boolean}\n */\nfunction hasOwnProperty(obj, key) {\n  if (obj == null || typeof obj != 'object') {\n    return false;\n  }\n  return Object.prototype.hasOwnProperty.call(\n      /** @type {!Object} */ (obj), key);\n}\n","/**\n * Copyright 2015 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n/**\n * The structure that combines position and size for an element. The exact\n * interpretation of position and size depends on the use case.\n *\n * @typedef {{\n *   top: number,\n *   bottom: number,\n *   left: number,\n *   right: number,\n *   width: number,\n *   height: number,\n *   x: number,\n *   y: number\n * }}\n */\nexport let LayoutRectDef;\n\n\n/**\n * The structure that represents the margins of an Element.\n *\n * @typedef {{\n *   top: number,\n *   right: number,\n *   bottom: number,\n *   left: number\n * }}\n */\nexport let LayoutMarginsDef;\n\n\n/**\n * The structure that represents a requested change to the margins of an\n * Element. Any new values specified will replace existing ones (rather than\n * being additive).\n *\n * @typedef {{\n *   top: (number|undefined),\n *   right: (number|undefined),\n *   bottom: (number|undefined),\n *   left: (number|undefined)\n * }}\n */\nexport let LayoutMarginsChangeDef;\n\n/**\n* RelativePositions\n*\n* Describes the relative position of an element to another (whether the\n* first is inside the second, on top of the second or on the bottom\n* @enum {string}\n*/\nexport const RelativePositions = {\n  INSIDE: 'inside',\n  TOP: 'top',\n  BOTTOM: 'bottom',\n};\n\n/**\n * Creates a layout rect based on the left, top, width and height parameters\n * in that order.\n * @param {number} left\n * @param {number} top\n * @param {number} width\n * @param {number} height\n * @return {!LayoutRectDef}\n */\nexport function layoutRectLtwh(left, top, width, height) {\n  return {\n    left,\n    top,\n    width,\n    height,\n    bottom: top + height,\n    right: left + width,\n    x: left,\n    y: top,\n  };\n}\n\n\n/**\n * Creates a layout rect based on the DOMRect, e.g. obtained from calling\n * getBoundingClientRect.\n * @param {!ClientRect} rect\n * @return {!LayoutRectDef}\n */\nexport function layoutRectFromDomRect(rect) {\n  return layoutRectLtwh(Number(rect.left), Number(rect.top),\n      Number(rect.width), Number(rect.height));\n}\n\n/**\n * Returns true if the specified two rects overlap by a single pixel.\n * @param {!LayoutRectDef} r1\n * @param {!LayoutRectDef} r2\n * @return {boolean}\n */\nexport function layoutRectsOverlap(r1, r2) {\n  return (r1.top <= r2.bottom && r2.top <= r1.bottom &&\n      r1.left <= r2.right && r2.left <= r1.right);\n}\n\n\n/**\n * Returns the intersection between a, b or null if there is none.\n * @param {...?LayoutRectDef|undefined} var_args\n * @return {?LayoutRectDef}\n */\nexport function rectIntersection(var_args) {\n  let x0 = -Infinity;\n  let x1 = Infinity;\n  let y0 = -Infinity;\n  let y1 = Infinity;\n  for (let i = 0; i < arguments.length; i++) {\n    const current = arguments[i];\n    if (!current) {\n      continue;\n    }\n    x0 = Math.max(x0, current.left);\n    x1 = Math.min(x1, current.left + current.width);\n    y0 = Math.max(y0, current.top);\n    y1 = Math.min(y1, current.top + current.height);\n    if (x1 < x0 || y1 < y0) {\n      return null;\n    }\n  }\n  if (x1 == Infinity) {\n    return null;\n  }\n  return layoutRectLtwh(x0, y0, x1 - x0, y1 - y0);\n}\n\n/**\n * Returns the position of r2 relative to r1\n * @param {!LayoutRectDef} r1\n * @param {!LayoutRectDef} r2\n * @return {RelativePositions}\n */\nexport function layoutRectsRelativePos(r1, r2) {\n  if (r1.top < r2.top) {\n    return RelativePositions.TOP;\n  } else if (r1.bottom > r2.bottom) {\n    return RelativePositions.BOTTOM;\n  } else {\n    return RelativePositions.INSIDE;\n  }\n}\n\n/**\n * Expand the layout rect using multiples of width and height.\n * @param {!LayoutRectDef} rect Original rect.\n * @param {number} dw Expansion in width, specified as a multiple of width.\n * @param {number} dh Expansion in height, specified as a multiple of height.\n * @return {!LayoutRectDef}\n */\nexport function expandLayoutRect(rect, dw, dh) {\n  return layoutRectLtwh(rect.left - rect.width * dw,\n      rect.top - rect.height * dh,\n      rect.width * (1 + dw * 2),\n      rect.height * (1 + dh * 2));\n}\n\n/**\n * Moves the layout rect using dx and dy.\n * @param {!LayoutRectDef} rect Original rect.\n * @param {number} dx Move horizontally with this value.\n * @param {number} dy Move vertically with this value.\n * @return {!LayoutRectDef}\n */\nexport function moveLayoutRect(rect, dx, dy) {\n  if ((dx == 0 && dy == 0) ||\n      (rect.width == 0 && rect.height == 0)) {\n    return rect;\n  }\n  return layoutRectLtwh(rect.left + dx, rect.top + dy,\n      rect.width, rect.height);\n}\n\n\n/**\n * @param {!LayoutMarginsDef} margins\n * @param {!LayoutMarginsChangeDef} change\n * @return {boolean}\n */\nexport function areMarginsChanged(margins, change) {\n  return (change.top !== undefined && change.top != margins.top) ||\n      (change.right !== undefined && change.right != margins.right) ||\n      (change.bottom !== undefined && change.bottom != margins.bottom) ||\n      (change.left !== undefined && change.left != margins.left);\n}\n\n/**\n * @param {!LayoutRectDef} from\n * @param {!LayoutRectDef} to\n * @return {boolean}\n */\nexport function layoutRectSizeEquals(from, to) {\n  return from.width == to.width &&\n      from.height === to.height;\n}\n\n/**\n * @param {?LayoutRectDef} r1\n * @param {?LayoutRectDef} r2\n * @return {boolean}\n */\nexport function layoutRectEquals(r1, r2) {\n  if (!r1 || !r2) {\n    return false;\n  }\n  return r1.left == r2.left && r1.top == r2.top &&\n      r1.width == r2.width && r1.height == r2.height;\n}\n\n/**\n * @param {LayoutMarginsChangeDef|undefined} marginsChange\n * @return {LayoutMarginsChangeDef|undefined}\n */\nexport function cloneLayoutMarginsChangeDef(marginsChange) {\n  if (!marginsChange) {\n    return marginsChange;\n  }\n  return {\n    top: marginsChange.top,\n    bottom: marginsChange.bottom,\n    left: marginsChange.left,\n    right: marginsChange.right,\n  };\n}\n","/**\n * Copyright 2015 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Implements element layout. See https://goo.gl/9avXuT for\n * details.\n */\n\nimport {dev, user} from './log';\nimport {htmlFor} from './static-template';\nimport {isFiniteNumber} from './types';\nimport {setStyle, setStyles} from './style';\nimport {startsWith} from './string';\n\n/**\n * @enum {string}\n */\nexport const Layout = {\n  NODISPLAY: 'nodisplay',\n  FIXED: 'fixed',\n  FIXED_HEIGHT: 'fixed-height',\n  RESPONSIVE: 'responsive',\n  CONTAINER: 'container',\n  FILL: 'fill',\n  FLEX_ITEM: 'flex-item',\n  FLUID: 'fluid',\n  INTRINSIC: 'intrinsic',\n};\n\n\n/**\n * Layout priorities to use with BaseElement#getLayoutPriority() and\n * BaseElement#updateLayoutPriority().\n * @enum {number}\n */\nexport const LayoutPriority = {\n  CONTENT: 0,\n  METADATA: 1,\n  ADS: 2,\n  BACKGROUND: 3,\n};\n\n\n/**\n * CSS Length type. E.g. \"1px\" or \"20vh\".\n * @typedef {string}\n */\nexport let LengthDef;\n\n\n/**\n * @typedef {{\n *   width: string,\n *   height: string\n * }}\n */\nlet DimensionsDef;\n\n\n/**\n * The set of elements with natural dimensions, that is, elements\n * which have a known dimension either based on their value specified here,\n * or, if the value is null, a dimension specific to the browser.\n * `hasNaturalDimensions` checks for membership in this set.\n * `getNaturalDimensions` determines the dimensions for an element in the\n *    set and caches it.\n * @type {!Object<string, ?DimensionsDef>}\n * @private  Visible for testing only!\n */\nexport const naturalDimensions_ = {\n  'AMP-PIXEL': {width: '0px', height: '0px'},\n  'AMP-ANALYTICS': {width: '1px', height: '1px'},\n  // TODO(dvoytenko): audio should have width:auto.\n  'AMP-AUDIO': null,\n  'AMP-SOCIAL-SHARE': {width: '60px', height: '44px'},\n};\n\n\n/**\n * Elements that the progess can be shown for. This set has to be externalized\n * since the element's implementation may not be downloaded yet.\n * @enum {boolean}\n * @private  Visible for testing only!\n */\nexport const LOADING_ELEMENTS_ = {\n  'AMP-ANIM': true,\n  'AMP-BRIGHTCOVE': true,\n  'AMP-GOOGLE-DOCUMENT-EMBED': true,\n  'AMP-EMBED': true,\n  'AMP-FACEBOOK': true,\n  'AMP-FACEBOOK-COMMENTS': true,\n  'AMP-FACEBOOK-LIKE': true,\n  'AMP-FACEBOOK-PAGE': true,\n  'AMP-IFRAME': true,\n  'AMP-IMG': true,\n  'AMP-INSTAGRAM': true,\n  'AMP-LIST': true,\n  'AMP-OOYALA-PLAYER': true,\n  'AMP-PINTEREST': true,\n  'AMP-PLAYBUZZ': true,\n  'AMP-VIDEO': true,\n  'AMP-YOUTUBE': true,\n};\n\n\n/**\n * @param {string} s\n * @return {Layout|undefined} Returns undefined in case of failure to parse\n *   the layout string.\n */\nexport function parseLayout(s) {\n  for (const k in Layout) {\n    if (Layout[k] == s) {\n      return Layout[k];\n    }\n  }\n  return undefined;\n}\n\n\n/**\n * @param {!Layout} layout\n * @return {string}\n */\nexport function getLayoutClass(layout) {\n  return 'i-amphtml-layout-' + layout;\n}\n\n\n/**\n * Whether an element with this layout inherently defines the size.\n * @param {!Layout} layout\n * @return {boolean}\n */\nexport function isLayoutSizeDefined(layout) {\n  return (layout == Layout.FIXED ||\n      layout == Layout.FIXED_HEIGHT ||\n      layout == Layout.RESPONSIVE ||\n      layout == Layout.FILL ||\n      layout == Layout.FLEX_ITEM ||\n      layout == Layout.FLUID ||\n      layout == Layout.INTRINSIC);\n}\n\n\n/**\n * Whether the tag is an internal (service) AMP tag.\n * @param {!Node|string} tag\n * @return {boolean}\n */\nexport function isInternalElement(tag) {\n  const tagName = (typeof tag == 'string') ? tag : tag.tagName;\n  return tagName && startsWith(tagName.toLowerCase(), 'i-');\n}\n\n\n/**\n * Parses the CSS length value. If no units specified, the assumed value is\n * \"px\". Returns undefined in case of parsing error.\n * @param {string|undefined|null} s\n * @return {!LengthDef|undefined}\n */\nexport function parseLength(s) {\n  if (typeof s == 'number') {\n    return s + 'px';\n  }\n  if (!s) {\n    return undefined;\n  }\n  if (!/^\\d+(\\.\\d+)?(px|em|rem|vh|vw|vmin|vmax|cm|mm|q|in|pc|pt)?$/.test(s)) {\n    return undefined;\n  }\n  if (/^\\d+(\\.\\d+)?$/.test(s)) {\n    return s + 'px';\n  }\n  return s;\n}\n\n\n\n/**\n * Asserts that the supplied value is a non-percent CSS Length value.\n * @param {!LengthDef|string|null|undefined} length\n * @return {!LengthDef}\n */\nexport function assertLength(length) {\n  user().assert(\n      /^\\d+(\\.\\d+)?(px|em|rem|vh|vw|vmin|vmax|cm|mm|q|in|pc|pt)$/.test(length),\n      'Invalid length value: %s', length);\n  return /** @type {!LengthDef} */ (length);\n}\n\n\n\n\n/**\n * Asserts that the supplied value is a CSS Length value\n * (including percent unit).\n * @param {!LengthDef|string} length\n * @return {!LengthDef}\n */\nexport function assertLengthOrPercent(length) {\n  user().assert(/^\\d+(\\.\\d+)?(px|em|rem|vh|vw|vmin|vmax|%)$/.test(length),\n      'Invalid length or percent value: %s', length);\n  return length;\n}\n\n\n/**\n * Returns units from the CSS length value.\n * @param {!LengthDef|string|null|undefined} length\n * @return {string}\n */\nexport function getLengthUnits(length) {\n  assertLength(length);\n  dev().assertString(length);\n  const m = user().assert(length.match(/[a-z]+/i),\n      'Failed to read units from %s', length);\n  return m[0];\n}\n\n\n/**\n * Returns the numeric value of a CSS length value.\n * @param {!LengthDef|string|null|undefined} length\n * @return {number|undefined}\n */\nexport function getLengthNumeral(length) {\n  const res = parseFloat(length);\n  return isFiniteNumber(res) ? res : undefined;\n}\n\n\n/**\n * Determines whether the tagName is a known element that has natural dimensions\n * in our runtime or the browser.\n * @param {string} tagName The element tag name.\n * @return {boolean}\n */\nexport function hasNaturalDimensions(tagName) {\n  tagName = tagName.toUpperCase();\n  return naturalDimensions_[tagName] !== undefined;\n}\n\n\n/**\n * Determines the default dimensions for an element which could vary across\n * different browser implementations, like <audio> for instance.\n * This operation can only be completed for an element whitelisted by\n * `hasNaturalDimensions`.\n * @param {!Element} element\n * @return {DimensionsDef}\n */\nexport function getNaturalDimensions(element) {\n  const tagName = element.tagName.toUpperCase();\n  dev().assert(naturalDimensions_[tagName] !== undefined);\n  if (!naturalDimensions_[tagName]) {\n    const doc = element.ownerDocument;\n    const naturalTagName = tagName.replace(/^AMP\\-/, '');\n    const temp = doc.createElement(naturalTagName);\n    // For audio, should no-op elsewhere.\n    temp.controls = true;\n    setStyles(temp, {\n      position: 'absolute',\n      visibility: 'hidden',\n    });\n    doc.body.appendChild(temp);\n    naturalDimensions_[tagName] = {\n      width: (temp./*OK*/offsetWidth || 1) + 'px',\n      height: (temp./*OK*/offsetHeight || 1) + 'px',\n    };\n    doc.body.removeChild(temp);\n  }\n  return /** @type {DimensionsDef} */ (naturalDimensions_[tagName]);\n}\n\n\n/**\n * Whether the loading can be shown for the specified elemeent. This set has\n * to be externalized since the element's implementation may not be\n * downloaded yet.\n * @param {!Element} element\n * @return {boolean}\n */\nexport function isLoadingAllowed(element) {\n  const tagName = element.tagName.toUpperCase();\n  if (tagName == 'AMP-AD' || tagName == 'AMP-EMBED') {\n    return true;\n  }\n  return LOADING_ELEMENTS_[tagName] || false;\n}\n\n\n/**\n * Applies layout to the element. Visible for testing only.\n *\n * \\   \\  /  \\  /   / /   \\     |   _  \\     |  \\ |  | |  | |  \\ |  |  / _____|\n *  \\   \\/    \\/   / /  ^  \\    |  |_)  |    |   \\|  | |  | |   \\|  | |  |  __\n *   \\            / /  /_\\  \\   |      /     |  . `  | |  | |  . `  | |  | |_ |\n *    \\    /\\    / /  _____  \\  |  |\\  \\----.|  |\\   | |  | |  |\\   | |  |__| |\n *     \\__/  \\__/ /__/     \\__\\ | _| `._____||__| \\__| |__| |__| \\__|  \\______|\n *\n * The equivalent of this method is used for server-side rendering (SSR) and\n * any changes made to it must be made in coordination with caches that\n * implement SSR. For more information on SSR see bit.ly/amp-ssr.\n *\n * @param {!Element} element\n * @return {!Layout}\n */\nexport function applyStaticLayout(element) {\n  // Check if the layout has already been done by server-side rendering. The\n  // document may be visible to the user if the boilerplate was removed so\n  // please take care in making changes here.\n  const completedLayoutAttr = element.getAttribute('i-amphtml-layout');\n  if (completedLayoutAttr) {\n    const layout = /** @type {!Layout} */ (dev().assert(\n        parseLayout(completedLayoutAttr)));\n    if ((layout == Layout.RESPONSIVE || layout == Layout.INTRINSIC)\n      && element.firstElementChild) {\n      // Find sizer, but assume that it might not have been parsed yet.\n      element.sizerElement =\n          element.querySelector('i-amphtml-sizer') || undefined;\n    } else if (layout == Layout.NODISPLAY) {\n      applyNoDisplayLayout(element);\n    }\n    return layout;\n  }\n\n  // If the layout was already done by server-side rendering (SSR), then the\n  // code below will not run. Any changes below will necessitate a change to SSR\n  // and must be coordinated with caches that implement SSR. See bit.ly/amp-ssr.\n\n  // Parse layout from the element.\n  const layoutAttr = element.getAttribute('layout');\n  const widthAttr = element.getAttribute('width');\n  const heightAttr = element.getAttribute('height');\n  const sizesAttr = element.getAttribute('sizes');\n  const heightsAttr = element.getAttribute('heights');\n\n  // Input layout attributes.\n  const inputLayout = layoutAttr ? parseLayout(layoutAttr) : null;\n  user().assert(inputLayout !== undefined, 'Unknown layout: %s', layoutAttr);\n  /** @const {string|null|undefined} */\n  const inputWidth = (widthAttr && widthAttr != 'auto') ?\n    parseLength(widthAttr) : widthAttr;\n  user().assert(inputWidth !== undefined, 'Invalid width value: %s', widthAttr);\n  /** @const {string|null|undefined} */\n  const inputHeight = (heightAttr && heightAttr != 'fluid') ?\n    parseLength(heightAttr) : heightAttr;\n  user().assert(inputHeight !== undefined, 'Invalid height value: %s',\n      heightAttr);\n\n  // Effective layout attributes. These are effectively constants.\n  let width;\n  let height;\n  let layout;\n\n  // Calculate effective width and height.\n  if ((!inputLayout || inputLayout == Layout.FIXED ||\n      inputLayout == Layout.FIXED_HEIGHT) &&\n      (!inputWidth || !inputHeight) && hasNaturalDimensions(element.tagName)) {\n    // Default width and height: handle elements that do not specify a\n    // width/height and are defined to have natural browser dimensions.\n    const dimensions = getNaturalDimensions(element);\n    width = (inputWidth || inputLayout == Layout.FIXED_HEIGHT) ? inputWidth :\n      dimensions.width;\n    height = inputHeight || dimensions.height;\n  } else {\n    width = inputWidth;\n    height = inputHeight;\n  }\n\n  // Calculate effective layout.\n  if (inputLayout) {\n    layout = inputLayout;\n  } else if (!width && !height) {\n    layout = Layout.CONTAINER;\n  } else if (height == 'fluid') {\n    layout = Layout.FLUID;\n  } else if (height && (!width || width == 'auto')) {\n    layout = Layout.FIXED_HEIGHT;\n  } else if (height && width && (sizesAttr || heightsAttr)) {\n    layout = Layout.RESPONSIVE;\n  } else {\n    layout = Layout.FIXED;\n  }\n\n  // Verify layout attributes.\n  if (layout == Layout.FIXED || layout == Layout.FIXED_HEIGHT ||\n      layout == Layout.RESPONSIVE || layout == Layout.INTRINSIC) {\n    user().assert(height, 'Expected height to be available: %s', heightAttr);\n  }\n  if (layout == Layout.FIXED_HEIGHT) {\n    user().assert(!width || width == 'auto',\n        'Expected width to be either absent or equal \"auto\" ' +\n        'for fixed-height layout: %s', widthAttr);\n  }\n  if (layout == Layout.FIXED || layout == Layout.RESPONSIVE ||\n      layout == Layout.INTRINSIC) {\n    user().assert(width && width != 'auto',\n        'Expected width to be available and not equal to \"auto\": %s',\n        widthAttr);\n  }\n\n  if (layout == Layout.RESPONSIVE || layout == Layout.INTRINSIC) {\n    user().assert(getLengthUnits(width) == getLengthUnits(height),\n        'Length units should be the same for width and height: %s, %s',\n        widthAttr, heightAttr);\n  } else {\n    user().assert(heightsAttr === null,\n        'Unexpected \"heights\" attribute for none-responsive layout');\n  }\n\n  // Apply UI.\n  element.classList.add(getLayoutClass(layout));\n  if (isLayoutSizeDefined(layout)) {\n    element.classList.add('i-amphtml-layout-size-defined');\n  }\n  if (layout == Layout.NODISPLAY) {\n    // CSS defines layout=nodisplay automatically with `display:none`. Thus\n    // no additional styling is needed.\n    applyNoDisplayLayout(element);\n  } else if (layout == Layout.FIXED) {\n    setStyles(element, {\n      width: dev().assertString(width),\n      height: dev().assertString(height),\n    });\n  } else if (layout == Layout.FIXED_HEIGHT) {\n    setStyle(element, 'height', dev().assertString(height));\n  } else if (layout == Layout.RESPONSIVE) {\n    const sizer = element.ownerDocument.createElement('i-amphtml-sizer');\n    setStyles(sizer, {\n      display: 'block',\n      paddingTop:\n        ((getLengthNumeral(height) / getLengthNumeral(width)) * 100) + '%',\n    });\n    element.insertBefore(sizer, element.firstChild);\n    element.sizerElement = sizer;\n  } else if (layout == Layout.INTRINSIC) {\n    // Intrinsic uses an svg inside the sizer element rather than the padding\n    // trick Note a naked svg won't work becasue other thing expect the\n    // i-amphtml-sizer element\n    const sizer = htmlFor(element)`\n      <i-amphtml-sizer class=\"i-amphtml-sizer\">\n        <img class=\"i-amphtml-intrinsic-sizer\" />\n      </i-amphtml-sizer>`;\n    const intrinsicSizer = sizer.firstElementChild;\n    intrinsicSizer.setAttribute('src',\n        `data:image/svg+xml;charset=utf-8,<svg height=\"${height}\" width=\"${width}\" xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\"/>`);\n    element.insertBefore(sizer, element.firstChild);\n    // TODO(jpettitt): sizer is leaked and can't be cleaned up.\n    element.sizerElement = intrinsicSizer;\n  } else if (layout == Layout.FILL) {\n    // Do nothing.\n  } else if (layout == Layout.CONTAINER) {\n    // Do nothing. Elements themselves will check whether the supplied\n    // layout value is acceptable. In particular container is only OK\n    // sometimes.\n  } else if (layout == Layout.FLEX_ITEM) {\n    // Set height and width to a flex item if they exist.\n    // The size set to a flex item could be overridden by `display: flex` later.\n    if (width) {\n      setStyle(element, 'width', width);\n    }\n    if (height) {\n      setStyle(element, 'height', height);\n    }\n  } else if (layout == Layout.FLUID) {\n    element.classList.add('i-amphtml-layout-awaiting-size');\n    if (width) {\n      setStyle(element, 'width', width);\n    }\n    setStyle(element, 'height', 0);\n  }\n  return layout;\n}\n\n\n/**\n * @param {!Element} element\n */\nfunction applyNoDisplayLayout(element) {\n  // TODO(dvoytenko, #9353): once `toggleLayoutDisplay` API has been deployed\n  // everywhere, switch all relevant elements to this API. In the meantime,\n  // simply unblock display toggling via `style=\"display: ...\"`.\n  setStyle(element, 'display', 'none');\n  element.classList.add('i-amphtml-display');\n}\n","/**\n * Copyright 2015 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {getMode} from './mode';\nimport {getModeObject} from './mode-object';\nimport {isEnumValue} from './types';\n\n/**\n * Triple zero width space.\n *\n * This is added to user error messages, so that we can later identify\n * them, when the only thing that we have is the message. This is the\n * case in many browsers when the global exception handler is invoked.\n *\n * @const {string}\n */\nexport const USER_ERROR_SENTINEL = '\\u200B\\u200B\\u200B';\n\n\n/**\n * Four zero width space.\n *\n * @const {string}\n */\nexport const USER_ERROR_EMBED_SENTINEL = '\\u200B\\u200B\\u200B\\u200B';\n\n\n/**\n * @param {string} message\n * @return {boolean} Whether this message was a user error.\n */\nexport function isUserErrorMessage(message) {\n  return message.indexOf(USER_ERROR_SENTINEL) >= 0;\n}\n\n/**\n * @param {string} message\n * @return {boolean} Whether this message was a a user error from an iframe embed.\n */\nexport function isUserErrorEmbed(message) {\n  return message.indexOf(USER_ERROR_EMBED_SENTINEL) >= 0;\n}\n\n\n/**\n * @enum {number}\n * @private Visible for testing only.\n */\nexport const LogLevel = {\n  OFF: 0,\n  ERROR: 1,\n  WARN: 2,\n  INFO: 3,\n  FINE: 4,\n};\n\n/**\n * Sets reportError function. Called from error.js to break cyclic\n * dependency.\n * @param {function(*, !Element=)|undefined} fn\n */\nexport function setReportError(fn) {\n  self.reportError = fn;\n}\n\n/**\n * @type {!LogLevel|undefined}\n * @private\n */\nlet levelOverride_ = undefined;\n\n/**\n * @param {!LogLevel} level\n */\nexport function overrideLogLevel(level) {\n  levelOverride_ = level;\n}\n\n/**\n * Logging class. Use of sentinel string instead of a boolean to check user/dev\n * errors because errors could be rethrown by some native code as a new error,\n * and only a message would survive. Also, some browser don’t support a 5th\n * error object argument in window.onerror. List of supporting browser can be\n * found here:\n * https://blog.sentry.io/2016/01/04/client-javascript-reporting-window-onerror.html\n * @final\n * @private Visible for testing only.\n */\nexport class Log {\n  /**\n   * opt_suffix will be appended to error message to identify the type of the\n   * error message. We can't rely on the error object to pass along the type\n   * because some browsers do not have this param in its window.onerror API.\n   * See:\n   * https://blog.sentry.io/2016/01/04/client-javascript-reporting-window-onerror.html\n   *\n   * @param {!Window} win\n   * @param {function(!./mode.ModeDef):!LogLevel} levelFunc\n   * @param {string=} opt_suffix\n   */\n  constructor(win, levelFunc, opt_suffix) {\n    /**\n     * In tests we use the main test window instead of the iframe where\n     * the tests runs because only the former is relayed to the console.\n     * @const {!Window}\n     */\n    this.win = (getMode().test && win.AMP_TEST_IFRAME) ? win.parent : win;\n\n    /** @private @const {function(!./mode.ModeDef):!LogLevel} */\n    this.levelFunc_ = levelFunc;\n\n    /** @private @const {!LogLevel} */\n    this.level_ = this.defaultLevel_();\n\n    /** @private @const {string} */\n    this.suffix_ = opt_suffix || '';\n  }\n\n  /**\n   * @return {!LogLevel}\n   * @private\n   */\n  getLevel_() {\n    return (levelOverride_ !== undefined) ? levelOverride_ : this.level_;\n  }\n\n  /**\n   * @return {!LogLevel}\n   * @private\n   */\n  defaultLevel_() {\n    // No console - can't enable logging.\n    if (!this.win.console || !this.win.console.log) {\n      return LogLevel.OFF;\n    }\n\n    // Logging has been explicitly disabled.\n    if (getMode().log == '0') {\n      return LogLevel.OFF;\n    }\n\n    // Logging is enabled for tests directly.\n    if (getMode().test && this.win.ENABLE_LOG) {\n      return LogLevel.FINE;\n    }\n\n    // LocalDev by default allows INFO level, unless overriden by `#log`.\n    if (getMode().localDev && !getMode().log) {\n      return LogLevel.INFO;\n    }\n\n    // Delegate to the specific resolver.\n    return this.levelFunc_(getModeObject());\n  }\n\n  /**\n   * @param {string} tag\n   * @param {string} level\n   * @param {!Array} messages\n   */\n  msg_(tag, level, messages) {\n    if (this.getLevel_() != LogLevel.OFF) {\n      let fn = this.win.console.log;\n      if (level == 'ERROR') {\n        fn = this.win.console.error || fn;\n      } else if (level == 'INFO') {\n        fn = this.win.console.info || fn;\n      } else if (level == 'WARN') {\n        fn = this.win.console.warn || fn;\n      }\n      if (getMode().localDev) {\n        messages.unshift('[' + tag + ']');\n      }\n      fn.apply(this.win.console, messages);\n    }\n  }\n\n  /**\n   * Whether the logging is enabled.\n   * @return {boolean}\n   */\n  isEnabled() {\n    return this.getLevel_() != LogLevel.OFF;\n  }\n\n  /**\n   * Reports a fine-grained message.\n   * @param {string} tag\n   * @param {...*} var_args\n   */\n  fine(tag, var_args) {\n    if (this.getLevel_() >= LogLevel.FINE) {\n      this.msg_(tag, 'FINE', Array.prototype.slice.call(arguments, 1));\n    }\n  }\n\n  /**\n   * Reports a informational message.\n   * @param {string} tag\n   * @param {...*} var_args\n   */\n  info(tag, var_args) {\n    if (this.getLevel_() >= LogLevel.INFO) {\n      this.msg_(tag, 'INFO', Array.prototype.slice.call(arguments, 1));\n    }\n  }\n\n  /**\n   * Reports a warning message.\n   * @param {string} tag\n   * @param {...*} var_args\n   */\n  warn(tag, var_args) {\n    if (this.getLevel_() >= LogLevel.WARN) {\n      this.msg_(tag, 'WARN', Array.prototype.slice.call(arguments, 1));\n    }\n  }\n\n  /**\n   * Reports an error message. If the logging is disabled, the error is rethrown\n   * asynchronously.\n   * @param {string} tag\n   * @param {...*} var_args\n   * @return {!Error|undefined}\n   * @private\n   */\n  error_(tag, var_args) {\n    if (this.getLevel_() >= LogLevel.ERROR) {\n      this.msg_(tag, 'ERROR', Array.prototype.slice.call(arguments, 1));\n    } else {\n      const error = createErrorVargs.apply(null,\n          Array.prototype.slice.call(arguments, 1));\n      this.prepareError_(error);\n      return error;\n    }\n  }\n\n  /**\n   * Reports an error message.\n   * @param {string} tag\n   * @param {...*} var_args\n   */\n  error(tag, var_args) {\n    const error = this.error_.apply(this, arguments);\n    if (error) {\n      error.name = tag || error.name;\n      // reportError is installed globally per window in the entry point.\n      self.reportError(error);\n    }\n  }\n\n  /**\n   * Reports an error message and marks with an expected property. If the\n   * logging is disabled, the error is rethrown asynchronously.\n   * @param {string} unusedTag\n   * @param {...*} var_args\n   */\n  expectedError(unusedTag, var_args) {\n    const error = this.error_.apply(this, arguments);\n    if (error) {\n      error.expected = true;\n      // reportError is installed globally per window in the entry point.\n      self.reportError(error);\n    }\n  }\n\n  /**\n   * Creates an error object.\n   * @param {...*} var_args\n   * @return {!Error}\n   */\n  createError(var_args) {\n    const error = createErrorVargs.apply(null, arguments);\n    this.prepareError_(error);\n    return error;\n  }\n\n  /**\n   * Creates an error object with its expected property set to true.\n   * @param {...*} var_args\n   * @return {!Error}\n   */\n  createExpectedError(var_args) {\n    const error = createErrorVargs.apply(null, arguments);\n    this.prepareError_(error);\n    error.expected = true;\n    return error;\n  }\n\n  /**\n   * Throws an error if the first argument isn't trueish.\n   *\n   * Supports argument substitution into the message via %s placeholders.\n   *\n   * Throws an error object that has two extra properties:\n   * - associatedElement: This is the first element provided in the var args.\n   *   It can be used for improved display of error messages.\n   * - messageArray: The elements of the substituted message as non-stringified\n   *   elements in an array. When e.g. passed to console.error this yields\n   *   native displays of things like HTML elements.\n   *\n   * @param {T} shouldBeTrueish The value to assert. The assert fails if it does\n   *     not evaluate to true.\n   * @param {string=} opt_message The assertion message\n   * @param {...*} var_args Arguments substituted into %s in the message.\n   * @return {T} The value of shouldBeTrueish.\n   * @template T\n   * eslint \"google-camelcase/google-camelcase\": 0\n   */\n  assert(shouldBeTrueish, opt_message, var_args) {\n    let firstElement;\n    if (!shouldBeTrueish) {\n      const message = opt_message || 'Assertion failed';\n      const splitMessage = message.split('%s');\n      const first = splitMessage.shift();\n      let formatted = first;\n      const messageArray = [];\n      pushIfNonEmpty(messageArray, first);\n      for (let i = 2; i < arguments.length; i++) {\n        const val = arguments[i];\n        if (val && val.tagName) {\n          firstElement = val;\n        }\n        const nextConstant = splitMessage.shift();\n        messageArray.push(val);\n        pushIfNonEmpty(messageArray, nextConstant.trim());\n        formatted += toString(val) + nextConstant;\n      }\n      const e = new Error(formatted);\n      e.fromAssert = true;\n      e.associatedElement = firstElement;\n      e.messageArray = messageArray;\n      this.prepareError_(e);\n      // reportError is installed globally per window in the entry point.\n      self.reportError(e);\n      throw e;\n    }\n    return shouldBeTrueish;\n  }\n\n  /**\n   * Throws an error if the first argument isn't an Element\n   *\n   * Otherwise see `assert` for usage\n   *\n   * @param {*} shouldBeElement\n   * @param {string=} opt_message The assertion message\n   * @return {!Element} The value of shouldBeTrueish.\n   * @template T\n   * eslint \"google-camelcase/google-camelcase\": 2\n   */\n  assertElement(shouldBeElement, opt_message) {\n    const shouldBeTrueish = shouldBeElement && shouldBeElement.nodeType == 1;\n    this.assert(shouldBeTrueish, (opt_message || 'Element expected') + ': %s',\n        shouldBeElement);\n    return /** @type {!Element} */ (shouldBeElement);\n  }\n\n  /**\n   * Throws an error if the first argument isn't a string. The string can\n   * be empty.\n   *\n   * For more details see `assert`.\n   *\n   * @param {*} shouldBeString\n   * @param {string=} opt_message The assertion message\n   * @return {string} The string value. Can be an empty string.\n   * eslint \"google-camelcase/google-camelcase\": 2\n   */\n  assertString(shouldBeString, opt_message) {\n    this.assert(typeof shouldBeString == 'string',\n        (opt_message || 'String expected') + ': %s', shouldBeString);\n    return /** @type {string} */ (shouldBeString);\n  }\n\n  /**\n   * Throws an error if the first argument isn't a number. The allowed values\n   * include `0` and `NaN`.\n   *\n   * For more details see `assert`.\n   *\n   * @param {*} shouldBeNumber\n   * @param {string=} opt_message The assertion message\n   * @return {number} The number value. The allowed values include `0`\n   *   and `NaN`.\n   */\n  assertNumber(shouldBeNumber, opt_message) {\n    this.assert(typeof shouldBeNumber == 'number',\n        (opt_message || 'Number expected') + ': %s', shouldBeNumber);\n    return /** @type {number} */ (shouldBeNumber);\n  }\n\n  /**\n   * Throws an error if the first argument isn't a boolean.\n   *\n   * For more details see `assert`.\n   *\n   * @param {*} shouldBeBoolean\n   * @param {string=} opt_message The assertion message\n   * @return {boolean} The boolean value.\n   */\n  assertBoolean(shouldBeBoolean, opt_message) {\n    this.assert(!!shouldBeBoolean === shouldBeBoolean,\n        (opt_message || 'Boolean expected') + ': %s', shouldBeBoolean);\n    return /** @type {boolean} */ (shouldBeBoolean);\n  }\n\n  /**\n   * Asserts and returns the enum value. If the enum doesn't contain such a\n   * value, the error is thrown.\n   *\n   * @param {!Object<T>} enumObj\n   * @param {string} s\n   * @param {string=} opt_enumName\n   * @return {T}\n   * @template T\n   * eslint \"google-camelcase/google-camelcase\": 2\n   */\n  assertEnumValue(enumObj, s, opt_enumName) {\n    if (isEnumValue(enumObj, s)) {\n      return s;\n    }\n    this.assert(false,\n        'Unknown %s value: \"%s\"',\n        opt_enumName || 'enum', s);\n  }\n\n  /**\n   * @param {!Error} error\n   * @private\n   */\n  prepareError_(error) {\n    error = duplicateErrorIfNecessary(error);\n    if (this.suffix_) {\n      if (!error.message) {\n        error.message = this.suffix_;\n      } else if (error.message.indexOf(this.suffix_) == -1) {\n        error.message += this.suffix_;\n      }\n    } else if (isUserErrorMessage(error.message)) {\n      error.message = error.message.replace(USER_ERROR_SENTINEL, '');\n    }\n  }\n}\n\n/**\n * @param {string|!Element} val\n * @return {string}\n */\nfunction toString(val) {\n  // Do check equivalent to `val instanceof Element` without cross-window bug\n  if (val && val.nodeType == 1) {\n    return val.tagName.toLowerCase() + (val.id ? '#' + val.id : '');\n  }\n  return /** @type {string} */ (val);\n}\n\n\n/**\n * @param {!Array} array\n * @param {*} val\n */\nfunction pushIfNonEmpty(array, val) {\n  if (val != '') {\n    array.push(val);\n  }\n}\n\n/**\n * Some exceptions (DOMException, namely) have read-only message.\n * @param {!Error} error\n * @return {!Error};\n */\nexport function duplicateErrorIfNecessary(error) {\n  const {message} = error;\n  const test = String(Math.random());\n  error.message = test;\n\n  if (error.message === test) {\n    error.message = message;\n    return error;\n  }\n\n  const e = new Error(error.message);\n  // Copy all the extraneous things we attach.\n  for (const prop in error) {\n    e[prop] = error[prop];\n  }\n  // Ensure these are copied.\n  e.stack = error.stack;\n  return e;\n}\n\n/**\n * @param {...*} var_args\n * @return {!Error}\n * @visibleForTesting\n */\nexport function createErrorVargs(var_args) {\n  let error = null;\n  let message = '';\n  for (let i = 0; i < arguments.length; i++) {\n    const arg = arguments[i];\n    if (arg instanceof Error && !error) {\n      error = duplicateErrorIfNecessary(arg);\n    } else {\n      if (message) {\n        message += ' ';\n      }\n      message += arg;\n    }\n  }\n\n  if (!error) {\n    error = new Error(message);\n  } else if (message) {\n    error.message = message + ': ' + error.message;\n  }\n  return error;\n}\n\n\n/**\n * Rethrows the error without terminating the current context. This preserves\n * whether the original error designation is a user error or a dev error.\n * @param {...*} var_args\n */\nexport function rethrowAsync(var_args) {\n  const error = createErrorVargs.apply(null, arguments);\n  setTimeout(() => {\n    // reportError is installed globally per window in the entry point.\n    self.reportError(error);\n    throw error;\n  });\n}\n\n\n/**\n * Cache for logs. We do not use a Service since the service module depends\n * on Log and closure literally can't even.\n * @type {{user: ?Log, dev: ?Log, userForEmbed: ?Log}}\n */\nself.log = (self.log || {\n  user: null,\n  dev: null,\n  userForEmbed: null,\n});\n\nconst logs = self.log;\n\n/**\n * Eventually holds a constructor for Log objects. Lazily initialized, so we\n * can avoid ever referencing the real constructor except in JS binaries\n * that actually want to include the implementation.\n * @type {?Function}\n */\nlet logConstructor = null;\n\n/**\n * Initializes log contructor.\n */\nexport function initLogConstructor() {\n  logConstructor = Log;\n  // Initialize instances for use. If a binary (an extension for example) that\n  // does not call `initLogConstructor` invokes `dev()` or `user()` earlier than\n  // the binary that does call `initLogConstructor` (amp.js), the extension will\n  // throw an error as that extension will never be able to initialize the log\n  // instances and we also don't want it to call `initLogConstructor` either\n  // (since that will cause the Log implementation to be bundled into that\n  // binary). So we must initialize the instances eagerly so that they are ready\n  // for use (stored globally) after the main binary calls `initLogConstructor`.\n  dev();\n  user();\n}\n\n/**\n * Resets log contructor for testing.\n */\nexport function resetLogConstructorForTesting() {\n  logConstructor = null;\n}\n\n/**\n * Publisher level log.\n *\n * Enabled in the following conditions:\n *  1. Not disabled using `#log=0`.\n *  2. Development mode is enabled via `#development=1` or logging is explicitly\n *     enabled via `#log=D` where D >= 1.\n *  3. AMP.setLogLevel(D) is called, where D >= 1.\n *\n * @param {!Element=} opt_element\n * @return {!Log}\n */\nexport function user(opt_element) {\n  if (!logs.user) {\n    logs.user = getUserLogger(USER_ERROR_SENTINEL);\n  }\n  if (!isFromEmbed(logs.user.win, opt_element)) {\n    return logs.user;\n  } else {\n    if (logs.userForEmbed) {\n      return logs.userForEmbed;\n    }\n    return logs.userForEmbed = getUserLogger(USER_ERROR_EMBED_SENTINEL);\n  }\n}\n\n/**\n * Getter for user logger\n * @param {string=} suffix\n * @return {!Log}\n */\nfunction getUserLogger(suffix) {\n  if (!logConstructor) {\n    throw new Error('failed to call initLogConstructor');\n  }\n  return new logConstructor(self, mode => {\n    const logNum = parseInt(mode.log, 10);\n    if (mode.development || logNum >= 1) {\n      return LogLevel.FINE;\n    }\n    return LogLevel.WARN;\n  }, suffix);\n}\n\n/**\n * AMP development log. Calls to `devLog().assert` and `dev.fine` are stripped\n * in the PROD binary. However, `devLog().assert` result is preserved in either\n * case.\n *\n * Enabled in the following conditions:\n *  1. Not disabled using `#log=0`.\n *  2. Logging is explicitly enabled via `#log=D`, where D >= 2.\n *  3. AMP.setLogLevel(D) is called, where D >= 2.\n *\n * @return {!Log}\n */\nexport function dev() {\n  if (logs.dev) {\n    return logs.dev;\n  }\n  if (!logConstructor) {\n    throw new Error('failed to call initLogConstructor');\n  }\n  return logs.dev = new logConstructor(self, mode => {\n    const logNum = parseInt(mode.log, 10);\n    if (logNum >= 3) {\n      return LogLevel.FINE;\n    }\n    if (logNum >= 2) {\n      return LogLevel.INFO;\n    }\n    return LogLevel.OFF;\n  });\n}\n\n/**\n * @param {!Window} win\n * @param {!Element=} opt_element\n * @return {boolean} isEmbed\n */\nexport function isFromEmbed(win, opt_element) {\n  if (!opt_element) {\n    return false;\n  }\n  return opt_element.ownerDocument.defaultView != win;\n}\n","/**\n * Copyright 2016 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {getMode} from './mode';\n\n/**\n * Provides info about the current app. This return value may be cached and\n * passed around as it will always be DCE'd.\n * @param {?Window=} opt_win\n * @return {!./mode.ModeDef}\n */\nexport function getModeObject(opt_win) {\n  return {\n    localDev: getMode(opt_win).localDev,\n    development: getMode(opt_win).development,\n    filter: getMode(opt_win).filter,\n    minified: getMode(opt_win).minified,\n    lite: getMode(opt_win).lite,\n    test: getMode(opt_win).test,\n    log: getMode(opt_win).log,\n    version: getMode(opt_win).version,\n    rtvVersion: getMode(opt_win).rtvVersion,\n  };\n}\n","/**\n * Copyright 2015 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {parseQueryString_} from './url-parse-query-string';\n\n/**\n * @typedef {{\n *   localDev: boolean,\n *   development: boolean,\n *   filter: (string|undefined),\n *   minified: boolean,\n *   lite: boolean,\n *   test: boolean,\n *   log: (string|undefined),\n *   version: string,\n *   rtvVersion: string,\n * }}\n */\nexport let ModeDef;\n\n/** @type {string} */\nconst version = '$internalRuntimeVersion$';\n\n/**\n * `rtvVersion` is the prefixed version we serve off of the cdn.\n * The prefix denotes canary(00) or prod(01) or an experiment version ( > 01).\n * @type {string}\n */\nlet rtvVersion = '';\n\n/**\n * Provides info about the current app.\n * @param {?Window=} opt_win\n * @return {!ModeDef}\n */\nexport function getMode(opt_win) {\n  const win = opt_win || self;\n  if (win.AMP_MODE) {\n    return win.AMP_MODE;\n  }\n  return win.AMP_MODE = getMode_(win);\n}\n\n/**\n * Provides info about the current app.\n * @param {!Window} win\n * @return {!ModeDef}\n */\nfunction getMode_(win) {\n  // Magic constants that are replaced by closure compiler.\n  // IS_MINIFIED is always replaced with true when closure compiler is used\n  // while IS_DEV is only replaced when `gulp dist` is called without the\n  // --fortesting flag.\n  const IS_DEV = true;\n  const IS_MINIFIED = false;\n\n  const localDevEnabled = !!(self.AMP_CONFIG && self.AMP_CONFIG.localDev);\n  const runningTests = IS_DEV && !!(win.AMP_TEST || win.__karma__);\n  const isLocalDev = IS_DEV && (localDevEnabled || runningTests);\n  const hashQuery = parseQueryString_(\n      // location.originalHash is set by the viewer when it removes the fragment\n      // from the URL.\n      win.location.originalHash || win.location.hash);\n\n  const searchQuery = parseQueryString_(win.location.search);\n\n  if (!rtvVersion) {\n    rtvVersion = getRtvVersion(win, isLocalDev);\n  }\n\n  // The `minified`, `test` and `localDev` properties are replaced\n  // as boolean literals when we run `gulp dist` without the `--fortesting`\n  // flags. This improved DCE on the production file we deploy as the code\n  // paths for localhost/testing/development are eliminated.\n  return {\n    localDev: isLocalDev,\n    // Triggers validation or enable pub level logging. Validation can be\n    // bypassed via #validate=0.\n    // Note that AMP_DEV_MODE flag is used for testing purposes.\n    development: !!(hashQuery['development'] == '1' || win.AMP_DEV_MODE),\n    examiner: hashQuery['development'] == '2',\n    // Allows filtering validation errors by error category. For the\n    // available categories, see ErrorCategory in validator/validator.proto.\n    filter: hashQuery['filter'],\n    // amp-geo override\n    geoOverride: hashQuery['amp-geo'],\n    minified: IS_MINIFIED,\n    // Whether document is in an amp-lite viewer. It signal that the user\n    // would prefer to use less bandwidth.\n    lite: searchQuery['amp_lite'] != undefined,\n    test: runningTests,\n    log: hashQuery['log'],\n    version,\n    rtvVersion,\n  };\n}\n\n/**\n * Retrieve the `rtvVersion` which will have a numeric prefix\n * denoting canary/prod/experiment (unless `isLocalDev` is true).\n *\n * @param {!Window} win\n * @param {boolean} isLocalDev\n * @return {string}\n */\nfunction getRtvVersion(win, isLocalDev) {\n  // If it's local dev then we won't actually have a full version so\n  // just use the version.\n  if (isLocalDev) {\n    return version;\n  }\n\n  if (win.AMP_CONFIG && win.AMP_CONFIG.v) {\n    return win.AMP_CONFIG.v;\n  }\n\n  // Currently `$internalRuntimeVersion$` and thus `mode.version` contain only\n  // major version. The full version however must also carry the minor version.\n  // We will default to production default `01` minor version for now.\n  // TODO(erwinmombay): decide whether $internalRuntimeVersion$ should contain\n  // minor version.\n  return `01${version}`;\n}\n\n\n/**\n * @param {!Window} win\n * @param {boolean} isLocalDev\n * @return {string}\n * @visibleForTesting\n */\nexport function getRtvVersionForTesting(win, isLocalDev) {\n  return getRtvVersion(win, isLocalDev);\n}\n\n\n/** @visibleForTesting */\nexport function resetRtvVersionForTesting() {\n  rtvVersion = '';\n}\n","/**\n * Copyright 2015 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\n/**\n * This class helps to manage observers. Observers can be added, removed or\n * fired through and instance of this class.\n * @template TYPE\n */\nexport class Observable {\n\n  /**\n   * Creates an instance of Observable.\n   */\n  constructor() {\n    /** @type {?Array<function(TYPE)>} */\n    this.handlers_ = null;\n  }\n\n  /**\n   * Adds the observer to this instance.\n   * @param {function(TYPE)} handler Observer's handler.\n   * @return {!UnlistenDef}\n   */\n  add(handler) {\n    if (!this.handlers_) {\n      this.handlers_ = [];\n    }\n    this.handlers_.push(handler);\n    return () => {\n      this.remove(handler);\n    };\n  }\n\n  /**\n   * Removes the observer from this instance.\n   * @param {function(TYPE)} handler Observer's instance.\n   */\n  remove(handler) {\n    if (!this.handlers_) {\n      return;\n    }\n    const index = this.handlers_.indexOf(handler);\n    if (index > -1) {\n      this.handlers_.splice(index, 1);\n    }\n  }\n\n  /**\n   * Removes all observers.\n   */\n  removeAll() {\n    if (!this.handlers_) {\n      return;\n    }\n    this.handlers_.length = 0;\n  }\n\n  /**\n   * Fires an event. All observers are called.\n   * @param {TYPE=} opt_event\n   */\n  fire(opt_event) {\n    if (!this.handlers_) {\n      return;\n    }\n    const handlers = this.handlers_;\n    for (let i = 0; i < handlers.length; i++) {\n      const handler = handlers[i];\n      handler(opt_event);\n    }\n  }\n\n  /**\n   * Returns number of handlers. Mostly needed for tests.\n   * @return {number}\n   */\n  getHandlerCount() {\n    if (!this.handlers_) {\n      return 0;\n    }\n    return this.handlers_.length;\n  }\n}\n","/**\n * Copyright 2018 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {createElementWithAttributes} from '../src/dom';\nimport {dict} from '../src/utils/object';\nimport {user} from '../src/log';\n\n/** @const {string} */\nconst TAG = 'pixel';\n\n/**\n * @param {!Window} win\n * @param {string} src\n * @param {?string=} referrerPolicy\n * @return {!Element}\n */\nexport function createPixel(win, src, referrerPolicy) {\n  if (referrerPolicy && referrerPolicy !== 'no-referrer') {\n    user().error(TAG, 'Unsupported referrerPolicy: ' + referrerPolicy);\n  }\n\n  return referrerPolicy === 'no-referrer'\n    ? createNoReferrerPixel(win, src)\n    : createImagePixel(win, src);\n}\n\n/**\n * @param {!Window} win\n * @param {string} src\n * @return {!Element}\n */\nfunction createNoReferrerPixel(win, src) {\n  if (isReferrerPolicySupported()) {\n    return createImagePixel(win, src, true);\n  } else {\n    // if \"referrerPolicy\" is not supported, use iframe wrapper\n    // to scrub the referrer.\n    const iframe = createElementWithAttributes(\n        /** @type {!Document} */ (win.document), 'iframe', dict({\n          'src': 'about:blank',\n          'style': 'display:none',\n        }));\n    win.document.body.appendChild(iframe);\n    createImagePixel(iframe.contentWindow, src);\n    return iframe;\n  }\n}\n\n/**\n * @param {!Window} win\n * @param {string} src\n * @param {boolean=} noReferrer\n * @return {!Image}\n */\nfunction createImagePixel(win, src, noReferrer = false) {\n  const image = new win.Image();\n  if (noReferrer) {\n    image.referrerPolicy = 'no-referrer';\n  }\n  image.src = src;\n  return image;\n}\n\n/**\n * Check if element attribute \"referrerPolicy\" is supported by the browser.\n * Safari 11.1 does not support it yet.\n *\n * @return {boolean}\n */\nfunction isReferrerPolicySupported() {\n  return 'referrerPolicy' in Image.prototype;\n}\n","/**\n * Copyright 2015 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {getMode} from './mode';\nimport {install as installArrayIncludes} from './polyfills/array-includes';\nimport {install as installCustomElements} from './polyfills/custom-elements';\nimport {\n  install as installDOMTokenListToggle,\n} from './polyfills/domtokenlist-toggle';\nimport {install as installDocContains} from './polyfills/document-contains';\nimport {install as installMathSign} from './polyfills/math-sign';\nimport {install as installObjectAssign} from './polyfills/object-assign';\nimport {install as installPromise} from './polyfills/promise';\nimport {installCustomElements as installRegisterElement} from\n  'document-register-element/build/document-register-element.patched';\nimport {isExperimentOn} from './experiments';\n\nif (isExperimentOn(self, 'custom-elements-v1') || getMode().test) {\n  installCustomElements(self, class {});\n} else {\n  installRegisterElement(self, 'auto');\n}\ninstallDOMTokenListToggle(self);\ninstallMathSign(self);\ninstallObjectAssign(self);\ninstallPromise(self);\ninstallDocContains(self);\ninstallArrayIncludes(self);\n","/**\n * Copyright 2016 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n/**\n * Returns true if the element is in the array and false otherwise.\n *\n * @param {*} value\n * @param {number=} opt_fromIndex\n * @return {boolean}\n * @this {Array}\n */\nfunction includes(value, opt_fromIndex) {\n  const fromIndex = opt_fromIndex || 0;\n  const len = this.length;\n  let i = fromIndex >= 0 ? fromIndex : Math.max(len + fromIndex, 0);\n  for (; i < len; i++) {\n    const other = this[i];\n    // If value has been found OR (value is NaN AND other is NaN)\n    /*eslint \"no-self-compare\": 0*/\n    if (other === value || (value !== value && other !== other)) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/**\n* Sets the Array.contains polyfill if it does not exist.\n* @param {!Window} win\n*/\nexport function install(win) {\n  if (!win.Array.prototype.includes) {\n    win.Object.defineProperty(Array.prototype, 'includes', {\n      enumerable: false,\n      configurable: true,\n      writable: true,\n      value: includes,\n    });\n  }\n}\n","/**\n * Copyright 2018 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @typedef {{\n *   promise: !Promise<undefined>,\n *   resolve: function(),\n * }}\n */\nlet DeferredDef;\n\n/**\n * @typedef {!Function}\n */\nlet CustomElementConstructorDef;\n\n/**\n * @typedef {{\n *  name: string,\n *  ctor: !CustomElementConstructorDef,\n * }}\n */\nlet CustomElementDef;\n\n/**\n * Validates the custom element's name.\n * This intentionally ignores \"valid\" higher Unicode Code Points.\n * https://html.spec.whatwg.org/multipage/custom-elements.html#valid-custom-element-name\n */\nconst VALID_NAME = /^[a-z][a-z0-9._]*-[a-z0-9._-]*$/;\nconst INVALID_NAMES = [\n  'annotation-xml',\n  'color-profile',\n  'font-face',\n  'font-face-src',\n  'font-face-uri',\n  'font-face-format',\n  'font-face-name',\n  'missing-glyph',\n];\n\n/**\n * Asserts that the custom element name conforms to the spec.\n *\n * @param {!Function} SyntaxError\n * @param {string} name\n */\nfunction assertValidName(SyntaxError, name) {\n  if (!VALID_NAME.test(name) || INVALID_NAMES.indexOf(name) >= 0) {\n    throw new SyntaxError(`invalid custom element name \"${name}\"`);\n  }\n}\n\n/**\n * Does win have a full Custom Elements registry?\n *\n * @param {!Window} win\n * @return {boolean}\n */\nfunction hasCustomElements(win) {\n  const {customElements} = win;\n\n  return !!(\n    customElements &&\n    customElements.define &&\n    customElements.get &&\n    customElements.whenDefined);\n}\n\n/**\n * Was HTMLElement already patched for this window?\n *\n * @param {!Window} win\n * @return {boolean}\n */\nfunction isPatched(win) {\n  const tag = win.HTMLElement.toString();\n  return tag.indexOf('[native code]') === -1;\n}\n\n/**\n * The public Custom Elements API.\n */\nclass CustomElementRegistry {\n  /**\n   * @param {!Window} win\n   * @param {!Registry} registry\n   */\n  constructor(win, registry) {\n    /**\n     * @const @private\n     */\n    this.win_ = win;\n\n    /**\n     * @const @private\n     */\n    this.registry_ = registry;\n\n    /**\n     * @type {!Object<string, DeferredDef>}\n     * @private\n     * @const\n     */\n    this.pendingDefines_ = this.win_.Object.create(null);\n  }\n\n  /**\n   * Register the custom element.\n   *\n   * @param {string} name\n   * @param {!CustomElementConstructorDef} ctor\n   * @param {!Object=} options\n   */\n  define(name, ctor, options) {\n    this.registry_.define(name, ctor, options);\n\n    // If anyone is waiting for this custom element to be defined, resolve\n    // their promise.\n    const pending = this.pendingDefines_;\n    const deferred = pending[name];\n    if (deferred) {\n      deferred.resolve();\n      delete pending[name];\n    }\n  }\n\n  /**\n   * Get the constructor of the (already defined) custom element.\n   *\n   * @param {string} name\n   * @return {!CustomElementConstructorDef|undefined}\n   */\n  get(name) {\n    const def = this.registry_.getByName(name);\n    if (def) {\n      return def.ctor;\n    }\n  }\n\n  /**\n   * Returns a promise that waits until the custom element is defined.\n   * If the custom element is already defined, returns a resolved promise.\n   *\n   * @param {string} name\n   * @return {!Promise<undefined>}\n   */\n  whenDefined(name) {\n    const {Promise, SyntaxError} = this.win_;\n    assertValidName(SyntaxError, name);\n\n    if (this.registry_.getByName(name)) {\n      return Promise.resolve();\n    }\n\n    const pending = this.pendingDefines_;\n    const deferred = pending[name];\n    if (deferred) {\n      return deferred.promise;\n    }\n\n    let resolve;\n    const promise = new /*OK*/Promise(res => resolve = res);\n    pending[name] = {\n      promise,\n      resolve,\n    };\n\n    return promise;\n  }\n\n  /**\n   * Upgrade all custom elements inside root.\n   *\n   * @param {!Node} root\n   */\n  upgrade(root) {\n    this.registry_.upgrade(root);\n  }\n}\n\n/**\n * This internal APIs necessary to run the CustomElementRegistry.\n * Since Registry is never exposed externally, all methods are actually\n * available on the instance.\n */\nclass Registry {\n  /**\n   * @param {!Window} win\n   */\n  constructor(win) {\n    /**\n     * @private @const\n     */\n    this.win_ = win;\n\n    /**\n     * @private @const\n     */\n    this.doc_ = win.document;\n\n    /**\n     * @type {!Object<string, !CustomElementDef>}\n     * @private\n     * @const\n     */\n    this.definitions_ = win.Object.create(null);\n\n    /**\n     * A up-to-date DOM selector for all custom elements.\n     * @type {string}\n     */\n    this.query_ = '';\n\n    /**\n     * The currently upgrading element.\n     * @private {Element}\n     */\n    this.current_ = null;\n  }\n\n  /**\n   * The currently-being-upgraded custom element.\n   *\n   * When an already created (through the DOM parsing APIs, or innerHTML)\n   * custom element node is being upgraded, we can't just create a new node\n   * (it's illegal in the spec). But we still need to run the custom element's\n   * constructor code on the node. We avoid this conundrum by running the\n   * constructor while returning this current node in the HTMLElement\n   * class constructor (the base class of all custom elements).\n   *\n   * @return {Element}\n   */\n  current() {\n    const current = this.current_;\n    this.current_ = null;\n    return current;\n  }\n\n  /**\n   * Finds the custom element definition by name.\n   *\n   * @param {string} name\n   * @return {CustomElementDef|undefined}\n   */\n  getByName(name) {\n    const definition = this.definitions_[name];\n    if (definition) {\n      return definition;\n    }\n  }\n\n  /**\n   * Finds the custom element definition by constructor instance.\n   *\n   * @param {CustomElementConstructorDef} ctor\n   * @return {CustomElementDef|undefined}\n   */\n  getByConstructor(ctor) {\n    const definitions = this.definitions_;\n\n    for (const name in definitions) {\n      const def = definitions[name];\n      if (def.ctor === ctor) {\n        return def;\n      }\n    }\n  }\n\n  /**\n   * Registers the custom element definition, and upgrades all elements by that\n   * name in the root document.\n   *\n   * @param {string} name\n   * @param {!CustomElementConstructorDef} ctor\n   * @param {!Object|undefined} options\n   */\n  define(name, ctor, options) {\n    const {Error, SyntaxError} = this.win_;\n\n    if (options) {\n      throw new Error('Extending native custom elements is not supported');\n    }\n\n    assertValidName(SyntaxError, name);\n\n    if (this.getByName(name) ||\n        this.getByConstructor(ctor)) {\n      throw new Error(`duplicate definition \"${name}\"`);\n    }\n\n    // TODO(jridgewell): Record connectedCallback, disconnectedCallback,\n    // adoptedCallback, attributeChangedCallback, and observedAttributes.\n    // TODO(jridgewell): If attributeChangedCallback, gather observedAttributes\n    this.definitions_[name] = {\n      name,\n      ctor,\n    };\n\n    this.observe_(name);\n    this.upgrade(this.doc_, name);\n  }\n\n  /**\n   * Upgrades custom elements descendants of root (but not including root).\n   *\n   * When called with an opt_query, it both upgrades and connects the custom\n   * elements (this is used during the custom element define algorithm).\n   *\n   * @param {!Node} root\n   * @param {string=} opt_query\n   */\n  upgrade(root, opt_query) {\n    // Only CustomElementRegistry.p.define provides a query (the newly defined\n    // custom element). In this case, we are both upgrading _and_ connecting\n    // the custom elements.\n    const newlyDefined = !!opt_query;\n    const query = opt_query || this.query_;\n    const upgradeCandidates = this.queryAll_(root, query);\n\n    for (let i = 0; i < upgradeCandidates.length; i++) {\n      const candidate = upgradeCandidates[i];\n      if (newlyDefined) {\n        this.connectedCallback_(candidate);\n      } else {\n        this.upgradeSelf(candidate);\n      }\n    }\n  }\n\n  /**\n   * Upgrades the custom element node, if a custom element has been registered\n   * by this name.\n   *\n   * @param {!Node} node\n   */\n  upgradeSelf(node) {\n    const def = this.getByName(node.localName);\n    if (!def) {\n      return;\n    }\n\n    this.upgradeSelf_(/** @type {!Element} */(node), def);\n  }\n\n  /**\n   * @param {!Node} root\n   * @param {string} query\n   * @return {!Array|!NodeList}\n   */\n  queryAll_(root, query) {\n    if (!query || !root.querySelectorAll) {\n      // Nothing to do...\n      return [];\n    }\n\n    return root.querySelectorAll(query);\n  }\n\n  /**\n   * Upgrades the (already created via DOM parsing) custom element.\n   *\n   * @param {!Element} node\n   * @param {!CustomElementDef} def\n   */\n  upgradeSelf_(node, def) {\n    const {ctor} = def;\n    if (node instanceof ctor) {\n      return;\n    }\n\n    // Despite how it looks, this is not a useless construction.\n    // HTMLElementPolyfill (the base class of all custom elements) will return\n    // the current node, allowing the custom element's subclass constructor to\n    // run on the node. The node itself is already constructed, so the return\n    // value is just the node.\n    this.current_ = node;\n    const el = new ctor();\n\n    if (el !== node) {\n      throw new this.win_.Error(\n          'Constructor illegally returned a different instance.');\n    }\n  }\n\n  /**\n   * Fires connectedCallback on the custom element, if it has one.\n   * This also upgrades the custom element, since it may not have been\n   * accessible via the root document before (a detached DOM tree).\n   *\n   * @param {!Node} node\n   */\n  connectedCallback_(node) {\n    const def = this.getByName(node.localName);\n    if (!def) {\n      return;\n    }\n    this.upgradeSelf_(/** @type {!Element} */(node), def);\n    // TODO(jridgewell): It may be appropriate to adoptCallback, if the node\n    // used to be in another doc.\n    // TODO(jridgewell): I should be calling the definitions connectedCallback\n    // with node as the context.\n    if (node.connectedCallback) {\n      node.connectedCallback();\n    }\n  }\n\n  /**\n   * Fires disconnectedCallback on the custom element, if it has one.\n   *\n   * @param {!Node} node\n   */\n  disconnectedCallback_(node) {\n    // TODO(jridgewell): I should be calling the definitions connectedCallback\n    // with node as the context.\n    if (node.disconnectedCallback) {\n      node.disconnectedCallback();\n    }\n  }\n\n  /**\n   * Records name as a registered custom element to observe.\n   *\n   * Starts the Mutation Observer if this is the first registered custom\n   * element. This is deferred until the first custom element is defined to\n   * speed up initial rendering of the page.\n   *\n   * Mutation Observers are conveniently available in every browser we care\n   * about. When a node is connected to the root document, all custom\n   * elements (including that node iteself) will be upgraded and call\n   * connectedCallback. When a node is disconnectedCallback from the root\n   * document, all custom elements will call disconnectedCallback.\n   *\n   * @param {string} name\n   */\n  observe_(name) {\n    if (this.query_) {\n      this.query_ += `,${name}`;\n      return;\n    }\n\n    this.query_ = name;\n\n    // The first registered name starts the mutation observer.\n    const observer = new this.win_.MutationObserver(records => {\n      if (records) {\n        this.handleRecords_(records);\n      }\n    });\n    observer.observe(this.doc_, {\n      childList: true,\n      subtree: true,\n    });\n  }\n\n  /**\n   * Handle all the Mutation Observer's Mutation Records.\n   * All added custom elements will be upgraded (if not already) and call\n   * connectedCallback. All removed custom elements will call\n   * disconnectedCallback.\n   *\n   * @param {!Array<!MutationRecord>} records\n   */\n  handleRecords_(records) {\n    for (let i = 0; i < records.length; i++) {\n      const record = records[i];\n      if (!record) {\n        continue;\n      }\n\n      const {addedNodes, removedNodes} = record;\n      for (let i = 0; i < addedNodes.length; i++) {\n        const node = addedNodes[i];\n        const connectedCandidates = this.queryAll_(node, this.query_);\n        this.connectedCallback_(node);\n        for (let i = 0; i < connectedCandidates.length; i++) {\n          this.connectedCallback_(connectedCandidates[i]);\n        }\n      }\n\n      for (let i = 0; i < removedNodes.length; i++) {\n        const node = removedNodes[i];\n        const disconnectedCandidates = this.queryAll_(node, this.query_);\n        this.disconnectedCallback_(node);\n        for (let i = 0; i < disconnectedCandidates.length; i++) {\n          this.disconnectedCallback_(disconnectedCandidates[i]);\n        }\n      }\n    }\n  }\n}\n\n/**\n * Does the polyfilling.\n * @param {!Window} win\n */\nfunction polyfill(win) {\n  const {HTMLElement, Element, Node, Document, Object, document} = win;\n  const {createElement, cloneNode, importNode} = document;\n\n  const registry = new Registry(win);\n  const customElements = new CustomElementRegistry(win, registry);\n\n  // Expose the custom element registry.\n  // Object.getOwnPropertyDescriptor(window, 'customElements')\n  // {get: ƒ, set: undefined, enumerable: true, configurable: true}\n  Object.defineProperty(win, 'customElements', {\n    enumerable: true,\n    configurable: true,\n    // writable: false,\n    value: customElements,\n  });\n\n  // Patch createElement to immediately upgrade the custom element.\n  // This has the added benefit that it avoids the \"already created but needs\n  // constructor code run\" chicken-and-egg problem.\n  Document.prototype.createElement = function createElementPolyfill(name) {\n    const def = registry.getByName(name);\n    if (def) {\n      return new def.ctor();\n    }\n    return createElement.apply(this, arguments);\n  };\n\n  // Patch importNode to immediately upgrade custom elements.\n  // TODO(jridgewell): Can fire adoptedCallback for cross doc imports.\n  Document.prototype.importNode = function importNodePolyfill() {\n    const imported = importNode.apply(this, arguments);\n    if (imported) {\n      registry.upgradeSelf(imported);\n      registry.upgrade(imported);\n    }\n    return imported;\n  };\n\n  // Patch cloneNode to immediately upgrade custom elements.\n  Node.prototype.cloneNode = function cloneNodePolyfill() {\n    const cloned = cloneNode.apply(this, arguments);\n    registry.upgradeSelf(cloned);\n    registry.upgrade(cloned);\n    return cloned;\n  };\n\n  // Patch the innerHTML setter to immediately upgrade custom elements.\n  // Note, this could technically fire connectedCallbacks if this node was\n  // connected, but we leave that to the Mutation Observer.\n  const innerHTMLDesc = Object.getOwnPropertyDescriptor(Element.prototype,\n      'innerHTML');\n  const innerHTMLSetter = innerHTMLDesc.set;\n  innerHTMLDesc.set = function(html) {\n    innerHTMLSetter.call(this, html);\n    registry.upgrade(this);\n  };\n  Object.defineProperty(Element.prototype, 'innerHTML', innerHTMLDesc);\n\n  /**\n   * You can't use the real HTMLElement constructor, because you can't subclass\n   * it without using native classes. So, mock its approximation using\n   * createElement.\n   */\n  function HTMLElementPolyfill() {\n    const {constructor} = this;\n\n    // If we're upgrading an already created custom element, we can't create\n    // another new node (by the spec, it must be the same node).\n    let el = registry.current();\n\n    // If there's not a already created custom element, we're being invoked via\n    // `new`ing the constructor.\n    //\n    // Technically, we could get here via createElement, but we patched that.\n    // If it the custom element was registered, the patch turned it into a\n    // `new` call.\n    // If it was not registered, the native createElement is used. And if\n    // native createElement is being used and we got to this code, we're really\n    // in an infinite loop (a native createElement call just below) so we've\n    // got bigger problems.\n    //\n    // So just take my word we got here via `new`.\n    if (!el) {\n      // The custom element definition is an invariant. If the custom element\n      // is registered, everything works. If it's not, it throws in the member\n      // property access (only defined custom elements can be directly\n      // constructed via `new`).\n      const def = registry.getByConstructor(constructor);\n      el = createElement.call(document, def.name);\n    }\n\n    // Finally, if the node was already constructed, we need to reset it's\n    // prototype to the custom element prototype. And if it wasn't already\n    // constructed, we created a new node via native createElement, and we need\n    // to reset it's prototype. Basically always reset the prototype.\n    Object.setPrototypeOf(el, constructor.prototype);\n    return el;\n  }\n  subClass(Object, HTMLElement, HTMLElementPolyfill);\n\n  // Expose the polyfilled HTMLElement constructor for everyone to extend from.\n  win.HTMLElement = HTMLElementPolyfill;\n}\n\n/**\n * Wraps HTMLElement in a Reflect.construct constructor, so that transpiled\n * classes can `_this = superClass.call(this)` during their construction.\n *\n * This is only used when Custom Elements v1 is already available _and_ we're\n * using transpiled classes (which use ES5 construction idioms).\n *\n * @param {!Window} win\n */\nfunction wrapHTMLElement(win) {\n  const {HTMLElement, Reflect, Object} = win;\n  /**\n   */\n  function HTMLElementWrapper() {\n    const ctor = /** @type {function(...?):?|undefined} */(\n      /** @type {!HTMLElement} */(this).constructor);\n\n    // Reflect.construct allows us to construct a new HTMLElement without using\n    // `new` (which will always fail because native HTMLElement is a restricted\n    // constructor).\n    return Reflect.construct(HTMLElement, [], ctor);\n  }\n  subClass(Object, HTMLElement, HTMLElementWrapper);\n\n  // Expose the wrapped HTMLElement constructor for everyone to extend from.\n  win.HTMLElement = HTMLElementWrapper;\n}\n\n/**\n * Setups up prototype inheritance\n *\n * @param {!Object} Object\n * @param {!Function} superClass\n * @param {!Function} subClass\n */\nfunction subClass(Object, superClass, subClass) {\n  // Object.getOwnPropertyDescriptor(superClass.prototype, 'constructor')\n  // {value: ƒ, writable: true, enumerable: false, configurable: true}\n  subClass.prototype = Object.create(superClass.prototype, {\n    constructor: {\n      // enumerable: false,\n      configurable: true,\n      writable: true,\n      value: subClass,\n    },\n  });\n}\n\n/**\n * Polyfills Custom Elements v1 API. This has 4 modes:\n *\n * 1. Custom elements v1 already supported, using native classes\n * 2. Custom elements v1 already supported, using transpiled classes\n * 3. Custom elements v1 not supported, using native classes\n * 4. Custom elements v1 not supported, using transpiled classes\n *\n * In mode 1, nothing is done. In mode 2, a minimal polyfill is used to support\n * extending the HTMLElement base class. In mode 3 and 4, a full polyfill is\n * done.\n *\n * @param {!Window} win\n * @param {!Function} ctor\n */\nexport function install(win, ctor) {\n  if (isPatched(win)) {\n    return;\n  }\n\n  let install = true;\n  let installWrapper = false;\n\n  if (hasCustomElements(win)) {\n    // If ctor is constructable without new, it's a function. That means it was\n    // compiled down, and we need to do the minimal polyfill because all you\n    // cannot extend HTMLElement without native classes.\n    try {\n      const {Object, Reflect} = win;\n\n      // \"Construct\" ctor using ES5 idioms\n      const instance = Object.create(ctor.prototype);\n      ctor.call(instance);\n\n      // If that succeeded, we're in a transpiled environment\n      // Let's find out if we can wrap HTMLElement and avoid a full patch.\n      installWrapper = !!(Reflect && Reflect.construct);\n    } catch (e) {\n\n      // The ctor threw when we constructed is via ES5, so it's a real class.\n      // We're ok to not install the polyfill.\n      install = false;\n    }\n  }\n\n  if (installWrapper) {\n    wrapHTMLElement(win);\n  } else if (install) {\n    polyfill(win);\n  }\n}\n","/**\n * Copyright 2016 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n/**\n * Polyfill for `document.contains()` method. Notice that according to spec\n * `document.contains` is inclusionary.\n * See https://developer.mozilla.org/en-US/docs/Web/API/Node/contains\n * @param {?Node} node\n * @return {boolean}\n * @this {Node}\n */\nfunction documentContainsPolyfill(node) {\n  // Per spec, \"contains\" method is inclusionary\n  // i.e. `node.contains(node) == true`. However, we still need to test\n  // equality to the document itself.\n  return node == this || this.documentElement.contains(node);\n}\n\n\n/**\n * Polyfills `HTMLDocument.contains` API.\n * @param {!Window} win\n */\nexport function install(win) {\n  // HTMLDocument is undefined in Internet Explorer 10, but it has Document,\n  // so we use that as a fallback.\n  const documentClass = win.HTMLDocument || win.Document;\n  if (!documentClass.prototype.contains) {\n    win.Object.defineProperty(documentClass.prototype, 'contains', {\n      enumerable: false,\n      configurable: true,\n      writable: true,\n      value: documentContainsPolyfill,\n    });\n  }\n}\n","/**\n * Copyright 2016 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n/**\n * Polyfill for `DOMTokenList.prototype.toggle(token, opt_force)` method. This\n * is specially important because IE does not support `opt_force` attribute. See\n * https://goo.gl/hgKNYY for details.\n * @param {string} token\n * @param {boolean=} opt_force\n * @this {DOMTokenList}\n * @return {boolean}\n */\nfunction domTokenListTogglePolyfill(token, opt_force) {\n  const remove = opt_force === undefined ? this.contains(token) : !opt_force;\n  if (remove) {\n    this.remove(token);\n    return false;\n  } else {\n    this.add(token);\n    return true;\n  }\n}\n\n\n/**\n * Polyfills `DOMTokenList.prototype.toggle` API in IE.\n * @param {!Window} win\n */\nexport function install(win) {\n  if (isIe(win) && win.DOMTokenList) {\n    win.Object.defineProperty(win.DOMTokenList.prototype, 'toggle', {\n      enumerable: false,\n      configurable: true,\n      writable: true,\n      value: domTokenListTogglePolyfill,\n    });\n  }\n}\n\n\n/**\n * Whether the current browser is a IE browser.\n * @param {!Window} win\n * @return {boolean}\n */\nfunction isIe(win) {\n  return /Trident|MSIE|IEMobile/i.test(win.navigator.userAgent);\n}\n","/**\n * Copyright 2016 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Parses the number x and returns its sign. For positive x returns 1, for\n * negative, -1. For 0 and -0, returns 0 and -0 respectively. For any number\n * that parses to NaN, returns NaN.\n *\n * @param {number} x\n * @return {number}\n */\nexport function sign(x) {\n  x = Number(x);\n\n  // If x is 0, -0, or NaN, return it.\n  if (!x) {\n    return x;\n  }\n\n  return x > 0 ? 1 : -1;\n}\n\n\n/**\n * Sets the Math.sign polyfill if it does not exist.\n * @param {!Window} win\n */\nexport function install(win) {\n  if (!win.Math.sign) {\n    win.Object.defineProperty(win.Math, 'sign', {\n      enumerable: false,\n      configurable: true,\n      writable: true,\n      value: sign,\n    });\n  }\n}\n","/**\n * Copyright 2016 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nconst {hasOwnProperty} = Object.prototype;\n\n/**\n * Copies values of all enumerable own properties from one or more source\n * objects (provided as extended arguments to the function) to a target object.\n *\n * @param {!Object} target\n * @param {...Object} var_args\n * @return {!Object}\n */\nexport function assign(target, var_args) {\n  if (target == null) {\n    throw new TypeError('Cannot convert undefined or null to object');\n  }\n\n  const output = Object(target);\n  for (let i = 1; i < arguments.length; i++) {\n    const source = arguments[i];\n    if (source != null) {\n      for (const key in source) {\n        if (hasOwnProperty.call(source, key)) {\n          output[key] = source[key];\n        }\n      }\n    }\n  }\n  return output;\n}\n\n\n/**\n * Sets the Object.assign polyfill if it does not exist.\n * @param {!Window} win\n */\nexport function install(win) {\n  if (!win.Object.assign) {\n    win.Object.defineProperty(win.Object, 'assign', {\n      enumerable: false,\n      configurable: true,\n      writable: true,\n      value: assign,\n    });\n  }\n}\n","/**\n * Copyright 2016 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nimport * as Promise from 'promise-pjs/promise';\n\n/**\n * Sets the Promise polyfill if it does not exist.\n * @param {!Window} win\n */\nexport function install(win) {\n  if (!win.Promise) {\n    win.Promise = /** @type {?} */ (Promise);\n    // In babel the * export is an Object with a default property.\n    // In closure compiler it is the Promise function itself.\n    if (Promise.default) {\n      win.Promise = Promise.default;\n    }\n    // We copy the individual static methods, because closure\n    // compiler flattens the polyfill namespace.\n    win.Promise.resolve = Promise.resolve;\n    win.Promise.reject = Promise.reject;\n    win.Promise.all = Promise.all;\n    win.Promise.race = Promise.race;\n  }\n}\n","/**\n * Copyright 2015 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Registration and getter functions for AMP services.\n *\n * Invariant: Service getters never return null for registered services.\n */\n\n// src/polyfills.js must be the first import.\nimport './polyfills'; // eslint-disable-line sort-imports-es6-autofix/sort-imports-es6\n\nimport {Deferred} from './utils/promise';\nimport {dev} from './log';\nimport {toWin} from './types';\n\n\n/**\n * Holds info about a service.\n * - obj: Actual service implementation when available.\n * - promise: Promise for the obj.\n * - resolve: Function to resolve the promise with the object.\n * - context: Argument for ctor, either a window or an ampdoc.\n * - ctor: Function that constructs and returns the service.\n * @typedef {{\n *   obj: (?Object),\n *   promise: (?Promise),\n *   resolve: (?function(!Object)),\n *   context: (?Window|?./service/ampdoc-impl.AmpDoc),\n *   ctor: (?function(new:Object, !Window)|\n *          ?function(new:Object, !./service/ampdoc-impl.AmpDoc)),\n * }}\n */\nlet ServiceHolderDef;\n\n\n/**\n * This interface provides a `dispose` method that will be called by\n * runtime when a service needs to be disposed of.\n * @interface\n */\nexport class Disposable {\n\n  /**\n   * Instructs the service to release any resources it might be holding. Can\n   * be called only once in the lifecycle of a service.\n   */\n  dispose() {}\n}\n\n\n/**\n * This interface provides a `adoptEmbedWindow` method that will be called by\n * runtime for a new embed window.\n * @interface\n */\nexport class EmbeddableService {\n\n  /**\n   * Instructs the service to adopt the embed window and add any necessary\n   * listeners and resources.\n   * @param {!Window} unusedEmbedWin\n   */\n  adoptEmbedWindow(unusedEmbedWin) {}\n}\n\n\n/**\n * Returns a service with the given id. Assumes that it has been registered\n * already.\n * @param {!Window} win\n * @param {string} id\n * @param {boolean=} opt_fallbackToTopWin\n * @return {Object} The service.\n */\nexport function getExistingServiceInEmbedScope(win, id, opt_fallbackToTopWin) {\n  // First, try to resolve via local (embed) window.\n  const local = getLocalExistingServiceForEmbedWinOrNull(win, id);\n  if (local) {\n    return local;\n  }\n  if (opt_fallbackToTopWin) {\n    return getService(win, id);\n  }\n  return null;\n}\n\n/**\n * Returns a service with the given id. Assumes that it has been constructed\n * already.\n *\n * Unlike most service getters, passing `Node` is necessary for some FIE-scope\n * services since sometimes we only have the FIE Document for context.\n *\n * @param {!Node|!./service/ampdoc-impl.AmpDoc} nodeOrDoc\n * @param {string} id\n * @param {boolean=} opt_fallbackToTopWin\n * @return {Object} The service.\n */\nexport function getExistingServiceForDocInEmbedScope(\n  nodeOrDoc, id, opt_fallbackToTopWin) {\n  // First, try to resolve via local (embed) window.\n  if (nodeOrDoc.nodeType) {\n    // If a node is passed, try to resolve via this node.\n    const win = toWin(/** @type {!Document} */ (\n      nodeOrDoc.ownerDocument || nodeOrDoc).defaultView);\n    const local = getLocalExistingServiceForEmbedWinOrNull(win, id);\n    if (local) {\n      return local;\n    }\n  }\n  // If an ampdoc is passed or fallback is allowed, continue resolving.\n  if (!nodeOrDoc.nodeType || opt_fallbackToTopWin) {\n    return getServiceForDocDeprecated(nodeOrDoc, id);\n  }\n  return null;\n}\n\n/**\n * Installs a service override on amp-doc level.\n * @param {!Window} embedWin\n * @param {string} id\n * @param {!Object} service The service.\n */\nexport function installServiceInEmbedScope(embedWin, id, service) {\n  const topWin = getTopWindow(embedWin);\n  dev().assert(embedWin != topWin,\n      'Service override can only be installed in embed window: %s', id);\n  dev().assert(!getLocalExistingServiceForEmbedWinOrNull(embedWin, id),\n      'Service override has already been installed: %s', id);\n  registerServiceInternal(embedWin, embedWin, id, () => service);\n  getServiceInternal(embedWin, id); // Force service to build.\n}\n\n/**\n * @param {!Window} embedWin\n * @param {string} id\n * @return {?Object}\n */\nfunction getLocalExistingServiceForEmbedWinOrNull(embedWin, id) {\n  // Note that this method currently only resolves against the given window.\n  // It does not try to go all the way up the parent window chain. We can change\n  // this in the future, but for now this gives us a better performance.\n  const topWin = getTopWindow(embedWin);\n  if (embedWin != topWin && isServiceRegistered(embedWin, id)) {\n    return getServiceInternal(embedWin, id);\n  } else {\n    return null;\n  }\n}\n\n/**\n * Registers a service given a class to be used as implementation.\n * @param {!Window} win\n * @param {string} id of the service.\n * @param {function(new:Object, !Window)} constructor\n * @param {boolean=} opt_instantiate Whether to immediately create the service\n */\nexport function registerServiceBuilder(win,\n  id,\n  constructor,\n  opt_instantiate) {\n  win = getTopWindow(win);\n  registerServiceInternal(win, win, id, constructor);\n  if (opt_instantiate) {\n    getServiceInternal(win, id);\n  }\n}\n\n\n/**\n * Returns a service and registers it given a class to be used as\n * implementation.\n * @param {!Node|!./service/ampdoc-impl.AmpDoc} nodeOrDoc\n * @param {string} id of the service.\n * @param {function(new:Object, !./service/ampdoc-impl.AmpDoc)} constructor\n * @param {boolean=} opt_instantiate Whether to immediately create the service\n */\nexport function registerServiceBuilderForDoc(nodeOrDoc,\n  id,\n  constructor,\n  opt_instantiate) {\n  const ampdoc = getAmpdoc(nodeOrDoc);\n  const holder = getAmpdocServiceHolder(ampdoc);\n  registerServiceInternal(holder, ampdoc, id, constructor);\n  if (opt_instantiate) {\n    getServiceInternal(holder, id);\n  }\n}\n\n\n/**\n * Returns a service for the given id and window (a per-window singleton). Users\n * should typically wrap this as a special purpose function (e.g.\n * `Services.vsyncFor(win)`) for type safety and because the factory should not\n * be passed around.\n * @param {!Window} win\n * @param {string} id of the service.\n * @template T\n * @return {T}\n */\nexport function getService(win, id) {\n  win = getTopWindow(win);\n  return getServiceInternal(win, id);\n}\n\n\n/**\n * Returns a promise for a service for the given id and window. Also expects an\n * element that has the actual implementation. The promise resolves when the\n * implementation loaded. Users should typically wrap this as a special purpose\n * function (e.g. `Services.vsyncFor(win)`) for type safety and because the\n * factory should not be passed around.\n * @param {!Window} win\n * @param {string} id of the service.\n * @return {!Promise<!Object>}\n */\nexport function getServicePromise(win, id) {\n  return getServicePromiseInternal(win, id);\n}\n\n\n/**\n * Returns a service or null with the given id.\n * @param {!Window} win\n * @param {string} id\n * @return {?Object} The service.\n */\nexport function getExistingServiceOrNull(win, id) {\n  win = getTopWindow(win);\n  if (isServiceRegistered(win, id)) {\n    return getServiceInternal(win, id);\n  } else {\n    return null;\n  }\n}\n\n\n/**\n * Like getServicePromise but returns null if the service was never registered.\n * @param {!Window} win\n * @param {string} id\n * @return {?Promise<!Object>}\n */\nexport function getServicePromiseOrNull(win, id) {\n  return getServicePromiseOrNullInternal(win, id);\n}\n\n\n/**\n * Returns a service for the given id and ampdoc (a per-ampdoc singleton).\n * Expects service `id` to be registered.\n * @param {!Element|!./service/ampdoc-impl.AmpDoc} elementOrAmpDoc\n * @param {string} id\n * @return {T}\n * @template T\n */\nexport function getServiceForDoc(elementOrAmpDoc, id) {\n  const ampdoc = getAmpdoc(elementOrAmpDoc);\n  const holder = getAmpdocServiceHolder(ampdoc);\n  return getServiceInternal(holder, id);\n}\n\n\n/**\n * tl;dr -- Use getServiceForDoc() instead of this.\n *\n * Privileged variant of getServiceForDoc() that accepts non-element params,\n * e.g. window.document. This is currently necessary for doc-level services\n * used in startup, e.g. Chunks. Eventually we want to remove this function\n * and have callers find the appropriate AmpDoc and use getServiceForDoc().\n *\n * @param {!Node|!./service/ampdoc-impl.AmpDoc} nodeOrDoc\n * @param {string} id\n * @return {T}\n * @template T\n */\nexport function getServiceForDocDeprecated(nodeOrDoc, id) {\n  const ampdoc = getAmpdoc(nodeOrDoc);\n  const holder = getAmpdocServiceHolder(ampdoc);\n  return getServiceInternal(holder, id);\n}\n\n\n/**\n * Returns a promise for a service for the given id and ampdoc. Also expects\n * a service that has the actual implementation. The promise resolves when\n * the implementation loaded.\n * @param {!Element|!./service/ampdoc-impl.AmpDoc} elementOrAmpDoc\n * @param {string} id\n * @return {!Promise<!Object>}\n */\nexport function getServicePromiseForDoc(elementOrAmpDoc, id) {\n  return getServicePromiseInternal(\n      getAmpdocServiceHolder(elementOrAmpDoc), id);\n}\n\n\n/**\n * Like getServicePromiseForDoc but returns null if the service was never\n * registered for this ampdoc.\n * @param {!Element|!./service/ampdoc-impl.AmpDoc} elementOrAmpDoc\n * @param {string} id\n * @return {?Promise<!Object>}\n */\nexport function getServicePromiseOrNullForDoc(elementOrAmpDoc, id) {\n  return getServicePromiseOrNullInternal(\n      getAmpdocServiceHolder(elementOrAmpDoc), id);\n}\n\n/**\n * Set the parent and top windows on a child window (friendly iframe).\n * @param {!Window} win\n * @param {!Window} parentWin\n */\nexport function setParentWindow(win, parentWin) {\n  win.__AMP_PARENT = parentWin;\n  win.__AMP_TOP = getTopWindow(parentWin);\n}\n\n\n/**\n * Returns the parent window for a child window (friendly iframe).\n * @param {!Window} win\n * @return {!Window}\n */\nexport function getParentWindow(win) {\n  return win.__AMP_PARENT || win;\n}\n\n\n/**\n * Returns the top window where AMP Runtime is installed for a child window\n * (friendly iframe).\n * @param {!Window} win\n * @return {!Window}\n */\nexport function getTopWindow(win) {\n  return win.__AMP_TOP || win;\n}\n\n\n/**\n * Returns the parent \"friendly\" iframe if the node belongs to a child window.\n * @param {!Node} node\n * @param {!Window} topWin\n * @return {?HTMLIFrameElement}\n */\nexport function getParentWindowFrameElement(node, topWin) {\n  const childWin = (node.ownerDocument || node).defaultView;\n  if (childWin && childWin != topWin && getTopWindow(childWin) == topWin) {\n    try {\n      return /** @type {?HTMLIFrameElement} */ (childWin.frameElement);\n    } catch (e) {\n      // Ignore the error.\n    }\n  }\n  return null;\n}\n\n\n/**\n * @param {!Node|!./service/ampdoc-impl.AmpDoc} nodeOrDoc\n * @return {!./service/ampdoc-impl.AmpDoc}\n */\nexport function getAmpdoc(nodeOrDoc) {\n  if (nodeOrDoc.nodeType) {\n    const win = toWin(/** @type {!Document} */ (\n      nodeOrDoc.ownerDocument || nodeOrDoc).defaultView);\n    return getAmpdocService(win).getAmpDoc(/** @type {!Node} */ (nodeOrDoc));\n  }\n  return /** @type {!./service/ampdoc-impl.AmpDoc} */ (nodeOrDoc);\n}\n\n\n/**\n * @param {!Node|!./service/ampdoc-impl.AmpDoc} nodeOrDoc\n * @return {!./service/ampdoc-impl.AmpDoc|!Window}\n */\nfunction getAmpdocServiceHolder(nodeOrDoc) {\n  const ampdoc = getAmpdoc(nodeOrDoc);\n  return ampdoc.isSingleDoc() ? ampdoc.win : ampdoc;\n}\n\n\n/**\n * This is essentially a duplicate of `ampdoc.js`, but necessary to avoid\n * circular dependencies.\n * @param {!Window} win\n * @return {!./service/ampdoc-impl.AmpDocService}\n */\nfunction getAmpdocService(win) {\n  return /** @type {!./service/ampdoc-impl.AmpDocService} */ (\n    getService(win, 'ampdoc'));\n}\n\n\n/**\n * Get service `id` from `holder`. Assumes the service\n * has already been registered.\n * @param {!Object} holder Object holding the service instance.\n * @param {string} id of the service.\n * @return {Object}\n * @template T\n */\nfunction getServiceInternal(holder, id) {\n  dev().assert(isServiceRegistered(holder, id),\n      `Expected service ${id} to be registered`);\n  const services = getServices(holder);\n  const s = services[id];\n  if (!s.obj) {\n    dev().assert(s.ctor, `Service ${id} registered without ctor nor impl.`);\n    dev().assert(s.context, `Service ${id} registered without context.`);\n    s.obj = new s.ctor(s.context);\n    dev().assert(s.obj, `Service ${id} constructed to null.`);\n    s.ctor = null;\n    s.context = null;\n    // The service may have been requested already, in which case we have a\n    // pending promise we need to fulfill.\n    if (s.resolve) {\n      s.resolve(s.obj);\n    }\n  }\n  return s.obj;\n}\n\n/**\n * @param {!Object} holder Object holding the service instance.\n * @param {!Window|!./service/ampdoc-impl.AmpDoc} context Win or AmpDoc.\n * @param {string} id of the service.\n * @param {?function(new:Object, !Window)|?function(new:Object, !./service/ampdoc-impl.AmpDoc)} ctor Constructor function to new the service. Called with context.\n */\nfunction registerServiceInternal(holder, context, id, ctor) {\n  const services = getServices(holder);\n  let s = services[id];\n\n  if (!s) {\n    s = services[id] = {\n      obj: null,\n      promise: null,\n      resolve: null,\n      context: null,\n      ctor: null,\n    };\n  }\n\n  if (s.ctor || s.obj) {\n    // Service already registered.\n    return;\n  }\n\n  s.ctor = ctor;\n  s.context = context;\n\n  // The service may have been requested already, in which case there is a\n  // pending promise that needs to fulfilled.\n  if (s.resolve) {\n    // getServiceInternal will resolve the promise.\n    getServiceInternal(holder, id);\n  }\n}\n\n/**\n * @param {!Object} holder\n * @param {string} id of the service.\n * @return {!Promise<!Object>}\n */\nfunction getServicePromiseInternal(holder, id) {\n  const cached = getServicePromiseOrNullInternal(holder, id);\n  if (cached) {\n    return cached;\n  }\n  // Service is not registered.\n\n  // TODO(@cramforce): Add a check that if the element is eventually registered\n  // that the service is actually provided and this promise resolves.\n  const deferred = new Deferred();\n  const {promise, resolve} = deferred;\n\n  const services = getServices(holder);\n  services[id] = {\n    obj: null,\n    promise,\n    resolve,\n    context: null,\n    ctor: null,\n  };\n  return promise;\n}\n\n\n/**\n * Returns a promise for service `id` if the service has been registered\n * on `holder`.\n * @param {!Object} holder\n * @param {string} id of the service.\n * @return {?Promise<!Object>}\n */\nfunction getServicePromiseOrNullInternal(holder, id) {\n  const services = getServices(holder);\n  const s = services[id];\n  if (s) {\n    if (s.promise) {\n      return s.promise;\n    } else {\n      // Instantiate service if not already instantiated.\n      getServiceInternal(holder, id);\n      return s.promise = Promise.resolve(/** @type {!Object} */ (s.obj));\n    }\n  }\n  return null;\n}\n\n\n/**\n * Returns the object that holds the services registered in a holder.\n * @param {!Object} holder\n * @return {!Object<string,!ServiceHolderDef>}\n */\nfunction getServices(holder) {\n  let {services} = holder;\n  if (!services) {\n    services = holder.services = {};\n  }\n  return services;\n}\n\n\n/**\n * Whether the specified service implements `Disposable` interface.\n * @param {!Object} service\n * @return {boolean}\n */\nexport function isDisposable(service) {\n  return typeof service.dispose == 'function';\n}\n\n\n/**\n * Asserts that the specified service implements `Disposable` interface and\n * typecasts the instance to `Disposable`.\n * @param {!Object} service\n * @return {!Disposable}\n */\nexport function assertDisposable(service) {\n  dev().assert(isDisposable(service), 'required to implement Disposable');\n  return /** @type {!Disposable} */ (service);\n}\n\n\n/**\n * Disposes all disposable (implements `Disposable` interface) services in\n * ampdoc scope.\n * @param {!./service/ampdoc-impl.AmpDoc} ampdoc\n */\nexport function disposeServicesForDoc(ampdoc) {\n  disposeServicesInternal(ampdoc);\n}\n\n\n/**\n * Disposes all disposable (implements `Disposable` interface) services in\n * embed scope.\n * @param {!Window} embedWin\n */\nexport function disposeServicesForEmbed(embedWin) {\n  disposeServicesInternal(embedWin);\n}\n\n\n/**\n * @param {!Object} holder Object holding the service instances.\n */\nfunction disposeServicesInternal(holder) {\n  // TODO(dvoytenko): Consider marking holder as destroyed for later-arriving\n  // service to be canceled automatically.\n  const services = getServices(holder);\n  for (const id in services) {\n    if (!Object.prototype.hasOwnProperty.call(services, id)) {\n      continue;\n    }\n    const serviceHolder = services[id];\n    if (serviceHolder.obj) {\n      disposeServiceInternal(id, serviceHolder.obj);\n    } else if (serviceHolder.promise) {\n      serviceHolder.promise.then(\n          instance => disposeServiceInternal(id, instance));\n    }\n  }\n}\n\n\n/**\n * @param {string} id\n * @param {!Object} service\n */\nfunction disposeServiceInternal(id, service) {\n  if (!isDisposable(service)) {\n    return;\n  }\n  try {\n    assertDisposable(service).dispose();\n  } catch (e) {\n    // Ensure that a failure to dispose a service does not disrupt other\n    // services.\n    dev().error('SERVICE', 'failed to dispose service', id, e);\n  }\n}\n\n\n/**\n * Whether the specified service implements `EmbeddableService` interface.\n * @param {!Object} service\n * @return {boolean}\n */\nexport function isEmbeddable(service) {\n  return typeof service.adoptEmbedWindow == 'function';\n}\n\n\n/**\n * Adopts an embeddable (implements `EmbeddableService` interface) service\n * in embed scope.\n * @param {!Window} embedWin\n * @param {string} serviceId\n */\nexport function adoptServiceForEmbed(embedWin, serviceId) {\n  const adopted = adoptServiceForEmbedIfEmbeddable(embedWin, serviceId);\n  dev().assert(adopted, `Service ${serviceId} not found on parent ` +\n      'or doesn\\'t implement EmbeddableService.');\n}\n\n\n/**\n * Adopts an embeddable (implements `EmbeddableService` interface) service\n * in embed scope.\n * @param {!Window} embedWin\n * @param {string} serviceId\n * @return {boolean}\n */\nexport function adoptServiceForEmbedIfEmbeddable(embedWin, serviceId) {\n  const frameElement = /** @type {!Node} */ (dev().assert(\n      embedWin.frameElement,\n      'frameElement not found for embed'));\n  const ampdoc = getAmpdoc(frameElement);\n  const holder = getAmpdocServiceHolder(ampdoc);\n  if (!isServiceRegistered(holder, serviceId)) {\n    return false;\n  }\n  const service = getServiceForDocDeprecated(frameElement, serviceId);\n  if (!isEmbeddable(service)) {\n    return false;\n  }\n  service.adoptEmbedWindow(embedWin);\n  return true;\n}\n\n\n/**\n * Resets a single service, so it gets recreated on next getService invocation.\n * @param {!Object} holder\n * @param {string} id of the service.\n */\nexport function resetServiceForTesting(holder, id) {\n  if (holder.services) {\n    holder.services[id] = null;\n  }\n}\n\n/**\n * @param {!Object} holder Object holding the service instance.\n * @param {string} id of the service.\n * @return {boolean}\n */\nfunction isServiceRegistered(holder, id) {\n  const service = holder.services && holder.services[id];\n  // All registered services must have an implementation or a constructor.\n  return !!(service && (service.ctor || service.obj));\n}\n","/**\n * Copyright 2017 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Services} from '../services';\nimport {dev, user} from '../log';\nimport {htmlFor} from '../static-template';\nimport {isExperimentOn} from '../experiments';\n\n/** @const {number} */\nconst NTH_FRAME = 200;\n\nexport class JankMeter {\n\n  /**\n   * @param {!Window} win\n   */\n  constructor(win) {\n    /** @private {!Window} */\n    this.win_ = win;\n    /** @private {number} */\n    this.badFrameCnt_ = 0;\n    /** @private {number} */\n    this.totalFrameCnt_ = 0;\n    /** @private {number} */\n    this.longTaskChild_ = 0;\n    /** @private {number} */\n    this.longTaskSelf_ = 0;\n    /** @private {?number} */\n    this.scheduledTime_ = null;\n    /** @private {?./performance-impl.Performance} */\n    this.perf_ = Services.performanceForOrNull(win);\n\n    /** @private {?BatteryManager} */\n    this.batteryManager_ = null;\n    /** @private {?number} */\n    this.batteryLevelStart_ = null;\n    this.initializeBatteryManager_();\n\n    /** @private {?PerformanceObserver} */\n    this.longTaskObserver_ = null;\n    this.initializeLongTaskObserver_();\n  }\n\n  /**\n   * Callback for scheduled.\n   */\n  onScheduled() {\n    if (!this.isEnabled_()) {\n      return;\n    }\n    // only take the first schedule for the current frame.\n    if (this.scheduledTime_ == null) {\n      this.scheduledTime_ = this.win_.Date.now();\n    }\n  }\n\n  /**\n   * Callback for run.\n   */\n  onRun() {\n    if (!this.isEnabled_() || this.scheduledTime_ == null) {\n      return;\n    }\n    const paintLatency = this.win_.Date.now() - this.scheduledTime_;\n    this.scheduledTime_ = null;\n    this.totalFrameCnt_++;\n    if (paintLatency > 16) {\n      this.badFrameCnt_++;\n      dev().info('JANK', 'Paint latency: ' + paintLatency + 'ms');\n    }\n\n    // Report metrics on Nth frame, so we have sort of normalized numbers.\n    if (this.perf_ && this.totalFrameCnt_ == NTH_FRAME) {\n      // gfp: Good Frame Probability\n      const gfp = this.calculateGfp_();\n      this.perf_.tickDelta('gfp', gfp);\n      // bf: Bad Frames\n      this.perf_.tickDelta('bf', this.badFrameCnt_);\n      if (this.longTaskObserver_) {\n        // lts: Long Tasks of Self frame\n        this.perf_.tickDelta('lts', this.longTaskSelf_);\n        // ltc: Long Tasks of Child frames\n        this.perf_.tickDelta('ltc', this.longTaskChild_);\n        this.longTaskObserver_.disconnect();\n        this.longTaskObserver_ = null;\n      }\n      let batteryDrop = 0;\n      if (this.batteryManager_ && (this.batteryLevelStart_ != null)) {\n        batteryDrop = this.win_.Math.max(0, this.win_.Math.floor(\n            this.batteryManager_.level * 100 - this.batteryLevelStart_));\n        // bd: Battery Drop\n        this.perf_.tickDelta('bd', batteryDrop);\n      }\n      this.perf_.flush();\n      if (isJankMeterEnabled(this.win_)) {\n        this.displayMeterDisplay_(batteryDrop);\n      }\n    }\n  }\n\n  /**\n   * Returns if is enabled\n   *\n   * @return {?boolean}\n   */\n  isEnabled_() {\n    return isJankMeterEnabled(this.win_)\n        || (this.perf_\n            && this.perf_.isPerformanceTrackingOn()\n            && this.totalFrameCnt_ < NTH_FRAME);\n  }\n\n  /**\n   * @param {number} batteryDrop\n   * @private\n   */\n  displayMeterDisplay_(batteryDrop) {\n    const doc = this.win_.document;\n    const display = htmlFor(doc)`\n      <div class=\"i-amphtml-jank-meter\"></div>`;\n    display.textContent =\n        `bf:${this.badFrameCnt_}, lts: ${this.longTaskSelf_}, ` +\n        `ltc:${this.longTaskChild_}, bd:${batteryDrop}`;\n    doc.body.appendChild(display);\n  }\n\n  /**\n   * Calculate Good Frame Probability, which is a value range from 0 to 100.\n   * @return {number}\n   * @private\n   */\n  calculateGfp_() {\n    return this.win_.Math.floor(\n        (this.totalFrameCnt_ - this.badFrameCnt_) / this.totalFrameCnt_ * 100);\n  }\n\n  /**\n   * Initializes long task observer.\n   */\n  initializeLongTaskObserver_() {\n    if (!this.isEnabled_() || !isLongTaskApiSupported(this.win_)) {\n      return;\n    }\n    this.longTaskObserver_ = new this.win_.PerformanceObserver(entryList => {\n      const entries = entryList.getEntries();\n      for (let i = 0; i < entries.length; i++) {\n        if (entries[i].entryType == 'longtask') {\n          // longtask is any task with duration of bigger than 50ms\n          // we sum up the number of 50ms a task spans.\n          const span = this.win_.Math.floor(entries[i].duration / 50);\n          if (entries[i].name == 'cross-origin-descendant') {\n            this.longTaskChild_ += span;\n            user().info(\n                'LONGTASK', `from child frame ${entries[i].duration}ms`);\n          } else {\n            this.longTaskSelf_ += span;\n            dev().info('LONGTASK', `from self frame ${entries[i].duration}ms`);\n          }\n        }\n      }\n    });\n    this.longTaskObserver_.observe({entryTypes: ['longtask']});\n  }\n\n  /**\n   * Initializes battery manager.\n   */\n  initializeBatteryManager_() {\n    if (isBatteryApiSupported(this.win_)) {\n      this.win_.navigator.getBattery().then(battery => {\n        this.batteryManager_ = battery;\n        this.batteryLevelStart_ = battery.level * 100;\n      });\n    }\n  }\n}\n\n/**\n * @param {!Window} win\n * @return {boolean}\n */\nfunction isJankMeterEnabled(win) {\n  return isExperimentOn(win, 'jank-meter');\n}\n\n/**\n * @param {!Window} win\n * @return {boolean}\n */\nexport function isLongTaskApiSupported(win) {\n  return !!win.PerformanceObserver\n      && !!win.TaskAttributionTiming\n      && ('containerName' in win.TaskAttributionTiming.prototype);\n}\n\n/**\n * @param {!Window} unusedWin\n * @return {boolean}\n */\nfunction isBatteryApiSupported(unusedWin) {\n  // TODO: (@lannka, #9749)\n  return false;\n}\n","/**\n * Copyright 2017 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  getAmpdoc,\n  getExistingServiceForDocInEmbedScope,\n  getExistingServiceOrNull,\n  getService,\n  getServiceForDoc,\n  getServiceForDocDeprecated,\n  getServicePromiseForDoc,\n} from './service';\nimport {\n  getElementServiceForDoc,\n  getElementServiceIfAvailable,\n  getElementServiceIfAvailableForDoc,\n  getElementServiceIfAvailableForDocInEmbedScope,\n} from './element-service';\n\n/** @typedef {!../extensions/amp-subscriptions/0.1/amp-subscriptions.SubscriptionService} */\nexport let SubscriptionService;\n\nexport class Services {\n  /**\n   * Hint: Add extensions folder path to compile.js with\n   * warnings cannot find modules.\n   */\n\n  /**\n   * Returns a promise for the Access service.\n   * @param {!Element|!./service/ampdoc-impl.AmpDoc} elementOrAmpDoc\n   * @return {!Promise<!../extensions/amp-access/0.1/amp-access.AccessService>}\n   */\n  static accessServiceForDoc(elementOrAmpDoc) {\n    return (/** @type {!Promise<!../extensions/amp-access/0.1/amp-access.AccessService>} */ (\n      getElementServiceForDoc(elementOrAmpDoc, 'access', 'amp-access')));\n  }\n\n  /**\n   * Returns a promise for the Access service or a promise for null if the\n   * service is not available on the current page.\n   * @param {!Element|!./service/ampdoc-impl.AmpDoc} elementOrAmpDoc\n   * @return {!Promise<?../extensions/amp-access/0.1/amp-access.AccessService>}\n   */\n  static accessServiceForDocOrNull(elementOrAmpDoc) {\n    return (/** @type {!Promise<?../extensions/amp-access/0.1/amp-access.AccessService>} */ (\n      getElementServiceIfAvailableForDoc(elementOrAmpDoc, 'access',\n          'amp-access')));\n  }\n\n  /**\n   * Returns a promise for the Subscriptions service.\n   * @param {!Element|!./service/ampdoc-impl.AmpDoc} elementOrAmpDoc\n   * @return {!Promise<!SubscriptionService>}\n   */\n  static subscriptionsServiceForDoc(elementOrAmpDoc) {\n    return (/** @type {!Promise<!SubscriptionService>} */ (\n      getElementServiceForDoc(elementOrAmpDoc, 'subscriptions',\n          'amp-subscriptions')));\n  }\n\n  /**\n   * Returns a promise for the Subscriptions service.\n   * @param {!Element|!./service/ampdoc-impl.AmpDoc} elementOrAmpDoc\n   * @return {!Promise<?SubscriptionService>}\n   */\n  static subscriptionsServiceForDocOrNull(elementOrAmpDoc) {\n    return (/** @type {!Promise<?SubscriptionService>} */ (\n      getElementServiceIfAvailableForDoc(elementOrAmpDoc, 'subscriptions',\n          'amp-subscriptions')));\n  }\n\n  /**\n   * Unlike most service getters, passing `Node` is necessary for some FIE-scope\n   * services since sometimes we only have the FIE Document for context.\n   * @param {!Node|!./service/ampdoc-impl.AmpDoc} nodeOrDoc\n   * @return {!./service/action-impl.ActionService}\n   */\n  static actionServiceForDoc(nodeOrDoc) {\n    return /** @type {!./service/action-impl.ActionService} */ (\n      getExistingServiceForDocInEmbedScope(\n          nodeOrDoc, 'action', /* opt_fallbackToTopWin */ true));\n  }\n\n  /**\n   * @param {!Element|!./service/ampdoc-impl.AmpDoc} elementOrAmpDoc\n   * @return {!Promise<!Activity>}\n   */\n  static activityForDoc(elementOrAmpDoc) {\n    return /** @type {!Promise<!Activity>} */ (\n      getElementServiceForDoc(elementOrAmpDoc, 'activity', 'amp-analytics'));\n  }\n\n  /**\n   * Returns the global instance of the `AmpDocService` service that can be\n   * used to resolve an ampdoc for any node: either in the single-doc or\n   * shadow-doc environment.\n   * @param {!Window} window\n   * @return {!./service/ampdoc-impl.AmpDocService}\n   */\n  static ampdocServiceFor(window) {\n    return /** @type {!./service/ampdoc-impl.AmpDocService} */ (\n      getService(window, 'ampdoc'));\n  }\n\n  /**\n   * Returns the AmpDoc for the specified context node.\n   * @param {!Element|!./service/ampdoc-impl.AmpDoc} elementOrAmpDoc\n   * @return {!./service/ampdoc-impl.AmpDoc}\n   */\n  static ampdoc(elementOrAmpDoc) {\n    return getAmpdoc(elementOrAmpDoc);\n  }\n\n  /**\n   * @param {!Element|!./service/ampdoc-impl.AmpDoc} elementOrAmpDoc\n   * @param {boolean=} loadAnalytics\n   * @return {!Promise<!../extensions/amp-analytics/0.1/instrumentation.InstrumentationService>}\n   */\n  static analyticsForDoc(elementOrAmpDoc, loadAnalytics = false) {\n    if (loadAnalytics) {\n      // Get Extensions service and force load analytics extension.\n      const ampdoc = getAmpdoc(elementOrAmpDoc);\n      Services.extensionsFor(ampdoc.win)./*OK*/installExtensionForDoc(\n          ampdoc, 'amp-analytics');\n    }\n    return /** @type {!Promise<!../extensions/amp-analytics/0.1/instrumentation.InstrumentationService>} */ (\n      getElementServiceForDoc(elementOrAmpDoc, 'amp-analytics-instrumentation',\n          'amp-analytics'));\n  }\n\n  /**\n   * @param {!Element|!./service/ampdoc-impl.AmpDoc} elementOrAmpDoc\n   * @return {!Promise<?../extensions/amp-analytics/0.1/instrumentation.InstrumentationService>}\n   */\n  static analyticsForDocOrNull(elementOrAmpDoc) {\n    return /** @type {!Promise<?../extensions/amp-analytics/0.1/instrumentation.InstrumentationService>} */ (\n      getElementServiceIfAvailableForDoc(elementOrAmpDoc,\n          'amp-analytics-instrumentation', 'amp-analytics'));\n  }\n\n  /**\n   * @param {!Window} window\n   * @return {!./service/batched-xhr-impl.BatchedXhr}\n   */\n  static batchedXhrFor(window) {\n    return /** @type {!./service/batched-xhr-impl.BatchedXhr} */ (\n      getService(window, 'batched-xhr'));\n  }\n\n  /**\n   * @param {!Element|!./service/ampdoc-impl.AmpDoc} elementOrAmpDoc\n   * @return {!Promise<?../extensions/amp-bind/0.1/bind-impl.Bind>}\n   */\n  static bindForDocOrNull(elementOrAmpDoc) {\n    return /** @type {!Promise<?../extensions/amp-bind/0.1/bind-impl.Bind>} */ (\n      getElementServiceIfAvailableForDocInEmbedScope(\n          elementOrAmpDoc, 'bind', 'amp-bind'));\n  }\n\n  /**\n   * @param {!Element|!./service/ampdoc-impl.AmpDoc} elementOrAmpDoc\n   * @return {!Promise<!./service/cid-impl.Cid>}\n   */\n  static cidForDoc(elementOrAmpDoc) {\n    return /** @type {!Promise<!./service/cid-impl.Cid>} */ (\n      getServicePromiseForDoc(elementOrAmpDoc, 'cid'));\n  }\n\n  /**\n   * @param {!Element|!./service/ampdoc-impl.AmpDoc} elementOrAmpDoc\n   * @return {!./service/navigation.Navigation}\n   */\n  static navigationForDoc(elementOrAmpDoc) {\n    return /** @type {!./service/navigation.Navigation} */ (\n      getServiceForDoc(elementOrAmpDoc, 'navigation'));\n  }\n\n  /**\n   * @param {!Window} window\n   * @return {!./service/crypto-impl.Crypto}\n   */\n  static cryptoFor(window) {\n    return (/** @type {!./service/crypto-impl.Crypto} */ (\n      getService(window, 'crypto')));\n  }\n\n  /**\n   * @param {!Element|!./service/ampdoc-impl.AmpDoc} elementOrAmpDoc\n   * @return {!./service/document-info-impl.DocumentInfoDef} Info about the doc\n   */\n  static documentInfoForDoc(elementOrAmpDoc) {\n    return /** @type {!./service/document-info-impl.DocInfo} */ (\n      getServiceForDoc(elementOrAmpDoc, 'documentInfo')).get();\n  }\n\n  /**\n   * @param {!Window} window\n   * @return {!./service/document-state.DocumentState}\n   */\n  static documentStateFor(window) {\n    return getService(window, 'documentState');\n  }\n\n  /**\n   * @param {!Window} window\n   * @return {!./service/extensions-impl.Extensions}\n   */\n  static extensionsFor(window) {\n    return /** @type {!./service/extensions-impl.Extensions} */ (\n      getService(window, 'extensions'));\n  }\n\n  /**\n   * Returns service implemented in service/history-impl.\n   * @param {!Element|!./service/ampdoc-impl.AmpDoc} elementOrAmpDoc\n   * @return {!./service/history-impl.History}\n   */\n  static historyForDoc(elementOrAmpDoc) {\n    return /** @type {!./service/history-impl.History} */ (\n      getServiceForDoc(elementOrAmpDoc, 'history'));\n  }\n\n  /**\n   * @param {!Window} win\n   * @return {!./input.Input}\n   */\n  static inputFor(win) {\n    return getService(win, 'input');\n  }\n\n  /**\n   * @param {!Element|!./service/ampdoc-impl.AmpDoc} elementOrAmpDoc\n   * @return {!./service/layers-impl.LayoutLayers}\n   */\n  static layersForDoc(elementOrAmpDoc) {\n    return /** @type {!./service/layers-impl.LayoutLayers} */ (\n      getServiceForDoc(elementOrAmpDoc, 'layers'));\n  }\n\n  /**\n   * @param {!Window} window\n   * @return {!./service/performance-impl.Performance}\n   */\n  static performanceFor(window) {\n    return /** @type {!./service/performance-impl.Performance}*/ (\n      getService(window, 'performance'));\n  }\n\n  /**\n   * @param {!Window} window\n   * @return {!./service/performance-impl.Performance}\n   */\n  static performanceForOrNull(window) {\n    return /** @type {!./service/performance-impl.Performance}*/ (\n      getExistingServiceOrNull(window, 'performance'));\n  }\n\n  /**\n   * @param {!Window} window\n   * @return {!./service/platform-impl.Platform}\n   */\n  static platformFor(window) {\n    return /** @type {!./service/platform-impl.Platform} */ (\n      getService(window, 'platform'));\n  }\n\n  /**\n   * Uses getServiceForDocDeprecated() since Resources is a startup service.\n   * @param {!Node|!./service/ampdoc-impl.AmpDoc} nodeOrDoc\n   * @return {!./service/resources-impl.Resources}\n   */\n  static resourcesForDoc(nodeOrDoc) {\n    return /** @type {!./service/resources-impl.Resources} */ (\n      getServiceForDocDeprecated(nodeOrDoc, 'resources'));\n  }\n\n  /**\n   * @param {!Window} win\n   * @return {?Promise<?{incomingFragment: string, outgoingFragment: string}>}\n   */\n  static shareTrackingForOrNull(win) {\n    return (/** @type {!Promise<?{incomingFragment: string, outgoingFragment: string}>} */ (\n      getElementServiceIfAvailable(win, 'share-tracking',\n          'amp-share-tracking', true)));\n  }\n\n  /**\n   * @param {!Window} win\n   * @return {?Promise<?../extensions/amp-story/1.0/variable-service.StoryVariableDef>}\n   */\n  static storyVariableServiceForOrNull(win) {\n    return (\n    /** @type {!Promise<?../extensions/amp-story/1.0/variable-service.StoryVariableDef>} */\n      (getElementServiceIfAvailable(win, 'story-variable', 'amp-story',\n          true)));\n  }\n\n  /**\n   * Version of the story store service depends on which version of amp-story\n   * the publisher is loading. They all have the same implementation.\n   * @param {!Window} win\n   * @return {?Promise<?../extensions/amp-story/1.0/amp-story-store-service.AmpStoryStoreService|?../extensions/amp-story/0.1/amp-story-store-service.AmpStoryStoreService>}\n   */\n  static storyStoreServiceForOrNull(win) {\n    return (\n    /** @type {!Promise<?../extensions/amp-story/1.0/amp-story-store-service.AmpStoryStoreService|?../extensions/amp-story/0.1/amp-story-store-service.AmpStoryStoreService>} */\n      (getElementServiceIfAvailable(win, 'story-store', 'amp-story')));\n  }\n\n  /**\n   * @param {!Window} win\n   * @return {?../extensions/amp-story/1.0/amp-story-store-service.AmpStoryStoreService}\n   */\n  static storyStoreService(win) {\n    return (/** @type {?../extensions/amp-story/1.0/amp-story-store-service.AmpStoryStoreService} */\n      (getExistingServiceOrNull(win, 'story-store')));\n  }\n\n  /**\n   * @param {!Window} win\n   * @return {?../extensions/amp-story/1.0/amp-story-request-service.AmpStoryRequestService}\n   */\n  static storyRequestService(win) {\n    return (/** @type {?../extensions/amp-story/1.0/amp-story-request-service.AmpStoryRequestService} */\n      (getExistingServiceOrNull(win, 'story-request')));\n  }\n\n  /**\n   * @param {!Window} win\n   * @return {!Promise<?../extensions/amp-story/1.0/localization.LocalizationService>}\n   */\n  static localizationServiceForOrNull(win) {\n    return (\n    /** @type {!Promise<?../extensions/amp-story/1.0/localization.LocalizationService>} */\n      (getElementServiceIfAvailable(win, 'localization', 'amp-story', true)));\n  }\n\n  /**\n   * @param {!Window} win\n   * @return {!../extensions/amp-story/1.0/localization.LocalizationService}\n   */\n  static localizationService(win) {\n    return getService(win, 'localization');\n  }\n\n  /**\n   * TODO(#14357): Remove this when amp-story:0.1 is deprecated.\n   * @param {!Window} win\n   * @return {!../extensions/amp-story/0.1/amp-story-store-service.AmpStoryStoreService}\n   */\n  static storyStoreServiceV01(win) {\n    return getService(win, 'story-store');\n  }\n\n  /**\n   * TODO(#14357): Remove this when amp-story:0.1 is deprecated.\n   * @param {!Window} win\n   * @return {!../extensions/amp-story/0.1/amp-story-request-service.AmpStoryRequestService}\n   */\n  static storyRequestServiceV01(win) {\n    return getService(win, 'story-request-v01');\n  }\n\n  /**\n   * TODO(#14357): Remove this when amp-story:0.1 is deprecated.\n   * @param {!Window} win\n   * @return {!Promise<?../extensions/amp-story/0.1/localization.LocalizationService>}\n   */\n  static localizationServiceForOrNullV01(win) {\n    return (\n    /** @type {!Promise<?../extensions/amp-story/0.1/localization.LocalizationService>} */\n      (getElementServiceIfAvailable(win, 'localization-v01', 'amp-story',\n          true)));\n  }\n\n  /**\n   * TODO(#14357): Remove this when amp-story:0.1 is deprecated.\n   * @param {!Window} win\n   * @return {!../extensions/amp-story/0.1/localization.LocalizationService}\n   */\n  static localizationServiceV01(win) {\n    return getService(win, 'localization-v01');\n  }\n\n  /**\n   * @param {!Window} win\n   * @return {?Promise<?../extensions/amp-viewer-integration/0.1/variable-service.ViewerIntegrationVariableDef>}\n   */\n  static viewerIntegrationVariableServiceForOrNull(win) {\n    return (\n    /** @type {!Promise<?../extensions/amp-viewer-integration/0.1/variable-service.ViewerIntegrationVariableDef>} */\n      (getElementServiceIfAvailable(win, 'viewer-integration-variable',\n          'amp-viewer-integration', true)));\n  }\n\n  /**\n   * @param {!Element|!./service/ampdoc-impl.AmpDoc} elementOrAmpDoc\n   * @return {!Promise<!../extensions/amp-animation/0.1/web-animation-service.WebAnimationService>}\n   */\n  static webAnimationServiceFor(elementOrAmpDoc) {\n    return (/** @type {!Promise<!../extensions/amp-animation/0.1/web-animation-service.WebAnimationService>} */\n      (getElementServiceForDoc(\n          elementOrAmpDoc, 'web-animation', 'amp-animation')));\n  }\n\n  /**\n   * @param {!Element|!./service/ampdoc-impl.AmpDoc} elementOrAmpDoc\n   * @return {!Promise<!./service/storage-impl.Storage>}\n   */\n  static storageForDoc(elementOrAmpDoc) {\n    return /** @type {!Promise<!./service/storage-impl.Storage>} */ (\n      getServicePromiseForDoc(elementOrAmpDoc, 'storage'));\n  }\n\n  /**\n   * @param {!Window} window\n   * @return {!./service/template-impl.Templates}\n   */\n  static templatesFor(window) {\n    return /** @type {!./service/template-impl.Templates} */ (\n      getService(window, 'templates'));\n  }\n\n  /**\n   * @param {!Window} window\n   * @return {!./service/timer-impl.Timer}\n   */\n  static timerFor(window) {\n    return /** @type {!./service/timer-impl.Timer} */ (\n      getService(window, 'timer'));\n  }\n\n  /**\n   * Unlike most service getters, passing `Node` is necessary for some FIE-scope\n   * services since sometimes we only have the FIE Document for context.\n   * @param {!Node|!./service/ampdoc-impl.AmpDoc} nodeOrDoc\n   * @return {!./service/url-replacements-impl.UrlReplacements}\n   */\n  static urlReplacementsForDoc(nodeOrDoc) {\n    return /** @type {!./service/url-replacements-impl.UrlReplacements} */ (\n      getExistingServiceForDocInEmbedScope(\n          nodeOrDoc, 'url-replace', /* opt_fallbackToTopWin */ true));\n  }\n\n  /**\n   * @param {!Element|!./service/ampdoc-impl.AmpDoc} elementOrAmpDoc\n   * @return {!Promise<!../extensions/amp-user-notification/0.1/amp-user-notification.UserNotificationManager>}\n   */\n  static userNotificationManagerForDoc(elementOrAmpDoc) {\n    return (/** @type {!Promise<!../extensions/amp-user-notification/0.1/amp-user-notification.UserNotificationManager>} */\n      (getElementServiceForDoc(elementOrAmpDoc, 'userNotificationManager',\n          'amp-user-notification')));\n  }\n\n  /**\n   * Returns a promise for the consentPolicy Service or a promise for null if\n   * the service is not available on the current page.\n   * @param {!Element|!./service/ampdoc-impl.AmpDoc} elementOrAmpDoc\n   * @return {!Promise<?../extensions/amp-consent/0.1/consent-policy-manager.ConsentPolicyManager>}\n   */\n  static consentPolicyServiceForDocOrNull(elementOrAmpDoc) {\n    return (/** @type {!Promise<?../extensions/amp-consent/0.1/consent-policy-manager.ConsentPolicyManager>} */\n      (getElementServiceIfAvailableForDoc(elementOrAmpDoc,\n          'consentPolicyManager', 'amp-consent')));\n  }\n\n  /**\n   * Returns a promise for the geo service or a promise for null if\n   * the service is not available on the current page.\n   * @param {!Element|!./service/ampdoc-impl.AmpDoc} elementOrAmpDoc\n   * @return {!Promise<?../extensions/amp-geo/0.1/amp-geo.GeoDef>}\n   */\n  static geoForDocOrNull(elementOrAmpDoc) {\n    return /** @type {!Promise<?../extensions/amp-geo/0.1/amp-geo.GeoDef>} */ (\n      getElementServiceIfAvailableForDoc(\n          elementOrAmpDoc, 'geo', 'amp-geo', true));\n  }\n\n  /**\n   * Unlike most service getters, passing `Node` is necessary for some FIE-scope\n   * services since sometimes we only have the FIE Document for context.\n   * @param {!Node|!./service/ampdoc-impl.AmpDoc} nodeOrDoc\n   * @return {!./service/url-impl.Url}\n   */\n  static urlForDoc(nodeOrDoc) {\n    return /** @type {!./service/url-impl.Url} */ (\n      getExistingServiceForDocInEmbedScope(\n          nodeOrDoc, 'url', /* opt_fallbackToTopWin */ true));\n  }\n\n  /**\n   * Returns a promise for the experiment variants or a promise for null if it\n   * is not available on the current page.\n   * @param {!Window} win\n   * @return {!Promise<?Object<string>>}\n   */\n  static variantForOrNull(win) {\n    return /** @type {!Promise<?Object<string>>} */ (\n      getElementServiceIfAvailable(win, 'variant', 'amp-experiment', true));\n  }\n\n  /**\n   * @param {!Element|!./service/ampdoc-impl.AmpDoc} elementOrAmpDoc\n   * @return {!./service/video-service-interface.VideoServiceInterface}\n   */\n  static videoManagerForDoc(elementOrAmpDoc) {\n    return (\n      /** @type {!./service/video-service-interface.VideoServiceInterface} */ (\n        getServiceForDoc(elementOrAmpDoc, 'video-manager')));\n  }\n\n  /**\n   * Uses getServiceForDocDeprecated() since Viewer is a startup service.\n   * @param {!Node|!./service/ampdoc-impl.AmpDoc} nodeOrDoc\n   * @return {!./service/viewer-impl.Viewer}\n   */\n  static viewerForDoc(nodeOrDoc) {\n    return /** @type {!./service/viewer-impl.Viewer} */ (\n      getServiceForDocDeprecated(nodeOrDoc, 'viewer'));\n  }\n\n  /**\n   * Returns promise for the viewer. This is an unusual case and necessary only\n   * for services that need reference to the viewer before it has been\n   * initialized. Most of the code, however, just should use `viewerForDoc`.\n   * @param {!Element|!./service/ampdoc-impl.AmpDoc} elementOrAmpDoc\n   * @return {!Promise<!./service/viewer-impl.Viewer>}\n   */\n  static viewerPromiseForDoc(elementOrAmpDoc) {\n    return /** @type {!Promise<!./service/viewer-impl.Viewer>} */ (\n      getServicePromiseForDoc(elementOrAmpDoc, 'viewer'));\n  }\n\n  /**\n   * @param {!Window} window\n   * @return {!./service/vsync-impl.Vsync}\n   */\n  static vsyncFor(window) {\n    return /** @type {!./service/vsync-impl.Vsync} */ (\n      getService(window, 'vsync'));\n  }\n\n  /**\n   * Uses getServiceForDocDeprecated() since Viewport is a startup service.\n   * @param {!Node|!./service/ampdoc-impl.AmpDoc} nodeOrDoc\n   * @return {!./service/viewport/viewport-impl.Viewport}\n   */\n  static viewportForDoc(nodeOrDoc) {\n    return /** @type {!./service/viewport/viewport-impl.Viewport} */ (\n      getServiceForDocDeprecated(nodeOrDoc, 'viewport'));\n  }\n\n  /**\n   * @param {!Window} window\n   * @return {!./service/xhr-impl.Xhr}\n   */\n  static xhrFor(window) {\n    return /** @type {!./service/xhr-impl.Xhr} */ (getService(window, 'xhr'));\n  }\n}\n","/**\n * Copyright 2018 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {dev} from './log';\nimport {map} from './utils/object.js';\n\nlet container;\n\n/**\n * Creates the html helper for the doc.\n *\n * @param {!Element|!Document} nodeOrDoc\n * @return {function(!Array<string>):!Element}\n */\nexport function htmlFor(nodeOrDoc) {\n  const doc = nodeOrDoc.ownerDocument || nodeOrDoc;\n  if (!container || container.ownerDocument !== doc) {\n    container = doc.createElement('div');\n  }\n\n  return html;\n}\n\n/**\n * A tagged template literal helper to generate static DOM trees.\n * This must be used as a tagged template, ie\n *\n * ```\n * const div = html`<div><span></span></div>`;\n * ```\n *\n * Only the root element and its subtree will be returned. DO NOT use this to\n * render subtree's with dynamic content, it WILL result in an error!\n *\n * @param {!Array<string>} strings\n * @return {!Element}\n */\nfunction html(strings) {\n  dev().assert(strings.length === 1, 'Improper html template tag usage.');\n  container./*OK*/innerHTML = strings[0];\n\n  const el = container.firstElementChild;\n  dev().assert(el, 'No elements in template');\n  dev().assert(!el.nextElementSibling, 'Too many root elements in template');\n\n  // Clear to free memory.\n  container./*OK*/innerHTML = '';\n\n  return el;\n}\n\n/**\n * Queries an element for all elements with a \"ref\" attribute, removing\n * the attribute afterwards.\n * Returns a named map of all ref elements.\n *\n * @param {!Element} root\n * @return {!Object<string, !Element>}\n */\nexport function htmlRefs(root) {\n  const elements = root.querySelectorAll('[ref]');\n  const refs = map();\n\n  for (let i = 0; i < elements.length; i++) {\n    const element = elements[i];\n    const ref = dev().assert(element.getAttribute('ref'), 'Empty ref attr');\n    element.removeAttribute('ref');\n    dev().assert(refs[ref] === undefined, 'Duplicate ref');\n    refs[ref] = element;\n  }\n\n  return refs;\n}\n","/**\n * Copyright 2015 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @param {string} _match\n * @param {string} character\n * @return {string}\n */\nfunction toUpperCase(_match, character) {\n  return character.toUpperCase();\n}\n\n/**\n * @param {string} match\n * @return {string}\n */\nfunction prependDashAndToLowerCase(match) {\n  return '-' + match.toLowerCase();\n}\n\n/**\n * @param {string} name Attribute name containing dashes.\n * @return {string} Dashes removed and successive character sent to upper case.\n * visibleForTesting\n */\nexport function dashToCamelCase(name) {\n  return name.replace(/-([a-z])/g, toUpperCase);\n}\n\n/**\n * Converts a string that is in camelCase to one that is in dash-case.\n *\n * @param {string} string The string to convert.\n * @return {string} The string in dash-case.\n */\nexport function camelCaseToDash(string) {\n  return string.replace(/(?!^)[A-Z]/g, prependDashAndToLowerCase);\n}\n\n/**\n * @param {string} name Attribute name with dashes\n * @return {string} Dashes replaced by underlines.\n */\nexport function dashToUnderline(name) {\n  return name.replace('-', '_');\n}\n\n/**\n * Polyfill for String.prototype.endsWith.\n * @param {string} string\n * @param {string} suffix\n * @return {boolean}\n */\nexport function endsWith(string, suffix) {\n  const index = string.length - suffix.length;\n  return index >= 0 && string.indexOf(suffix, index) == index;\n}\n\n/**\n * Polyfill for String.prototype.startsWith.\n * @param {string} string\n * @param {string} prefix\n * @return {boolean}\n */\nexport function startsWith(string, prefix) {\n  if (prefix.length > string.length) {\n    return false;\n  }\n  return string.lastIndexOf(prefix, 0) == 0;\n}\n\n/**\n * Expands placeholders in a given template string with values.\n *\n * Placeholders use ${key-name} syntax and are replaced with the value\n * returned from the given getter function.\n *\n * @param {string} template The template string to expand.\n * @param {function(string):*} getter Function used to retrieve a value for a\n *   placeholder. Returns values will be coerced into strings.\n * @param {number=} opt_maxIterations Number of times to expand the template.\n *   Defaults to 1, but should be set to a larger value your placeholder tokens\n *   can be expanded to other placeholder tokens. Take caution with large values\n *   as recursively expanding a string can be exponentially expensive.\n */\nexport function expandTemplate(template, getter, opt_maxIterations) {\n  const maxIterations = opt_maxIterations || 1;\n  for (let i = 0; i < maxIterations; i++) {\n    let matches = 0;\n    template = template.replace(/\\${([^}]*)}/g, (_a, b) => {\n      matches++;\n      return getter(b);\n    });\n    if (!matches) {\n      break;\n    }\n  }\n  return template;\n}\n\n/**\n * Hash function djb2a\n * This is intended to be a simple, fast hashing function using minimal code.\n * It does *not* have good cryptographic properties.\n * @param {string} str\n * @return {string} 32-bit unsigned hash of the string\n */\nexport function stringHash32(str) {\n  const {length} = str;\n  let hash = 5381;\n  for (let i = 0; i < length; i++) {\n    hash = hash * 33 ^ str.charCodeAt(i);\n  }\n  // Convert from 32-bit signed to unsigned.\n  return String(hash >>> 0);\n}\n","/**\n * Copyright 2015 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// Note: loaded by 3p system. Cannot rely on babel polyfills.\nimport {map} from './utils/object.js';\nimport {startsWith} from './string';\n\n\n/** @type {Object<string, string>} */\nlet propertyNameCache;\n\n/** @const {!Array<string>} */\nconst vendorPrefixes = ['Webkit', 'webkit', 'Moz', 'moz', 'ms', 'O', 'o'];\n\n\n/**\n * @export\n * @param {string} camelCase camel cased string\n * @return {string} title cased string\n */\nexport function camelCaseToTitleCase(camelCase) {\n  return camelCase.charAt(0).toUpperCase() + camelCase.slice(1);\n}\n\n/**\n * Checks the style if a prefixed version of a property exists and returns\n * it or returns an empty string.\n * @private\n * @param {!Object} style\n * @param {string} titleCase the title case version of a css property name\n * @return {string} the prefixed property name or null.\n */\nfunction getVendorJsPropertyName_(style, titleCase) {\n  for (let i = 0; i < vendorPrefixes.length; i++) {\n    const propertyName = vendorPrefixes[i] + titleCase;\n    if (style[propertyName] !== undefined) {\n      return propertyName;\n    }\n  }\n  return '';\n}\n\n/**\n * Returns the possibly prefixed JavaScript property name of a style property\n * (ex. WebkitTransitionDuration) given a camelCase'd version of the property\n * (ex. transitionDuration).\n * @export\n * @param {!Object} style\n * @param {string} camelCase the camel cased version of a css property name\n * @param {boolean=} opt_bypassCache bypass the memoized cache of property\n *   mapping\n * @return {string}\n */\nexport function getVendorJsPropertyName(style, camelCase, opt_bypassCache) {\n  if (startsWith(camelCase, '--')) {\n    // CSS vars are returned as is.\n    return camelCase;\n  }\n  if (!propertyNameCache) {\n    propertyNameCache = map();\n  }\n  let propertyName = propertyNameCache[camelCase];\n  if (!propertyName || opt_bypassCache) {\n    propertyName = camelCase;\n    if (style[camelCase] === undefined) {\n      const titleCase = camelCaseToTitleCase(camelCase);\n      const prefixedPropertyName = getVendorJsPropertyName_(style, titleCase);\n\n      if (style[prefixedPropertyName] !== undefined) {\n        propertyName = prefixedPropertyName;\n      }\n    }\n    if (!opt_bypassCache) {\n      propertyNameCache[camelCase] = propertyName;\n    }\n  }\n  return propertyName;\n}\n\n\n/**\n * Sets the CSS styles of the specified element with !important. The styles\n * are specified as a map from CSS property names to their values.\n * @param {!Element} element\n * @param {!Object<string, *>} styles\n */\nexport function setImportantStyles(element, styles) {\n  for (const k in styles) {\n    element.style.setProperty(\n        getVendorJsPropertyName(styles, k), styles[k].toString(), 'important');\n  }\n}\n\n\n/**\n * Sets the CSS style of the specified element with optional units, e.g. \"px\".\n * @param {?Element} element\n * @param {string} property\n * @param {*} value\n * @param {string=} opt_units\n * @param {boolean=} opt_bypassCache\n */\nexport function setStyle(element, property, value, opt_units, opt_bypassCache) {\n  const propertyName = getVendorJsPropertyName(element.style, property,\n      opt_bypassCache);\n  if (propertyName) {\n    element.style[propertyName] =\n      /** @type {string} */ (opt_units ? value + opt_units : value);\n  }\n}\n\n\n/**\n * Returns the value of the CSS style of the specified element.\n * @param {!Element} element\n * @param {string} property\n * @param {boolean=} opt_bypassCache\n * @return {*}\n */\nexport function getStyle(element, property, opt_bypassCache) {\n  const propertyName = getVendorJsPropertyName(element.style, property,\n      opt_bypassCache);\n  if (!propertyName) {\n    return undefined;\n  }\n  return element.style[propertyName];\n}\n\n\n/**\n * Sets the CSS styles of the specified element. The styles\n * a specified as a map from CSS property names to their values.\n * @param {!Element} element\n * @param {!Object<string, *>} styles\n */\nexport function setStyles(element, styles) {\n  for (const k in styles) {\n    setStyle(element, k, styles[k]);\n  }\n}\n\n\n/**\n * Shows or hides the specified element.\n * @param {!Element} element\n * @param {boolean=} opt_display\n */\nexport function toggle(element, opt_display) {\n  if (opt_display === undefined) {\n    opt_display = getStyle(element, 'display') == 'none';\n  }\n  setStyle(element, 'display', opt_display ? '' : 'none');\n}\n\n\n/**\n * Returns a pixel value.\n * @param {number} value\n * @return {string}\n */\nexport function px(value) {\n  return `${value}px`;\n}\n\n/**\n * Returns a degree value.\n * @param {number} value\n * @return {string}\n */\nexport function deg(value) {\n  return `${value}deg`;\n}\n\n/**\n * Returns a \"translateX\" for CSS \"transform\" property.\n * @param {number|string} value\n * @return {string}\n */\nexport function translateX(value) {\n  if (typeof value == 'string') {\n    return `translateX(${value})`;\n  }\n  return `translateX(${px(value)})`;\n}\n\n\n/**\n * Returns a \"translateX\" for CSS \"transform\" property.\n * @param {number|string} x\n * @param {(number|string)=} opt_y\n * @return {string}\n */\nexport function translate(x, opt_y) {\n  if (typeof x == 'number') {\n    x = px(x);\n  }\n  if (opt_y === undefined) {\n    return `translate(${x})`;\n  }\n  if (typeof opt_y == 'number') {\n    opt_y = px(opt_y);\n  }\n  return `translate(${x}, ${opt_y})`;\n}\n\n\n/**\n * Returns a \"scale\" for CSS \"transform\" property.\n * @param {number|string} value\n * @return {string}\n */\nexport function scale(value) {\n  return `scale(${value})`;\n}\n\n/**\n * Returns a \"rotate\" for CSS \"transform\" property.\n * @param {number|string} value\n * @return {string}\n */\nexport function rotate(value) {\n  if (typeof value == 'number') {\n    value = deg(value);\n  }\n  return `rotate(${value})`;\n}\n\n/**\n * Remove alpha value from a rgba color value.\n * Return the new color property with alpha equals if has the alpha value.\n * Caller needs to make sure the input color value is a valid rgba/rgb value\n * @param {string} rgbaColor\n * @return {string}\n */\nexport function removeAlphaFromColor(rgbaColor) {\n  return rgbaColor.replace(\n      /\\(([^,]+),([^,]+),([^,)]+),[^)]+\\)/g, '($1,$2,$3, 1)');\n}\n\n/**\n * Gets the computed style of the element. The helper is necessary to enforce\n * the possible `null` value returned by a buggy Firefox.\n *\n * @param {!Window} win\n * @param {!Element} el\n * @return {!Object<string, string>}\n */\nexport function computedStyle(win, el) {\n  const style = /** @type {?CSSStyleDeclaration} */(win.getComputedStyle(el));\n  return /** @type {!Object<string, string>} */(style) || map();\n}\n\n\n/**\n * Resets styles that were set dynamically (i.e. inline)\n * @param {!Element} element\n * @param {!Array<string>} properties\n */\nexport function resetStyles(element, properties) {\n  const styleObj = {};\n  properties.forEach(prop => {\n    styleObj[prop] = null;\n  });\n  setStyles(element, styleObj);\n}\n","/**\n * Copyright 2015 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* @const */\nconst toString_ = Object.prototype.toString;\n\n/**\n * Returns the ECMA [[Class]] of a value\n * @param {*} value\n * @return {string}\n */\nfunction toString(value) {\n  return toString_.call(value);\n}\n\n/**\n * Determines if value is actually an Array.\n * @param {*} value\n * @return {boolean}\n */\nexport function isArray(value) {\n  return Array.isArray(value);\n}\n\n/**\n * Converts an array-like object to an array.\n * @param {?IArrayLike<T>|string} arrayLike\n * @return {!Array<T>}\n * @template T\n */\nexport function toArray(arrayLike) {\n  if (!arrayLike) {\n    return [];\n  }\n  const array = new Array(arrayLike.length);\n  for (let i = 0; i < arrayLike.length; i++) {\n    array[i] = arrayLike[i];\n  }\n  return array;\n}\n\n/**\n * Determines if value is actually an Object.\n * @param {*} value\n * @return {boolean}\n */\nexport function isObject(value) {\n  return toString(value) === '[object Object]';\n}\n\n/**\n * Determines if value is of number type and finite.\n * NaN and Infinity are not considered a finite number.\n * String numbers are not considered numbers.\n * @param {*} value\n * @return {boolean}\n */\nexport function isFiniteNumber(value) {\n  return (typeof value === 'number' && isFinite(value));\n}\n\n/**\n * Checks whether `s` is a valid value of `enumObj`.\n *\n * @param {!Object<T>} enumObj\n * @param {T} s\n * @return {boolean}\n * @template T\n */\nexport function isEnumValue(enumObj, s) {\n  for (const k in enumObj) {\n    if (enumObj[k] === s) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/**\n * Externs declare that access `defaultView` from `document` or\n * `ownerDocument` is of type `(Window|null)` but most of our parameter types\n * assume that it is never null. This is OK in practice as we ever only get\n * null on disconnected documents or old IE.\n * This helper function casts it into just a simple Window return type.\n *\n * @param {!Window|null} winOrNull\n * @return {!Window}\n */\nexport function toWin(winOrNull) {\n  return /** @type {!Window} */ (winOrNull);\n}\n\n","/**\n * Copyright 2017 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {tryDecodeUriComponent_} from './url-try-decode-uri-component';\n\nconst regex = /(?:^[#?]?|&)([^=&]+)(?:=([^&]*))?/g;\n\n/**\n * Parses the query string of an URL. This method returns a simple key/value\n * map. If there are duplicate keys the latest value is returned.\n *\n * DO NOT import the function from this file. Instead, import parseQueryString\n * from `src/url.js`.\n *\n * @param {string} queryString\n * @return {!JsonObject}\n */\nexport function parseQueryString_(queryString) {\n  const params = /** @type {!JsonObject} */ (Object.create(null));\n  if (!queryString) {\n    return params;\n  }\n\n  let match;\n  while ((match = regex.exec(queryString))) {\n    const name = tryDecodeUriComponent_(match[1], match[1]);\n    const value = match[2] ? tryDecodeUriComponent_(match[2], match[2]) : '';\n    params[name] = value;\n  }\n  return params;\n}\n","/**\n * Copyright 2017 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Tries to decode a URI component, falling back to opt_fallback (or an empty\n * string)\n *\n * DO NOT import the function from this file. Instead, import\n * tryDecodeUriComponent from `src/url.js`.\n *\n * @param {string} component\n * @param {string=} fallback\n * @return {string}\n */\nexport function tryDecodeUriComponent_(component, fallback = '') {\n  try {\n    return decodeURIComponent(component);\n  } catch (e) {\n    return fallback;\n  }\n}\n","/**\n * Copyright 2015 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {LruCache} from './utils/lru-cache';\nimport {dict} from './utils/object';\nimport {endsWith, startsWith} from './string';\nimport {getMode} from './mode';\nimport {isArray} from './types';\nimport {parseQueryString_} from './url-parse-query-string';\nimport {tryDecodeUriComponent_} from './url-try-decode-uri-component';\nimport {urls} from './config';\nimport {user} from './log';\n\n/**\n * @type {!JsonObject}\n */\nconst SERVING_TYPE_PREFIX = dict({\n  // No viewer\n  'c': true,\n  // In viewer\n  'v': true,\n  // Ad landing page\n  'a': true,\n  // Ad\n  'ad': true,\n});\n\n/**\n * Cached a-tag to avoid memory allocation during URL parsing.\n * @type {HTMLAnchorElement}\n */\nlet a;\n\n/**\n * We cached all parsed URLs. As of now there are no use cases\n * of AMP docs that would ever parse an actual large number of URLs,\n * but we often parse the same one over and over again.\n * @type {LruCache}\n */\nlet cache;\n\n/** @private @const Matches amp_js_* parameters in query string. */\nconst AMP_JS_PARAMS_REGEX = /[?&]amp_js[^&]*/;\n\n/** @private @const Matches amp_gsa parameters in query string. */\nconst AMP_GSA_PARAMS_REGEX = /[?&]amp_gsa[^&]*/;\n\n/** @private @const Matches amp_r parameters in query string. */\nconst AMP_R_PARAMS_REGEX = /[?&]amp_r[^&]*/;\n\n/** @private @const Matches usqp parameters from goog experiment in query string. */\nconst GOOGLE_EXPERIMENT_PARAMS_REGEX = /[?&]usqp[^&]*/;\n\nconst INVALID_PROTOCOLS = [\n  /*eslint no-script-url: 0*/ 'javascript:',\n  /*eslint no-script-url: 0*/ 'data:',\n  /*eslint no-script-url: 0*/ 'vbscript:',\n];\n\n/** @const {string} */\nexport const SOURCE_ORIGIN_PARAM = '__amp_source_origin';\n\n/**\n * Returns the correct origin for a given window.\n * @param {!Window} win\n * @return {string} origin\n */\nexport function getWinOrigin(win) {\n  return win.origin || parseUrlDeprecated(win.location.href).origin;\n}\n\n/**\n * Returns a Location-like object for the given URL. If it is relative,\n * the URL gets resolved.\n * Consider the returned object immutable. This is enforced during\n * testing by freezing the object.\n * @param {string} url\n * @param {boolean=} opt_nocache\n * @return {!Location}\n */\nexport function parseUrlDeprecated(url, opt_nocache) {\n  if (!a) {\n    a = /** @type {!HTMLAnchorElement} */ (self.document.createElement('a'));\n    cache = self.UrlCache || (self.UrlCache = new LruCache(100));\n  }\n\n  return parseUrlWithA(a, url, opt_nocache ? null : cache);\n}\n\n/**\n * Returns a Location-like object for the given URL. If it is relative,\n * the URL gets resolved.\n * Consider the returned object immutable. This is enforced during\n * testing by freezing the object.\n * @param {!HTMLAnchorElement} a\n * @param {string} url\n * @param {LruCache=} opt_cache\n * @return {!Location}\n * @restricted\n */\nexport function parseUrlWithA(a, url, opt_cache) {\n  if (opt_cache && opt_cache.has(url)) {\n    return opt_cache.get(url);\n  }\n\n  a.href = url;\n\n  // IE11 doesn't provide full URL components when parsing relative URLs.\n  // Assigning to itself again does the trick #3449.\n  if (!a.protocol) {\n    a.href = a.href;\n  }\n\n  const info = /** @type {!Location} */({\n    href: a.href,\n    protocol: a.protocol,\n    host: a.host,\n    hostname: a.hostname,\n    port: a.port == '0' ? '' : a.port,\n    pathname: a.pathname,\n    search: a.search,\n    hash: a.hash,\n    origin: null, // Set below.\n  });\n\n  // Some IE11 specific polyfills.\n  // 1) IE11 strips out the leading '/' in the pathname.\n  if (info.pathname[0] !== '/') {\n    info.pathname = '/' + info.pathname;\n  }\n\n  // 2) For URLs with implicit ports, IE11 parses to default ports while\n  // other browsers leave the port field empty.\n  if ((info.protocol == 'http:' && info.port == 80)\n      || (info.protocol == 'https:' && info.port == 443)) {\n    info.port = '';\n    info.host = info.hostname;\n  }\n\n  // For data URI a.origin is equal to the string 'null' which is not useful.\n  // We instead return the actual origin which is the full URL.\n  if (a.origin && a.origin != 'null') {\n    info.origin = a.origin;\n  } else if (info.protocol == 'data:' || !info.host) {\n    info.origin = info.href;\n  } else {\n    info.origin = info.protocol + '//' + info.host;\n  }\n\n  // Freeze during testing to avoid accidental mutation.\n  const frozen = (getMode().test && Object.freeze) ? Object.freeze(info) : info;\n\n  if (opt_cache) {\n    opt_cache.put(url, frozen);\n  }\n\n  return frozen;\n}\n\n/**\n * Appends the string just before the fragment part (or optionally\n * to the front of the query string) of the URL.\n * @param {string} url\n * @param {string} paramString\n * @param {boolean=} opt_addToFront\n * @return {string}\n */\nexport function appendEncodedParamStringToUrl(url, paramString,\n  opt_addToFront) {\n  if (!paramString) {\n    return url;\n  }\n  const mainAndFragment = url.split('#', 2);\n  const mainAndQuery = mainAndFragment[0].split('?', 2);\n\n  let newUrl = mainAndQuery[0] + (\n    mainAndQuery[1]\n      ? (opt_addToFront\n        ? `?${paramString}&${mainAndQuery[1]}`\n        : `?${mainAndQuery[1]}&${paramString}`)\n      : `?${paramString}`);\n  newUrl += mainAndFragment[1] ? `#${mainAndFragment[1]}` : '';\n  return newUrl;\n}\n/**\n * Appends a query string field and value to a url. `key` and `value`\n * will be ran through `encodeURIComponent` before appending.\n * @param {string} url\n * @param {string} key\n * @param {string} value\n * @param {boolean=} opt_addToFront\n * @return {string}\n */\nexport function addParamToUrl(url, key, value, opt_addToFront) {\n  const field = `${encodeURIComponent(key)}=${encodeURIComponent(value)}`;\n  return appendEncodedParamStringToUrl(url, field, opt_addToFront);\n}\n\n/**\n * Appends query string fields and values to a url. The `params` objects'\n * `key`s and `value`s will be transformed into query string keys/values.\n * @param {string} url\n * @param {!JsonObject<string, string|!Array<string>>} params\n * @return {string}\n */\nexport function addParamsToUrl(url, params) {\n  return appendEncodedParamStringToUrl(url, serializeQueryString(params));\n}\n\n/**\n * Serializes the passed parameter map into a query string with both keys\n * and values encoded.\n * @param {!JsonObject<string, string|!Array<string>>} params\n * @return {string}\n */\nexport function serializeQueryString(params) {\n  const s = [];\n  for (const k in params) {\n    const v = params[k];\n    if (v == null) {\n      continue;\n    } else if (isArray(v)) {\n      for (let i = 0; i < v.length; i++) {\n        const sv = /** @type {string} */ (v[i]);\n        s.push(`${encodeURIComponent(k)}=${encodeURIComponent(sv)}`);\n      }\n    } else {\n      const sv = /** @type {string} */ (v);\n      s.push(`${encodeURIComponent(k)}=${encodeURIComponent(sv)}`);\n    }\n  }\n  return s.join('&');\n}\n\n/**\n * Returns `true` if the URL is secure: either HTTPS or localhost (for testing).\n * @param {string|!Location} url\n * @return {boolean}\n */\nexport function isSecureUrlDeprecated(url) {\n  if (typeof url == 'string') {\n    url = parseUrlDeprecated(url);\n  }\n  return (url.protocol == 'https:' ||\n      url.hostname == 'localhost' ||\n      endsWith(url.hostname, '.localhost'));\n}\n\n/**\n * Asserts that a given url is HTTPS or protocol relative. It's a user-level\n * assert.\n *\n * Provides an exception for localhost.\n *\n * @param {?string|undefined} urlString\n * @param {!Element|string} elementContext Element where the url was found.\n * @param {string=} sourceName Used for error messages.\n * @return {string}\n */\nexport function assertHttpsUrl(\n  urlString, elementContext, sourceName = 'source') {\n  user().assert(urlString != null, '%s %s must be available',\n      elementContext, sourceName);\n  // (erwinm, #4560): type cast necessary until #4560 is fixed.\n  const theUrlString = /** @type {string} */ (urlString);\n  user().assert(isSecureUrlDeprecated(theUrlString) || /^(\\/\\/)/.test(theUrlString),\n      '%s %s must start with ' +\n      '\"https://\" or \"//\" or be relative and served from ' +\n      'either https or from localhost. Invalid value: %s',\n      elementContext, sourceName, theUrlString);\n  return theUrlString;\n}\n\n/**\n * Asserts that a given url is an absolute HTTP or HTTPS URL.\n * @param {string} urlString\n * @return {string}\n */\nexport function assertAbsoluteHttpOrHttpsUrl(urlString) {\n  user().assert(/^https?\\:/i.test(urlString),\n      'URL must start with \"http://\" or \"https://\". Invalid value: %s',\n      urlString);\n  return parseUrlDeprecated(urlString).href;\n}\n\n\n/**\n * Parses the query string of an URL. This method returns a simple key/value\n * map. If there are duplicate keys the latest value is returned.\n *\n * This function is implemented in a separate file to avoid a circular\n * dependency.\n *\n * @param {string} queryString\n * @return {!JsonObject}\n */\nexport function parseQueryString(queryString) {\n  return parseQueryString_(queryString);\n}\n\n/**\n * Returns the URL without fragment. If URL doesn't contain fragment, the same\n * string is returned.\n * @param {string} url\n * @return {string}\n */\nexport function removeFragment(url) {\n  const index = url.indexOf('#');\n  if (index == -1) {\n    return url;\n  }\n  return url.substring(0, index);\n}\n\n/**\n * Returns the fragment from the URL. If the URL doesn't contain fragment,\n * the empty string is returned.\n * @param {string} url\n * @return {string}\n */\nexport function getFragment(url) {\n  const index = url.indexOf('#');\n  if (index == -1) {\n    return '';\n  }\n  return url.substring(index);\n}\n\n/**\n * Returns whether the URL has the origin of a proxy.\n * @param {string|!Location} url URL of an AMP document.\n * @return {boolean}\n */\nexport function isProxyOrigin(url) {\n  if (typeof url == 'string') {\n    url = parseUrlDeprecated(url);\n  }\n  return urls.cdnProxyRegex.test(url.origin);\n}\n\n/**\n * For proxy-origin URLs, returns the serving type. Otherwise, returns null.\n * E.g., 'https://amp-com.cdn.ampproject.org/a/s/amp.com/amp_document.html'\n * returns 'a'.\n * @param {string|!Location} url URL of an AMP document.\n * @return {?string}\n */\nexport function getProxyServingType(url) {\n  if (typeof url == 'string') {\n    url = parseUrlDeprecated(url);\n  }\n  if (!isProxyOrigin(url)) {\n    return null;\n  }\n  const path = url.pathname.split('/', 2);\n  return path[1];\n}\n\n/**\n * Returns whether the URL origin is localhost.\n * @param {string|!Location} url URL of an AMP document.\n * @return {boolean}\n */\nexport function isLocalhostOrigin(url) {\n  if (typeof url == 'string') {\n    url = parseUrlDeprecated(url);\n  }\n  return urls.localhostRegex.test(url.origin);\n}\n\n/**\n * Returns whether the URL has valid protocol.\n * Deep link protocol is valid, but not javascript etc.\n * @param {string|!Location} url\n * @return {boolean}\n */\nexport function isProtocolValid(url) {\n  if (!url) {\n    return true;\n  }\n  if (typeof url == 'string') {\n    url = parseUrlDeprecated(url);\n  }\n  return !INVALID_PROTOCOLS.includes(url.protocol);\n}\n\n/**\n * Returns a URL without AMP JS parameters.\n * @param {string} url\n * @return {string}\n */\nexport function removeAmpJsParamsFromUrl(url) {\n  const parsed = parseUrlDeprecated(url);\n  const search = removeAmpJsParamsFromSearch(parsed.search);\n  return parsed.origin + parsed.pathname + search + parsed.hash;\n\n}\n\n/**\n * Returns a URL without a query string.\n * @param {string} url\n * @return {string}\n */\nexport function removeSearch(url) {\n  const index = url.indexOf('?');\n  if (index == -1) {\n    return url;\n  }\n  const fragment = getFragment(url);\n  return url.substring(0, index) + fragment;\n}\n\n/**\n * Removes parameters that start with amp js parameter pattern and returns the\n * new search string.\n * @param {string} urlSearch\n * @return {string}\n */\nfunction removeAmpJsParamsFromSearch(urlSearch) {\n  if (!urlSearch || urlSearch == '?') {\n    return '';\n  }\n  const search = urlSearch\n      .replace(AMP_JS_PARAMS_REGEX, '')\n      .replace(AMP_GSA_PARAMS_REGEX, '')\n      .replace(AMP_R_PARAMS_REGEX, '')\n      .replace(GOOGLE_EXPERIMENT_PARAMS_REGEX, '')\n      .replace(/^[?&]/, ''); // Removes first ? or &.\n  return search ? '?' + search : '';\n}\n\n/**\n * Returns the source URL of an AMP document for documents served\n * on a proxy origin or directly.\n * @param {string|!Location} url URL of an AMP document.\n * @return {string}\n */\nexport function getSourceUrl(url) {\n  if (typeof url == 'string') {\n    url = parseUrlDeprecated(url);\n  }\n\n  // Not a proxy URL - return the URL itself.\n  if (!isProxyOrigin(url)) {\n    return url.href;\n  }\n\n  // A proxy URL.\n  // Example path that is being matched here.\n  // https://cdn.ampproject.org/c/s/www.origin.com/foo/\n  // The /s/ is optional and signals a secure origin.\n  const path = url.pathname.split('/');\n  const prefix = path[1];\n  user().assert(SERVING_TYPE_PREFIX[prefix],\n      'Unknown path prefix in url %s', url.href);\n  const domainOrHttpsSignal = path[2];\n  const origin = domainOrHttpsSignal == 's'\n    ? 'https://' + decodeURIComponent(path[3])\n    : 'http://' + decodeURIComponent(domainOrHttpsSignal);\n  // Sanity test that what we found looks like a domain.\n  user().assert(origin.indexOf('.') > 0, 'Expected a . in origin %s', origin);\n  path.splice(1, domainOrHttpsSignal == 's' ? 3 : 2);\n  return origin + path.join('/') +\n      removeAmpJsParamsFromSearch(url.search) + (url.hash || '');\n}\n\n/**\n * Returns the source origin of an AMP document for documents served\n * on a proxy origin or directly.\n * @param {string|!Location} url URL of an AMP document.\n * @return {string} The source origin of the URL.\n */\nexport function getSourceOrigin(url) {\n  return parseUrlDeprecated(getSourceUrl(url)).origin;\n}\n\n/**\n * Returns absolute URL resolved based on the relative URL and the base.\n * @param {string} relativeUrlString\n * @param {string|!Location} baseUrl\n * @return {string}\n */\nexport function resolveRelativeUrl(relativeUrlString, baseUrl) {\n  if (typeof baseUrl == 'string') {\n    baseUrl = parseUrlDeprecated(baseUrl);\n  }\n  if (typeof URL == 'function') {\n    return new URL(relativeUrlString, baseUrl.href).toString();\n  }\n  return resolveRelativeUrlFallback_(relativeUrlString, baseUrl);\n}\n\n/**\n * Fallback for URL resolver when URL class is not available.\n * @param {string} relativeUrlString\n * @param {string|!Location} baseUrl\n * @return {string}\n * @private Visible for testing.\n */\nexport function resolveRelativeUrlFallback_(relativeUrlString, baseUrl) {\n  if (typeof baseUrl == 'string') {\n    baseUrl = parseUrlDeprecated(baseUrl);\n  }\n  relativeUrlString = relativeUrlString.replace(/\\\\/g, '/');\n  const relativeUrl = parseUrlDeprecated(relativeUrlString);\n\n  // Absolute URL.\n  if (startsWith(relativeUrlString.toLowerCase(), relativeUrl.protocol)) {\n    return relativeUrl.href;\n  }\n\n  // Protocol-relative URL.\n  if (startsWith(relativeUrlString, '//')) {\n    return baseUrl.protocol + relativeUrlString;\n  }\n\n  // Absolute path.\n  if (startsWith(relativeUrlString, '/')) {\n    return baseUrl.origin + relativeUrlString;\n  }\n\n  // Relative path.\n  return baseUrl.origin + baseUrl.pathname.replace(/\\/[^/]*$/, '/')\n      + relativeUrlString;\n}\n\n\n/**\n * Add \"__amp_source_origin\" query parameter to the URL.\n * @param {!Window} win\n * @param {string} url\n * @return {string}\n */\nexport function getCorsUrl(win, url) {\n  checkCorsUrl(url);\n  const sourceOrigin = getSourceOrigin(win.location.href);\n  return addParamToUrl(url, SOURCE_ORIGIN_PARAM, sourceOrigin);\n}\n\n\n/**\n * Checks if the url has __amp_source_origin and throws if it does.\n * @param {string} url\n */\nexport function checkCorsUrl(url) {\n  const parsedUrl = parseUrlDeprecated(url);\n  const query = parseQueryString(parsedUrl.search);\n  user().assert(!(SOURCE_ORIGIN_PARAM in query),\n      'Source origin is not allowed in %s', url);\n}\n\n/**\n * Tries to decode a URI component, falling back to opt_fallback (or an empty\n * string)\n *\n * @param {string} component\n * @param {string=} opt_fallback\n * @return {string}\n */\nexport function tryDecodeUriComponent(component, opt_fallback) {\n  return tryDecodeUriComponent_(component, opt_fallback);\n}\n","/**\n * Copyright 2016 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n/**\n * Compares if two arrays contains exactly same elements of same number\n * of same order.\n * Notice that it does NOT handle NaN case as expected\n *\n * @param {!Array<T>} arr1\n * @param {!Array<T>} arr2\n * @return {boolean}\n * @template T\n */\nexport function areEqualOrdered(arr1, arr2) {\n  if (arr1.length !== arr2.length) {\n    return false;\n  }\n\n  for (let i = 0; i < arr1.length; i++) {\n    if (arr1[i] !== arr2[i]) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\n/**\n * A bit like Array#filter, but removes elements that filter false from the\n * array. Returns the filtered items.\n *\n * @param {!Array<T>} array\n * @param {function(T, number, !Array<T>):boolean} filter\n * @return {!Array<T>}\n * @template T\n */\nexport function filterSplice(array, filter) {\n  const splice = [];\n  let index = 0;\n  for (let i = 0; i < array.length; i++) {\n    const item = array[i];\n    if (filter(item, i, array)) {\n      if (index < i) {\n        array[index] = item;\n      }\n      index++;\n    } else {\n      splice.push(item);\n    }\n  }\n\n  if (index < array.length) {\n    array.length = index;\n  }\n\n  return splice;\n}\n\n/**\n * Returns the index of the first element matching the predicate.\n * Like Array#findIndex.\n *\n * @param {!Array<T>} array\n * @param {function(T, number, !Array<T>):boolean} predicate\n * @return {number}\n * @template T\n */\nexport function findIndex(array, predicate) {\n  for (let i = 0; i < array.length; i++) {\n    if (predicate(array[i], i, array)) {\n      return i;\n    }\n  }\n  return -1;\n}\n\n/**\n * Converts the given iterator to an array.\n *\n * @param {!Iterator<T>} iterator\n * @return {Array<T>}\n * @template T\n */\nexport function fromIterator(iterator) {\n  const array = [];\n  for (let e = iterator.next(); !e.done; e = iterator.next()) {\n    array.push(e.value);\n  }\n  return array;\n}\n\n/**\n * Adds item to array if it is not already present.\n *\n * @param {Array<T>} array\n * @param {T} item\n * @template T\n */\nexport function pushIfNotExist(array, item) {\n  if (array.indexOf(item) < 0) {\n    array.push(item);\n  }\n}\n","/**\n * Copyright 2016 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {bytesToString, stringToBytes, utf8Encode} from './bytes';\n\n/**\n * Character mapping from base64url to base64.\n * @const {!Object<string, string>}\n */\nconst base64UrlDecodeSubs = {'-': '+', '_': '/', '.': '='};\n\n/**\n * Character mapping from base64 to base64url.\n * @const {!Object<string, string>}\n */\nconst base64UrlEncodeSubs = {'+': '-', '/': '_', '=': '.'};\n\n/**\n * Converts a string which is in base64url encoding into a Uint8Array\n * containing the decoded value.\n * @param {string} str\n * @return {!Uint8Array}\n */\nexport function base64UrlDecodeToBytes(str) {\n  const encoded = atob(str.replace(/[-_.]/g, ch => base64UrlDecodeSubs[ch]));\n  return stringToBytes(encoded);\n}\n\n/**\n * Converts a string which is in base64 encoding into a Uint8Array\n * containing the decoded value.\n * @param {string} str\n * @return {!Uint8Array}\n */\nexport function base64DecodeToBytes(str) {\n  return stringToBytes(atob(str));\n}\n\n/**\n * Converts a bytes array into base64url encoded string.\n * base64url is defined in RFC 4648. It is sometimes referred to as \"web safe\".\n * @param {!Uint8Array} bytes\n * @return {string}\n */\nexport function base64UrlEncodeFromBytes(bytes) {\n  const str = bytesToString(bytes);\n  return btoa(str).replace(/[+/=]/g, ch => base64UrlEncodeSubs[ch]);\n}\n\n/**\n * Converts a string into base64url encoded string.\n * base64url is defined in RFC 4648. It is sometimes referred to as \"web safe\".\n * @param {string} str\n * @return {string}\n */\nexport function base64UrlEncodeFromString(str) {\n  const bytes = utf8Encode(str);\n  return base64UrlEncodeFromBytes(bytes);\n}\n\n/**\n * Converts a bytes array into base64 encoded string.\n * @param {!Uint8Array} bytes\n * @return {string}\n */\nexport function base64EncodeFromBytes(bytes) {\n  return btoa(bytesToString(bytes));\n}\n","/**\n * Copyright 2016 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {dev} from '../log';\n\n/**\n * Interpret a byte array as a UTF-8 string.\n * @param {!BufferSource} bytes\n * @return {string}\n */\nexport function utf8Decode(bytes) {\n  if (typeof TextDecoder !== 'undefined') {\n    return new TextDecoder('utf-8').decode(bytes);\n  }\n  const asciiString = bytesToString(new Uint8Array(bytes.buffer || bytes));\n  return decodeURIComponent(escape(asciiString));\n}\n\n/**\n * Turn a string into UTF-8 bytes.\n * @param {string} string\n * @return {!Uint8Array}\n */\nexport function utf8Encode(string) {\n  if (typeof TextEncoder !== 'undefined') {\n    return new TextEncoder('utf-8').encode(string);\n  }\n  return stringToBytes(unescape(encodeURIComponent(string)));\n}\n\n/**\n * Converts a string which holds 8-bit code points, such as the result of atob,\n * into a Uint8Array with the corresponding bytes.\n * If you have a string of characters, you probably want to be using utf8Encode.\n * @param {string} str\n * @return {!Uint8Array}\n */\nexport function stringToBytes(str) {\n  const bytes = new Uint8Array(str.length);\n  for (let i = 0; i < str.length; i++) {\n    const charCode = str.charCodeAt(i);\n    dev().assert(charCode <= 255, 'Characters must be in range [0,255]');\n    bytes[i] = charCode;\n  }\n  return bytes;\n}\n\n/**\n * Converts a 8-bit bytes array into a string\n * @param {!Uint8Array} bytes\n * @return {string}\n */\nexport function bytesToString(bytes) {\n  // Intentionally avoids String.fromCharCode.apply so we don't suffer a\n  // stack overflow. #10495, https://jsperf.com/bytesToString-2\n  const array = new Array(bytes.length);\n  for (let i = 0; i < bytes.length; i++) {\n    array[i] = String.fromCharCode(bytes[i]);\n  }\n  return array.join('');\n}\n\n/**\n * Converts a 4-item byte array to an unsigned integer.\n * Assumes bytes are big endian.\n * @param {!Uint8Array} bytes\n * @return {number}\n */\nexport function bytesToUInt32(bytes) {\n  if (bytes.length != 4) {\n    throw new Error('Received byte array with length != 4');\n  }\n  const val = (bytes[0] & 0xFF) << 24 |\n     (bytes[1] & 0xFF) << 16 |\n     (bytes[2] & 0xFF) << 8 |\n     (bytes[3] & 0xFF);\n  // Convert to unsigned.\n  return val >>> 0;\n}\n\n/**\n * Generate a random bytes array with specific length using\n * win.crypto.getRandomValues. Return null if it is not available.\n * @param {!Window} win\n * @param {number} length\n * @return {?Uint8Array}\n */\nexport function getCryptoRandomBytesArray(win, length) {\n  if (!win.crypto || !win.crypto.getRandomValues) {\n    return null;\n  }\n\n  // Widely available in browsers we support:\n  // http://caniuse.com/#search=getRandomValues\n  const uint8array = new Uint8Array(length);\n  win.crypto.getRandomValues(uint8array);\n  return uint8array;\n}\n","/**\n * Copyright 2018 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {dev} from '../log';\n\n/** @const {string} */\nconst TAG = 'lru-cache';\n\n/**\n * @template T\n */\nexport class LruCache {\n  /**\n   * @param {number} capacity\n   */\n  constructor(capacity) {\n    /** @private @const {number} */\n    this.capacity_ = capacity;\n\n    /** @private {number} */\n    this.size_ = 0;\n\n    /**\n     * An incrementing counter to define the last access.\n     * @private {number}\n     */\n    this.access_ = 0;\n\n    /** @private {!Object<(number|string), {payload: T, access: number}>} */\n    this.cache_ = Object.create(null);\n  }\n\n  /**\n   * Returns whether key is cached.\n   *\n   * @param {number|string} key\n   * @return {boolean}\n   */\n  has(key) {\n    return !!this.cache_[key];\n  }\n\n  /**\n   * @param {number|string} key\n   * @return {T} The cached payload.\n   */\n  get(key) {\n    const cacheable = this.cache_[key];\n    if (cacheable) {\n      cacheable.access = ++this.access_;\n      return cacheable.payload;\n    }\n    return undefined;\n  }\n\n  /**\n   * @param {number|string} key\n   * @param {T} payload The payload to cache.\n   */\n  put(key, payload) {\n    if (!this.has(key)) {\n      this.size_++;\n    }\n    this.cache_[key] = {payload, access: this.access_};\n    this.evict_();\n  }\n\n  /**\n   * Evicts the oldest cache entry, if we've exceeded capacity.\n   */\n  evict_() {\n    if (this.size_ <= this.capacity_) {\n      return;\n    }\n\n    dev().warn(TAG, 'Trimming LRU cache');\n    const cache = this.cache_;\n    let oldest = this.access_ + 1;\n    let oldestKey;\n    for (const key in cache) {\n      const {access} = cache[key];\n      if (access < oldest) {\n        oldest = access;\n        oldestKey = key;\n      }\n    }\n\n    if (oldestKey !== undefined) {\n      delete cache[oldestKey];\n      this.size_--;\n    }\n  }\n}\n","/**\n * Copyright 2015 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {isObject} from '../types';\n\n/* @const */\nconst hasOwn_ = Object.prototype.hasOwnProperty;\n\n/**\n * Returns a map-like object.\n * If opt_initial is provided, copies its own properties into the\n * newly created object.\n * @param {T=} opt_initial This should typically be an object literal.\n * @return {T}\n * @template T\n */\nexport function map(opt_initial) {\n  const obj = Object.create(null);\n  if (opt_initial) {\n    Object.assign(obj, opt_initial);\n  }\n  return obj;\n}\n\n/**\n * Return an empty JsonObject or makes the passed in object literal\n * an JsonObject.\n * The JsonObject type is just a simple object that is at-dict.\n * See\n * https://github.com/google/closure-compiler/wiki/@struct-and-@dict-Annotations\n * for what a dict is type-wise.\n * The linter enforces that the argument is, in fact, at-dict like.\n * @param {!Object=} opt_initial\n * @return {!JsonObject}\n */\nexport function dict(opt_initial) {\n  // We do not copy. The linter enforces that the passed in object is a literal\n  // and thus the caller cannot have a reference to it.\n  return /** @type {!JsonObject} */ (opt_initial || {});\n}\n\n/**\n * Checks if the given key is a property in the map.\n *\n * @param {T}  obj a map like property.\n * @param {string}  key\n * @return {boolean}\n * @template T\n */\nexport function hasOwn(obj, key) {\n  return hasOwn_.call(obj, key);\n}\n\n/**\n * Returns obj[key] iff key is obj's own property (is not inherited).\n * Otherwise, returns undefined.\n *\n * @param {Object} obj\n * @param {string} key\n * @return {*}\n */\nexport function ownProperty(obj, key) {\n  if (hasOwn(obj, key)) {\n    return obj[key];\n  } else {\n    return undefined;\n  }\n}\n\n/**\n * Deep merges source into target.\n *\n * @param {!Object} target\n * @param {!Object} source\n * @param {number} depth The maximum merge depth. If exceeded, Object.assign\n *                       will be used instead.\n * @return {!Object}\n * @throws {Error} If source contains a circular reference.\n * Note: Only nested objects are deep-merged, primitives and arrays are not.\n */\nexport function deepMerge(target, source, depth = 10) {\n  // Keep track of seen objects to detect recursive references.\n  const seen = [];\n\n  /** @type {!Array<{t: !Object, s: !Object, d: number}>} */\n  const queue = [];\n  queue.push({t: target, s: source, d: 0});\n\n  // BFS to ensure objects don't have recursive references at shallower depths.\n  while (queue.length > 0) {\n    const {t, s, d} = queue.shift();\n    if (seen.includes(s)) {\n      throw new Error('Source object has a circular reference.');\n    }\n    seen.push(s);\n    if (t === s) {\n      continue;\n    }\n    if (d > depth) {\n      Object.assign(t, s);\n      continue;\n    }\n    Object.keys(s).forEach(key => {\n      const newValue = s[key];\n      // Perform a deep merge IFF both target and source have the same key\n      // whose corresponding values are objects.\n      if (hasOwn(t, key)) {\n        const oldValue = t[key];\n        if (isObject(newValue) && isObject(oldValue)) {\n          queue.push({t: oldValue, s: newValue, d: d + 1});\n          return;\n        }\n      }\n      t[key] = newValue;\n    });\n  }\n  return target;\n}\n\n/**\n * @param {!Object} o An object to remove properties from\n * @param {!Array<string>} props A list of properties to remove from the Object\n * @return {!Object} An object with the given properties removed\n */\nexport function omit(o, props) {\n  return Object.keys(o).reduce((acc, key) => {\n    if (!props.includes(key)) {\n      acc[key] = o[key];\n    }\n    return acc;\n  }, {});\n}\n","/**\n * Copyright 2016 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Returns a Deferred struct, which holds a pending promise and its associated\n * resolve and reject functions.\n *\n * This is preferred instead of creating a Promise instance to extract the\n * resolve/reject functions yourself:\n *\n * ```\n * // Avoid doing\n * let resolve;\n * const promise = new Promise(res => {\n *   resolve = res;\n * });\n *\n * // Good\n * const deferred = new Deferred();\n * const { promise, resolve } = deferred;\n * ```\n *\n * @template T\n */\nexport class Deferred {\n  /**\n   * Creates an instance of Deferred.\n   */\n  constructor() {\n    let resolve, reject;\n\n    /**\n     * @const {!Promise<T>}\n     */\n    this.promise = new /*OK*/Promise((res, rej) => {\n      resolve = res;\n      reject = rej;\n    });\n\n    /**\n     * @const {function(T=)}\n     */\n    this.resolve = resolve;\n\n    /**\n     * @const {function(*=)}\n     */\n    this.reject = reject;\n  }\n}\n\n/**\n * Creates a promise resolved to the return value of fn.\n * If fn sync throws, it will cause the promise to reject.\n *\n * @param {function():T} fn\n * @return {!Promise<T>}\n * @template T\n */\nexport function tryResolve(fn) {\n  return new Promise(resolve => {\n    resolve(fn());\n  });\n}\n\n/**\n * Returns a promise which resolves if a threshold amount of the given promises\n * resolve, and rejects otherwise.\n * @param {!Array<!Promise>} promises The array of promises to test.\n * @param {number} count The number of promises that must resolve for the\n *     returned promise to resolve.\n * @return {!Promise} A promise that resolves if any of the given promises\n *     resolve, and which rejects otherwise.\n */\nexport function some(promises, count = 1) {\n  return new Promise((resolve, reject) => {\n    count = Math.max(count, 0);\n    const extra = promises.length - count;\n    if (extra < 0) {\n      reject(new Error('not enough promises to resolve'));\n    }\n    if (promises.length == 0) {\n      resolve([]);\n    }\n    const values = [];\n    const reasons = [];\n\n    const onFulfilled = value => {\n      if (values.length < count) {\n        values.push(value);\n      }\n      if (values.length == count) {\n        resolve(values);\n      }\n    };\n    const onRejected = reason => {\n      if (reasons.length <= extra) {\n        reasons.push(reason);\n      }\n      if (reasons.length > extra) {\n        reject(reasons);\n      }\n    };\n    for (let i = 0; i < promises.length; i++) {\n      Promise.resolve(promises[i]).then(onFulfilled, onRejected);\n    }\n  });\n}\n\n/**\n * Resolves with the result of the last promise added.\n * @implements {IThenable}\n */\nexport class LastAddedResolver {\n  /**\n   * @param {!Array<!Promise>=} opt_promises\n   */\n  constructor(opt_promises) {\n    let resolve_, reject_;\n    /** @private @const {!Promise} */\n    this.promise_ = new Promise((resolve, reject) => {\n      resolve_ = resolve;\n      reject_ = reject;\n    });\n\n    /** @private */\n    this.resolve_ = resolve_;\n\n    /** @private */\n    this.reject_ = reject_;\n\n    /** @private */\n    this.count_ = 0;\n\n    if (opt_promises) {\n      for (let i = 0; i < opt_promises.length; i++) {\n        this.add(opt_promises[i]);\n      }\n    }\n  }\n\n  /**\n   * Add a promise to possibly be resolved.\n   * @param {!Promise} promise\n   * @return {!Promise}\n   */\n  add(promise) {\n    const countAtAdd = ++this.count_;\n    Promise.resolve(promise).then(result => {\n      if (this.count_ === countAtAdd) {\n        this.resolve_(result);\n      }\n    }, error => {\n      // Don't follow behavior of Promise.all and Promise.race error so that\n      // this will only reject when most recently added promise fails.\n      if (this.count_ === countAtAdd) {\n        this.reject_(error);\n      }\n    });\n    return this.promise_;\n  }\n\n  /** @override */\n  then(opt_resolve, opt_reject) {\n    return this.promise_.then(opt_resolve, opt_reject);\n  }\n}\n","/**\n * Copyright 2017 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Deferred} from './promise';\nimport {map} from './object';\n\n\n/**\n * This object tracts signals and allows blocking until a signal has been\n * received.\n */\nexport class Signals {\n\n  /**\n   * Creates an instance of Signals.\n   */\n  constructor() {\n    /**\n     * A mapping from a signal name to the signal response: either time or\n     * an error.\n     * @private @const {!Object<string, (time|!Error)>}\n     */\n    this.map_ = map();\n\n    /**\n     * A mapping from a signal name to the signal promise, resolve and reject.\n     * Only allocated when promise has been requested.\n     * @private {?Object<string, {\n     *   promise: !Promise,\n     *   resolve: (function(time)|undefined),\n     *   reject: (function(!Error)|undefined)\n     * }>}\n     */\n    this.promiseMap_ = null;\n  }\n\n  /**\n   * Returns the current known value of the signal. If signal is not yet\n   * available, `null` is returned.\n   * @param {string} name\n   * @return {number|!Error|null}\n   */\n  get(name) {\n    return this.map_[name] || null;\n  }\n\n  /**\n   * Returns the promise that's resolved when the signal is triggered. The\n   * resolved value is the time of the signal.\n   * @param {string} name\n   * @return {!Promise<time>}\n   */\n  whenSignal(name) {\n    let promiseStruct = this.promiseMap_ && this.promiseMap_[name];\n    if (!promiseStruct) {\n      const result = this.map_[name];\n      if (result != null) {\n        // Immediately resolve signal.\n        const promise = typeof result == 'number' ?\n          Promise.resolve(result) :\n          Promise.reject(result);\n        promiseStruct = {promise};\n      } else {\n        // Allocate the promise/resolver for when the signal arrives in the\n        // future.\n        const deferred = new Deferred();\n        const {promise, resolve, reject} = deferred;\n\n        promiseStruct = {promise, resolve, reject};\n      }\n      if (!this.promiseMap_) {\n        this.promiseMap_ = map();\n      }\n      this.promiseMap_[name] = promiseStruct;\n    }\n    return promiseStruct.promise;\n  }\n\n  /**\n   * Triggers the signal with the specified name on the element. The time is\n   * optional; if not provided, the current time is used. The associated\n   * promise is resolved with the resulting time.\n   * @param {string} name\n   * @param {time=} opt_time\n   */\n  signal(name, opt_time) {\n    if (this.map_[name] != null) {\n      // Do not duplicate signals.\n      return;\n    }\n    const time = opt_time || Date.now();\n    this.map_[name] = time;\n    const promiseStruct = this.promiseMap_ && this.promiseMap_[name];\n    if (promiseStruct && promiseStruct.resolve) {\n      promiseStruct.resolve(time);\n      promiseStruct.resolve = undefined;\n      promiseStruct.reject = undefined;\n    }\n  }\n\n  /**\n   * Rejects the signal. Indicates that the signal will never succeed. The\n   * associated signal is rejected.\n   * @param {string} name\n   * @param {!Error} error\n   */\n  rejectSignal(name, error) {\n    if (this.map_[name] != null) {\n      // Do not duplicate signals.\n      return;\n    }\n    this.map_[name] = error;\n    const promiseStruct = this.promiseMap_ && this.promiseMap_[name];\n    if (promiseStruct && promiseStruct.reject) {\n      promiseStruct.reject(error);\n      promiseStruct.resolve = undefined;\n      promiseStruct.reject = undefined;\n    }\n  }\n\n  /**\n   * Resets all signals.\n   * @param {string} name\n   */\n  reset(name) {\n    if (this.map_[name]) {\n      delete this.map_[name];\n    }\n    // Reset promise it has already been resolved.\n    const promiseStruct = this.promiseMap_ && this.promiseMap_[name];\n    if (promiseStruct && !promiseStruct.resolve) {\n      delete this.promiseMap_[name];\n    }\n  }\n}\n","/**\n * Copyright 2016 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport const MIN_VISIBILITY_RATIO_FOR_AUTOPLAY = 0.5;\n\n/**\n * VideoInterface defines a common video API which any AMP component that plays\n * videos is expected to implement.\n *\n * AMP runtime uses this common API to provide consistent video experience and\n * analytics across all video players.\n *\n * Components implementing this interface must also extend\n * {@link ./base-element.BaseElement} and register with the\n * Video Manager {@link ./service/video-manager-impl.VideoManager} during\n * their `builtCallback`.\n *\n * @interface\n */\nexport class VideoInterface {\n\n  /**\n   * Whether the component supports video playback in the current platform.\n   * If false, component will be not treated as a video component.\n   * @return {boolean}\n   */\n  supportsPlatform() {}\n\n  /**\n   * Whether users can interact with the video such as pausing it.\n   * Example of non-interactive videos include design background videos where\n   * all controls are hidden from the user.\n   *\n   * @return {boolean}\n   */\n  isInteractive() {}\n\n  /**\n   * Current playback time in seconds at time of trigger\n   * @return {number}\n   */\n  getCurrentTime() {}\n\n  /**\n   * Total duration of the video in seconds\n   * @return {number}\n   */\n  getDuration() {}\n\n  /**\n   * Get a 2d array of start and stop times that the user has watched.\n   * @return {!Array<Array<number>>}\n   */\n  getPlayedRanges() {}\n\n  /**\n   * Plays the video..\n   *\n   * @param {boolean} unusedIsAutoplay Whether the call to the `play` method is\n   * triggered by the autoplay functionality. Video players can use this hint\n   * to make decisions such as not playing pre-roll video ads.\n   */\n  play(unusedIsAutoplay) {}\n\n  /**\n   * Pauses the video.\n   */\n  pause() {}\n\n  /**\n   * Mutes the video.\n   */\n  mute() {}\n\n  /**\n   * Unmutes the video.\n   */\n  unmute() {}\n\n  /**\n   * Makes the video UI controls visible.\n   *\n   * AMP will not call this method if `controls` attribute is not set.\n   */\n  showControls() {}\n\n  /**\n   * Hides the video UI controls.\n   *\n   * AMP will not call this method if `controls` attribute is not set.\n   */\n  hideControls() {}\n\n  /**\n   * Returns video's meta data (artwork, title, artist, album, etc.) for use\n   * with the Media Session API\n   * artwork (Array): URL to the poster image (preferably a 512x512 PNG)\n   * title (string): Name of the video\n   * artist (string): Name of the video's author/artist\n   * album (string): Name of the video's album if it exists\n   * @return {!./mediasession-helper.MetadataDef|undefined} metadata\n   */\n  getMetadata() {}\n\n  /**\n   * If this returns true then it will be assumed that the player implements\n   * a feature to enter fullscreen on device rotation internally, so that the\n   * video manager does not override it. If not, the video manager will\n   * implement this feature automatically for videos with the attribute\n   * `rotate-to-fullscreen`.\n   *\n   * @return {boolean}\n   */\n  preimplementsAutoFullscreen() {}\n\n  /**\n   * If this returns true then it will be assumed that the player implements\n   * the MediaSession API internally so that the video manager does not override\n   * it. If not, the video manager will use the metadata variable as well as\n   * inferred meta-data to update the video's Media Session notification.\n   *\n   * @return {boolean}\n   */\n  preimplementsMediaSessionAPI() {}\n\n  /**\n   * Enables fullscreen on the internal video element\n   * NOTE: While implementing, keep in mind that Safari/iOS do not allow taking\n   * any element other than <video> to fullscreen, if the player has an internal\n   * implementation of fullscreen (flash for example) then check\n   * if Services.platformFor(this.win).isSafari is true and use the internal\n   * implementation instead. If not, it is recommended to take the iframe\n   * to fullscreen using fullscreenEnter from dom.js\n   */\n  fullscreenEnter() {}\n\n  /**\n   * Quits fullscreen mode\n   */\n  fullscreenExit() {}\n\n  /**\n   * Returns whether the video is currently in fullscreen mode or not\n   * @return {boolean}\n   */\n  isFullscreen() {}\n}\n\n\n/**\n * Attributes\n *\n * Components implementing the VideoInterface are expected to support\n * the following attributes.\n *\n * @constant {!Object<string, string>}\n */\nexport const VideoAttributes = {\n  /**\n   * autoplay\n   *\n   * Whether the developer has configured autoplay on the component.\n   * This is normally done by setting `autoplay` attribute on the component.\n   *\n   * AMP runtime manages autoplay behaviour itself using methods such as `play`,\n   * `pause`, `showControls`, `hideControls`, `mute`, etc.. therefore components\n   * should not propagate the autoplay attribute to the underlying player\n   * implementation.\n   *\n   * When a video is requested to autoplay, AMP will automatically\n   * mute and hide the controls for the video, when video is 75% visible in\n   * the viewport, AMP will play the video and later pauses it when 25%\n   * or more of the video exits the viewport. If an auto-playing video also has\n   * controls, AMP will install a tap\n   * handler on the video, and when an end-user taps the video, AMP will show\n   * the controls.\n   *\n   */\n  AUTOPLAY: 'autoplay',\n  /**\n   * dock\n   *\n   * Setting the `dock` attribute on the component makes the video minimize\n   * to the corner when scrolled out of view and has been interacted with.\n   */\n  DOCK: 'dock',\n  /**\n   * rotate-to-fullscreen\n   *\n   * If enabled, this automatically expands the currently visible video and\n   * playing to fullscreen when the user changes the device's orientation to\n   * landscape if the video was started following a user interaction\n   * (not autoplay)\n   *\n   * Dependent upon browser support of\n   * http://caniuse.com/#feat=screen-orientation\n   * and http://caniuse.com/#feat=fullscreen\n   */\n  ROTATE_TO_FULLSCREEN: 'rotate-to-fullscreen',\n  /**\n   * noaudio\n   *\n   * If set and autoplay, the equalizer icon will not be displayed.\n   */\n  NO_AUDIO: 'noaudio',\n};\n\n\n/**\n * Events\n *\n * Components implementing the VideoInterface are expected to dispatch\n * the following DOM events.\n *\n * @constant {!Object<string, string>}\n */\nexport const VideoEvents = {\n  /**\n   * registered\n   *\n   * Fired when the video player element is built and has been registered with\n   * the video manager.\n   *\n   * @event registered\n   */\n  REGISTERED: 'registered',\n\n  /**\n   * load\n   *\n   * Fired when the video player is loaded and calls to methods such as `play()`\n   * are allowed.\n   *\n   * @event load\n   */\n  LOAD: 'load',\n\n  /**\n   * playing\n   *\n   * Fired when the video begins playing.\n   *\n   * @event playing\n   */\n  PLAYING: 'playing',\n\n  /**\n   * pause\n   *\n   * Fired when the video pauses.\n   *\n   * @event pause\n   */\n  PAUSE: 'pause',\n\n  /**\n   * ended\n   *\n   * Fired when the video ends.\n   *\n   * This event should be fired in addition to `pause` when video ends.\n   *\n   * @event ended\n   */\n  ENDED: 'ended',\n\n  /**\n   * muted\n   *\n   * Fired when the video is muted.\n   *\n   * @event muted\n   */\n  MUTED: 'muted',\n\n  /**\n   * unmuted\n   *\n   * Fired when the video is unmuted.\n   *\n   * @event unmuted\n   */\n  UNMUTED: 'unmuted',\n\n  /**\n   * amp:video:visibility\n   *\n   * Fired when the video's visibility changes. Normally fired\n   * from `viewportCallback`.\n   *\n   * @event amp:video:visibility\n   * @property {boolean} visible Whether the video player is visible or not.\n   */\n  VISIBILITY: 'amp:video:visibility',\n\n  /**\n   * reload\n   *\n   * Fired when the video's src changes.\n   *\n   * @event reloaded\n   */\n  RELOAD: 'reloaded',\n\n  /**\n   * pre/mid/post Ad start\n   *\n   * Fired when an Ad starts playing.\n   *\n   * This is used to remove any overlay shims during Ad play during autoplay\n   * or minimized-to-corner version of the player.\n   *\n   * @event ad_start\n   */\n  AD_START: 'ad_start',\n\n  /**\n   * pre/mid/post Ad ends\n   *\n   * Fired when an Ad ends playing.\n   *\n   * This is used to restore any overlay shims during Ad play during autoplay\n   * or minimized-to-corner version of the player.\n   *\n   * @event ad_end\n   */\n  AD_END: 'ad_end',\n};\n\n\n/**\n * Playing States\n *\n * Internal playing states used to distinguish between video playing on user's\n * command and videos playing automatically\n *\n * @constant {!Object<string, string>}\n */\nexport const PlayingStates = {\n  /**\n   * playing_manual\n   *\n   * When the video user manually interacted with the video and the video\n   * is now playing\n   *\n   * @event playing_manual\n   */\n  PLAYING_MANUAL: 'playing_manual',\n\n  /**\n   * playing_auto\n   *\n   * When the video has autoplay and the user hasn't interacted with it yet\n   *\n   * @event playing_auto\n   */\n  PLAYING_AUTO: 'playing_auto',\n\n  /**\n   * paused\n   *\n   * When the video is paused.\n   *\n   * @event paused\n   */\n  PAUSED: 'paused',\n};\n\n\n/** @enum {string} */\nexport const VideoAnalyticsEvents = {\n  /**\n   * video-ended\n   *\n   * Indicates that a video ended.\n   * @property {!VideoAnalyticsDetailsDef} details\n   * @event video-ended\n   */\n  ENDED: 'video-ended',\n\n  /**\n   * video-pause\n   *\n   * Indicates that a video paused.\n   * @property {!VideoAnalyticsDetailsDef} details\n   * @event video-pause\n   */\n  PAUSE: 'video-pause',\n\n  /**\n   * video-play\n   *\n   * Indicates that a video began to play.\n   * @property {!VideoAnalyticsDetailsDef} details\n   * @event video-play\n   */\n  PLAY: 'video-play',\n\n  /**\n   * video-session\n   *\n   * Indicates that some segment of the video played.\n   * @property {!VideoAnalyticsDetailsDef} details\n   * @event video-session\n   */\n  SESSION: 'video-session',\n\n  /**\n   * video-session-visible\n   *\n   * Indicates that some segment of the video played in the viewport.\n   * @property {!VideoAnalyticsDetailsDef} details\n   * @event video-session-visible\n   */\n  SESSION_VISIBLE: 'video-session-visible',\n\n  /**\n   * video-seconds-played\n   *\n   * Indicates that a video was playing when the\n   * video-seconds-played interval fired.\n   * @property {!VideoAnalyticsDetailsDef} details\n   * @event video-session-visible\n   */\n  SECONDS_PLAYED: 'video-seconds-played',\n};\n\n\n/**\n * @typedef {{\n *   autoplay: boolean,\n *   currentTime: number,\n *   duration: number,\n *   height: number,\n *   id: string,\n *   playedRangesJson: string,\n *   playedTotal: number,\n *   muted: boolean,\n *   state: string,\n *   width: number\n * }}\n */\nexport let VideoAnalyticsDetailsDef;\n\n\n/**\n * Helper union type to be used internally, so that the compiler treats\n * `VideoInterface` objects as `BaseElement`s, which they should be anyway.\n *\n * WARNING: Don't use this at the service level. Its `register` method should\n * only allow `VideoInterface` as a guarding measure.\n *\n * @typedef {!VideoInterface|!./base-element.BaseElement}\n */\nexport let VideoOrBaseElementDef;\n","/*! https://mths.be/cssescape v1.5.1 by @mathias | MIT license */\n\n\n/**\n * This regex consists of 4 matching capture groups and one (non-matching) fallback:\n *\n * - (\\0), catch the null terminator character so it may be replaced by UTF\n *   Replacement Char\n * - ^(-)$, catch a solitary dash char, so that it may be backslash escaped.\n *   This is a separate capture group so that the legal-chars (group 4) doesn't\n *   capture it first, since that group doesn't need to escape its dash.\n * - ([\\x01-\\x1f\\x7f]|^-?[0-9]), catch a UTF control char, or any leading\n *   number (with an optional leading dash). The control or the number (but not\n *   the leading dash) must be hex-escaped,.\n * - ([\\x80-\\uffff0-9a-zA-Z_-]+), catch legal-chars, with the exception of a\n *   solitary dash, which will already have matched in group 1.\n * - [^], finally, a catch-all that allows us to backslash escape the char.\n *\n * Together, this matches everything necessary for CSS.escape.\n */\nvar regex = /(\\0)|^(-)$|([\\x01-\\x1f\\x7f]|^-?[0-9])|([\\x80-\\uffff0-9a-zA-Z_-]+)|[^]/g;\n\nfunction escaper(match, nil, dash, hexEscape, chars) {\n  // Chars is the legal-chars (group 4) capture\n  if (chars) {\n    return chars;\n  }\n  // Nil is the null terminator (group 1) capture\n  if (nil) {\n    return '\\uFFFD';\n  }\n  // Both UTF control chars, and leading numbers (with optional leading dash)\n  // (group 3) must be backslash escaped with a trailing space.  Funnily, the\n  // leading dash must not be escaped, but the number. :shrug:\n  if (hexEscape) {\n    return match.slice(0, -1) + '\\\\' + match.slice(-1).charCodeAt(0).toString(16) + ' '\n  }\n  // Finally, the solitary dash and the catch-all chars require backslash\n  // escaping.\n  return '\\\\' + match;\n}\n\n/**\n * https://drafts.csswg.org/cssom/#serialize-an-identifier\n * @param {string} value\n * @return {string}\n */\nexport function cssEscape(value) {\n  return String(value).replace(regex, escaper);\n}\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}