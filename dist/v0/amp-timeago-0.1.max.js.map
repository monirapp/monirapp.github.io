{"version":3,"sources":["node_modules/browser-pack/_prelude.js","extensions/amp-timeago/0.1/amp-timeago.js","src/layout.js","src/log.js","src/mode-object.js","src/mode.js","src/static-template.js","src/string.js","src/style.js","src/types.js","src/url-parse-query-string.js","src/url-try-decode-uri-component.js","src/utils/object.js","third_party/timeagojs/timeago-locales.js","third_party/timeagojs/timeago.js"],"names":[],"mappings":"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","file":"amp-timeago-0.1.max.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","/**\n * Copyright 2017 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {isLayoutSizeDefined} from '../../../src/layout';\nimport {timeago} from '../../../third_party/timeagojs/timeago';\nimport {user} from '../../../src/log';\n\nexport class AmpTimeAgo extends AMP.BaseElement {\n\n  /** @param {!AmpElement} element */\n  constructor(element) {\n    super(element);\n\n    /** @private {string} */\n    this.datetime_ = '';\n\n    /** @private {string} */\n    this.locale_ = '';\n\n    /** @private {string} */\n    this.title_ = '';\n  }\n\n  /** @override */\n  buildCallback() {\n    user().assert(this.element.textContent.length > 0,\n        'Content cannot be empty. Found in: %s', this.element);\n\n    this.datetime_ = this.element.getAttribute('datetime');\n    this.locale_ = this.element.getAttribute('locale') ||\n      this.win.document.documentElement.lang;\n    this.title_ = this.element.textContent.trim();\n\n    this.element.title = this.title_;\n    this.element.textContent = '';\n\n    const timeElement = document.createElement('time');\n    timeElement.setAttribute('datetime', this.datetime_);\n\n    if (this.element.hasAttribute('cutoff')) {\n      const cutoff = parseInt(this.element.getAttribute('cutoff'), 10);\n      const elDate = new Date(this.datetime_);\n      const secondsAgo = Math.floor((Date.now() - elDate.getTime()) / 1000);\n\n      if (secondsAgo > cutoff) {\n        timeElement.textContent = this.title_;\n      } else {\n        timeElement.textContent = timeago(this.datetime_, this.locale_);\n      }\n    } else {\n      timeElement.textContent = timeago(this.datetime_, this.locale_);\n    }\n\n    this.element.appendChild(timeElement);\n  }\n\n  /** @override */\n  isLayoutSupported(layout) {\n    return isLayoutSizeDefined(layout);\n  }\n}\n\n\nAMP.extension('amp-timeago', '0.1', AMP => {\n  AMP.registerElement('amp-timeago', AmpTimeAgo);\n});\n","/**\n * Copyright 2015 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Implements element layout. See https://goo.gl/9avXuT for\n * details.\n */\n\nimport {dev, user} from './log';\nimport {htmlFor} from './static-template';\nimport {isFiniteNumber} from './types';\nimport {setStyle, setStyles} from './style';\nimport {startsWith} from './string';\n\n/**\n * @enum {string}\n */\nexport const Layout = {\n  NODISPLAY: 'nodisplay',\n  FIXED: 'fixed',\n  FIXED_HEIGHT: 'fixed-height',\n  RESPONSIVE: 'responsive',\n  CONTAINER: 'container',\n  FILL: 'fill',\n  FLEX_ITEM: 'flex-item',\n  FLUID: 'fluid',\n  INTRINSIC: 'intrinsic',\n};\n\n\n/**\n * Layout priorities to use with BaseElement#getLayoutPriority() and\n * BaseElement#updateLayoutPriority().\n * @enum {number}\n */\nexport const LayoutPriority = {\n  CONTENT: 0,\n  METADATA: 1,\n  ADS: 2,\n  BACKGROUND: 3,\n};\n\n\n/**\n * CSS Length type. E.g. \"1px\" or \"20vh\".\n * @typedef {string}\n */\nexport let LengthDef;\n\n\n/**\n * @typedef {{\n *   width: string,\n *   height: string\n * }}\n */\nlet DimensionsDef;\n\n\n/**\n * The set of elements with natural dimensions, that is, elements\n * which have a known dimension either based on their value specified here,\n * or, if the value is null, a dimension specific to the browser.\n * `hasNaturalDimensions` checks for membership in this set.\n * `getNaturalDimensions` determines the dimensions for an element in the\n *    set and caches it.\n * @type {!Object<string, ?DimensionsDef>}\n * @private  Visible for testing only!\n */\nexport const naturalDimensions_ = {\n  'AMP-PIXEL': {width: '0px', height: '0px'},\n  'AMP-ANALYTICS': {width: '1px', height: '1px'},\n  // TODO(dvoytenko): audio should have width:auto.\n  'AMP-AUDIO': null,\n  'AMP-SOCIAL-SHARE': {width: '60px', height: '44px'},\n};\n\n\n/**\n * Elements that the progess can be shown for. This set has to be externalized\n * since the element's implementation may not be downloaded yet.\n * @enum {boolean}\n * @private  Visible for testing only!\n */\nexport const LOADING_ELEMENTS_ = {\n  'AMP-ANIM': true,\n  'AMP-BRIGHTCOVE': true,\n  'AMP-GOOGLE-DOCUMENT-EMBED': true,\n  'AMP-EMBED': true,\n  'AMP-FACEBOOK': true,\n  'AMP-FACEBOOK-COMMENTS': true,\n  'AMP-FACEBOOK-LIKE': true,\n  'AMP-FACEBOOK-PAGE': true,\n  'AMP-IFRAME': true,\n  'AMP-IMG': true,\n  'AMP-INSTAGRAM': true,\n  'AMP-LIST': true,\n  'AMP-OOYALA-PLAYER': true,\n  'AMP-PINTEREST': true,\n  'AMP-PLAYBUZZ': true,\n  'AMP-VIDEO': true,\n  'AMP-YOUTUBE': true,\n};\n\n\n/**\n * @param {string} s\n * @return {Layout|undefined} Returns undefined in case of failure to parse\n *   the layout string.\n */\nexport function parseLayout(s) {\n  for (const k in Layout) {\n    if (Layout[k] == s) {\n      return Layout[k];\n    }\n  }\n  return undefined;\n}\n\n\n/**\n * @param {!Layout} layout\n * @return {string}\n */\nexport function getLayoutClass(layout) {\n  return 'i-amphtml-layout-' + layout;\n}\n\n\n/**\n * Whether an element with this layout inherently defines the size.\n * @param {!Layout} layout\n * @return {boolean}\n */\nexport function isLayoutSizeDefined(layout) {\n  return (layout == Layout.FIXED ||\n      layout == Layout.FIXED_HEIGHT ||\n      layout == Layout.RESPONSIVE ||\n      layout == Layout.FILL ||\n      layout == Layout.FLEX_ITEM ||\n      layout == Layout.FLUID ||\n      layout == Layout.INTRINSIC);\n}\n\n\n/**\n * Whether the tag is an internal (service) AMP tag.\n * @param {!Node|string} tag\n * @return {boolean}\n */\nexport function isInternalElement(tag) {\n  const tagName = (typeof tag == 'string') ? tag : tag.tagName;\n  return tagName && startsWith(tagName.toLowerCase(), 'i-');\n}\n\n\n/**\n * Parses the CSS length value. If no units specified, the assumed value is\n * \"px\". Returns undefined in case of parsing error.\n * @param {string|undefined|null} s\n * @return {!LengthDef|undefined}\n */\nexport function parseLength(s) {\n  if (typeof s == 'number') {\n    return s + 'px';\n  }\n  if (!s) {\n    return undefined;\n  }\n  if (!/^\\d+(\\.\\d+)?(px|em|rem|vh|vw|vmin|vmax|cm|mm|q|in|pc|pt)?$/.test(s)) {\n    return undefined;\n  }\n  if (/^\\d+(\\.\\d+)?$/.test(s)) {\n    return s + 'px';\n  }\n  return s;\n}\n\n\n\n/**\n * Asserts that the supplied value is a non-percent CSS Length value.\n * @param {!LengthDef|string|null|undefined} length\n * @return {!LengthDef}\n */\nexport function assertLength(length) {\n  user().assert(\n      /^\\d+(\\.\\d+)?(px|em|rem|vh|vw|vmin|vmax|cm|mm|q|in|pc|pt)$/.test(length),\n      'Invalid length value: %s', length);\n  return /** @type {!LengthDef} */ (length);\n}\n\n\n\n\n/**\n * Asserts that the supplied value is a CSS Length value\n * (including percent unit).\n * @param {!LengthDef|string} length\n * @return {!LengthDef}\n */\nexport function assertLengthOrPercent(length) {\n  user().assert(/^\\d+(\\.\\d+)?(px|em|rem|vh|vw|vmin|vmax|%)$/.test(length),\n      'Invalid length or percent value: %s', length);\n  return length;\n}\n\n\n/**\n * Returns units from the CSS length value.\n * @param {!LengthDef|string|null|undefined} length\n * @return {string}\n */\nexport function getLengthUnits(length) {\n  assertLength(length);\n  dev().assertString(length);\n  const m = user().assert(length.match(/[a-z]+/i),\n      'Failed to read units from %s', length);\n  return m[0];\n}\n\n\n/**\n * Returns the numeric value of a CSS length value.\n * @param {!LengthDef|string|null|undefined} length\n * @return {number|undefined}\n */\nexport function getLengthNumeral(length) {\n  const res = parseFloat(length);\n  return isFiniteNumber(res) ? res : undefined;\n}\n\n\n/**\n * Determines whether the tagName is a known element that has natural dimensions\n * in our runtime or the browser.\n * @param {string} tagName The element tag name.\n * @return {boolean}\n */\nexport function hasNaturalDimensions(tagName) {\n  tagName = tagName.toUpperCase();\n  return naturalDimensions_[tagName] !== undefined;\n}\n\n\n/**\n * Determines the default dimensions for an element which could vary across\n * different browser implementations, like <audio> for instance.\n * This operation can only be completed for an element whitelisted by\n * `hasNaturalDimensions`.\n * @param {!Element} element\n * @return {DimensionsDef}\n */\nexport function getNaturalDimensions(element) {\n  const tagName = element.tagName.toUpperCase();\n  dev().assert(naturalDimensions_[tagName] !== undefined);\n  if (!naturalDimensions_[tagName]) {\n    const doc = element.ownerDocument;\n    const naturalTagName = tagName.replace(/^AMP\\-/, '');\n    const temp = doc.createElement(naturalTagName);\n    // For audio, should no-op elsewhere.\n    temp.controls = true;\n    setStyles(temp, {\n      position: 'absolute',\n      visibility: 'hidden',\n    });\n    doc.body.appendChild(temp);\n    naturalDimensions_[tagName] = {\n      width: (temp./*OK*/offsetWidth || 1) + 'px',\n      height: (temp./*OK*/offsetHeight || 1) + 'px',\n    };\n    doc.body.removeChild(temp);\n  }\n  return /** @type {DimensionsDef} */ (naturalDimensions_[tagName]);\n}\n\n\n/**\n * Whether the loading can be shown for the specified elemeent. This set has\n * to be externalized since the element's implementation may not be\n * downloaded yet.\n * @param {!Element} element\n * @return {boolean}\n */\nexport function isLoadingAllowed(element) {\n  const tagName = element.tagName.toUpperCase();\n  if (tagName == 'AMP-AD' || tagName == 'AMP-EMBED') {\n    return true;\n  }\n  return LOADING_ELEMENTS_[tagName] || false;\n}\n\n\n/**\n * Applies layout to the element. Visible for testing only.\n *\n * \\   \\  /  \\  /   / /   \\     |   _  \\     |  \\ |  | |  | |  \\ |  |  / _____|\n *  \\   \\/    \\/   / /  ^  \\    |  |_)  |    |   \\|  | |  | |   \\|  | |  |  __\n *   \\            / /  /_\\  \\   |      /     |  . `  | |  | |  . `  | |  | |_ |\n *    \\    /\\    / /  _____  \\  |  |\\  \\----.|  |\\   | |  | |  |\\   | |  |__| |\n *     \\__/  \\__/ /__/     \\__\\ | _| `._____||__| \\__| |__| |__| \\__|  \\______|\n *\n * The equivalent of this method is used for server-side rendering (SSR) and\n * any changes made to it must be made in coordination with caches that\n * implement SSR. For more information on SSR see bit.ly/amp-ssr.\n *\n * @param {!Element} element\n * @return {!Layout}\n */\nexport function applyStaticLayout(element) {\n  // Check if the layout has already been done by server-side rendering. The\n  // document may be visible to the user if the boilerplate was removed so\n  // please take care in making changes here.\n  const completedLayoutAttr = element.getAttribute('i-amphtml-layout');\n  if (completedLayoutAttr) {\n    const layout = /** @type {!Layout} */ (dev().assert(\n        parseLayout(completedLayoutAttr)));\n    if ((layout == Layout.RESPONSIVE || layout == Layout.INTRINSIC)\n      && element.firstElementChild) {\n      // Find sizer, but assume that it might not have been parsed yet.\n      element.sizerElement =\n          element.querySelector('i-amphtml-sizer') || undefined;\n    } else if (layout == Layout.NODISPLAY) {\n      applyNoDisplayLayout(element);\n    }\n    return layout;\n  }\n\n  // If the layout was already done by server-side rendering (SSR), then the\n  // code below will not run. Any changes below will necessitate a change to SSR\n  // and must be coordinated with caches that implement SSR. See bit.ly/amp-ssr.\n\n  // Parse layout from the element.\n  const layoutAttr = element.getAttribute('layout');\n  const widthAttr = element.getAttribute('width');\n  const heightAttr = element.getAttribute('height');\n  const sizesAttr = element.getAttribute('sizes');\n  const heightsAttr = element.getAttribute('heights');\n\n  // Input layout attributes.\n  const inputLayout = layoutAttr ? parseLayout(layoutAttr) : null;\n  user().assert(inputLayout !== undefined, 'Unknown layout: %s', layoutAttr);\n  /** @const {string|null|undefined} */\n  const inputWidth = (widthAttr && widthAttr != 'auto') ?\n    parseLength(widthAttr) : widthAttr;\n  user().assert(inputWidth !== undefined, 'Invalid width value: %s', widthAttr);\n  /** @const {string|null|undefined} */\n  const inputHeight = (heightAttr && heightAttr != 'fluid') ?\n    parseLength(heightAttr) : heightAttr;\n  user().assert(inputHeight !== undefined, 'Invalid height value: %s',\n      heightAttr);\n\n  // Effective layout attributes. These are effectively constants.\n  let width;\n  let height;\n  let layout;\n\n  // Calculate effective width and height.\n  if ((!inputLayout || inputLayout == Layout.FIXED ||\n      inputLayout == Layout.FIXED_HEIGHT) &&\n      (!inputWidth || !inputHeight) && hasNaturalDimensions(element.tagName)) {\n    // Default width and height: handle elements that do not specify a\n    // width/height and are defined to have natural browser dimensions.\n    const dimensions = getNaturalDimensions(element);\n    width = (inputWidth || inputLayout == Layout.FIXED_HEIGHT) ? inputWidth :\n      dimensions.width;\n    height = inputHeight || dimensions.height;\n  } else {\n    width = inputWidth;\n    height = inputHeight;\n  }\n\n  // Calculate effective layout.\n  if (inputLayout) {\n    layout = inputLayout;\n  } else if (!width && !height) {\n    layout = Layout.CONTAINER;\n  } else if (height == 'fluid') {\n    layout = Layout.FLUID;\n  } else if (height && (!width || width == 'auto')) {\n    layout = Layout.FIXED_HEIGHT;\n  } else if (height && width && (sizesAttr || heightsAttr)) {\n    layout = Layout.RESPONSIVE;\n  } else {\n    layout = Layout.FIXED;\n  }\n\n  // Verify layout attributes.\n  if (layout == Layout.FIXED || layout == Layout.FIXED_HEIGHT ||\n      layout == Layout.RESPONSIVE || layout == Layout.INTRINSIC) {\n    user().assert(height, 'Expected height to be available: %s', heightAttr);\n  }\n  if (layout == Layout.FIXED_HEIGHT) {\n    user().assert(!width || width == 'auto',\n        'Expected width to be either absent or equal \"auto\" ' +\n        'for fixed-height layout: %s', widthAttr);\n  }\n  if (layout == Layout.FIXED || layout == Layout.RESPONSIVE ||\n      layout == Layout.INTRINSIC) {\n    user().assert(width && width != 'auto',\n        'Expected width to be available and not equal to \"auto\": %s',\n        widthAttr);\n  }\n\n  if (layout == Layout.RESPONSIVE || layout == Layout.INTRINSIC) {\n    user().assert(getLengthUnits(width) == getLengthUnits(height),\n        'Length units should be the same for width and height: %s, %s',\n        widthAttr, heightAttr);\n  } else {\n    user().assert(heightsAttr === null,\n        'Unexpected \"heights\" attribute for none-responsive layout');\n  }\n\n  // Apply UI.\n  element.classList.add(getLayoutClass(layout));\n  if (isLayoutSizeDefined(layout)) {\n    element.classList.add('i-amphtml-layout-size-defined');\n  }\n  if (layout == Layout.NODISPLAY) {\n    // CSS defines layout=nodisplay automatically with `display:none`. Thus\n    // no additional styling is needed.\n    applyNoDisplayLayout(element);\n  } else if (layout == Layout.FIXED) {\n    setStyles(element, {\n      width: dev().assertString(width),\n      height: dev().assertString(height),\n    });\n  } else if (layout == Layout.FIXED_HEIGHT) {\n    setStyle(element, 'height', dev().assertString(height));\n  } else if (layout == Layout.RESPONSIVE) {\n    const sizer = element.ownerDocument.createElement('i-amphtml-sizer');\n    setStyles(sizer, {\n      display: 'block',\n      paddingTop:\n        ((getLengthNumeral(height) / getLengthNumeral(width)) * 100) + '%',\n    });\n    element.insertBefore(sizer, element.firstChild);\n    element.sizerElement = sizer;\n  } else if (layout == Layout.INTRINSIC) {\n    // Intrinsic uses an svg inside the sizer element rather than the padding\n    // trick Note a naked svg won't work becasue other thing expect the\n    // i-amphtml-sizer element\n    const sizer = htmlFor(element)`\n      <i-amphtml-sizer class=\"i-amphtml-sizer\">\n        <img class=\"i-amphtml-intrinsic-sizer\" />\n      </i-amphtml-sizer>`;\n    const intrinsicSizer = sizer.firstElementChild;\n    intrinsicSizer.setAttribute('src',\n        `data:image/svg+xml;charset=utf-8,<svg height=\"${height}\" width=\"${width}\" xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\"/>`);\n    element.insertBefore(sizer, element.firstChild);\n    // TODO(jpettitt): sizer is leaked and can't be cleaned up.\n    element.sizerElement = intrinsicSizer;\n  } else if (layout == Layout.FILL) {\n    // Do nothing.\n  } else if (layout == Layout.CONTAINER) {\n    // Do nothing. Elements themselves will check whether the supplied\n    // layout value is acceptable. In particular container is only OK\n    // sometimes.\n  } else if (layout == Layout.FLEX_ITEM) {\n    // Set height and width to a flex item if they exist.\n    // The size set to a flex item could be overridden by `display: flex` later.\n    if (width) {\n      setStyle(element, 'width', width);\n    }\n    if (height) {\n      setStyle(element, 'height', height);\n    }\n  } else if (layout == Layout.FLUID) {\n    element.classList.add('i-amphtml-layout-awaiting-size');\n    if (width) {\n      setStyle(element, 'width', width);\n    }\n    setStyle(element, 'height', 0);\n  }\n  return layout;\n}\n\n\n/**\n * @param {!Element} element\n */\nfunction applyNoDisplayLayout(element) {\n  // TODO(dvoytenko, #9353): once `toggleLayoutDisplay` API has been deployed\n  // everywhere, switch all relevant elements to this API. In the meantime,\n  // simply unblock display toggling via `style=\"display: ...\"`.\n  setStyle(element, 'display', 'none');\n  element.classList.add('i-amphtml-display');\n}\n","/**\n * Copyright 2015 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {getMode} from './mode';\nimport {getModeObject} from './mode-object';\nimport {isEnumValue} from './types';\n\n/**\n * Triple zero width space.\n *\n * This is added to user error messages, so that we can later identify\n * them, when the only thing that we have is the message. This is the\n * case in many browsers when the global exception handler is invoked.\n *\n * @const {string}\n */\nexport const USER_ERROR_SENTINEL = '\\u200B\\u200B\\u200B';\n\n\n/**\n * Four zero width space.\n *\n * @const {string}\n */\nexport const USER_ERROR_EMBED_SENTINEL = '\\u200B\\u200B\\u200B\\u200B';\n\n\n/**\n * @param {string} message\n * @return {boolean} Whether this message was a user error.\n */\nexport function isUserErrorMessage(message) {\n  return message.indexOf(USER_ERROR_SENTINEL) >= 0;\n}\n\n/**\n * @param {string} message\n * @return {boolean} Whether this message was a a user error from an iframe embed.\n */\nexport function isUserErrorEmbed(message) {\n  return message.indexOf(USER_ERROR_EMBED_SENTINEL) >= 0;\n}\n\n\n/**\n * @enum {number}\n * @private Visible for testing only.\n */\nexport const LogLevel = {\n  OFF: 0,\n  ERROR: 1,\n  WARN: 2,\n  INFO: 3,\n  FINE: 4,\n};\n\n/**\n * Sets reportError function. Called from error.js to break cyclic\n * dependency.\n * @param {function(*, !Element=)|undefined} fn\n */\nexport function setReportError(fn) {\n  self.reportError = fn;\n}\n\n/**\n * @type {!LogLevel|undefined}\n * @private\n */\nlet levelOverride_ = undefined;\n\n/**\n * @param {!LogLevel} level\n */\nexport function overrideLogLevel(level) {\n  levelOverride_ = level;\n}\n\n/**\n * Logging class. Use of sentinel string instead of a boolean to check user/dev\n * errors because errors could be rethrown by some native code as a new error,\n * and only a message would survive. Also, some browser don’t support a 5th\n * error object argument in window.onerror. List of supporting browser can be\n * found here:\n * https://blog.sentry.io/2016/01/04/client-javascript-reporting-window-onerror.html\n * @final\n * @private Visible for testing only.\n */\nexport class Log {\n  /**\n   * opt_suffix will be appended to error message to identify the type of the\n   * error message. We can't rely on the error object to pass along the type\n   * because some browsers do not have this param in its window.onerror API.\n   * See:\n   * https://blog.sentry.io/2016/01/04/client-javascript-reporting-window-onerror.html\n   *\n   * @param {!Window} win\n   * @param {function(!./mode.ModeDef):!LogLevel} levelFunc\n   * @param {string=} opt_suffix\n   */\n  constructor(win, levelFunc, opt_suffix) {\n    /**\n     * In tests we use the main test window instead of the iframe where\n     * the tests runs because only the former is relayed to the console.\n     * @const {!Window}\n     */\n    this.win = (getMode().test && win.AMP_TEST_IFRAME) ? win.parent : win;\n\n    /** @private @const {function(!./mode.ModeDef):!LogLevel} */\n    this.levelFunc_ = levelFunc;\n\n    /** @private @const {!LogLevel} */\n    this.level_ = this.defaultLevel_();\n\n    /** @private @const {string} */\n    this.suffix_ = opt_suffix || '';\n  }\n\n  /**\n   * @return {!LogLevel}\n   * @private\n   */\n  getLevel_() {\n    return (levelOverride_ !== undefined) ? levelOverride_ : this.level_;\n  }\n\n  /**\n   * @return {!LogLevel}\n   * @private\n   */\n  defaultLevel_() {\n    // No console - can't enable logging.\n    if (!this.win.console || !this.win.console.log) {\n      return LogLevel.OFF;\n    }\n\n    // Logging has been explicitly disabled.\n    if (getMode().log == '0') {\n      return LogLevel.OFF;\n    }\n\n    // Logging is enabled for tests directly.\n    if (getMode().test && this.win.ENABLE_LOG) {\n      return LogLevel.FINE;\n    }\n\n    // LocalDev by default allows INFO level, unless overriden by `#log`.\n    if (getMode().localDev && !getMode().log) {\n      return LogLevel.INFO;\n    }\n\n    // Delegate to the specific resolver.\n    return this.levelFunc_(getModeObject());\n  }\n\n  /**\n   * @param {string} tag\n   * @param {string} level\n   * @param {!Array} messages\n   */\n  msg_(tag, level, messages) {\n    if (this.getLevel_() != LogLevel.OFF) {\n      let fn = this.win.console.log;\n      if (level == 'ERROR') {\n        fn = this.win.console.error || fn;\n      } else if (level == 'INFO') {\n        fn = this.win.console.info || fn;\n      } else if (level == 'WARN') {\n        fn = this.win.console.warn || fn;\n      }\n      if (getMode().localDev) {\n        messages.unshift('[' + tag + ']');\n      }\n      fn.apply(this.win.console, messages);\n    }\n  }\n\n  /**\n   * Whether the logging is enabled.\n   * @return {boolean}\n   */\n  isEnabled() {\n    return this.getLevel_() != LogLevel.OFF;\n  }\n\n  /**\n   * Reports a fine-grained message.\n   * @param {string} tag\n   * @param {...*} var_args\n   */\n  fine(tag, var_args) {\n    if (this.getLevel_() >= LogLevel.FINE) {\n      this.msg_(tag, 'FINE', Array.prototype.slice.call(arguments, 1));\n    }\n  }\n\n  /**\n   * Reports a informational message.\n   * @param {string} tag\n   * @param {...*} var_args\n   */\n  info(tag, var_args) {\n    if (this.getLevel_() >= LogLevel.INFO) {\n      this.msg_(tag, 'INFO', Array.prototype.slice.call(arguments, 1));\n    }\n  }\n\n  /**\n   * Reports a warning message.\n   * @param {string} tag\n   * @param {...*} var_args\n   */\n  warn(tag, var_args) {\n    if (this.getLevel_() >= LogLevel.WARN) {\n      this.msg_(tag, 'WARN', Array.prototype.slice.call(arguments, 1));\n    }\n  }\n\n  /**\n   * Reports an error message. If the logging is disabled, the error is rethrown\n   * asynchronously.\n   * @param {string} tag\n   * @param {...*} var_args\n   * @return {!Error|undefined}\n   * @private\n   */\n  error_(tag, var_args) {\n    if (this.getLevel_() >= LogLevel.ERROR) {\n      this.msg_(tag, 'ERROR', Array.prototype.slice.call(arguments, 1));\n    } else {\n      const error = createErrorVargs.apply(null,\n          Array.prototype.slice.call(arguments, 1));\n      this.prepareError_(error);\n      return error;\n    }\n  }\n\n  /**\n   * Reports an error message.\n   * @param {string} tag\n   * @param {...*} var_args\n   */\n  error(tag, var_args) {\n    const error = this.error_.apply(this, arguments);\n    if (error) {\n      error.name = tag || error.name;\n      // reportError is installed globally per window in the entry point.\n      self.reportError(error);\n    }\n  }\n\n  /**\n   * Reports an error message and marks with an expected property. If the\n   * logging is disabled, the error is rethrown asynchronously.\n   * @param {string} unusedTag\n   * @param {...*} var_args\n   */\n  expectedError(unusedTag, var_args) {\n    const error = this.error_.apply(this, arguments);\n    if (error) {\n      error.expected = true;\n      // reportError is installed globally per window in the entry point.\n      self.reportError(error);\n    }\n  }\n\n  /**\n   * Creates an error object.\n   * @param {...*} var_args\n   * @return {!Error}\n   */\n  createError(var_args) {\n    const error = createErrorVargs.apply(null, arguments);\n    this.prepareError_(error);\n    return error;\n  }\n\n  /**\n   * Creates an error object with its expected property set to true.\n   * @param {...*} var_args\n   * @return {!Error}\n   */\n  createExpectedError(var_args) {\n    const error = createErrorVargs.apply(null, arguments);\n    this.prepareError_(error);\n    error.expected = true;\n    return error;\n  }\n\n  /**\n   * Throws an error if the first argument isn't trueish.\n   *\n   * Supports argument substitution into the message via %s placeholders.\n   *\n   * Throws an error object that has two extra properties:\n   * - associatedElement: This is the first element provided in the var args.\n   *   It can be used for improved display of error messages.\n   * - messageArray: The elements of the substituted message as non-stringified\n   *   elements in an array. When e.g. passed to console.error this yields\n   *   native displays of things like HTML elements.\n   *\n   * @param {T} shouldBeTrueish The value to assert. The assert fails if it does\n   *     not evaluate to true.\n   * @param {string=} opt_message The assertion message\n   * @param {...*} var_args Arguments substituted into %s in the message.\n   * @return {T} The value of shouldBeTrueish.\n   * @template T\n   * eslint \"google-camelcase/google-camelcase\": 0\n   */\n  assert(shouldBeTrueish, opt_message, var_args) {\n    let firstElement;\n    if (!shouldBeTrueish) {\n      const message = opt_message || 'Assertion failed';\n      const splitMessage = message.split('%s');\n      const first = splitMessage.shift();\n      let formatted = first;\n      const messageArray = [];\n      pushIfNonEmpty(messageArray, first);\n      for (let i = 2; i < arguments.length; i++) {\n        const val = arguments[i];\n        if (val && val.tagName) {\n          firstElement = val;\n        }\n        const nextConstant = splitMessage.shift();\n        messageArray.push(val);\n        pushIfNonEmpty(messageArray, nextConstant.trim());\n        formatted += toString(val) + nextConstant;\n      }\n      const e = new Error(formatted);\n      e.fromAssert = true;\n      e.associatedElement = firstElement;\n      e.messageArray = messageArray;\n      this.prepareError_(e);\n      // reportError is installed globally per window in the entry point.\n      self.reportError(e);\n      throw e;\n    }\n    return shouldBeTrueish;\n  }\n\n  /**\n   * Throws an error if the first argument isn't an Element\n   *\n   * Otherwise see `assert` for usage\n   *\n   * @param {*} shouldBeElement\n   * @param {string=} opt_message The assertion message\n   * @return {!Element} The value of shouldBeTrueish.\n   * @template T\n   * eslint \"google-camelcase/google-camelcase\": 2\n   */\n  assertElement(shouldBeElement, opt_message) {\n    const shouldBeTrueish = shouldBeElement && shouldBeElement.nodeType == 1;\n    this.assert(shouldBeTrueish, (opt_message || 'Element expected') + ': %s',\n        shouldBeElement);\n    return /** @type {!Element} */ (shouldBeElement);\n  }\n\n  /**\n   * Throws an error if the first argument isn't a string. The string can\n   * be empty.\n   *\n   * For more details see `assert`.\n   *\n   * @param {*} shouldBeString\n   * @param {string=} opt_message The assertion message\n   * @return {string} The string value. Can be an empty string.\n   * eslint \"google-camelcase/google-camelcase\": 2\n   */\n  assertString(shouldBeString, opt_message) {\n    this.assert(typeof shouldBeString == 'string',\n        (opt_message || 'String expected') + ': %s', shouldBeString);\n    return /** @type {string} */ (shouldBeString);\n  }\n\n  /**\n   * Throws an error if the first argument isn't a number. The allowed values\n   * include `0` and `NaN`.\n   *\n   * For more details see `assert`.\n   *\n   * @param {*} shouldBeNumber\n   * @param {string=} opt_message The assertion message\n   * @return {number} The number value. The allowed values include `0`\n   *   and `NaN`.\n   */\n  assertNumber(shouldBeNumber, opt_message) {\n    this.assert(typeof shouldBeNumber == 'number',\n        (opt_message || 'Number expected') + ': %s', shouldBeNumber);\n    return /** @type {number} */ (shouldBeNumber);\n  }\n\n  /**\n   * Throws an error if the first argument isn't a boolean.\n   *\n   * For more details see `assert`.\n   *\n   * @param {*} shouldBeBoolean\n   * @param {string=} opt_message The assertion message\n   * @return {boolean} The boolean value.\n   */\n  assertBoolean(shouldBeBoolean, opt_message) {\n    this.assert(!!shouldBeBoolean === shouldBeBoolean,\n        (opt_message || 'Boolean expected') + ': %s', shouldBeBoolean);\n    return /** @type {boolean} */ (shouldBeBoolean);\n  }\n\n  /**\n   * Asserts and returns the enum value. If the enum doesn't contain such a\n   * value, the error is thrown.\n   *\n   * @param {!Object<T>} enumObj\n   * @param {string} s\n   * @param {string=} opt_enumName\n   * @return {T}\n   * @template T\n   * eslint \"google-camelcase/google-camelcase\": 2\n   */\n  assertEnumValue(enumObj, s, opt_enumName) {\n    if (isEnumValue(enumObj, s)) {\n      return s;\n    }\n    this.assert(false,\n        'Unknown %s value: \"%s\"',\n        opt_enumName || 'enum', s);\n  }\n\n  /**\n   * @param {!Error} error\n   * @private\n   */\n  prepareError_(error) {\n    error = duplicateErrorIfNecessary(error);\n    if (this.suffix_) {\n      if (!error.message) {\n        error.message = this.suffix_;\n      } else if (error.message.indexOf(this.suffix_) == -1) {\n        error.message += this.suffix_;\n      }\n    } else if (isUserErrorMessage(error.message)) {\n      error.message = error.message.replace(USER_ERROR_SENTINEL, '');\n    }\n  }\n}\n\n/**\n * @param {string|!Element} val\n * @return {string}\n */\nfunction toString(val) {\n  // Do check equivalent to `val instanceof Element` without cross-window bug\n  if (val && val.nodeType == 1) {\n    return val.tagName.toLowerCase() + (val.id ? '#' + val.id : '');\n  }\n  return /** @type {string} */ (val);\n}\n\n\n/**\n * @param {!Array} array\n * @param {*} val\n */\nfunction pushIfNonEmpty(array, val) {\n  if (val != '') {\n    array.push(val);\n  }\n}\n\n/**\n * Some exceptions (DOMException, namely) have read-only message.\n * @param {!Error} error\n * @return {!Error};\n */\nexport function duplicateErrorIfNecessary(error) {\n  const {message} = error;\n  const test = String(Math.random());\n  error.message = test;\n\n  if (error.message === test) {\n    error.message = message;\n    return error;\n  }\n\n  const e = new Error(error.message);\n  // Copy all the extraneous things we attach.\n  for (const prop in error) {\n    e[prop] = error[prop];\n  }\n  // Ensure these are copied.\n  e.stack = error.stack;\n  return e;\n}\n\n/**\n * @param {...*} var_args\n * @return {!Error}\n * @visibleForTesting\n */\nexport function createErrorVargs(var_args) {\n  let error = null;\n  let message = '';\n  for (let i = 0; i < arguments.length; i++) {\n    const arg = arguments[i];\n    if (arg instanceof Error && !error) {\n      error = duplicateErrorIfNecessary(arg);\n    } else {\n      if (message) {\n        message += ' ';\n      }\n      message += arg;\n    }\n  }\n\n  if (!error) {\n    error = new Error(message);\n  } else if (message) {\n    error.message = message + ': ' + error.message;\n  }\n  return error;\n}\n\n\n/**\n * Rethrows the error without terminating the current context. This preserves\n * whether the original error designation is a user error or a dev error.\n * @param {...*} var_args\n */\nexport function rethrowAsync(var_args) {\n  const error = createErrorVargs.apply(null, arguments);\n  setTimeout(() => {\n    // reportError is installed globally per window in the entry point.\n    self.reportError(error);\n    throw error;\n  });\n}\n\n\n/**\n * Cache for logs. We do not use a Service since the service module depends\n * on Log and closure literally can't even.\n * @type {{user: ?Log, dev: ?Log, userForEmbed: ?Log}}\n */\nself.log = (self.log || {\n  user: null,\n  dev: null,\n  userForEmbed: null,\n});\n\nconst logs = self.log;\n\n/**\n * Eventually holds a constructor for Log objects. Lazily initialized, so we\n * can avoid ever referencing the real constructor except in JS binaries\n * that actually want to include the implementation.\n * @type {?Function}\n */\nlet logConstructor = null;\n\n/**\n * Initializes log contructor.\n */\nexport function initLogConstructor() {\n  logConstructor = Log;\n  // Initialize instances for use. If a binary (an extension for example) that\n  // does not call `initLogConstructor` invokes `dev()` or `user()` earlier than\n  // the binary that does call `initLogConstructor` (amp.js), the extension will\n  // throw an error as that extension will never be able to initialize the log\n  // instances and we also don't want it to call `initLogConstructor` either\n  // (since that will cause the Log implementation to be bundled into that\n  // binary). So we must initialize the instances eagerly so that they are ready\n  // for use (stored globally) after the main binary calls `initLogConstructor`.\n  dev();\n  user();\n}\n\n/**\n * Resets log contructor for testing.\n */\nexport function resetLogConstructorForTesting() {\n  logConstructor = null;\n}\n\n/**\n * Publisher level log.\n *\n * Enabled in the following conditions:\n *  1. Not disabled using `#log=0`.\n *  2. Development mode is enabled via `#development=1` or logging is explicitly\n *     enabled via `#log=D` where D >= 1.\n *  3. AMP.setLogLevel(D) is called, where D >= 1.\n *\n * @param {!Element=} opt_element\n * @return {!Log}\n */\nexport function user(opt_element) {\n  if (!logs.user) {\n    logs.user = getUserLogger(USER_ERROR_SENTINEL);\n  }\n  if (!isFromEmbed(logs.user.win, opt_element)) {\n    return logs.user;\n  } else {\n    if (logs.userForEmbed) {\n      return logs.userForEmbed;\n    }\n    return logs.userForEmbed = getUserLogger(USER_ERROR_EMBED_SENTINEL);\n  }\n}\n\n/**\n * Getter for user logger\n * @param {string=} suffix\n * @return {!Log}\n */\nfunction getUserLogger(suffix) {\n  if (!logConstructor) {\n    throw new Error('failed to call initLogConstructor');\n  }\n  return new logConstructor(self, mode => {\n    const logNum = parseInt(mode.log, 10);\n    if (mode.development || logNum >= 1) {\n      return LogLevel.FINE;\n    }\n    return LogLevel.WARN;\n  }, suffix);\n}\n\n/**\n * AMP development log. Calls to `devLog().assert` and `dev.fine` are stripped\n * in the PROD binary. However, `devLog().assert` result is preserved in either\n * case.\n *\n * Enabled in the following conditions:\n *  1. Not disabled using `#log=0`.\n *  2. Logging is explicitly enabled via `#log=D`, where D >= 2.\n *  3. AMP.setLogLevel(D) is called, where D >= 2.\n *\n * @return {!Log}\n */\nexport function dev() {\n  if (logs.dev) {\n    return logs.dev;\n  }\n  if (!logConstructor) {\n    throw new Error('failed to call initLogConstructor');\n  }\n  return logs.dev = new logConstructor(self, mode => {\n    const logNum = parseInt(mode.log, 10);\n    if (logNum >= 3) {\n      return LogLevel.FINE;\n    }\n    if (logNum >= 2) {\n      return LogLevel.INFO;\n    }\n    return LogLevel.OFF;\n  });\n}\n\n/**\n * @param {!Window} win\n * @param {!Element=} opt_element\n * @return {boolean} isEmbed\n */\nexport function isFromEmbed(win, opt_element) {\n  if (!opt_element) {\n    return false;\n  }\n  return opt_element.ownerDocument.defaultView != win;\n}\n","/**\n * Copyright 2016 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {getMode} from './mode';\n\n/**\n * Provides info about the current app. This return value may be cached and\n * passed around as it will always be DCE'd.\n * @param {?Window=} opt_win\n * @return {!./mode.ModeDef}\n */\nexport function getModeObject(opt_win) {\n  return {\n    localDev: getMode(opt_win).localDev,\n    development: getMode(opt_win).development,\n    filter: getMode(opt_win).filter,\n    minified: getMode(opt_win).minified,\n    lite: getMode(opt_win).lite,\n    test: getMode(opt_win).test,\n    log: getMode(opt_win).log,\n    version: getMode(opt_win).version,\n    rtvVersion: getMode(opt_win).rtvVersion,\n  };\n}\n","/**\n * Copyright 2015 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {parseQueryString_} from './url-parse-query-string';\n\n/**\n * @typedef {{\n *   localDev: boolean,\n *   development: boolean,\n *   filter: (string|undefined),\n *   minified: boolean,\n *   lite: boolean,\n *   test: boolean,\n *   log: (string|undefined),\n *   version: string,\n *   rtvVersion: string,\n * }}\n */\nexport let ModeDef;\n\n/** @type {string} */\nconst version = '$internalRuntimeVersion$';\n\n/**\n * `rtvVersion` is the prefixed version we serve off of the cdn.\n * The prefix denotes canary(00) or prod(01) or an experiment version ( > 01).\n * @type {string}\n */\nlet rtvVersion = '';\n\n/**\n * Provides info about the current app.\n * @param {?Window=} opt_win\n * @return {!ModeDef}\n */\nexport function getMode(opt_win) {\n  const win = opt_win || self;\n  if (win.AMP_MODE) {\n    return win.AMP_MODE;\n  }\n  return win.AMP_MODE = getMode_(win);\n}\n\n/**\n * Provides info about the current app.\n * @param {!Window} win\n * @return {!ModeDef}\n */\nfunction getMode_(win) {\n  // Magic constants that are replaced by closure compiler.\n  // IS_MINIFIED is always replaced with true when closure compiler is used\n  // while IS_DEV is only replaced when `gulp dist` is called without the\n  // --fortesting flag.\n  const IS_DEV = true;\n  const IS_MINIFIED = false;\n\n  const localDevEnabled = !!(self.AMP_CONFIG && self.AMP_CONFIG.localDev);\n  const runningTests = IS_DEV && !!(win.AMP_TEST || win.__karma__);\n  const isLocalDev = IS_DEV && (localDevEnabled || runningTests);\n  const hashQuery = parseQueryString_(\n      // location.originalHash is set by the viewer when it removes the fragment\n      // from the URL.\n      win.location.originalHash || win.location.hash);\n\n  const searchQuery = parseQueryString_(win.location.search);\n\n  if (!rtvVersion) {\n    rtvVersion = getRtvVersion(win, isLocalDev);\n  }\n\n  // The `minified`, `test` and `localDev` properties are replaced\n  // as boolean literals when we run `gulp dist` without the `--fortesting`\n  // flags. This improved DCE on the production file we deploy as the code\n  // paths for localhost/testing/development are eliminated.\n  return {\n    localDev: isLocalDev,\n    // Triggers validation or enable pub level logging. Validation can be\n    // bypassed via #validate=0.\n    // Note that AMP_DEV_MODE flag is used for testing purposes.\n    development: !!(hashQuery['development'] == '1' || win.AMP_DEV_MODE),\n    examiner: hashQuery['development'] == '2',\n    // Allows filtering validation errors by error category. For the\n    // available categories, see ErrorCategory in validator/validator.proto.\n    filter: hashQuery['filter'],\n    // amp-geo override\n    geoOverride: hashQuery['amp-geo'],\n    minified: IS_MINIFIED,\n    // Whether document is in an amp-lite viewer. It signal that the user\n    // would prefer to use less bandwidth.\n    lite: searchQuery['amp_lite'] != undefined,\n    test: runningTests,\n    log: hashQuery['log'],\n    version,\n    rtvVersion,\n  };\n}\n\n/**\n * Retrieve the `rtvVersion` which will have a numeric prefix\n * denoting canary/prod/experiment (unless `isLocalDev` is true).\n *\n * @param {!Window} win\n * @param {boolean} isLocalDev\n * @return {string}\n */\nfunction getRtvVersion(win, isLocalDev) {\n  // If it's local dev then we won't actually have a full version so\n  // just use the version.\n  if (isLocalDev) {\n    return version;\n  }\n\n  if (win.AMP_CONFIG && win.AMP_CONFIG.v) {\n    return win.AMP_CONFIG.v;\n  }\n\n  // Currently `$internalRuntimeVersion$` and thus `mode.version` contain only\n  // major version. The full version however must also carry the minor version.\n  // We will default to production default `01` minor version for now.\n  // TODO(erwinmombay): decide whether $internalRuntimeVersion$ should contain\n  // minor version.\n  return `01${version}`;\n}\n\n\n/**\n * @param {!Window} win\n * @param {boolean} isLocalDev\n * @return {string}\n * @visibleForTesting\n */\nexport function getRtvVersionForTesting(win, isLocalDev) {\n  return getRtvVersion(win, isLocalDev);\n}\n\n\n/** @visibleForTesting */\nexport function resetRtvVersionForTesting() {\n  rtvVersion = '';\n}\n","/**\n * Copyright 2018 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {dev} from './log';\nimport {map} from './utils/object.js';\n\nlet container;\n\n/**\n * Creates the html helper for the doc.\n *\n * @param {!Element|!Document} nodeOrDoc\n * @return {function(!Array<string>):!Element}\n */\nexport function htmlFor(nodeOrDoc) {\n  const doc = nodeOrDoc.ownerDocument || nodeOrDoc;\n  if (!container || container.ownerDocument !== doc) {\n    container = doc.createElement('div');\n  }\n\n  return html;\n}\n\n/**\n * A tagged template literal helper to generate static DOM trees.\n * This must be used as a tagged template, ie\n *\n * ```\n * const div = html`<div><span></span></div>`;\n * ```\n *\n * Only the root element and its subtree will be returned. DO NOT use this to\n * render subtree's with dynamic content, it WILL result in an error!\n *\n * @param {!Array<string>} strings\n * @return {!Element}\n */\nfunction html(strings) {\n  dev().assert(strings.length === 1, 'Improper html template tag usage.');\n  container./*OK*/innerHTML = strings[0];\n\n  const el = container.firstElementChild;\n  dev().assert(el, 'No elements in template');\n  dev().assert(!el.nextElementSibling, 'Too many root elements in template');\n\n  // Clear to free memory.\n  container./*OK*/innerHTML = '';\n\n  return el;\n}\n\n/**\n * Queries an element for all elements with a \"ref\" attribute, removing\n * the attribute afterwards.\n * Returns a named map of all ref elements.\n *\n * @param {!Element} root\n * @return {!Object<string, !Element>}\n */\nexport function htmlRefs(root) {\n  const elements = root.querySelectorAll('[ref]');\n  const refs = map();\n\n  for (let i = 0; i < elements.length; i++) {\n    const element = elements[i];\n    const ref = dev().assert(element.getAttribute('ref'), 'Empty ref attr');\n    element.removeAttribute('ref');\n    dev().assert(refs[ref] === undefined, 'Duplicate ref');\n    refs[ref] = element;\n  }\n\n  return refs;\n}\n","/**\n * Copyright 2015 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @param {string} _match\n * @param {string} character\n * @return {string}\n */\nfunction toUpperCase(_match, character) {\n  return character.toUpperCase();\n}\n\n/**\n * @param {string} match\n * @return {string}\n */\nfunction prependDashAndToLowerCase(match) {\n  return '-' + match.toLowerCase();\n}\n\n/**\n * @param {string} name Attribute name containing dashes.\n * @return {string} Dashes removed and successive character sent to upper case.\n * visibleForTesting\n */\nexport function dashToCamelCase(name) {\n  return name.replace(/-([a-z])/g, toUpperCase);\n}\n\n/**\n * Converts a string that is in camelCase to one that is in dash-case.\n *\n * @param {string} string The string to convert.\n * @return {string} The string in dash-case.\n */\nexport function camelCaseToDash(string) {\n  return string.replace(/(?!^)[A-Z]/g, prependDashAndToLowerCase);\n}\n\n/**\n * @param {string} name Attribute name with dashes\n * @return {string} Dashes replaced by underlines.\n */\nexport function dashToUnderline(name) {\n  return name.replace('-', '_');\n}\n\n/**\n * Polyfill for String.prototype.endsWith.\n * @param {string} string\n * @param {string} suffix\n * @return {boolean}\n */\nexport function endsWith(string, suffix) {\n  const index = string.length - suffix.length;\n  return index >= 0 && string.indexOf(suffix, index) == index;\n}\n\n/**\n * Polyfill for String.prototype.startsWith.\n * @param {string} string\n * @param {string} prefix\n * @return {boolean}\n */\nexport function startsWith(string, prefix) {\n  if (prefix.length > string.length) {\n    return false;\n  }\n  return string.lastIndexOf(prefix, 0) == 0;\n}\n\n/**\n * Expands placeholders in a given template string with values.\n *\n * Placeholders use ${key-name} syntax and are replaced with the value\n * returned from the given getter function.\n *\n * @param {string} template The template string to expand.\n * @param {function(string):*} getter Function used to retrieve a value for a\n *   placeholder. Returns values will be coerced into strings.\n * @param {number=} opt_maxIterations Number of times to expand the template.\n *   Defaults to 1, but should be set to a larger value your placeholder tokens\n *   can be expanded to other placeholder tokens. Take caution with large values\n *   as recursively expanding a string can be exponentially expensive.\n */\nexport function expandTemplate(template, getter, opt_maxIterations) {\n  const maxIterations = opt_maxIterations || 1;\n  for (let i = 0; i < maxIterations; i++) {\n    let matches = 0;\n    template = template.replace(/\\${([^}]*)}/g, (_a, b) => {\n      matches++;\n      return getter(b);\n    });\n    if (!matches) {\n      break;\n    }\n  }\n  return template;\n}\n\n/**\n * Hash function djb2a\n * This is intended to be a simple, fast hashing function using minimal code.\n * It does *not* have good cryptographic properties.\n * @param {string} str\n * @return {string} 32-bit unsigned hash of the string\n */\nexport function stringHash32(str) {\n  const {length} = str;\n  let hash = 5381;\n  for (let i = 0; i < length; i++) {\n    hash = hash * 33 ^ str.charCodeAt(i);\n  }\n  // Convert from 32-bit signed to unsigned.\n  return String(hash >>> 0);\n}\n","/**\n * Copyright 2015 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// Note: loaded by 3p system. Cannot rely on babel polyfills.\nimport {map} from './utils/object.js';\nimport {startsWith} from './string';\n\n\n/** @type {Object<string, string>} */\nlet propertyNameCache;\n\n/** @const {!Array<string>} */\nconst vendorPrefixes = ['Webkit', 'webkit', 'Moz', 'moz', 'ms', 'O', 'o'];\n\n\n/**\n * @export\n * @param {string} camelCase camel cased string\n * @return {string} title cased string\n */\nexport function camelCaseToTitleCase(camelCase) {\n  return camelCase.charAt(0).toUpperCase() + camelCase.slice(1);\n}\n\n/**\n * Checks the style if a prefixed version of a property exists and returns\n * it or returns an empty string.\n * @private\n * @param {!Object} style\n * @param {string} titleCase the title case version of a css property name\n * @return {string} the prefixed property name or null.\n */\nfunction getVendorJsPropertyName_(style, titleCase) {\n  for (let i = 0; i < vendorPrefixes.length; i++) {\n    const propertyName = vendorPrefixes[i] + titleCase;\n    if (style[propertyName] !== undefined) {\n      return propertyName;\n    }\n  }\n  return '';\n}\n\n/**\n * Returns the possibly prefixed JavaScript property name of a style property\n * (ex. WebkitTransitionDuration) given a camelCase'd version of the property\n * (ex. transitionDuration).\n * @export\n * @param {!Object} style\n * @param {string} camelCase the camel cased version of a css property name\n * @param {boolean=} opt_bypassCache bypass the memoized cache of property\n *   mapping\n * @return {string}\n */\nexport function getVendorJsPropertyName(style, camelCase, opt_bypassCache) {\n  if (startsWith(camelCase, '--')) {\n    // CSS vars are returned as is.\n    return camelCase;\n  }\n  if (!propertyNameCache) {\n    propertyNameCache = map();\n  }\n  let propertyName = propertyNameCache[camelCase];\n  if (!propertyName || opt_bypassCache) {\n    propertyName = camelCase;\n    if (style[camelCase] === undefined) {\n      const titleCase = camelCaseToTitleCase(camelCase);\n      const prefixedPropertyName = getVendorJsPropertyName_(style, titleCase);\n\n      if (style[prefixedPropertyName] !== undefined) {\n        propertyName = prefixedPropertyName;\n      }\n    }\n    if (!opt_bypassCache) {\n      propertyNameCache[camelCase] = propertyName;\n    }\n  }\n  return propertyName;\n}\n\n\n/**\n * Sets the CSS styles of the specified element with !important. The styles\n * are specified as a map from CSS property names to their values.\n * @param {!Element} element\n * @param {!Object<string, *>} styles\n */\nexport function setImportantStyles(element, styles) {\n  for (const k in styles) {\n    element.style.setProperty(\n        getVendorJsPropertyName(styles, k), styles[k].toString(), 'important');\n  }\n}\n\n\n/**\n * Sets the CSS style of the specified element with optional units, e.g. \"px\".\n * @param {?Element} element\n * @param {string} property\n * @param {*} value\n * @param {string=} opt_units\n * @param {boolean=} opt_bypassCache\n */\nexport function setStyle(element, property, value, opt_units, opt_bypassCache) {\n  const propertyName = getVendorJsPropertyName(element.style, property,\n      opt_bypassCache);\n  if (propertyName) {\n    element.style[propertyName] =\n      /** @type {string} */ (opt_units ? value + opt_units : value);\n  }\n}\n\n\n/**\n * Returns the value of the CSS style of the specified element.\n * @param {!Element} element\n * @param {string} property\n * @param {boolean=} opt_bypassCache\n * @return {*}\n */\nexport function getStyle(element, property, opt_bypassCache) {\n  const propertyName = getVendorJsPropertyName(element.style, property,\n      opt_bypassCache);\n  if (!propertyName) {\n    return undefined;\n  }\n  return element.style[propertyName];\n}\n\n\n/**\n * Sets the CSS styles of the specified element. The styles\n * a specified as a map from CSS property names to their values.\n * @param {!Element} element\n * @param {!Object<string, *>} styles\n */\nexport function setStyles(element, styles) {\n  for (const k in styles) {\n    setStyle(element, k, styles[k]);\n  }\n}\n\n\n/**\n * Shows or hides the specified element.\n * @param {!Element} element\n * @param {boolean=} opt_display\n */\nexport function toggle(element, opt_display) {\n  if (opt_display === undefined) {\n    opt_display = getStyle(element, 'display') == 'none';\n  }\n  setStyle(element, 'display', opt_display ? '' : 'none');\n}\n\n\n/**\n * Returns a pixel value.\n * @param {number} value\n * @return {string}\n */\nexport function px(value) {\n  return `${value}px`;\n}\n\n/**\n * Returns a degree value.\n * @param {number} value\n * @return {string}\n */\nexport function deg(value) {\n  return `${value}deg`;\n}\n\n/**\n * Returns a \"translateX\" for CSS \"transform\" property.\n * @param {number|string} value\n * @return {string}\n */\nexport function translateX(value) {\n  if (typeof value == 'string') {\n    return `translateX(${value})`;\n  }\n  return `translateX(${px(value)})`;\n}\n\n\n/**\n * Returns a \"translateX\" for CSS \"transform\" property.\n * @param {number|string} x\n * @param {(number|string)=} opt_y\n * @return {string}\n */\nexport function translate(x, opt_y) {\n  if (typeof x == 'number') {\n    x = px(x);\n  }\n  if (opt_y === undefined) {\n    return `translate(${x})`;\n  }\n  if (typeof opt_y == 'number') {\n    opt_y = px(opt_y);\n  }\n  return `translate(${x}, ${opt_y})`;\n}\n\n\n/**\n * Returns a \"scale\" for CSS \"transform\" property.\n * @param {number|string} value\n * @return {string}\n */\nexport function scale(value) {\n  return `scale(${value})`;\n}\n\n/**\n * Returns a \"rotate\" for CSS \"transform\" property.\n * @param {number|string} value\n * @return {string}\n */\nexport function rotate(value) {\n  if (typeof value == 'number') {\n    value = deg(value);\n  }\n  return `rotate(${value})`;\n}\n\n/**\n * Remove alpha value from a rgba color value.\n * Return the new color property with alpha equals if has the alpha value.\n * Caller needs to make sure the input color value is a valid rgba/rgb value\n * @param {string} rgbaColor\n * @return {string}\n */\nexport function removeAlphaFromColor(rgbaColor) {\n  return rgbaColor.replace(\n      /\\(([^,]+),([^,]+),([^,)]+),[^)]+\\)/g, '($1,$2,$3, 1)');\n}\n\n/**\n * Gets the computed style of the element. The helper is necessary to enforce\n * the possible `null` value returned by a buggy Firefox.\n *\n * @param {!Window} win\n * @param {!Element} el\n * @return {!Object<string, string>}\n */\nexport function computedStyle(win, el) {\n  const style = /** @type {?CSSStyleDeclaration} */(win.getComputedStyle(el));\n  return /** @type {!Object<string, string>} */(style) || map();\n}\n\n\n/**\n * Resets styles that were set dynamically (i.e. inline)\n * @param {!Element} element\n * @param {!Array<string>} properties\n */\nexport function resetStyles(element, properties) {\n  const styleObj = {};\n  properties.forEach(prop => {\n    styleObj[prop] = null;\n  });\n  setStyles(element, styleObj);\n}\n","/**\n * Copyright 2015 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* @const */\nconst toString_ = Object.prototype.toString;\n\n/**\n * Returns the ECMA [[Class]] of a value\n * @param {*} value\n * @return {string}\n */\nfunction toString(value) {\n  return toString_.call(value);\n}\n\n/**\n * Determines if value is actually an Array.\n * @param {*} value\n * @return {boolean}\n */\nexport function isArray(value) {\n  return Array.isArray(value);\n}\n\n/**\n * Converts an array-like object to an array.\n * @param {?IArrayLike<T>|string} arrayLike\n * @return {!Array<T>}\n * @template T\n */\nexport function toArray(arrayLike) {\n  if (!arrayLike) {\n    return [];\n  }\n  const array = new Array(arrayLike.length);\n  for (let i = 0; i < arrayLike.length; i++) {\n    array[i] = arrayLike[i];\n  }\n  return array;\n}\n\n/**\n * Determines if value is actually an Object.\n * @param {*} value\n * @return {boolean}\n */\nexport function isObject(value) {\n  return toString(value) === '[object Object]';\n}\n\n/**\n * Determines if value is of number type and finite.\n * NaN and Infinity are not considered a finite number.\n * String numbers are not considered numbers.\n * @param {*} value\n * @return {boolean}\n */\nexport function isFiniteNumber(value) {\n  return (typeof value === 'number' && isFinite(value));\n}\n\n/**\n * Checks whether `s` is a valid value of `enumObj`.\n *\n * @param {!Object<T>} enumObj\n * @param {T} s\n * @return {boolean}\n * @template T\n */\nexport function isEnumValue(enumObj, s) {\n  for (const k in enumObj) {\n    if (enumObj[k] === s) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/**\n * Externs declare that access `defaultView` from `document` or\n * `ownerDocument` is of type `(Window|null)` but most of our parameter types\n * assume that it is never null. This is OK in practice as we ever only get\n * null on disconnected documents or old IE.\n * This helper function casts it into just a simple Window return type.\n *\n * @param {!Window|null} winOrNull\n * @return {!Window}\n */\nexport function toWin(winOrNull) {\n  return /** @type {!Window} */ (winOrNull);\n}\n\n","/**\n * Copyright 2017 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {tryDecodeUriComponent_} from './url-try-decode-uri-component';\n\nconst regex = /(?:^[#?]?|&)([^=&]+)(?:=([^&]*))?/g;\n\n/**\n * Parses the query string of an URL. This method returns a simple key/value\n * map. If there are duplicate keys the latest value is returned.\n *\n * DO NOT import the function from this file. Instead, import parseQueryString\n * from `src/url.js`.\n *\n * @param {string} queryString\n * @return {!JsonObject}\n */\nexport function parseQueryString_(queryString) {\n  const params = /** @type {!JsonObject} */ (Object.create(null));\n  if (!queryString) {\n    return params;\n  }\n\n  let match;\n  while ((match = regex.exec(queryString))) {\n    const name = tryDecodeUriComponent_(match[1], match[1]);\n    const value = match[2] ? tryDecodeUriComponent_(match[2], match[2]) : '';\n    params[name] = value;\n  }\n  return params;\n}\n","/**\n * Copyright 2017 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Tries to decode a URI component, falling back to opt_fallback (or an empty\n * string)\n *\n * DO NOT import the function from this file. Instead, import\n * tryDecodeUriComponent from `src/url.js`.\n *\n * @param {string} component\n * @param {string=} fallback\n * @return {string}\n */\nexport function tryDecodeUriComponent_(component, fallback = '') {\n  try {\n    return decodeURIComponent(component);\n  } catch (e) {\n    return fallback;\n  }\n}\n","/**\n * Copyright 2015 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {isObject} from '../types';\n\n/* @const */\nconst hasOwn_ = Object.prototype.hasOwnProperty;\n\n/**\n * Returns a map-like object.\n * If opt_initial is provided, copies its own properties into the\n * newly created object.\n * @param {T=} opt_initial This should typically be an object literal.\n * @return {T}\n * @template T\n */\nexport function map(opt_initial) {\n  const obj = Object.create(null);\n  if (opt_initial) {\n    Object.assign(obj, opt_initial);\n  }\n  return obj;\n}\n\n/**\n * Return an empty JsonObject or makes the passed in object literal\n * an JsonObject.\n * The JsonObject type is just a simple object that is at-dict.\n * See\n * https://github.com/google/closure-compiler/wiki/@struct-and-@dict-Annotations\n * for what a dict is type-wise.\n * The linter enforces that the argument is, in fact, at-dict like.\n * @param {!Object=} opt_initial\n * @return {!JsonObject}\n */\nexport function dict(opt_initial) {\n  // We do not copy. The linter enforces that the passed in object is a literal\n  // and thus the caller cannot have a reference to it.\n  return /** @type {!JsonObject} */ (opt_initial || {});\n}\n\n/**\n * Checks if the given key is a property in the map.\n *\n * @param {T}  obj a map like property.\n * @param {string}  key\n * @return {boolean}\n * @template T\n */\nexport function hasOwn(obj, key) {\n  return hasOwn_.call(obj, key);\n}\n\n/**\n * Returns obj[key] iff key is obj's own property (is not inherited).\n * Otherwise, returns undefined.\n *\n * @param {Object} obj\n * @param {string} key\n * @return {*}\n */\nexport function ownProperty(obj, key) {\n  if (hasOwn(obj, key)) {\n    return obj[key];\n  } else {\n    return undefined;\n  }\n}\n\n/**\n * Deep merges source into target.\n *\n * @param {!Object} target\n * @param {!Object} source\n * @param {number} depth The maximum merge depth. If exceeded, Object.assign\n *                       will be used instead.\n * @return {!Object}\n * @throws {Error} If source contains a circular reference.\n * Note: Only nested objects are deep-merged, primitives and arrays are not.\n */\nexport function deepMerge(target, source, depth = 10) {\n  // Keep track of seen objects to detect recursive references.\n  const seen = [];\n\n  /** @type {!Array<{t: !Object, s: !Object, d: number}>} */\n  const queue = [];\n  queue.push({t: target, s: source, d: 0});\n\n  // BFS to ensure objects don't have recursive references at shallower depths.\n  while (queue.length > 0) {\n    const {t, s, d} = queue.shift();\n    if (seen.includes(s)) {\n      throw new Error('Source object has a circular reference.');\n    }\n    seen.push(s);\n    if (t === s) {\n      continue;\n    }\n    if (d > depth) {\n      Object.assign(t, s);\n      continue;\n    }\n    Object.keys(s).forEach(key => {\n      const newValue = s[key];\n      // Perform a deep merge IFF both target and source have the same key\n      // whose corresponding values are objects.\n      if (hasOwn(t, key)) {\n        const oldValue = t[key];\n        if (isObject(newValue) && isObject(oldValue)) {\n          queue.push({t: oldValue, s: newValue, d: d + 1});\n          return;\n        }\n      }\n      t[key] = newValue;\n    });\n  }\n  return target;\n}\n\n/**\n * @param {!Object} o An object to remove properties from\n * @param {!Array<string>} props A list of properties to remove from the Object\n * @return {!Object} An object with the given properties removed\n */\nexport function omit(o, props) {\n  return Object.keys(o).reduce((acc, key) => {\n    if (!props.includes(key)) {\n      acc[key] = o[key];\n    }\n    return acc;\n  }, {});\n}\n","/**\n * Copyright (c) 2016 hustcc\n * License: MIT\n * Version: v3.0.0\n * https://github.com/hustcc/timeago.js\n */\n\n/**\n * ar (Arabic)\n */\nexport const ar = function(number, index) {\n  if (index === 0) {\n    return ['منذ لحظات', 'بعد لحظات'];\n  }\n\n  const timeTypes = [\n    ['ثانية', 'ثانيتين', '%s ثوان', '%s ثانية'],    // Seconds\n    ['دقيقة', 'دقيقتين', '%s دقائق', '%s دقيقة'],   // Minutes\n    ['ساعة', 'ساعتين', '%s ساعات', '%s ساعة'],      // Hours\n    ['يوم', 'يومين', '%s أيام', '%s يوماً'],         // Days\n    ['أسبوع', 'أسبوعين', '%s أسابيع', '%s أسبوعاً'], // Weeks\n    ['شهر', 'شهرين', '%s أشهر', '%s شهراً'],         // Months\n    ['عام', 'عامين', '%s أعوام', '%s عاماً'],        // Years\n  ];\n\n  const timeStr = formatTime(Math.floor(index / 2), number);\n\n  return [`منذ  ${timeStr}`, `بعد  ${timeStr}`];\n\n  function formatTime(type, n) {\n    if (n < 3) {\n      return timeTypes[type][n - 1];\n    }\n    else if (n >= 3 && n <= 10) {\n      return timeTypes[type][2];\n    }\n    else {\n      return timeTypes[type][3];\n    }\n  }\n};\n\n/**\n * be (Belarusian)\n */\nexport const be = function(number, index) {\n  const seconds =\n    formatNum.bind(null, 'секунду', '%s секунду', '%s секунды', '%s секунд');\n  const minutes =\n    formatNum.bind(null, 'хвіліну', '%s хвіліну', '%s хвіліны', '%s хвілін');\n  const hours =\n    formatNum.bind(null, 'гадзіну', '%s гадзіну', '%s гадзіны', '%s гадзін');\n  const days =\n    formatNum.bind(null, 'дзень', '%s дзень', '%s дні', '%s дзён');\n  const weeks =\n    formatNum.bind(null, 'тыдзень', '%s тыдзень', '%s тыдні', '%s тыдняў');\n  const months =\n    formatNum.bind(null, 'месяц', '%s месяц', '%s месяцы', '%s месяцаў');\n  const years =\n    formatNum.bind(null, 'год', '%s год', '%s гады', '%s гадоў');\n\n  switch (index) {\n    case 0: return ['толькі што', 'праз некалькі секунд'];\n    case 1: return [seconds(number) + ' таму', 'праз ' + seconds(number)];\n    case 2:\n    case 3: return [minutes(number) + ' таму', 'праз ' + minutes(number)];\n    case 4:\n    case 5: return [hours(number) + ' таму', 'праз ' + hours(number)];\n    case 6:\n    case 7: return [days(number) + ' таму', 'праз ' + days(number)];\n    case 8:\n    case 9: return [weeks(number) + ' таму', 'праз ' + weeks(number)];\n    case 10:\n    case 11: return [months(number) + ' таму', 'праз ' + months(number)];\n    case 12:\n    case 13: return [years(number) + ' таму', 'праз ' + years(number)];\n    default: return ['', ''];\n  }\n\n  /**\n   *\n   * @param f1 - 1\n   * @param f - 21, 31, ...\n   * @param s - 2-4, 22-24, 32-34 ...\n   * @param t - 5-20, 25-30, ...\n   * @param n\n   * @return {string}\n   */\n  function formatNum(f1, f, s, t, n) {\n    const n10 = n % 10;\n    let str = t;\n\n    if (n === 1) {\n      str = f1;\n    } else if (n10 === 1 && n > 20) {\n      str = f;\n    } else if (n10 > 1 && n10 < 5 && (n > 20 || n < 10)) {\n      str = s;\n    }\n\n    return str;\n  }\n};\n\n/**\n * bg (Bulgarian)\n */\nexport const bg = function(number, index) {\n  return [\n    ['току що', 'съвсем скоро'],\n    ['преди %s секунди', 'след %s секунди'],\n    ['преди 1 минута', 'след 1 минута'],\n    ['преди %s минути', 'след %s минути'],\n    ['преди 1 час', 'след 1 час'],\n    ['преди %s часа', 'след %s часа'],\n    ['преди 1 ден', 'след 1 ден'],\n    ['преди %s дни', 'след %s дни'],\n    ['преди 1 седмица', 'след 1 седмица'],\n    ['преди %s седмици', 'след %s седмици'],\n    ['преди 1 месец', 'след 1 месец'],\n    ['преди %s месеца', 'след %s месеца'],\n    ['преди 1 година', 'след 1 година'],\n    ['преди %s години', 'след %s години'],\n  ][index];\n};\n\n/**\n * ca (Catalan)\n */\nexport const ca = function(number, index) {\n  return [\n    ['fa un moment', 'd\\'aquí un moment'],\n    ['fa %s segons', 'd\\'aquí %s segons'],\n    ['fa 1 minut', 'd\\'aquí 1 minut'],\n    ['fa %s minuts', 'd\\'aquí %s minuts'],\n    ['fa 1 hora', 'd\\'aquí 1 hora'],\n    ['fa %s hores', 'd\\'aquí %s hores'],\n    ['fa 1 dia', 'd\\'aquí 1 dia'],\n    ['fa %s dies', 'd\\'aquí %s dies'],\n    ['fa 1 setmana', 'd\\'aquí 1 setmana'],\n    ['fa %s setmanes', 'd\\'aquí %s setmanes'],\n    ['fa 1 mes', 'd\\'aquí 1 mes'],\n    ['fa %s mesos', 'd\\'aquí %s mesos'],\n    ['fa 1 any', 'd\\'aquí 1 any'],\n    ['fa %s anys', 'd\\'aquí %s anys'],\n  ][index];\n};\n\n/**\n * da (Danish)\n */\nexport const da = function(number, index) {\n  return [\n    ['for et øjeblik siden', 'om et øjeblik'],\n    ['for %s sekunder siden', 'om %s sekunder'],\n    ['for 1 minut siden', 'om 1 minut'],\n    ['for %s minutter siden', 'om %s minutter'],\n    ['for 1 time siden', 'om 1 time'],\n    ['for %s timer siden', 'om %s timer'],\n    ['for 1 dag siden', 'om 1 dag'],\n    ['for %s dage siden', 'om %s dage'],\n    ['for 1 uge siden', 'om 1 uge'],\n    ['for %s uger siden', 'om %s uger'],\n    ['for 1 måned siden', 'om 1 måned'],\n    ['for %s måneder siden', 'om %s måneder'],\n    ['for 1 år siden', 'om 1 år'],\n    ['for %s år siden', 'om %s år'],\n  ][index];\n};\n\n/**\n * de (German)\n */\nexport const de = function(number, index) {\n  return [\n    ['gerade eben', 'vor einer Weile'],\n    ['vor %s Sekunden', 'in %s Sekunden'],\n    ['vor 1 Minute', 'in 1 Minute'],\n    ['vor %s Minuten', 'in %s Minuten'],\n    ['vor 1 Stunde', 'in 1 Stunde'],\n    ['vor %s Stunden', 'in %s Stunden'],\n    ['vor 1 Tag', 'in 1 Tag'],\n    ['vor %s Tagen', 'in %s Tagen'],\n    ['vor 1 Woche', 'in 1 Woche'],\n    ['vor %s Wochen', 'in %s Wochen'],\n    ['vor 1 Monat', 'in 1 Monat'],\n    ['vor %s Monaten', 'in %s Monaten'],\n    ['vor 1 Jahr', 'in 1 Jahr'],\n    ['vor %s Jahren', 'in %s Jahren'],\n  ][index];\n};\n\n/**\n * el (Greek)\n */\nexport const el = function(number, index) {\n  return [\n    ['μόλις τώρα', 'σε λίγο'],\n    ['%s δευτερόλεπτα πριν', 'σε %s δευτερόλεπτα'],\n    ['1 λεπτό πριν', 'σε 1 λεπτό'],\n    ['%s λεπτά πριν', 'σε %s λεπτά'],\n    ['1 ώρα πριν', 'σε 1 ώρα'],\n    ['%s ώρες πριν', 'σε %s ώρες'],\n    ['1 μέρα πριν', 'σε 1 μέρα'],\n    ['%s μέρες πριν', 'σε %s μέρες'],\n    ['1 εβδομάδα πριν', 'σε 1 εβδομάδα'],\n    ['%s εβδομάδες πριν', 'σε %s εβδομάδες'],\n    ['1 μήνα πριν', 'σε 1 μήνα'],\n    ['%s μήνες πριν', 'σε %s μήνες'],\n    ['1 χρόνο πριν', 'σε 1 χρόνο'],\n    ['%s χρόνια πριν', 'σε %s χρόνια'],\n  ][index];\n};\n\n/**\n * en (English)\n */\nexport const en = function(number, index) {\n  return [\n    ['just now', 'right now'],\n    ['%s seconds ago', 'in %s seconds'],\n    ['1 minute ago', 'in 1 minute'],\n    ['%s minutes ago', 'in %s minutes'],\n    ['1 hour ago', 'in 1 hour'],\n    ['%s hours ago', 'in %s hours'],\n    ['1 day ago', 'in 1 day'],\n    ['%s days ago', 'in %s days'],\n    ['1 week ago', 'in 1 week'],\n    ['%s weeks ago', 'in %s weeks'],\n    ['1 month ago', 'in 1 month'],\n    ['%s months ago', 'in %s months'],\n    ['1 year ago', 'in 1 year'],\n    ['%s years ago', 'in %s years'],\n  ][index];\n};\n\n/**\n * enShort (English - short)\n */\nexport const enShort = function(number, index) {\n  return [\n    ['just now', 'right now'],\n    ['%ss ago', 'in %ss'],\n    ['1m ago', 'in 1m'],\n    ['%sm ago', 'in %sm'],\n    ['1h ago', 'in 1h'],\n    ['%sh ago', 'in %sh'],\n    ['1d ago', 'in 1d'],\n    ['%sd ago', 'in %sd'],\n    ['1w ago', 'in 1w'],\n    ['%sw ago', 'in %sw'],\n    ['1mo ago', 'in 1mo'],\n    ['%smo ago', 'in %smo'],\n    ['1yr ago', 'in 1yr'],\n    ['%syr ago', 'in %syr'],\n  ][index];\n};\n\n/**\n * es (Spanish)\n */\nexport const es = function(number, index) {\n  return [\n    ['justo ahora', 'en un rato'],\n    ['hace %s segundos', 'en %s segundos'],\n    ['hace 1 minuto', 'en 1 minuto'],\n    ['hace %s minutos', 'en %s minutos'],\n    ['hace 1 hora', 'en 1 hora'],\n    ['hace %s horas', 'en %s horas'],\n    ['hace 1 día', 'en 1 día'],\n    ['hace %s días', 'en %s días'],\n    ['hace 1 semana', 'en 1 semana'],\n    ['hace %s semanas', 'en %s semanas'],\n    ['hace 1 mes', 'en 1 mes'],\n    ['hace %s meses', 'en %s meses'],\n    ['hace 1 año', 'en 1 año'],\n    ['hace %s años', 'en %s años'],\n  ][index];\n};\n\n/**\n * eu (Basque)\n */\nexport const eu = function(number, index) {\n  return [\n    ['orain', 'denbora bat barru'],\n    ['duela %s segundu', '%s segundu barru'],\n    ['duela minutu 1', 'minutu 1 barru'],\n    ['duela %s minutu', '%s minutu barru'],\n    ['duela ordu 1', 'ordu 1 barru'],\n    ['duela %s ordu', '%s ordu barru'],\n    ['duela egun 1', 'egun 1 barru'],\n    ['duela %s egun', '%s egun barru'],\n    ['duela aste 1', 'aste 1 barru'],\n    ['duela %s aste', '%s aste barru'],\n    ['duela hillabete 1', 'hillabete 1 barru'],\n    ['duela %s hillabete', '%s hillabete barru'],\n    ['duela urte 1', 'urte 1 barru'],\n    ['duela %s urte', '%s urte barru'],\n  ][index];\n};\n\n/**\n * fi (Finnish)\n */\nexport const fi = function(number, index) {\n  return [\n    ['juuri äsken', 'juuri nyt'],\n    ['%s sekuntia sitten', '%s sekunnin päästä'],\n    ['minuutti sitten', 'minuutin päästä'],\n    ['%s minuuttia sitten', '%s minuutin päästä'],\n    ['tunti sitten', 'tunnin päästä'],\n    ['%s tuntia sitten', '%s tunnin päästä'],\n    ['päivä sitten', 'päivän päästä'],\n    ['%s päivää sitten', '%s päivän päästä'],\n    ['viikko sitten', 'viikon päästä'],\n    ['%s viikkoa sitten', '%s viikon päästä'],\n    ['kuukausi sitten', 'kuukauden päästä'],\n    ['%s kuukautta sitten', '%s kuukauden päästä'],\n    ['vuosi sitten', 'vuoden päästä'],\n    ['%s vuotta sitten', '%s vuoden päästä'],\n  ][index];\n};\n\n/**\n * fr (French)\n */\nexport const fr = function(number, index) {\n  return [\n    ['à l\\'instant', 'dans un instant'],\n    ['il y a %s secondes', 'dans %s secondes'],\n    ['il y a 1 minute', 'dans 1 minute'],\n    ['il y a %s minutes', 'dans %s minutes'],\n    ['il y a 1 heure', 'dans 1 heure'],\n    ['il y a %s heures', 'dans %s heures'],\n    ['il y a 1 jour', 'dans 1 jour'],\n    ['il y a %s jours', 'dans %s jours'],\n    ['il y a 1 semaine', 'dans 1 semaine'],\n    ['il y a %s semaines', 'dans %s semaines'],\n    ['il y a 1 mois', 'dans 1 mois'],\n    ['il y a %s mois', 'dans %s mois'],\n    ['il y a 1 an', 'dans 1 an'],\n    ['il y a %s ans', 'dans %s ans'],\n  ][index];\n};\n\n/**\n * he (Hebrew)\n */\nexport const he = function(number, index) {\n  return [\n    ['זה עתה', 'עכשיו'],\n    ['לפני %s שניות', 'בעוד %s שניות'],\n    ['לפני דקה', 'בעוד דקה'],\n    ['לפני %s דקות', 'בעוד %s דקות'],\n    ['לפני שעה', 'בעוד שעה'],\n    ['לפני %s שעות', 'בעוד %s שעות'],\n    ['אתמול', 'מחר'],\n    ['לפני %s ימים', 'בעוד %s ימים'],\n    ['לפני שבוע', 'בעוד שבוע'],\n    ['לפני %s שבועות', 'בעוד %s שבועות'],\n    ['לפני חודש', 'בעוד חודש'],\n    ['לפני %s חודשים', 'בעוד %s חודשים'],\n    ['לפני שנה', 'בעוד שנה'],\n    ['לפני %s שנים', 'בעוד %s שנים'],\n  ][index];\n};\n\n/**\n * hu (Hungarian)\n */\nexport const hu = function(number, index) {\n  return [\n    ['éppen most', 'éppen most'],\n    ['%s másodperce', '%s másodpercen belül'],\n    ['1 perce', '1 percen belül'],\n    ['%s perce', '%s percen belül'],\n    ['1 órája', '1 órán belül'],\n    ['%s órája', '%s órán belül'],\n    ['1 napja', '1 napon belül'],\n    ['%s napja', '%s napon belül'],\n    ['1 hete', '1 héten belül'],\n    ['%s hete', '%s héten belül'],\n    ['1 hónapja', '1 hónapon belül'],\n    ['%s hónapja', '%s hónapon belül'],\n    ['1 éve', '1 éven belül'],\n    ['%s éve', '%s éven belül'],\n  ][index];\n};\n\n/**\n * inBG (Bangla)\n */\nexport const inBG = function(number, index) {\n  return [\n    ['এইমাত্র', 'একটা সময়'],\n    ['%s সেকেন্ড আগে', '%s এর সেকেন্ডের মধ্যে'],\n    ['1 মিনিট আগে', '1 মিনিটে'],\n    ['%s এর মিনিট আগে', '%s এর মিনিটের মধ্যে'],\n    ['1 ঘন্টা আগে', '1 ঘন্টা'],\n    ['%s ঘণ্টা আগে', '%s এর ঘন্টার মধ্যে'],\n    ['1 দিন আগে', '1 দিনের মধ্যে'],\n    ['%s এর দিন আগে', '%s এর দিন'],\n    ['1 সপ্তাহ আগে', '1 সপ্তাহের মধ্যে'],\n    ['%s এর সপ্তাহ আগে', '%s সপ্তাহের মধ্যে'],\n    ['1 মাস আগে', '1 মাসে'],\n    ['%s মাস আগে', '%s মাসে'],\n    ['1 বছর আগে', '1 বছরের মধ্যে'],\n    ['%s বছর আগে', '%s বছরে'],\n  ][index];\n};\n\n/**\n * inHI (Hindi)\n */\nexport const inHI = function(number, index) {\n  return [\n    ['अभी', 'कुछ समय'],\n    ['%s सेकंड पहले', '%s सेकंड में'],\n    ['1 मिनट पहले', '1 मिनट में'],\n    ['%s मिनट पहले', '%s मिनट में'] ,\n    ['1 घंटे पहले', '1 घंटे में'] ,\n    ['%s घंटे पहले', '%s घंटे में'] ,\n    ['1 दिन पहले', '1 दिन में'] ,\n    ['%s दिन पहले', '%s दिनों में'] ,\n    ['1 सप्ताह पहले', '1 सप्ताह में'] ,\n    ['%s हफ्ते पहले', '%s हफ्तों में'] ,\n    ['1 महीने पहले', '1 महीने में'] ,\n    ['%s महीने पहले', '%s महीनों में'] ,\n    ['1 साल पहले', '1 साल में'] ,\n    ['%s साल पहले','%s साल में'],\n  ][index];\n};\n\n/**\n * inID (Malay)\n */\nexport const inID = function(number, index) {\n  return [\n    ['baru saja', 'sebentar'],\n    ['%s detik yang lalu', 'dalam %s detik'],\n    ['1 menit yang lalu', 'dalam 1 menit'],\n    ['%s menit yang lalu', 'dalam %s menit'],\n    ['1 jam yang lalu', 'dalam 1 jam'],\n    ['%s jam yang lalu', 'dalam %s jam'],\n    ['1 hari yang lalu', 'dalam 1 hari'],\n    ['%s hari yang lalu', 'dalam %s hari'],\n    ['1 minggu yang lalu', 'dalam 1 minggu'],\n    ['%s minggu yang lalu', 'dalam %s minggu'],\n    ['1 bulan yang lalu', 'dalam 1 bulan'],\n    ['%s bulan yang lalu', 'dalam %s bulan'],\n    ['1 tahun yang lalu', 'dalam 1 tahun'],\n    ['%s tahun yang lalu', 'dalam %s tahun'],\n  ][index];\n};\n\n/**\n * it (Italian)\n */\nexport const it = function(number, index) {\n  return [\n    ['poco fa', 'tra poco'],\n    ['%s secondi fa', '%s secondi da ora'],\n    ['un minuto fa', 'un minuto da ora'],\n    ['%s minuti fa', '%s minuti da ora'],\n    ['un\\'ora fa', 'un\\'ora da ora'],\n    ['%s ore fa', '%s ore da ora'],\n    ['un giorno fa', 'un giorno da ora'],\n    ['%s giorni fa', '%s giorni da ora'],\n    ['una settimana fa', 'una settimana da ora'],\n    ['%s settimane fa', '%s settimane da ora'],\n    ['un mese fa', 'un mese da ora'],\n    ['%s mesi fa', '%s mesi da ora'],\n    ['un anno fa', 'un anno da ora'],\n    ['%s anni fa', '%s anni da ora'],\n  ][index];\n};\n\n/**\n * ja (Japanese)\n */\nexport const ja = function(number, index) {\n  return [\n    ['すこし前', 'すぐに'],\n    ['%s秒前', '%s秒以内'],\n    ['1分前', '1分以内'],\n    ['%s分前', '%s分以内'],\n    ['1時間前', '1時間以内'],\n    ['%s時間前', '%s時間以内'],\n    ['1日前', '1日以内'],\n    ['%s日前', '%s日以内'],\n    ['1週間前', '1週間以内'],\n    ['%s週間前', '%s週間以内'],\n    ['1ヶ月前', '1ヶ月以内'],\n    ['%sヶ月前', '%sヶ月以内'],\n    ['1年前', '1年以内'],\n    ['%s年前', '%s年以内'],\n  ][index];\n};\n\n/**\n * ko (Korean)\n */\nexport const ko = function(number, index) {\n  return [\n    ['방금', '곧'],\n    ['%s초 전', '%s초 후'],\n    ['1분 전', '1분 후'],\n    ['%s분 전', '%s분 후'],\n    ['1시간 전', '1시간 후'],\n    ['%s시간 전', '%s시간 후'],\n    ['1일 전', '1일 후'],\n    ['%s일 전', '%s일 후'],\n    ['1주일 전', '1주일 후'],\n    ['%s주일 전', '%s주일 후'],\n    ['1개월 전', '1개월 후'],\n    ['%s개월 전', '%s개월 후'],\n    ['1년 전', '1년 후'],\n    ['%s년 전', '%s년 후'],\n  ][index];\n};\n\n/**\n * ml (Malayalam)\n */\nexport const ml = function(number, index) {\n  return [\n    ['ഇപ്പോള്‍', 'കുറച്ചു മുന്‍പ്'],\n    ['%s സെക്കന്റ്‌കള്‍ക്ക് മുന്‍പ്', '%s സെക്കന്റില്‍'],\n    ['1 മിനിറ്റിനു മുന്‍പ്', '1 മിനിറ്റില്‍'],\n    ['%s മിനിറ്റുകള്‍ക്ക് മുന്‍പ', '%s മിനിറ്റില്‍'],\n    ['1 മണിക്കൂറിനു മുന്‍പ്', '1 മണിക്കൂറില്‍'],\n    ['%s മണിക്കൂറുകള്‍ക്കു മുന്‍പ്', '%s മണിക്കൂറില്‍'],\n    ['1 ഒരു ദിവസം മുന്‍പ്', '1 ദിവസത്തില്‍'],\n    ['%s ദിവസങ്ങള്‍ക് മുന്‍പ്', '%s ദിവസങ്ങള്‍ക്കുള്ളില്‍'],\n    ['1 ആഴ്ച മുന്‍പ്', '1 ആഴ്ചയില്‍'],\n    ['%s ആഴ്ചകള്‍ക്ക് മുന്‍പ്', '%s ആഴ്ചകള്‍ക്കുള്ളില്‍'],\n    ['1 മാസത്തിനു മുന്‍പ്', '1 മാസത്തിനുള്ളില്‍'],\n    ['%s മാസങ്ങള്‍ക്ക് മുന്‍പ്', '%s മാസങ്ങള്‍ക്കുള്ളില്‍'],\n    ['1 വര്‍ഷത്തിനു  മുന്‍പ്', '1 വര്‍ഷത്തിനുള്ളില്‍'],\n    ['%s വര്‍ഷങ്ങള്‍ക്കു മുന്‍പ്', '%s വര്‍ഷങ്ങള്‍ക്കുല്ല്ളില്‍'],\n  ][index];\n};\n\n/**\n * nbNO (Norwegian Bokmål)\n */\nexport const nbNO = function(number, index) {\n  return [\n    ['akkurat nå', 'om litt'],\n    ['%s sekunder siden', 'om %s sekunder'],\n    ['1 minutt siden', 'om 1 minutt'],\n    ['%s minutter siden', 'om %s minutter'],\n    ['1 time siden', 'om 1 time'],\n    ['%s timer siden', 'om %s timer'],\n    ['1 dag siden', 'om 1 dag'],\n    ['%s dager siden', 'om %s dager'],\n    ['1 uke siden', 'om 1 uke'],\n    ['%s uker siden', 'om %s uker'],\n    ['1 måned siden', 'om 1 måned'],\n    ['%s måneder siden', 'om %s måneder'],\n    ['1 år siden', 'om 1 år'],\n    ['%s år siden', 'om %s år'],\n  ][index];\n};\n\n/**\n * nl (Dutch)\n */\nexport const nl = function(number, index) {\n  return [\n    ['recent', 'binnenkort'],\n    ['%s seconden geleden', 'binnen %s seconden'],\n    ['1 minuut geleden', 'binnen 1 minuut'],\n    ['%s minuten geleden', 'binnen %s minuten'],\n    ['1 uur geleden', 'binnen 1 uur'],\n    ['%s uren geleden', 'binnen %s uren'],\n    ['1 dag geleden', 'binnen 1 dag'],\n    ['%s dagen geleden', 'binnen %s dagen'],\n    ['1 week geleden', 'binnen 1 week'],\n    ['%s weken geleden', 'binnen %s weken'],\n    ['1 maand geleden', 'binnen 1 maand'],\n    ['%s maanden geleden', 'binnen %s maanden'],\n    ['1 jaar geleden', 'binnen 1 jaar'],\n    ['%s jaren geleden', 'binnen %s jaren'],\n  ][index];\n};\n\n/**\n * nnNO (Norwegian Nynorsk)\n */\nexport const nnNO = function(number, index) {\n  return [\n    ['nett no', 'om litt'],\n    ['%s sekund sidan', 'om %s sekund'],\n    ['1 minutt sidan', 'om 1 minutt'],\n    ['%s minutt sidan', 'om %s minutt'],\n    ['1 time sidan', 'om 1 time'],\n    ['%s timar sidan', 'om %s timar'],\n    ['1 dag sidan', 'om 1 dag'],\n    ['%s dagar sidan', 'om %s dagar'],\n    ['1 veke sidan', 'om 1 veke'],\n    ['%s veker sidan', 'om %s veker'],\n    ['1 månad sidan', 'om 1 månad'],\n    ['%s månadar sidan', 'om %s månadar'],\n    ['1 år sidan', 'om 1 år'],\n    ['%s år sidan', 'om %s år'],\n  ][index];\n};\n\n/**\n * pl (Polish)\n */\nexport const pl = function(number, index) {\n  const l = [\n    ['w tej chwili', 'za chwilę'],\n    ['%s sekund temu', 'za %s sekund'],\n    ['1 minutę temu', 'za 1 minutę'],\n    ['%s minut temu', 'za %s minut'],\n    ['1 godzinę temu', 'za 1 godzinę'],\n    ['%s godzin temu', 'za %s godzin'],\n    ['1 dzień temu', 'za 1 dzień'], // ['wczoraj', 'jutro'],\n    ['%s dni temu', 'za %s dni'],\n    ['1 tydzień temu', 'za 1 tydzień'],\n    ['%s tygodni temu', 'za %s tygodni'],\n    ['1 miesiąc temu', 'za 1 miesiąc'],\n    ['%s miesięcy temu', 'za %s miesięcy'],\n    ['1 rok temu', 'za 1 rok'],\n    ['%s lat temu', 'za %s lat'],\n    ['%s sekundy temu', 'za %s sekundy'],\n    ['%s minuty temu', 'za %s minuty'],\n    ['%s godziny temu', 'za %s godziny'],\n    ['%s dni temu', 'za %s dni'],\n    ['%s tygodnie temu', 'za %s tygodnie'],\n    ['%s miesiące temu', 'za %s miesiące'],\n    ['%s lata temu', 'za %s lata'],\n  ];\n  // to determine which plural form must be used check the last 2 digits\n  // and calculate new index value to get the nominative form (14-20)\n  // for all other cases use index value as it is (0-13)\n  return l[index & 1 ? (number % 10 > 4 || number % 10 < 2 || 1 ===\n    ~~(number / 10) % 10 ? index : ++index / 2 + 13) : index];\n};\n\n/**\n * ptBR (Portuguese)\n */\nexport const ptBR = function(number, index) {\n  return [\n    ['agora mesmo', 'daqui um pouco'],\n    ['há %s segundos', 'em %s segundos'],\n    ['há um minuto', 'em um minuto'],\n    ['há %s minutos', 'em %s minutos'],\n    ['há uma hora', 'em uma hora'],\n    ['há %s horas', 'em %s horas'],\n    ['há um dia', 'em um dia'],\n    ['há %s dias', 'em %s dias'],\n    ['há uma semana', 'em uma semana'],\n    ['há %s semanas', 'em %s semanas'],\n    ['há um mês', 'em um mês'],\n    ['há %s meses', 'em %s meses'],\n    ['há um ano', 'em um ano'],\n    ['há %s anos', 'em %s anos'],\n  ][index];\n};\n\n/**\n * ro (Romanian)\n */\nexport const ro = function(number, index) {\n  const langTable = [\n    ['chiar acum', 'chiar acum'],\n    ['acum %s secunde', 'peste %s secunde'],\n    ['acum un minut', 'peste un minut'],\n    ['acum %s minute', 'peste %s minute'],\n    ['acum o oră', 'peste o oră'],\n    ['acum %s ore', 'peste %s ore'],\n    ['acum o zi', 'peste o zi'],\n    ['acum %s zile', 'peste %s zile'],\n    ['acum o săptămână', 'peste o săptămână'],\n    ['acum %s săptămâni', 'peste %s săptămâni'],\n    ['acum o lună', 'peste o lună'],\n    ['acum %s luni', 'peste %s luni'],\n    ['acum un an', 'peste un an'],\n    ['acum %s ani', 'peste %s ani'],\n  ];\n\n  if (number < 20) {\n    return langTable[index];\n  }\n\n  // A `de` preposition must be added between the number and the adverb\n  // if the number is greater than 20.\n  return [\n    langTable[index][0].replace('%s', '%s de'),\n    langTable[index][1].replace('%s', '%s de'),\n  ];\n};\n\n/**\n * ru (Russian)\n */\nexport const ru = function(number, index) {\n  const seconds =\n    formatNum.bind(null, 'секунду', '%s секунду', '%s секунды', '%s секунд');\n  const minutes =\n    formatNum.bind(null, 'минуту', '%s минуту', '%s минуты', '%s минут');\n  const hours =\n    formatNum.bind(null, 'час', '%s час', '%s часа', '%s часов');\n  const days =\n    formatNum.bind(null, 'день', '%s день', '%s дня', '%s дней');\n  const weeks =\n    formatNum.bind(null, 'неделю', '%s неделю', '%s недели', '%s недель');\n  const months =\n    formatNum.bind(null, 'месяц', '%s месяц', '%s месяца', '%s месяцев');\n  const years =\n    formatNum.bind(null, 'год', '%s год', '%s года', '%s лет');\n\n  switch (index) {\n    case 0: return ['только что', 'через несколько секунд'];\n    case 1: return [seconds(number) + ' назад', 'через ' + seconds(number)];\n    case 2: // ['минуту назад', 'через минуту'];\n    case 3: return [minutes(number) + ' назад', 'через ' + minutes(number)];\n    case 4: // ['час назад', 'через час'];\n    case 5: return [hours(number) + ' назад', 'через ' + hours(number)];\n    case 6: return ['вчера', 'завтра'];\n    case 7: return [days(number) + ' назад', 'через ' + days(number)];\n    case 8: // ['неделю назад', 'через неделю'];\n    case 9: return [weeks(number) + ' назад', 'через ' + weeks(number)];\n    case 10: // ['месяц назад', 'через месяц'];\n    case 11: return [months(number) + ' назад', 'через ' + months(number)];\n    case 12: // ['год назад', 'через год'];\n    case 13: return [years(number) + ' назад', 'через ' + years(number)];\n    default: return ['', ''];\n  }\n\n  /**\n   *\n   * @param f1 - 1\n   * @param f - 21, 31, ...\n   * @param s - 2-4, 22-24, 32-34 ...\n   * @param t - 5-20, 25-30, ...\n   * @param n\n   * @return {string}\n   */\n  function formatNum(f1, f, s, t, n) {\n    const n10 = n % 10;\n    let str = t;\n\n    if (n === 1) {\n      str = f1;\n    } else if (n10 === 1 && n > 20) {\n      str = f;\n    } else if (n10 > 1 && n10 < 5 && (n > 20 || n < 10)) {\n      str = s;\n    }\n    return str;\n  }\n};\n\n/**\n * sv (Swedish)\n */\nexport const sv = function(number, index) {\n  return [\n    ['just nu', 'om en stund'],\n    ['%s sekunder sedan', 'om %s seconder'],\n    ['1 minut sedan', 'om 1 minut'],\n    ['%s minuter sedan', 'om %s minuter'],\n    ['1 timme sedan', 'om 1 timme'],\n    ['%s timmar sedan', 'om %s timmar'],\n    ['1 dag sedan', 'om 1 dag'],\n    ['%s dagar sedan', 'om %s dagar'],\n    ['1 vecka sedan', 'om 1 vecka'],\n    ['%s veckor sedan', 'om %s veckor'],\n    ['1 månad sedan', 'om 1 månad'],\n    ['%s månader sedan', 'om %s månader'],\n    ['1 år sedan', 'om 1 år'],\n    ['%s år sedan', 'om %s år'],\n  ][index];\n};\n\n/**\n * ta (Tamil)\n */\nexport const ta = function(number, index) {\n  return [\n    ['இப்போது', 'சற்று நேரம் முன்பு'],\n    ['%s நொடிக்கு முன்', '%s நொடிகளில்'],\n    ['1 நிமிடத்திற்க்கு முன்', '1 நிமிடத்தில்'],\n    ['%s நிமிடத்திற்க்கு முன்', '%s நிமிடங்களில்'],\n    ['1 மணி நேரத்திற்கு முன்', '1 மணி நேரத்திற்குள்'],\n    ['%s மணி நேரத்திற்கு முன்', '%s மணி நேரத்திற்குள்'],\n    ['1 நாளுக்கு முன்', '1 நாளில்'],\n    ['%s நாட்களுக்கு முன்', '%s நாட்களில்'],\n    ['1 வாரத்திற்கு முன்', '1 வாரத்தில்'],\n    ['%s வாரங்களுக்கு முன்', '%s வாரங்களில்'],\n    ['1 மாதத்திற்கு முன்', '1 மாதத்தில்'],\n    ['%s மாதங்களுக்கு முன்', '%s மாதங்களில்'],\n    ['1 வருடத்திற்கு முன்', '1 வருடத்தில்'],\n    ['%s வருடங்களுக்கு முன்', '%s வருடங்களில்'],\n  ][index];\n};\n\n/**\n * th (Thai)\n */\nexport const th = function(number, index) {\n  return [\n    ['เมื่อสักครู่นี้', 'อีกสักครู่'],\n    ['%s วินาทีที่แล้ว', 'ใน %s วินาที'],\n    ['1 นาทีที่แล้ว', 'ใน 1 นาที'],\n    ['%s นาทีที่แล้ว', 'ใน %s นาที'],\n    ['1 ชั่วโมงที่แล้ว', 'ใน 1 ชั่วโมง'],\n    ['%s ชั่วโมงที่แล้ว', 'ใน %s ชั่วโมง'],\n    ['1 วันที่แล้ว', 'ใน 1 วัน'],\n    ['%s วันที่แล้ว', 'ใน %s วัน'],\n    ['1 อาทิตย์ที่แล้ว', 'ใน 1 อาทิตย์'],\n    ['%s อาทิตย์ที่แล้ว', 'ใน %s อาทิตย์'],\n    ['1 เดือนที่แล้ว', 'ใน 1 เดือน'],\n    ['%s เดือนที่แล้ว', 'ใน %s เดือน'],\n    ['1 ปีที่แล้ว', 'ใน 1 ปี'],\n    ['%s ปีที่แล้ว', 'ใน %s ปี'],\n  ][index];\n};\n\n/**\n * tr (Turkish)\n */\nexport const tr = function(number, index) {\n  return [\n    ['az önce', 'şimdi'],\n    ['%s saniye önce', '%s saniye içinde'],\n    ['1 dakika önce', '1 dakika içinde'],\n    ['%s dakika önce', '%s dakika içinde'],\n    ['1 saat önce', '1 saat içinde'],\n    ['%s saat önce', '%s saat içinde'],\n    ['1 gün önce', '1 gün içinde'],\n    ['%s gün önce', '%s gün içinde'],\n    ['1 hafta önce', '1 hafta içinde'],\n    ['%s hafta önce', '%s hafta içinde'],\n    ['1 ay önce', '1 ay içinde'],\n    ['%s ay önce', '%s ay içinde'],\n    ['1 yıl önce', '1 yıl içinde'],\n    ['%s yıl önce', '%s yıl içinde'],\n  ][index];\n};\n\n/**\n * uk (Ukrainian)\n */\nexport const uk = function(number, index) {\n  const seconds =\n    formatNum.bind(null, 'секунду', '%s секунду', '%s секунди', '%s секунд');\n  const minutes =\n    formatNum.bind(null, 'хвилину', '%s хвилину', '%s хвилини', '%s хвилин');\n  const hours =\n    formatNum.bind(null, 'годину', '%s годину', '%s години', '%s годин');\n  const days =\n    formatNum.bind(null, 'день', '%s день', '%s дні', '%s днів');\n  const weeks =\n    formatNum.bind(null, 'тиждень', '%s тиждень', '%s тиждні', '%s тижднів');\n  const months =\n    formatNum.bind(null, 'місяць', '%s місяць', '%s місяці', '%s місяців');\n  const years =\n    formatNum.bind(null, 'рік', '%s рік', '%s роки', '%s років');\n\n  switch (index) {\n    case 0: return ['щойно', 'через декілька секунд'];\n    case 1: return [seconds(number) + ' тому', 'через ' + seconds(number)];\n    case 2:\n    case 3: return [minutes(number) + ' тому', 'через ' + minutes(number)];\n    case 4:\n    case 5: return [hours(number) + ' тому', 'через ' + hours(number)];\n    case 6:\n    case 7: return [days(number) + ' тому', 'через ' + days(number)];\n    case 8:\n    case 9: return [weeks(number) + ' тому', 'через ' + weeks(number)];\n    case 10:\n    case 11: return [months(number) + ' тому', 'через ' + months(number)];\n    case 12:\n    case 13: return [years(number) + ' тому', 'через ' + years(number)];\n    default: return ['', ''];\n  }\n\n  function formatNum(f1, f, s, t, n) {\n    const n10 = n % 10;\n    let str = t;\n\n    if (n === 1) {\n      str = f1;\n    } else if (n10 === 1 && n > 20) {\n      str = f;\n    } else if (n10 > 1 && n10 < 5 && (n > 20 || n < 10)) {\n      str = s;\n    }\n    return str;\n  }\n};\n\n/**\n * vi (Vietnamese)\n */\nexport const vi = function(number, index) {\n  return [\n    ['vừa xong', 'một lúc'],\n    ['%s giây trước', 'trong %s giây'],\n    ['1 phút trước', 'trong 1 phút'],\n    ['%s phút trước', 'trong %s phút'],\n    ['1 giờ trước', 'trong 1 giờ'],\n    ['%s giờ trước', 'trong %s giờ'],\n    ['1 ngày trước', 'trong 1 ngày'],\n    ['%s ngày trước', 'trong %s ngày'],\n    ['1 tuần trước', 'trong 1 tuần'],\n    ['%s tuần trước', 'trong %s tuần'],\n    ['1 tháng trước', 'trong 1 tháng'],\n    ['%s tháng trước', 'trong %s tháng'],\n    ['1 năm trước', 'trong 1 năm'],\n    ['%s năm trước', 'trong %s năm'],\n  ][index];\n};\n\n/**\n * zhCN (Chinese)\n */\nexport const zhCN = function(number, index) {\n  return [\n    ['刚刚', '片刻后'],\n    ['%s秒前', '%s秒后'],\n    ['1分钟前', '1分钟后'],\n    ['%s分钟前', '%s分钟后'],\n    ['1小时前', '1小时后'],\n    ['%s小时前', '%s小时后'],\n    ['1天前', '1天后'],\n    ['%s天前', '%s天后'],\n    ['1周前', '1周后'],\n    ['%s周前', '%s周后'],\n    ['1月前', '1月后'],\n    ['%s月前', '%s月后'],\n    ['1年前', '1年后'],\n    ['%s年前', '%s年后'],\n  ][index];\n};\n\n/**\n * zhTW (Taiwanese)\n */\nexport const zhTW = function(number, index) {\n  return [\n    ['剛剛', '片刻後'],\n    ['%s秒前', '%s秒後'],\n    ['1分鐘前', '1分鐘後'],\n    ['%s分鐘前', '%s分鐘後'],\n    ['1小時前', '1小時後'],\n    ['%s小時前', '%s小時後'],\n    ['1天前', '1天後'],\n    ['%s天前', '%s天後'],\n    ['1周前', '1周後'],\n    ['%s周前', '%s周後'],\n    ['1月前', '1月後'],\n    ['%s月前', '%s月後'],\n    ['1年前', '1年後'],\n    ['%s年前', '%s年後'],\n  ][index];\n};\n","/**\n * Copyright (c) 2016 hustcc\n * License: MIT\n * Version: v3.0.0\n * https://github.com/hustcc/timeago.js\n */\n\nconst locales = {};\n\nimport {ar} from './timeago-locales';\nimport {be} from './timeago-locales';\nimport {bg} from './timeago-locales';\nimport {ca} from './timeago-locales';\nimport {da} from './timeago-locales';\nimport {de} from './timeago-locales';\nimport {el} from './timeago-locales';\nimport {en} from './timeago-locales';\nimport {enShort} from './timeago-locales';\nimport {es} from './timeago-locales';\nimport {eu} from './timeago-locales';\nimport {fi} from './timeago-locales';\nimport {fr} from './timeago-locales';\nimport {he} from './timeago-locales';\nimport {hu} from './timeago-locales';\nimport {inBG} from './timeago-locales';\nimport {inHI} from './timeago-locales';\nimport {inID} from './timeago-locales';\nimport {it} from './timeago-locales';\nimport {ja} from './timeago-locales';\nimport {ko} from './timeago-locales';\nimport {ml} from './timeago-locales';\nimport {nbNO} from './timeago-locales';\nimport {nl} from './timeago-locales';\nimport {nnNO} from './timeago-locales';\nimport {pl} from './timeago-locales';\nimport {ptBR} from './timeago-locales';\nimport {ro} from './timeago-locales';\nimport {ru} from './timeago-locales';\nimport {sv} from './timeago-locales';\nimport {ta} from './timeago-locales';\nimport {th} from './timeago-locales';\nimport {tr} from './timeago-locales';\nimport {uk} from './timeago-locales';\nimport {vi} from './timeago-locales';\nimport {zhCN} from './timeago-locales';\nimport {zhTW} from './timeago-locales';\n\n// second, minute, hour, day, week, month, year(365 days)\nconst SEC_ARRAY = [60, 60, 24, 7, 365 / 7 / 12, 12];\nconst SEC_ARRAY_LEN = 6;\n\n// format Date / string / timestamp to Date instance.\nfunction toDate(input) {\n  if (input instanceof Date) {\n    return input;\n  };\n  if (!isNaN(input)) {\n    return new Date(toInt(input));\n  }\n  if (/^\\d+$/.test(input)) {\n    return new Date(toInt(input));\n  }\n  input = (input || '').trim().replace(/\\.\\d+/, '') // remove milliseconds\n    .replace(/-/, '/').replace(/-/, '/')\n    .replace(/(\\d)T(\\d)/, '$1 $2').replace(/Z/, ' UTC') // 2017-2-5T3:57:52Z -> 2017-2-5 3:57:52UTC\n    .replace(/([\\+\\-]\\d\\d)\\:?(\\d\\d)/, ' $1$2'); // -04:00 -> -0400\n  return new Date(input);\n}\n\n// change f into int, remove decimal. Just for code compression\nfunction toInt(f) {\n  return parseInt(f, 10);\n}\n\n// format the diff second to *** time ago, with setting locale\nfunction formatDiff(diff, locale) {\n  // if locale is not exist, use defaultLocale.\n  // if defaultLocale is not exist, use build-in `en`.\n  // be sure of no error when locale is not exist.\n  locale = locales[locale] ? locale : 'en';\n  // if (! locales[locale]) locale = defaultLocale;\n  let i = 0;\n  const agoin = diff < 0 ? 1 : 0; // timein or timeago\n  const totalSec = diff = Math.abs(diff);\n\n  for (; diff >= SEC_ARRAY[i] && i < SEC_ARRAY_LEN; i++) {\n    diff /= SEC_ARRAY[i];\n  }\n  diff = toInt(diff);\n  i *= 2;\n\n  if (diff > (i === 0 ? 9 : 1)) {\n    i += 1;\n  }\n  return locales[locale](diff, i, totalSec)[agoin].replace('%s', diff);\n}\n\n// calculate the diff second between date to be formated an now date.\nfunction diffSec(date) {\n  const nowDate = new Date();\n  return (nowDate - toDate(date)) / 1000;\n}\n\n/**\n * timeago: the function to get `timeago` instance.\n * - nowDate: the relative date, default is new Date().\n * - defaultLocale: the default locale, default is en. if your set it, then the `locale` parameter of format is not needed of you.\n **/\nexport function timeago(date, locale) {\n  return formatDiff(diffSec(date), locale);\n}\n\n/**\n * register: register a new language locale\n * - locale: locale name, e.g. en / zh_CN, notice the standard.\n * - localeFunc: the locale process function\n **/\ntimeago.register = function(locale, localeFunc) {\n  locales[locale] = localeFunc;\n};\n\ntimeago.register('ar', ar);\ntimeago.register('be', be);\ntimeago.register('bg', bg);\ntimeago.register('ca', ca);\ntimeago.register('da', da);\ntimeago.register('de', de);\ntimeago.register('el', el);\ntimeago.register('en', en);\ntimeago.register('enShort', enShort);\ntimeago.register('es', es);\ntimeago.register('eu', eu);\ntimeago.register('fi', fi);\ntimeago.register('fr', fr);\ntimeago.register('he', he);\ntimeago.register('hu', hu);\ntimeago.register('inBG', inBG);\ntimeago.register('inHI', inHI);\ntimeago.register('inID', inID);\ntimeago.register('it', it);\ntimeago.register('ja', ja);\ntimeago.register('ko', ko);\ntimeago.register('ml', ml);\ntimeago.register('nbNO', nbNO);\ntimeago.register('nl', nl);\ntimeago.register('nnNO', nnNO);\ntimeago.register('pl', pl);\ntimeago.register('ptBR', ptBR);\ntimeago.register('ro', ro);\ntimeago.register('ru', ru);\ntimeago.register('sv', sv);\ntimeago.register('ta', ta);\ntimeago.register('th', th);\ntimeago.register('tr', tr);\ntimeago.register('uk', uk);\ntimeago.register('vi', vi);\ntimeago.register('zhCN', zhCN);\ntimeago.register('zhTW', zhTW);\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}